"use strict";
var TheliaBlocks = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __esm = (fn4, res) => function __init() {
    return fn4 && (res = (0, fn4[__getOwnPropNames(fn4)[0]])(fn4 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // external-global:react
  var require_react = __commonJS({
    "external-global:react"(exports, module) {
      module.exports = React;
    }
  });

  // external-global:react-dom
  var require_react_dom = __commonJS({
    "external-global:react-dom"(exports, module) {
      module.exports = ReactDOM;
    }
  });

  // ../../node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "../../node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment7 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense6 = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer2(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement4(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment7;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense6;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement4;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // ../../node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "../../node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // ../../node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "../../node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i3 = 0; i3 < 10; i3++) {
            test2["_" + String.fromCharCode(i3)] = i3;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n4) {
            return test2[n4];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s3 = 1; s3 < arguments.length; s3++) {
          from = Object(arguments[s3]);
          for (var key in from) {
            if (hasOwnProperty2.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i3 = 0; i3 < symbols.length; i3++) {
              if (propIsEnumerable.call(from, symbols[i3])) {
                to[symbols[i3]] = from[symbols[i3]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // ../../node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "../../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // ../../node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "../../node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // ../../node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "../../node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error2;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error2 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error2 = ex;
              }
              if (error2 && !(error2 instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
                loggedTypeFailures[error2.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error2.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // ../../node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "../../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is2(x3, y2) {
          if (x3 === y2) {
            return x3 !== 0 || 1 / x3 === 1 / y2;
          } else {
            return x3 !== x3 && y2 !== y2;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i3 = 0; i3 < propValue.length; i3++) {
              var error2 = typeChecker(propValue, i3, componentName, location, propFullName + "[" + i3 + "]", ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i3 = 0; i3 < expectedValues.length; i3++) {
              if (is2(propValue, expectedValues[i3])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error2 = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error2 instanceof Error) {
                  return error2;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker = arrayOfTypeCheckers[i3];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i3 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i4 = 0; i4 < arrayOfTypeCheckers.length; i4++) {
              var checker2 = arrayOfTypeCheckers[i4];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // ../../node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "../../node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // ../../node_modules/react-modal/lib/helpers/tabbable.js
  var require_tabbable = __commonJS({
    "../../node_modules/react-modal/lib/helpers/tabbable.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = findTabbableDescendants;
      var tabbableNode = /input|select|textarea|button|object|iframe/;
      function hidesContents(element) {
        var zeroSize = element.offsetWidth <= 0 && element.offsetHeight <= 0;
        if (zeroSize && !element.innerHTML)
          return true;
        try {
          var style2 = window.getComputedStyle(element);
          return zeroSize ? style2.getPropertyValue("overflow") !== "visible" || element.scrollWidth <= 0 && element.scrollHeight <= 0 : style2.getPropertyValue("display") == "none";
        } catch (exception) {
          console.warn("Failed to inspect element style");
          return false;
        }
      }
      function visible(element) {
        var parentElement = element;
        var rootNode = element.getRootNode && element.getRootNode();
        while (parentElement) {
          if (parentElement === document.body)
            break;
          if (rootNode && parentElement === rootNode)
            parentElement = rootNode.host.parentNode;
          if (hidesContents(parentElement))
            return false;
          parentElement = parentElement.parentNode;
        }
        return true;
      }
      function focusable(element, isTabIndexNotNaN) {
        var nodeName = element.nodeName.toLowerCase();
        var res = tabbableNode.test(nodeName) && !element.disabled || (nodeName === "a" ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);
        return res && visible(element);
      }
      function tabbable(element) {
        var tabIndex = element.getAttribute("tabindex");
        if (tabIndex === null)
          tabIndex = void 0;
        var isTabIndexNaN = isNaN(tabIndex);
        return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
      }
      function findTabbableDescendants(element) {
        var descendants = [].slice.call(element.querySelectorAll("*"), 0).reduce(function(finished, el) {
          return finished.concat(!el.shadowRoot ? [el] : findTabbableDescendants(el.shadowRoot));
        }, []);
        return descendants.filter(tabbable);
      }
      module.exports = exports["default"];
    }
  });

  // ../../node_modules/react-modal/lib/helpers/focusManager.js
  var require_focusManager = __commonJS({
    "../../node_modules/react-modal/lib/helpers/focusManager.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.resetState = resetState;
      exports.log = log2;
      exports.handleBlur = handleBlur;
      exports.handleFocus = handleFocus;
      exports.markForFocusLater = markForFocusLater;
      exports.returnFocus = returnFocus;
      exports.popWithoutFocus = popWithoutFocus;
      exports.setupScopedFocus = setupScopedFocus;
      exports.teardownScopedFocus = teardownScopedFocus;
      var _tabbable = require_tabbable();
      var _tabbable2 = _interopRequireDefault(_tabbable);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var focusLaterElements = [];
      var modalElement = null;
      var needToFocus = false;
      function resetState() {
        focusLaterElements = [];
      }
      function log2() {
        if (true) {
          console.log("focusManager ----------");
          focusLaterElements.forEach(function(f4) {
            var check = f4 || {};
            console.log(check.nodeName, check.className, check.id);
          });
          console.log("end focusManager ----------");
        }
      }
      function handleBlur() {
        needToFocus = true;
      }
      function handleFocus() {
        if (needToFocus) {
          needToFocus = false;
          if (!modalElement) {
            return;
          }
          setTimeout(function() {
            if (modalElement.contains(document.activeElement)) {
              return;
            }
            var el = (0, _tabbable2.default)(modalElement)[0] || modalElement;
            el.focus();
          }, 0);
        }
      }
      function markForFocusLater() {
        focusLaterElements.push(document.activeElement);
      }
      function returnFocus() {
        var preventScroll = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
        var toFocus = null;
        try {
          if (focusLaterElements.length !== 0) {
            toFocus = focusLaterElements.pop();
            toFocus.focus({ preventScroll });
          }
          return;
        } catch (e2) {
          console.warn(["You tried to return focus to", toFocus, "but it is not in the DOM anymore"].join(" "));
        }
      }
      function popWithoutFocus() {
        focusLaterElements.length > 0 && focusLaterElements.pop();
      }
      function setupScopedFocus(element) {
        modalElement = element;
        if (window.addEventListener) {
          window.addEventListener("blur", handleBlur, false);
          document.addEventListener("focus", handleFocus, true);
        } else {
          window.attachEvent("onBlur", handleBlur);
          document.attachEvent("onFocus", handleFocus);
        }
      }
      function teardownScopedFocus() {
        modalElement = null;
        if (window.addEventListener) {
          window.removeEventListener("blur", handleBlur);
          document.removeEventListener("focus", handleFocus);
        } else {
          window.detachEvent("onBlur", handleBlur);
          document.detachEvent("onFocus", handleFocus);
        }
      }
    }
  });

  // ../../node_modules/react-modal/lib/helpers/scopeTab.js
  var require_scopeTab = __commonJS({
    "../../node_modules/react-modal/lib/helpers/scopeTab.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = scopeTab;
      var _tabbable = require_tabbable();
      var _tabbable2 = _interopRequireDefault(_tabbable);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function getActiveElement() {
        var el = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
        return el.activeElement.shadowRoot ? getActiveElement(el.activeElement.shadowRoot) : el.activeElement;
      }
      function scopeTab(node, event) {
        var tabbable = (0, _tabbable2.default)(node);
        if (!tabbable.length) {
          event.preventDefault();
          return;
        }
        var target = void 0;
        var shiftKey = event.shiftKey;
        var head = tabbable[0];
        var tail = tabbable[tabbable.length - 1];
        var activeElement = getActiveElement();
        if (node === activeElement) {
          if (!shiftKey)
            return;
          target = tail;
        }
        if (tail === activeElement && !shiftKey) {
          target = head;
        }
        if (head === activeElement && shiftKey) {
          target = tail;
        }
        if (target) {
          event.preventDefault();
          target.focus();
          return;
        }
        var checkSafari = /(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent);
        var isSafariDesktop = checkSafari != null && checkSafari[1] != "Chrome" && /\biPod\b|\biPad\b/g.exec(navigator.userAgent) == null;
        if (!isSafariDesktop)
          return;
        var x3 = tabbable.indexOf(activeElement);
        if (x3 > -1) {
          x3 += shiftKey ? -1 : 1;
        }
        target = tabbable[x3];
        if (typeof target === "undefined") {
          event.preventDefault();
          target = shiftKey ? tail : head;
          target.focus();
          return;
        }
        event.preventDefault();
        target.focus();
      }
      module.exports = exports["default"];
    }
  });

  // ../../node_modules/warning/warning.js
  var require_warning = __commonJS({
    "../../node_modules/warning/warning.js"(exports, module) {
      "use strict";
      var __DEV__ = true;
      var warning4 = function() {
      };
      if (__DEV__) {
        printWarning = function printWarning2(format2, args) {
          var len = arguments.length;
          args = new Array(len > 1 ? len - 1 : 0);
          for (var key = 1; key < len; key++) {
            args[key - 1] = arguments[key];
          }
          var argIndex = 0;
          var message = "Warning: " + format2.replace(/%s/g, function() {
            return args[argIndex++];
          });
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
        warning4 = function(condition, format2, args) {
          var len = arguments.length;
          args = new Array(len > 2 ? len - 2 : 0);
          for (var key = 2; key < len; key++) {
            args[key - 2] = arguments[key];
          }
          if (format2 === void 0) {
            throw new Error(
              "`warning(condition, format, ...args)` requires a warning message argument"
            );
          }
          if (!condition) {
            printWarning.apply(null, [format2].concat(args));
          }
        };
      }
      var printWarning;
      module.exports = warning4;
    }
  });

  // ../../node_modules/exenv/index.js
  var require_exenv = __commonJS({
    "../../node_modules/exenv/index.js"(exports, module) {
      (function() {
        "use strict";
        var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
        var ExecutionEnvironment = {
          canUseDOM,
          canUseWorkers: typeof Worker !== "undefined",
          canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
          canUseViewport: canUseDOM && !!window.screen
        };
        if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define(function() {
            return ExecutionEnvironment;
          });
        } else if (typeof module !== "undefined" && module.exports) {
          module.exports = ExecutionEnvironment;
        } else {
          window.ExecutionEnvironment = ExecutionEnvironment;
        }
      })();
    }
  });

  // ../../node_modules/react-modal/lib/helpers/safeHTMLElement.js
  var require_safeHTMLElement = __commonJS({
    "../../node_modules/react-modal/lib/helpers/safeHTMLElement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.canUseDOM = exports.SafeNodeList = exports.SafeHTMLCollection = void 0;
      var _exenv = require_exenv();
      var _exenv2 = _interopRequireDefault(_exenv);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var EE = _exenv2.default;
      var SafeHTMLElement = EE.canUseDOM ? window.HTMLElement : {};
      var SafeHTMLCollection = exports.SafeHTMLCollection = EE.canUseDOM ? window.HTMLCollection : {};
      var SafeNodeList = exports.SafeNodeList = EE.canUseDOM ? window.NodeList : {};
      var canUseDOM = exports.canUseDOM = EE.canUseDOM;
      exports.default = SafeHTMLElement;
    }
  });

  // ../../node_modules/react-modal/lib/helpers/ariaAppHider.js
  var require_ariaAppHider = __commonJS({
    "../../node_modules/react-modal/lib/helpers/ariaAppHider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.resetState = resetState;
      exports.log = log2;
      exports.assertNodeList = assertNodeList;
      exports.setElement = setElement;
      exports.validateElement = validateElement;
      exports.hide = hide2;
      exports.show = show;
      exports.documentNotReadyOrSSRTesting = documentNotReadyOrSSRTesting;
      var _warning = require_warning();
      var _warning2 = _interopRequireDefault(_warning);
      var _safeHTMLElement = require_safeHTMLElement();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var globalElement = null;
      function resetState() {
        if (globalElement) {
          if (globalElement.removeAttribute) {
            globalElement.removeAttribute("aria-hidden");
          } else if (globalElement.length != null) {
            globalElement.forEach(function(element) {
              return element.removeAttribute("aria-hidden");
            });
          } else {
            document.querySelectorAll(globalElement).forEach(function(element) {
              return element.removeAttribute("aria-hidden");
            });
          }
        }
        globalElement = null;
      }
      function log2() {
        if (true) {
          var check = globalElement || {};
          console.log("ariaAppHider ----------");
          console.log(check.nodeName, check.className, check.id);
          console.log("end ariaAppHider ----------");
        }
      }
      function assertNodeList(nodeList, selector) {
        if (!nodeList || !nodeList.length) {
          throw new Error("react-modal: No elements were found for selector " + selector + ".");
        }
      }
      function setElement(element) {
        var useElement = element;
        if (typeof useElement === "string" && _safeHTMLElement.canUseDOM) {
          var el = document.querySelectorAll(useElement);
          assertNodeList(el, useElement);
          useElement = el;
        }
        globalElement = useElement || globalElement;
        return globalElement;
      }
      function validateElement(appElement) {
        var el = appElement || globalElement;
        if (el) {
          return Array.isArray(el) || el instanceof HTMLCollection || el instanceof NodeList ? el : [el];
        } else {
          (0, _warning2.default)(false, ["react-modal: App element is not defined.", "Please use `Modal.setAppElement(el)` or set `appElement={el}`.", "This is needed so screen readers don't see main content", "when modal is opened. It is not recommended, but you can opt-out", "by setting `ariaHideApp={false}`."].join(" "));
          return [];
        }
      }
      function hide2(appElement) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = validateElement(appElement)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var el = _step.value;
            el.setAttribute("aria-hidden", "true");
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      function show(appElement) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = void 0;
        try {
          for (var _iterator2 = validateElement(appElement)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var el = _step2.value;
            el.removeAttribute("aria-hidden");
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
      function documentNotReadyOrSSRTesting() {
        globalElement = null;
      }
    }
  });

  // ../../node_modules/react-modal/lib/helpers/classList.js
  var require_classList = __commonJS({
    "../../node_modules/react-modal/lib/helpers/classList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.resetState = resetState;
      exports.log = log2;
      var htmlClassList = {};
      var docBodyClassList = {};
      function removeClass(at, cls) {
        at.classList.remove(cls);
      }
      function resetState() {
        var htmlElement = document.getElementsByTagName("html")[0];
        for (var cls in htmlClassList) {
          removeClass(htmlElement, htmlClassList[cls]);
        }
        var body = document.body;
        for (var _cls in docBodyClassList) {
          removeClass(body, docBodyClassList[_cls]);
        }
        htmlClassList = {};
        docBodyClassList = {};
      }
      function log2() {
        if (true) {
          var classes = document.getElementsByTagName("html")[0].className;
          var buffer = "Show tracked classes:\n\n";
          buffer += "<html /> (" + classes + "):\n  ";
          for (var x3 in htmlClassList) {
            buffer += "  " + x3 + " " + htmlClassList[x3] + "\n  ";
          }
          classes = document.body.className;
          buffer += "\n\ndoc.body (" + classes + "):\n  ";
          for (var _x in docBodyClassList) {
            buffer += "  " + _x + " " + docBodyClassList[_x] + "\n  ";
          }
          buffer += "\n";
          console.log(buffer);
        }
      }
      var incrementReference = function incrementReference2(poll, className) {
        if (!poll[className]) {
          poll[className] = 0;
        }
        poll[className] += 1;
        return className;
      };
      var decrementReference = function decrementReference2(poll, className) {
        if (poll[className]) {
          poll[className] -= 1;
        }
        return className;
      };
      var trackClass = function trackClass2(classListRef, poll, classes) {
        classes.forEach(function(className) {
          incrementReference(poll, className);
          classListRef.add(className);
        });
      };
      var untrackClass = function untrackClass2(classListRef, poll, classes) {
        classes.forEach(function(className) {
          decrementReference(poll, className);
          poll[className] === 0 && classListRef.remove(className);
        });
      };
      var add3 = exports.add = function add4(element, classString) {
        return trackClass(element.classList, element.nodeName.toLowerCase() == "html" ? htmlClassList : docBodyClassList, classString.split(" "));
      };
      var remove = exports.remove = function remove2(element, classString) {
        return untrackClass(element.classList, element.nodeName.toLowerCase() == "html" ? htmlClassList : docBodyClassList, classString.split(" "));
      };
    }
  });

  // ../../node_modules/react-modal/lib/helpers/portalOpenInstances.js
  var require_portalOpenInstances = __commonJS({
    "../../node_modules/react-modal/lib/helpers/portalOpenInstances.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.log = log2;
      exports.resetState = resetState;
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var PortalOpenInstances = function PortalOpenInstances2() {
        var _this = this;
        _classCallCheck(this, PortalOpenInstances2);
        this.register = function(openInstance) {
          if (_this.openInstances.indexOf(openInstance) !== -1) {
            if (true) {
              console.warn("React-Modal: Cannot register modal instance that's already open");
            }
            return;
          }
          _this.openInstances.push(openInstance);
          _this.emit("register");
        };
        this.deregister = function(openInstance) {
          var index2 = _this.openInstances.indexOf(openInstance);
          if (index2 === -1) {
            if (true) {
              console.warn("React-Modal: Unable to deregister " + openInstance + " as it was never registered");
            }
            return;
          }
          _this.openInstances.splice(index2, 1);
          _this.emit("deregister");
        };
        this.subscribe = function(callback) {
          _this.subscribers.push(callback);
        };
        this.emit = function(eventType) {
          _this.subscribers.forEach(function(subscriber) {
            return subscriber(
              eventType,
              _this.openInstances.slice()
            );
          });
        };
        this.openInstances = [];
        this.subscribers = [];
      };
      var portalOpenInstances = new PortalOpenInstances();
      function log2() {
        console.log("portalOpenInstances ----------");
        console.log(portalOpenInstances.openInstances.length);
        portalOpenInstances.openInstances.forEach(function(p3) {
          return console.log(p3);
        });
        console.log("end portalOpenInstances ----------");
      }
      function resetState() {
        portalOpenInstances = new PortalOpenInstances();
      }
      exports.default = portalOpenInstances;
    }
  });

  // ../../node_modules/react-modal/lib/helpers/bodyTrap.js
  var require_bodyTrap = __commonJS({
    "../../node_modules/react-modal/lib/helpers/bodyTrap.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.resetState = resetState;
      exports.log = log2;
      var _portalOpenInstances = require_portalOpenInstances();
      var _portalOpenInstances2 = _interopRequireDefault(_portalOpenInstances);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var before = void 0;
      var after = void 0;
      var instances = [];
      function resetState() {
        var _arr = [before, after];
        for (var _i = 0; _i < _arr.length; _i++) {
          var item = _arr[_i];
          if (!item)
            continue;
          item.parentNode && item.parentNode.removeChild(item);
        }
        before = after = null;
        instances = [];
      }
      function log2() {
        console.log("bodyTrap ----------");
        console.log(instances.length);
        var _arr2 = [before, after];
        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
          var item = _arr2[_i2];
          var check = item || {};
          console.log(check.nodeName, check.className, check.id);
        }
        console.log("edn bodyTrap ----------");
      }
      function focusContent() {
        if (instances.length === 0) {
          if (true) {
            console.warn("React-Modal: Open instances > 0 expected");
          }
          return;
        }
        instances[instances.length - 1].focusContent();
      }
      function bodyTrap(eventType, openInstances) {
        if (!before && !after) {
          before = document.createElement("div");
          before.setAttribute("data-react-modal-body-trap", "");
          before.style.position = "absolute";
          before.style.opacity = "0";
          before.setAttribute("tabindex", "0");
          before.addEventListener("focus", focusContent);
          after = before.cloneNode();
          after.addEventListener("focus", focusContent);
        }
        instances = openInstances;
        if (instances.length > 0) {
          if (document.body.firstChild !== before) {
            document.body.insertBefore(before, document.body.firstChild);
          }
          if (document.body.lastChild !== after) {
            document.body.appendChild(after);
          }
        } else {
          if (before.parentElement) {
            before.parentElement.removeChild(before);
          }
          if (after.parentElement) {
            after.parentElement.removeChild(after);
          }
        }
      }
      _portalOpenInstances2.default.subscribe(bodyTrap);
    }
  });

  // ../../node_modules/react-modal/lib/components/ModalPortal.js
  var require_ModalPortal = __commonJS({
    "../../node_modules/react-modal/lib/components/ModalPortal.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _extends2 = Object.assign || function(target) {
        for (var i3 = 1; i3 < arguments.length; i3++) {
          var source = arguments[i3];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i3 = 0; i3 < props.length; i3++) {
            var descriptor = props[i3];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      var _react = require_react();
      var _propTypes = require_prop_types();
      var _propTypes2 = _interopRequireDefault(_propTypes);
      var _focusManager = require_focusManager();
      var focusManager2 = _interopRequireWildcard(_focusManager);
      var _scopeTab = require_scopeTab();
      var _scopeTab2 = _interopRequireDefault(_scopeTab);
      var _ariaAppHider = require_ariaAppHider();
      var ariaAppHider = _interopRequireWildcard(_ariaAppHider);
      var _classList = require_classList();
      var classList = _interopRequireWildcard(_classList);
      var _safeHTMLElement = require_safeHTMLElement();
      var _safeHTMLElement2 = _interopRequireDefault(_safeHTMLElement);
      var _portalOpenInstances = require_portalOpenInstances();
      var _portalOpenInstances2 = _interopRequireDefault(_portalOpenInstances);
      require_bodyTrap();
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var CLASS_NAMES = {
        overlay: "ReactModal__Overlay",
        content: "ReactModal__Content"
      };
      var TAB_KEY = 9;
      var ESC_KEY = 27;
      var ariaHiddenInstances = 0;
      var ModalPortal = function(_Component) {
        _inherits(ModalPortal2, _Component);
        function ModalPortal2(props) {
          _classCallCheck(this, ModalPortal2);
          var _this = _possibleConstructorReturn(this, (ModalPortal2.__proto__ || Object.getPrototypeOf(ModalPortal2)).call(this, props));
          _this.setOverlayRef = function(overlay) {
            _this.overlay = overlay;
            _this.props.overlayRef && _this.props.overlayRef(overlay);
          };
          _this.setContentRef = function(content) {
            _this.content = content;
            _this.props.contentRef && _this.props.contentRef(content);
          };
          _this.afterClose = function() {
            var _this$props = _this.props, appElement = _this$props.appElement, ariaHideApp = _this$props.ariaHideApp, htmlOpenClassName = _this$props.htmlOpenClassName, bodyOpenClassName = _this$props.bodyOpenClassName;
            bodyOpenClassName && classList.remove(document.body, bodyOpenClassName);
            htmlOpenClassName && classList.remove(document.getElementsByTagName("html")[0], htmlOpenClassName);
            if (ariaHideApp && ariaHiddenInstances > 0) {
              ariaHiddenInstances -= 1;
              if (ariaHiddenInstances === 0) {
                ariaAppHider.show(appElement);
              }
            }
            if (_this.props.shouldFocusAfterRender) {
              if (_this.props.shouldReturnFocusAfterClose) {
                focusManager2.returnFocus(_this.props.preventScroll);
                focusManager2.teardownScopedFocus();
              } else {
                focusManager2.popWithoutFocus();
              }
            }
            if (_this.props.onAfterClose) {
              _this.props.onAfterClose();
            }
            _portalOpenInstances2.default.deregister(_this);
          };
          _this.open = function() {
            _this.beforeOpen();
            if (_this.state.afterOpen && _this.state.beforeClose) {
              clearTimeout(_this.closeTimer);
              _this.setState({ beforeClose: false });
            } else {
              if (_this.props.shouldFocusAfterRender) {
                focusManager2.setupScopedFocus(_this.node);
                focusManager2.markForFocusLater();
              }
              _this.setState({ isOpen: true }, function() {
                _this.openAnimationFrame = requestAnimationFrame(function() {
                  _this.setState({ afterOpen: true });
                  if (_this.props.isOpen && _this.props.onAfterOpen) {
                    _this.props.onAfterOpen({
                      overlayEl: _this.overlay,
                      contentEl: _this.content
                    });
                  }
                });
              });
            }
          };
          _this.close = function() {
            if (_this.props.closeTimeoutMS > 0) {
              _this.closeWithTimeout();
            } else {
              _this.closeWithoutTimeout();
            }
          };
          _this.focusContent = function() {
            return _this.content && !_this.contentHasFocus() && _this.content.focus({ preventScroll: true });
          };
          _this.closeWithTimeout = function() {
            var closesAt = Date.now() + _this.props.closeTimeoutMS;
            _this.setState({ beforeClose: true, closesAt }, function() {
              _this.closeTimer = setTimeout(_this.closeWithoutTimeout, _this.state.closesAt - Date.now());
            });
          };
          _this.closeWithoutTimeout = function() {
            _this.setState({
              beforeClose: false,
              isOpen: false,
              afterOpen: false,
              closesAt: null
            }, _this.afterClose);
          };
          _this.handleKeyDown = function(event) {
            if (event.keyCode === TAB_KEY) {
              (0, _scopeTab2.default)(_this.content, event);
            }
            if (_this.props.shouldCloseOnEsc && event.keyCode === ESC_KEY) {
              event.stopPropagation();
              _this.requestClose(event);
            }
          };
          _this.handleOverlayOnClick = function(event) {
            if (_this.shouldClose === null) {
              _this.shouldClose = true;
            }
            if (_this.shouldClose && _this.props.shouldCloseOnOverlayClick) {
              if (_this.ownerHandlesClose()) {
                _this.requestClose(event);
              } else {
                _this.focusContent();
              }
            }
            _this.shouldClose = null;
          };
          _this.handleContentOnMouseUp = function() {
            _this.shouldClose = false;
          };
          _this.handleOverlayOnMouseDown = function(event) {
            if (!_this.props.shouldCloseOnOverlayClick && event.target == _this.overlay) {
              event.preventDefault();
            }
          };
          _this.handleContentOnClick = function() {
            _this.shouldClose = false;
          };
          _this.handleContentOnMouseDown = function() {
            _this.shouldClose = false;
          };
          _this.requestClose = function(event) {
            return _this.ownerHandlesClose() && _this.props.onRequestClose(event);
          };
          _this.ownerHandlesClose = function() {
            return _this.props.onRequestClose;
          };
          _this.shouldBeClosed = function() {
            return !_this.state.isOpen && !_this.state.beforeClose;
          };
          _this.contentHasFocus = function() {
            return document.activeElement === _this.content || _this.content.contains(document.activeElement);
          };
          _this.buildClassName = function(which, additional) {
            var classNames = (typeof additional === "undefined" ? "undefined" : _typeof(additional)) === "object" ? additional : {
              base: CLASS_NAMES[which],
              afterOpen: CLASS_NAMES[which] + "--after-open",
              beforeClose: CLASS_NAMES[which] + "--before-close"
            };
            var className = classNames.base;
            if (_this.state.afterOpen) {
              className = className + " " + classNames.afterOpen;
            }
            if (_this.state.beforeClose) {
              className = className + " " + classNames.beforeClose;
            }
            return typeof additional === "string" && additional ? className + " " + additional : className;
          };
          _this.attributesFromObject = function(prefix3, items) {
            return Object.keys(items).reduce(function(acc, name) {
              acc[prefix3 + "-" + name] = items[name];
              return acc;
            }, {});
          };
          _this.state = {
            afterOpen: false,
            beforeClose: false
          };
          _this.shouldClose = null;
          _this.moveFromContentToOverlay = null;
          return _this;
        }
        _createClass(ModalPortal2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            if (this.props.isOpen) {
              this.open();
            }
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, prevState) {
            if (true) {
              if (prevProps.bodyOpenClassName !== this.props.bodyOpenClassName) {
                console.warn('React-Modal: "bodyOpenClassName" prop has been modified. This may cause unexpected behavior when multiple modals are open.');
              }
              if (prevProps.htmlOpenClassName !== this.props.htmlOpenClassName) {
                console.warn('React-Modal: "htmlOpenClassName" prop has been modified. This may cause unexpected behavior when multiple modals are open.');
              }
            }
            if (this.props.isOpen && !prevProps.isOpen) {
              this.open();
            } else if (!this.props.isOpen && prevProps.isOpen) {
              this.close();
            }
            if (this.props.shouldFocusAfterRender && this.state.isOpen && !prevState.isOpen) {
              this.focusContent();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this.state.isOpen) {
              this.afterClose();
            }
            clearTimeout(this.closeTimer);
            cancelAnimationFrame(this.openAnimationFrame);
          }
        }, {
          key: "beforeOpen",
          value: function beforeOpen() {
            var _props = this.props, appElement = _props.appElement, ariaHideApp = _props.ariaHideApp, htmlOpenClassName = _props.htmlOpenClassName, bodyOpenClassName = _props.bodyOpenClassName;
            bodyOpenClassName && classList.add(document.body, bodyOpenClassName);
            htmlOpenClassName && classList.add(document.getElementsByTagName("html")[0], htmlOpenClassName);
            if (ariaHideApp) {
              ariaHiddenInstances += 1;
              ariaAppHider.hide(appElement);
            }
            _portalOpenInstances2.default.register(this);
          }
        }, {
          key: "render",
          value: function render2() {
            var _props2 = this.props, id = _props2.id, className = _props2.className, overlayClassName = _props2.overlayClassName, defaultStyles = _props2.defaultStyles, children = _props2.children;
            var contentStyles = className ? {} : defaultStyles.content;
            var overlayStyles = overlayClassName ? {} : defaultStyles.overlay;
            if (this.shouldBeClosed()) {
              return null;
            }
            var overlayProps = {
              ref: this.setOverlayRef,
              className: this.buildClassName("overlay", overlayClassName),
              style: _extends2({}, overlayStyles, this.props.style.overlay),
              onClick: this.handleOverlayOnClick,
              onMouseDown: this.handleOverlayOnMouseDown
            };
            var contentProps = _extends2({
              id,
              ref: this.setContentRef,
              style: _extends2({}, contentStyles, this.props.style.content),
              className: this.buildClassName("content", className),
              tabIndex: "-1",
              onKeyDown: this.handleKeyDown,
              onMouseDown: this.handleContentOnMouseDown,
              onMouseUp: this.handleContentOnMouseUp,
              onClick: this.handleContentOnClick,
              role: this.props.role,
              "aria-label": this.props.contentLabel
            }, this.attributesFromObject("aria", _extends2({ modal: true }, this.props.aria)), this.attributesFromObject("data", this.props.data || {}), {
              "data-testid": this.props.testId
            });
            var contentElement = this.props.contentElement(contentProps, children);
            return this.props.overlayElement(overlayProps, contentElement);
          }
        }]);
        return ModalPortal2;
      }(_react.Component);
      ModalPortal.defaultProps = {
        style: {
          overlay: {},
          content: {}
        },
        defaultStyles: {}
      };
      ModalPortal.propTypes = {
        isOpen: _propTypes2.default.bool.isRequired,
        defaultStyles: _propTypes2.default.shape({
          content: _propTypes2.default.object,
          overlay: _propTypes2.default.object
        }),
        style: _propTypes2.default.shape({
          content: _propTypes2.default.object,
          overlay: _propTypes2.default.object
        }),
        className: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
        overlayClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
        bodyOpenClassName: _propTypes2.default.string,
        htmlOpenClassName: _propTypes2.default.string,
        ariaHideApp: _propTypes2.default.bool,
        appElement: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(_safeHTMLElement2.default), _propTypes2.default.instanceOf(_safeHTMLElement.SafeHTMLCollection), _propTypes2.default.instanceOf(_safeHTMLElement.SafeNodeList), _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(_safeHTMLElement2.default))]),
        onAfterOpen: _propTypes2.default.func,
        onAfterClose: _propTypes2.default.func,
        onRequestClose: _propTypes2.default.func,
        closeTimeoutMS: _propTypes2.default.number,
        shouldFocusAfterRender: _propTypes2.default.bool,
        shouldCloseOnOverlayClick: _propTypes2.default.bool,
        shouldReturnFocusAfterClose: _propTypes2.default.bool,
        preventScroll: _propTypes2.default.bool,
        role: _propTypes2.default.string,
        contentLabel: _propTypes2.default.string,
        aria: _propTypes2.default.object,
        data: _propTypes2.default.object,
        children: _propTypes2.default.node,
        shouldCloseOnEsc: _propTypes2.default.bool,
        overlayRef: _propTypes2.default.func,
        contentRef: _propTypes2.default.func,
        id: _propTypes2.default.string,
        overlayElement: _propTypes2.default.func,
        contentElement: _propTypes2.default.func,
        testId: _propTypes2.default.string
      };
      exports.default = ModalPortal;
      module.exports = exports["default"];
    }
  });

  // ../../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
  var react_lifecycles_compat_es_exports = {};
  __export(react_lifecycles_compat_es_exports, {
    polyfill: () => polyfill
  });
  function componentWillMount() {
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== void 0) {
      this.setState(state);
    }
  }
  function componentWillReceiveProps(nextProps) {
    function updater(prevState) {
      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
      return state !== null && state !== void 0 ? state : null;
    }
    this.setState(updater.bind(this));
  }
  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshotFlag = true;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
        prevProps,
        prevState
      );
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  }
  function polyfill(Component2) {
    var prototype = Component2.prototype;
    if (!prototype || !prototype.isReactComponent) {
      throw new Error("Can only polyfill class components");
    }
    if (typeof Component2.getDerivedStateFromProps !== "function" && typeof prototype.getSnapshotBeforeUpdate !== "function") {
      return Component2;
    }
    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;
    if (typeof prototype.componentWillMount === "function") {
      foundWillMountName = "componentWillMount";
    } else if (typeof prototype.UNSAFE_componentWillMount === "function") {
      foundWillMountName = "UNSAFE_componentWillMount";
    }
    if (typeof prototype.componentWillReceiveProps === "function") {
      foundWillReceivePropsName = "componentWillReceiveProps";
    } else if (typeof prototype.UNSAFE_componentWillReceiveProps === "function") {
      foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
    }
    if (typeof prototype.componentWillUpdate === "function") {
      foundWillUpdateName = "componentWillUpdate";
    } else if (typeof prototype.UNSAFE_componentWillUpdate === "function") {
      foundWillUpdateName = "UNSAFE_componentWillUpdate";
    }
    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
      var componentName = Component2.displayName || Component2.name;
      var newApiName = typeof Component2.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
      throw Error(
        "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + componentName + " uses " + newApiName + " but also contains the following legacy lifecycles:" + (foundWillMountName !== null ? "\n  " + foundWillMountName : "") + (foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "") + (foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks"
      );
    }
    if (typeof Component2.getDerivedStateFromProps === "function") {
      prototype.componentWillMount = componentWillMount;
      prototype.componentWillReceiveProps = componentWillReceiveProps;
    }
    if (typeof prototype.getSnapshotBeforeUpdate === "function") {
      if (typeof prototype.componentDidUpdate !== "function") {
        throw new Error(
          "Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype"
        );
      }
      prototype.componentWillUpdate = componentWillUpdate;
      var componentDidUpdate = prototype.componentDidUpdate;
      prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
        var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
        componentDidUpdate.call(this, prevProps, prevState, snapshot);
      };
    }
    return Component2;
  }
  var init_react_lifecycles_compat_es = __esm({
    "../../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js"() {
      componentWillMount.__suppressDeprecationWarning = true;
      componentWillReceiveProps.__suppressDeprecationWarning = true;
      componentWillUpdate.__suppressDeprecationWarning = true;
    }
  });

  // ../../node_modules/react-modal/lib/components/Modal.js
  var require_Modal = __commonJS({
    "../../node_modules/react-modal/lib/components/Modal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.bodyOpenClassName = exports.portalClassName = void 0;
      var _extends2 = Object.assign || function(target) {
        for (var i3 = 1; i3 < arguments.length; i3++) {
          var source = arguments[i3];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i3 = 0; i3 < props.length; i3++) {
            var descriptor = props[i3];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      var _reactDom = require_react_dom();
      var _reactDom2 = _interopRequireDefault(_reactDom);
      var _propTypes = require_prop_types();
      var _propTypes2 = _interopRequireDefault(_propTypes);
      var _ModalPortal = require_ModalPortal();
      var _ModalPortal2 = _interopRequireDefault(_ModalPortal);
      var _ariaAppHider = require_ariaAppHider();
      var ariaAppHider = _interopRequireWildcard(_ariaAppHider);
      var _safeHTMLElement = require_safeHTMLElement();
      var _safeHTMLElement2 = _interopRequireDefault(_safeHTMLElement);
      var _reactLifecyclesCompat = (init_react_lifecycles_compat_es(), __toCommonJS(react_lifecycles_compat_es_exports));
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var portalClassName = exports.portalClassName = "ReactModalPortal";
      var bodyOpenClassName = exports.bodyOpenClassName = "ReactModal__Body--open";
      var isReact16 = _safeHTMLElement.canUseDOM && _reactDom2.default.createPortal !== void 0;
      var createHTMLElement = function createHTMLElement2(name) {
        return document.createElement(name);
      };
      var getCreatePortal = function getCreatePortal2() {
        return isReact16 ? _reactDom2.default.createPortal : _reactDom2.default.unstable_renderSubtreeIntoContainer;
      };
      function getParentElement(parentSelector) {
        return parentSelector();
      }
      var Modal4 = function(_Component) {
        _inherits(Modal5, _Component);
        function Modal5() {
          var _ref;
          var _temp, _this, _ret;
          _classCallCheck(this, Modal5);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Modal5.__proto__ || Object.getPrototypeOf(Modal5)).call.apply(_ref, [this].concat(args))), _this), _this.removePortal = function() {
            !isReact16 && _reactDom2.default.unmountComponentAtNode(_this.node);
            var parent = getParentElement(_this.props.parentSelector);
            if (parent && parent.contains(_this.node)) {
              parent.removeChild(_this.node);
            } else {
              console.warn('React-Modal: "parentSelector" prop did not returned any DOM element. Make sure that the parent element is unmounted to avoid any memory leaks.');
            }
          }, _this.portalRef = function(ref2) {
            _this.portal = ref2;
          }, _this.renderPortal = function(props) {
            var createPortal2 = getCreatePortal();
            var portal = createPortal2(_this, _react2.default.createElement(_ModalPortal2.default, _extends2({ defaultStyles: Modal5.defaultStyles }, props)), _this.node);
            _this.portalRef(portal);
          }, _temp), _possibleConstructorReturn(_this, _ret);
        }
        _createClass(Modal5, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            if (!_safeHTMLElement.canUseDOM)
              return;
            if (!isReact16) {
              this.node = createHTMLElement("div");
            }
            this.node.className = this.props.portalClassName;
            var parent = getParentElement(this.props.parentSelector);
            parent.appendChild(this.node);
            !isReact16 && this.renderPortal(this.props);
          }
        }, {
          key: "getSnapshotBeforeUpdate",
          value: function getSnapshotBeforeUpdate(prevProps) {
            var prevParent = getParentElement(prevProps.parentSelector);
            var nextParent = getParentElement(this.props.parentSelector);
            return { prevParent, nextParent };
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, _3, snapshot) {
            if (!_safeHTMLElement.canUseDOM)
              return;
            var _props = this.props, isOpen = _props.isOpen, portalClassName2 = _props.portalClassName;
            if (prevProps.portalClassName !== portalClassName2) {
              this.node.className = portalClassName2;
            }
            var prevParent = snapshot.prevParent, nextParent = snapshot.nextParent;
            if (nextParent !== prevParent) {
              prevParent.removeChild(this.node);
              nextParent.appendChild(this.node);
            }
            if (!prevProps.isOpen && !isOpen)
              return;
            !isReact16 && this.renderPortal(this.props);
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (!_safeHTMLElement.canUseDOM || !this.node || !this.portal)
              return;
            var state = this.portal.state;
            var now2 = Date.now();
            var closesAt = state.isOpen && this.props.closeTimeoutMS && (state.closesAt || now2 + this.props.closeTimeoutMS);
            if (closesAt) {
              if (!state.beforeClose) {
                this.portal.closeWithTimeout();
              }
              setTimeout(this.removePortal, closesAt - now2);
            } else {
              this.removePortal();
            }
          }
        }, {
          key: "render",
          value: function render2() {
            if (!_safeHTMLElement.canUseDOM || !isReact16) {
              return null;
            }
            if (!this.node && isReact16) {
              this.node = createHTMLElement("div");
            }
            var createPortal2 = getCreatePortal();
            return createPortal2(_react2.default.createElement(_ModalPortal2.default, _extends2({
              ref: this.portalRef,
              defaultStyles: Modal5.defaultStyles
            }, this.props)), this.node);
          }
        }], [{
          key: "setAppElement",
          value: function setAppElement(element) {
            ariaAppHider.setElement(element);
          }
        }]);
        return Modal5;
      }(_react.Component);
      Modal4.propTypes = {
        isOpen: _propTypes2.default.bool.isRequired,
        style: _propTypes2.default.shape({
          content: _propTypes2.default.object,
          overlay: _propTypes2.default.object
        }),
        portalClassName: _propTypes2.default.string,
        bodyOpenClassName: _propTypes2.default.string,
        htmlOpenClassName: _propTypes2.default.string,
        className: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
          base: _propTypes2.default.string.isRequired,
          afterOpen: _propTypes2.default.string.isRequired,
          beforeClose: _propTypes2.default.string.isRequired
        })]),
        overlayClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
          base: _propTypes2.default.string.isRequired,
          afterOpen: _propTypes2.default.string.isRequired,
          beforeClose: _propTypes2.default.string.isRequired
        })]),
        appElement: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(_safeHTMLElement2.default), _propTypes2.default.instanceOf(_safeHTMLElement.SafeHTMLCollection), _propTypes2.default.instanceOf(_safeHTMLElement.SafeNodeList), _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(_safeHTMLElement2.default))]),
        onAfterOpen: _propTypes2.default.func,
        onRequestClose: _propTypes2.default.func,
        closeTimeoutMS: _propTypes2.default.number,
        ariaHideApp: _propTypes2.default.bool,
        shouldFocusAfterRender: _propTypes2.default.bool,
        shouldCloseOnOverlayClick: _propTypes2.default.bool,
        shouldReturnFocusAfterClose: _propTypes2.default.bool,
        preventScroll: _propTypes2.default.bool,
        parentSelector: _propTypes2.default.func,
        aria: _propTypes2.default.object,
        data: _propTypes2.default.object,
        role: _propTypes2.default.string,
        contentLabel: _propTypes2.default.string,
        shouldCloseOnEsc: _propTypes2.default.bool,
        overlayRef: _propTypes2.default.func,
        contentRef: _propTypes2.default.func,
        id: _propTypes2.default.string,
        overlayElement: _propTypes2.default.func,
        contentElement: _propTypes2.default.func
      };
      Modal4.defaultProps = {
        isOpen: false,
        portalClassName,
        bodyOpenClassName,
        role: "dialog",
        ariaHideApp: true,
        closeTimeoutMS: 0,
        shouldFocusAfterRender: true,
        shouldCloseOnEsc: true,
        shouldCloseOnOverlayClick: true,
        shouldReturnFocusAfterClose: true,
        preventScroll: false,
        parentSelector: function parentSelector() {
          return document.body;
        },
        overlayElement: function overlayElement(props, contentEl) {
          return _react2.default.createElement(
            "div",
            props,
            contentEl
          );
        },
        contentElement: function contentElement(props, children) {
          return _react2.default.createElement(
            "div",
            props,
            children
          );
        }
      };
      Modal4.defaultStyles = {
        overlay: {
          position: "fixed",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: "rgba(255, 255, 255, 0.75)"
        },
        content: {
          position: "absolute",
          top: "40px",
          left: "40px",
          right: "40px",
          bottom: "40px",
          border: "1px solid #ccc",
          background: "#fff",
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          borderRadius: "4px",
          outline: "none",
          padding: "20px"
        }
      };
      (0, _reactLifecyclesCompat.polyfill)(Modal4);
      if (true) {
        Modal4.setCreateHTMLElement = function(fn4) {
          return createHTMLElement = fn4;
        };
      }
      exports.default = Modal4;
    }
  });

  // ../../node_modules/react-modal/lib/index.js
  var require_lib = __commonJS({
    "../../node_modules/react-modal/lib/index.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _Modal = require_Modal();
      var _Modal2 = _interopRequireDefault(_Modal);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports.default = _Modal2.default;
      module.exports = exports["default"];
    }
  });

  // ../../node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "../../node_modules/lodash/_freeGlobal.js"(exports, module) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module.exports = freeGlobal;
    }
  });

  // ../../node_modules/lodash/_root.js
  var require_root = __commonJS({
    "../../node_modules/lodash/_root.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      module.exports = root;
    }
  });

  // ../../node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "../../node_modules/lodash/_Symbol.js"(exports, module) {
      var root = require_root();
      var Symbol2 = root.Symbol;
      module.exports = Symbol2;
    }
  });

  // ../../node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "../../node_modules/lodash/_getRawTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      module.exports = getRawTag;
    }
  });

  // ../../node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "../../node_modules/lodash/_objectToString.js"(exports, module) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module.exports = objectToString;
    }
  });

  // ../../node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "../../node_modules/lodash/_baseGetTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module.exports = baseGetTag;
    }
  });

  // ../../node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "../../node_modules/lodash/isObject.js"(exports, module) {
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module.exports = isObject;
    }
  });

  // ../../node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "../../node_modules/lodash/isFunction.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObject = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module.exports = isFunction;
    }
  });

  // ../../node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "../../node_modules/lodash/_coreJsData.js"(exports, module) {
      var root = require_root();
      var coreJsData = root["__core-js_shared__"];
      module.exports = coreJsData;
    }
  });

  // ../../node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "../../node_modules/lodash/_isMasked.js"(exports, module) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      module.exports = isMasked;
    }
  });

  // ../../node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "../../node_modules/lodash/_toSource.js"(exports, module) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      module.exports = toSource;
    }
  });

  // ../../node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "../../node_modules/lodash/_baseIsNative.js"(exports, module) {
      var isFunction = require_isFunction();
      var isMasked = require_isMasked();
      var isObject = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      module.exports = baseIsNative;
    }
  });

  // ../../node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "../../node_modules/lodash/_getValue.js"(exports, module) {
      function getValue2(object, key) {
        return object == null ? void 0 : object[key];
      }
      module.exports = getValue2;
    }
  });

  // ../../node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "../../node_modules/lodash/_getNative.js"(exports, module) {
      var baseIsNative = require_baseIsNative();
      var getValue2 = require_getValue();
      function getNative(object, key) {
        var value = getValue2(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      module.exports = getNative;
    }
  });

  // ../../node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "../../node_modules/lodash/_defineProperty.js"(exports, module) {
      var getNative = require_getNative();
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      }();
      module.exports = defineProperty;
    }
  });

  // ../../node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "../../node_modules/lodash/_baseAssignValue.js"(exports, module) {
      var defineProperty = require_defineProperty();
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      module.exports = baseAssignValue;
    }
  });

  // ../../node_modules/lodash/_arrayAggregator.js
  var require_arrayAggregator = __commonJS({
    "../../node_modules/lodash/_arrayAggregator.js"(exports, module) {
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          var value = array[index2];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      module.exports = arrayAggregator;
    }
  });

  // ../../node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "../../node_modules/lodash/_createBaseFor.js"(exports, module) {
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index2 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index2];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      module.exports = createBaseFor;
    }
  });

  // ../../node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "../../node_modules/lodash/_baseFor.js"(exports, module) {
      var createBaseFor = require_createBaseFor();
      var baseFor = createBaseFor();
      module.exports = baseFor;
    }
  });

  // ../../node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "../../node_modules/lodash/_baseTimes.js"(exports, module) {
      function baseTimes(n4, iteratee) {
        var index2 = -1, result = Array(n4);
        while (++index2 < n4) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      module.exports = baseTimes;
    }
  });

  // ../../node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "../../node_modules/lodash/isObjectLike.js"(exports, module) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module.exports = isObjectLike;
    }
  });

  // ../../node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "../../node_modules/lodash/_baseIsArguments.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      module.exports = baseIsArguments;
    }
  });

  // ../../node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "../../node_modules/lodash/isArguments.js"(exports, module) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike = require_isObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      module.exports = isArguments;
    }
  });

  // ../../node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "../../node_modules/lodash/isArray.js"(exports, module) {
      var isArray = Array.isArray;
      module.exports = isArray;
    }
  });

  // ../../node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "../../node_modules/lodash/stubFalse.js"(exports, module) {
      function stubFalse() {
        return false;
      }
      module.exports = stubFalse;
    }
  });

  // ../../node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "../../node_modules/lodash/isBuffer.js"(exports, module) {
      var root = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer = nativeIsBuffer || stubFalse;
      module.exports = isBuffer;
    }
  });

  // ../../node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "../../node_modules/lodash/_isIndex.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      module.exports = isIndex;
    }
  });

  // ../../node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "../../node_modules/lodash/isLength.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      module.exports = isLength;
    }
  });

  // ../../node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "../../node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      module.exports = baseIsTypedArray;
    }
  });

  // ../../node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "../../node_modules/lodash/_baseUnary.js"(exports, module) {
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      module.exports = baseUnary;
    }
  });

  // ../../node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "../../node_modules/lodash/_nodeUtil.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      module.exports = nodeUtil;
    }
  });

  // ../../node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "../../node_modules/lodash/isTypedArray.js"(exports, module) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module.exports = isTypedArray;
    }
  });

  // ../../node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "../../node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isBuffer = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray = require_isTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType2 = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType2, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType2 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = arrayLikeKeys;
    }
  });

  // ../../node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "../../node_modules/lodash/_isPrototype.js"(exports, module) {
      var objectProto = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      module.exports = isPrototype;
    }
  });

  // ../../node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "../../node_modules/lodash/_overArg.js"(exports, module) {
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module.exports = overArg;
    }
  });

  // ../../node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "../../node_modules/lodash/_nativeKeys.js"(exports, module) {
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      module.exports = nativeKeys;
    }
  });

  // ../../node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "../../node_modules/lodash/_baseKeys.js"(exports, module) {
      var isPrototype = require_isPrototype();
      var nativeKeys = require_nativeKeys();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty2.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = baseKeys;
    }
  });

  // ../../node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "../../node_modules/lodash/isArrayLike.js"(exports, module) {
      var isFunction = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      module.exports = isArrayLike;
    }
  });

  // ../../node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "../../node_modules/lodash/keys.js"(exports, module) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeys = require_baseKeys();
      var isArrayLike = require_isArrayLike();
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      module.exports = keys;
    }
  });

  // ../../node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS({
    "../../node_modules/lodash/_baseForOwn.js"(exports, module) {
      var baseFor = require_baseFor();
      var keys = require_keys();
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }
      module.exports = baseForOwn;
    }
  });

  // ../../node_modules/lodash/_createBaseEach.js
  var require_createBaseEach = __commonJS({
    "../../node_modules/lodash/_createBaseEach.js"(exports, module) {
      var isArrayLike = require_isArrayLike();
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
          while (fromRight ? index2-- : ++index2 < length) {
            if (iteratee(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      module.exports = createBaseEach;
    }
  });

  // ../../node_modules/lodash/_baseEach.js
  var require_baseEach = __commonJS({
    "../../node_modules/lodash/_baseEach.js"(exports, module) {
      var baseForOwn = require_baseForOwn();
      var createBaseEach = require_createBaseEach();
      var baseEach = createBaseEach(baseForOwn);
      module.exports = baseEach;
    }
  });

  // ../../node_modules/lodash/_baseAggregator.js
  var require_baseAggregator = __commonJS({
    "../../node_modules/lodash/_baseAggregator.js"(exports, module) {
      var baseEach = require_baseEach();
      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function(value, key, collection2) {
          setter(accumulator, value, iteratee(value), collection2);
        });
        return accumulator;
      }
      module.exports = baseAggregator;
    }
  });

  // ../../node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "../../node_modules/lodash/_listCacheClear.js"(exports, module) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module.exports = listCacheClear;
    }
  });

  // ../../node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "../../node_modules/lodash/eq.js"(exports, module) {
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      module.exports = eq;
    }
  });

  // ../../node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "../../node_modules/lodash/_assocIndexOf.js"(exports, module) {
      var eq = require_eq();
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      module.exports = assocIndexOf;
    }
  });

  // ../../node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "../../node_modules/lodash/_listCacheDelete.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      module.exports = listCacheDelete;
    }
  });

  // ../../node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "../../node_modules/lodash/_listCacheGet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      module.exports = listCacheGet;
    }
  });

  // ../../node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "../../node_modules/lodash/_listCacheHas.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      module.exports = listCacheHas;
    }
  });

  // ../../node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "../../node_modules/lodash/_listCacheSet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      module.exports = listCacheSet;
    }
  });

  // ../../node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "../../node_modules/lodash/_ListCache.js"(exports, module) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module.exports = ListCache;
    }
  });

  // ../../node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "../../node_modules/lodash/_stackClear.js"(exports, module) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      module.exports = stackClear;
    }
  });

  // ../../node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "../../node_modules/lodash/_stackDelete.js"(exports, module) {
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      module.exports = stackDelete;
    }
  });

  // ../../node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "../../node_modules/lodash/_stackGet.js"(exports, module) {
      function stackGet(key) {
        return this.__data__.get(key);
      }
      module.exports = stackGet;
    }
  });

  // ../../node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "../../node_modules/lodash/_stackHas.js"(exports, module) {
      function stackHas(key) {
        return this.__data__.has(key);
      }
      module.exports = stackHas;
    }
  });

  // ../../node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "../../node_modules/lodash/_Map.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Map2 = getNative(root, "Map");
      module.exports = Map2;
    }
  });

  // ../../node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "../../node_modules/lodash/_nativeCreate.js"(exports, module) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module.exports = nativeCreate;
    }
  });

  // ../../node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "../../node_modules/lodash/_hashClear.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module.exports = hashClear;
    }
  });

  // ../../node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "../../node_modules/lodash/_hashDelete.js"(exports, module) {
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = hashDelete;
    }
  });

  // ../../node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "../../node_modules/lodash/_hashGet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      module.exports = hashGet;
    }
  });

  // ../../node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "../../node_modules/lodash/_hashHas.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      module.exports = hashHas;
    }
  });

  // ../../node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "../../node_modules/lodash/_hashSet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      module.exports = hashSet;
    }
  });

  // ../../node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "../../node_modules/lodash/_Hash.js"(exports, module) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module.exports = Hash;
    }
  });

  // ../../node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "../../node_modules/lodash/_mapCacheClear.js"(exports, module) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      module.exports = mapCacheClear;
    }
  });

  // ../../node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "../../node_modules/lodash/_isKeyable.js"(exports, module) {
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module.exports = isKeyable;
    }
  });

  // ../../node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "../../node_modules/lodash/_getMapData.js"(exports, module) {
      var isKeyable = require_isKeyable();
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module.exports = getMapData;
    }
  });

  // ../../node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "../../node_modules/lodash/_mapCacheDelete.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = mapCacheDelete;
    }
  });

  // ../../node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "../../node_modules/lodash/_mapCacheGet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      module.exports = mapCacheGet;
    }
  });

  // ../../node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "../../node_modules/lodash/_mapCacheHas.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      module.exports = mapCacheHas;
    }
  });

  // ../../node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "../../node_modules/lodash/_mapCacheSet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module.exports = mapCacheSet;
    }
  });

  // ../../node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "../../node_modules/lodash/_MapCache.js"(exports, module) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module.exports = MapCache;
    }
  });

  // ../../node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "../../node_modules/lodash/_stackSet.js"(exports, module) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      module.exports = stackSet;
    }
  });

  // ../../node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "../../node_modules/lodash/_Stack.js"(exports, module) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module.exports = Stack;
    }
  });

  // ../../node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "../../node_modules/lodash/_setCacheAdd.js"(exports, module) {
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      module.exports = setCacheAdd;
    }
  });

  // ../../node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "../../node_modules/lodash/_setCacheHas.js"(exports, module) {
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      module.exports = setCacheHas;
    }
  });

  // ../../node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "../../node_modules/lodash/_SetCache.js"(exports, module) {
      var MapCache = require_MapCache();
      var setCacheAdd = require_setCacheAdd();
      var setCacheHas = require_setCacheHas();
      function SetCache(values2) {
        var index2 = -1, length = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache();
        while (++index2 < length) {
          this.add(values2[index2]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module.exports = SetCache;
    }
  });

  // ../../node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "../../node_modules/lodash/_arraySome.js"(exports, module) {
      function arraySome(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (predicate(array[index2], index2, array)) {
            return true;
          }
        }
        return false;
      }
      module.exports = arraySome;
    }
  });

  // ../../node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "../../node_modules/lodash/_cacheHas.js"(exports, module) {
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      module.exports = cacheHas;
    }
  });

  // ../../node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "../../node_modules/lodash/_equalArrays.js"(exports, module) {
      var SetCache = require_SetCache();
      var arraySome = require_arraySome();
      var cacheHas = require_cacheHas();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index2 < arrLength) {
          var arrValue = array[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      module.exports = equalArrays;
    }
  });

  // ../../node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "../../node_modules/lodash/_Uint8Array.js"(exports, module) {
      var root = require_root();
      var Uint8Array2 = root.Uint8Array;
      module.exports = Uint8Array2;
    }
  });

  // ../../node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "../../node_modules/lodash/_mapToArray.js"(exports, module) {
      function mapToArray(map) {
        var index2 = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      module.exports = mapToArray;
    }
  });

  // ../../node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "../../node_modules/lodash/_setToArray.js"(exports, module) {
      function setToArray(set) {
        var index2 = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      module.exports = setToArray;
    }
  });

  // ../../node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "../../node_modules/lodash/_equalByTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var Uint8Array2 = require_Uint8Array();
      var eq = require_eq();
      var equalArrays = require_equalArrays();
      var mapToArray = require_mapToArray();
      var setToArray = require_setToArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      module.exports = equalByTag;
    }
  });

  // ../../node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "../../node_modules/lodash/_arrayPush.js"(exports, module) {
      function arrayPush(array, values2) {
        var index2 = -1, length = values2.length, offset4 = array.length;
        while (++index2 < length) {
          array[offset4 + index2] = values2[index2];
        }
        return array;
      }
      module.exports = arrayPush;
    }
  });

  // ../../node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "../../node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
      var arrayPush = require_arrayPush();
      var isArray = require_isArray();
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }
      module.exports = baseGetAllKeys;
    }
  });

  // ../../node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "../../node_modules/lodash/_arrayFilter.js"(exports, module) {
      function arrayFilter(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array[index2];
          if (predicate(value, index2, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      module.exports = arrayFilter;
    }
  });

  // ../../node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "../../node_modules/lodash/stubArray.js"(exports, module) {
      function stubArray() {
        return [];
      }
      module.exports = stubArray;
    }
  });

  // ../../node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "../../node_modules/lodash/_getSymbols.js"(exports, module) {
      var arrayFilter = require_arrayFilter();
      var stubArray = require_stubArray();
      var objectProto = Object.prototype;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      module.exports = getSymbols;
    }
  });

  // ../../node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "../../node_modules/lodash/_getAllKeys.js"(exports, module) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbols = require_getSymbols();
      var keys = require_keys();
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      module.exports = getAllKeys;
    }
  });

  // ../../node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "../../node_modules/lodash/_equalObjects.js"(exports, module) {
      var getAllKeys = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG = 1;
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      module.exports = equalObjects;
    }
  });

  // ../../node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "../../node_modules/lodash/_DataView.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var DataView = getNative(root, "DataView");
      module.exports = DataView;
    }
  });

  // ../../node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "../../node_modules/lodash/_Promise.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Promise2 = getNative(root, "Promise");
      module.exports = Promise2;
    }
  });

  // ../../node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "../../node_modules/lodash/_Set.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Set2 = getNative(root, "Set");
      module.exports = Set2;
    }
  });

  // ../../node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "../../node_modules/lodash/_WeakMap.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var WeakMap = getNative(root, "WeakMap");
      module.exports = WeakMap;
    }
  });

  // ../../node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "../../node_modules/lodash/_getTag.js"(exports, module) {
      var DataView = require_DataView();
      var Map2 = require_Map();
      var Promise2 = require_Promise();
      var Set2 = require_Set();
      var WeakMap = require_WeakMap();
      var baseGetTag = require_baseGetTag();
      var toSource = require_toSource();
      var mapTag = "[object Map]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag = "[object Set]";
      var weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap);
      var getTag = baseGetTag;
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function(value) {
          var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      module.exports = getTag;
    }
  });

  // ../../node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "../../node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
      var Stack = require_Stack();
      var equalArrays = require_equalArrays();
      var equalByTag = require_equalByTag();
      var equalObjects = require_equalObjects();
      var getTag = require_getTag();
      var isArray = require_isArray();
      var isBuffer = require_isBuffer();
      var isTypedArray = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var objectTag = "[object Object]";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      module.exports = baseIsEqualDeep;
    }
  });

  // ../../node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "../../node_modules/lodash/_baseIsEqual.js"(exports, module) {
      var baseIsEqualDeep = require_baseIsEqualDeep();
      var isObjectLike = require_isObjectLike();
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      module.exports = baseIsEqual;
    }
  });

  // ../../node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS({
    "../../node_modules/lodash/_baseIsMatch.js"(exports, module) {
      var Stack = require_Stack();
      var baseIsEqual = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseIsMatch(object, source, matchData, customizer) {
        var index2 = matchData.length, length = index2, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index2--) {
          var data = matchData[index2];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index2 < length) {
          data = matchData[index2];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      module.exports = baseIsMatch;
    }
  });

  // ../../node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS({
    "../../node_modules/lodash/_isStrictComparable.js"(exports, module) {
      var isObject = require_isObject();
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }
      module.exports = isStrictComparable;
    }
  });

  // ../../node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS({
    "../../node_modules/lodash/_getMatchData.js"(exports, module) {
      var isStrictComparable = require_isStrictComparable();
      var keys = require_keys();
      function getMatchData(object) {
        var result = keys(object), length = result.length;
        while (length--) {
          var key = result[length], value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
      module.exports = getMatchData;
    }
  });

  // ../../node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS({
    "../../node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      module.exports = matchesStrictComparable;
    }
  });

  // ../../node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS({
    "../../node_modules/lodash/_baseMatches.js"(exports, module) {
      var baseIsMatch = require_baseIsMatch();
      var getMatchData = require_getMatchData();
      var matchesStrictComparable = require_matchesStrictComparable();
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      module.exports = baseMatches;
    }
  });

  // ../../node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "../../node_modules/lodash/isSymbol.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module.exports = isSymbol;
    }
  });

  // ../../node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "../../node_modules/lodash/_isKey.js"(exports, module) {
      var isArray = require_isArray();
      var isSymbol = require_isSymbol();
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      module.exports = isKey;
    }
  });

  // ../../node_modules/lodash/memoize.js
  var require_memoize = __commonJS({
    "../../node_modules/lodash/memoize.js"(exports, module) {
      var MapCache = require_MapCache();
      var FUNC_ERROR_TEXT = "Expected a function";
      function memoize2(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize2.Cache || MapCache)();
        return memoized;
      }
      memoize2.Cache = MapCache;
      module.exports = memoize2;
    }
  });

  // ../../node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "../../node_modules/lodash/_memoizeCapped.js"(exports, module) {
      var memoize2 = require_memoize();
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func) {
        var result = memoize2(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      module.exports = memoizeCapped;
    }
  });

  // ../../node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "../../node_modules/lodash/_stringToPath.js"(exports, module) {
      var memoizeCapped = require_memoizeCapped();
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46) {
          result.push("");
        }
        string.replace(rePropName, function(match2, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
        });
        return result;
      });
      module.exports = stringToPath;
    }
  });

  // ../../node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "../../node_modules/lodash/_arrayMap.js"(exports, module) {
      function arrayMap(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index2 < length) {
          result[index2] = iteratee(array[index2], index2, array);
        }
        return result;
      }
      module.exports = arrayMap;
    }
  });

  // ../../node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "../../node_modules/lodash/_baseToString.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var arrayMap = require_arrayMap();
      var isArray = require_isArray();
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      module.exports = baseToString;
    }
  });

  // ../../node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "../../node_modules/lodash/toString.js"(exports, module) {
      var baseToString = require_baseToString();
      function toString2(value) {
        return value == null ? "" : baseToString(value);
      }
      module.exports = toString2;
    }
  });

  // ../../node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "../../node_modules/lodash/_castPath.js"(exports, module) {
      var isArray = require_isArray();
      var isKey = require_isKey();
      var stringToPath = require_stringToPath();
      var toString2 = require_toString();
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString2(value));
      }
      module.exports = castPath;
    }
  });

  // ../../node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "../../node_modules/lodash/_toKey.js"(exports, module) {
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      module.exports = toKey;
    }
  });

  // ../../node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "../../node_modules/lodash/_baseGet.js"(exports, module) {
      var castPath = require_castPath();
      var toKey = require_toKey();
      function baseGet(object, path) {
        path = castPath(path, object);
        var index2 = 0, length = path.length;
        while (object != null && index2 < length) {
          object = object[toKey(path[index2++])];
        }
        return index2 && index2 == length ? object : void 0;
      }
      module.exports = baseGet;
    }
  });

  // ../../node_modules/lodash/get.js
  var require_get = __commonJS({
    "../../node_modules/lodash/get.js"(exports, module) {
      var baseGet = require_baseGet();
      function get2(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path);
        return result === void 0 ? defaultValue : result;
      }
      module.exports = get2;
    }
  });

  // ../../node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "../../node_modules/lodash/_baseHasIn.js"(exports, module) {
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      module.exports = baseHasIn;
    }
  });

  // ../../node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "../../node_modules/lodash/_hasPath.js"(exports, module) {
      var castPath = require_castPath();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isIndex = require_isIndex();
      var isLength = require_isLength();
      var toKey = require_toKey();
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index2 = -1, length = path.length, result = false;
        while (++index2 < length) {
          var key = toKey(path[index2]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index2 != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }
      module.exports = hasPath;
    }
  });

  // ../../node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "../../node_modules/lodash/hasIn.js"(exports, module) {
      var baseHasIn = require_baseHasIn();
      var hasPath = require_hasPath();
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }
      module.exports = hasIn;
    }
  });

  // ../../node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS({
    "../../node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
      var baseIsEqual = require_baseIsEqual();
      var get2 = require_get();
      var hasIn = require_hasIn();
      var isKey = require_isKey();
      var isStrictComparable = require_isStrictComparable();
      var matchesStrictComparable = require_matchesStrictComparable();
      var toKey = require_toKey();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get2(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      module.exports = baseMatchesProperty;
    }
  });

  // ../../node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "../../node_modules/lodash/identity.js"(exports, module) {
      function identity(value) {
        return value;
      }
      module.exports = identity;
    }
  });

  // ../../node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS({
    "../../node_modules/lodash/_baseProperty.js"(exports, module) {
      function baseProperty(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      module.exports = baseProperty;
    }
  });

  // ../../node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS({
    "../../node_modules/lodash/_basePropertyDeep.js"(exports, module) {
      var baseGet = require_baseGet();
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }
      module.exports = basePropertyDeep;
    }
  });

  // ../../node_modules/lodash/property.js
  var require_property = __commonJS({
    "../../node_modules/lodash/property.js"(exports, module) {
      var baseProperty = require_baseProperty();
      var basePropertyDeep = require_basePropertyDeep();
      var isKey = require_isKey();
      var toKey = require_toKey();
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
      module.exports = property;
    }
  });

  // ../../node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS({
    "../../node_modules/lodash/_baseIteratee.js"(exports, module) {
      var baseMatches = require_baseMatches();
      var baseMatchesProperty = require_baseMatchesProperty();
      var identity = require_identity();
      var isArray = require_isArray();
      var property = require_property();
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      module.exports = baseIteratee;
    }
  });

  // ../../node_modules/lodash/_createAggregator.js
  var require_createAggregator = __commonJS({
    "../../node_modules/lodash/_createAggregator.js"(exports, module) {
      var arrayAggregator = require_arrayAggregator();
      var baseAggregator = require_baseAggregator();
      var baseIteratee = require_baseIteratee();
      var isArray = require_isArray();
      function createAggregator(setter, initializer) {
        return function(collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
          return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
        };
      }
      module.exports = createAggregator;
    }
  });

  // ../../node_modules/lodash/groupBy.js
  var require_groupBy = __commonJS({
    "../../node_modules/lodash/groupBy.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var createAggregator = require_createAggregator();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var groupBy3 = createAggregator(function(result, value, key) {
        if (hasOwnProperty2.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });
      module.exports = groupBy3;
    }
  });

  // ../../node_modules/lodash/partition.js
  var require_partition = __commonJS({
    "../../node_modules/lodash/partition.js"(exports, module) {
      var createAggregator = require_createAggregator();
      var partition3 = createAggregator(function(result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function() {
        return [[], []];
      });
      module.exports = partition3;
    }
  });

  // ../../node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "../../node_modules/tslib/tslib.js"(exports, module) {
      var __extends2;
      var __assign2;
      var __rest2;
      var __decorate2;
      var __param2;
      var __metadata2;
      var __awaiter2;
      var __generator2;
      var __exportStar2;
      var __values2;
      var __read2;
      var __spread2;
      var __spreadArrays2;
      var __spreadArray2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues2;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet2;
      var __classPrivateFieldSet2;
      var __classPrivateFieldIn2;
      var __createBinding2;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v3) {
            return exports2[id] = previous ? previous(id, v3) : v3;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
          d4.__proto__ = b3;
        } || function(d4, b3) {
          for (var p3 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p3))
              d4[p3] = b3[p3];
        };
        __extends2 = function(d4, b3) {
          if (typeof b3 !== "function" && b3 !== null)
            throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
          extendStatics(d4, b3);
          function __() {
            this.constructor = d4;
          }
          d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
        };
        __assign2 = Object.assign || function(t3) {
          for (var s3, i3 = 1, n4 = arguments.length; i3 < n4; i3++) {
            s3 = arguments[i3];
            for (var p3 in s3)
              if (Object.prototype.hasOwnProperty.call(s3, p3))
                t3[p3] = s3[p3];
          }
          return t3;
        };
        __rest2 = function(s3, e2) {
          var t3 = {};
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3) && e2.indexOf(p3) < 0)
              t3[p3] = s3[p3];
          if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
              if (e2.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
                t3[p3[i3]] = s3[p3[i3]];
            }
          return t3;
        };
        __decorate2 = function(decorators, target, key, desc) {
          var c3 = arguments.length, r2 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d4;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i3 = decorators.length - 1; i3 >= 0; i3--)
              if (d4 = decorators[i3])
                r2 = (c3 < 3 ? d4(r2) : c3 > 3 ? d4(target, key, r2) : d4(target, key)) || r2;
          return c3 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
        };
        __param2 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata2 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter2 = function(thisArg, _arguments, P3, generator) {
          function adopt(value) {
            return value instanceof P3 ? value : new P3(function(resolve) {
              resolve(value);
            });
          }
          return new (P3 || (P3 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator2 = function(thisArg, body) {
          var _3 = { label: 0, sent: function() {
            if (t3[0] & 1)
              throw t3[1];
            return t3[1];
          }, trys: [], ops: [] }, f4, y2, t3, g4;
          return g4 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g4[Symbol.iterator] = function() {
            return this;
          }), g4;
          function verb(n4) {
            return function(v3) {
              return step([n4, v3]);
            };
          }
          function step(op) {
            if (f4)
              throw new TypeError("Generator is already executing.");
            while (_3)
              try {
                if (f4 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done)
                  return t3;
                if (y2 = 0, t3)
                  op = [op[0] & 2, t3.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t3 = op;
                    break;
                  case 4:
                    _3.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _3.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _3.ops.pop();
                    _3.trys.pop();
                    continue;
                  default:
                    if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _3 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                      _3.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _3.label < t3[1]) {
                      _3.label = t3[1];
                      t3 = op;
                      break;
                    }
                    if (t3 && _3.label < t3[2]) {
                      _3.label = t3[2];
                      _3.ops.push(op);
                      break;
                    }
                    if (t3[2])
                      _3.ops.pop();
                    _3.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _3);
              } catch (e2) {
                op = [6, e2];
                y2 = 0;
              } finally {
                f4 = t3 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar2 = function(m3, o3) {
          for (var p3 in m3)
            if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(o3, p3))
              __createBinding2(o3, m3, p3);
        };
        __createBinding2 = Object.create ? function(o3, m3, k3, k22) {
          if (k22 === void 0)
            k22 = k3;
          var desc = Object.getOwnPropertyDescriptor(m3, k3);
          if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m3[k3];
            } };
          }
          Object.defineProperty(o3, k22, desc);
        } : function(o3, m3, k3, k22) {
          if (k22 === void 0)
            k22 = k3;
          o3[k22] = m3[k3];
        };
        __values2 = function(o3) {
          var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
          if (m3)
            return m3.call(o3);
          if (o3 && typeof o3.length === "number")
            return {
              next: function() {
                if (o3 && i3 >= o3.length)
                  o3 = void 0;
                return { value: o3 && o3[i3++], done: !o3 };
              }
            };
          throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read2 = function(o3, n4) {
          var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
          if (!m3)
            return o3;
          var i3 = m3.call(o3), r2, ar = [], e2;
          try {
            while ((n4 === void 0 || n4-- > 0) && !(r2 = i3.next()).done)
              ar.push(r2.value);
          } catch (error2) {
            e2 = { error: error2 };
          } finally {
            try {
              if (r2 && !r2.done && (m3 = i3["return"]))
                m3.call(i3);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return ar;
        };
        __spread2 = function() {
          for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
            ar = ar.concat(__read2(arguments[i3]));
          return ar;
        };
        __spreadArrays2 = function() {
          for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
            s3 += arguments[i3].length;
          for (var r2 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
            for (var a3 = arguments[i3], j4 = 0, jl = a3.length; j4 < jl; j4++, k3++)
              r2[k3] = a3[j4];
          return r2;
        };
        __spreadArray2 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i3 = 0, l3 = from.length, ar; i3 < l3; i3++) {
              if (ar || !(i3 in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i3);
                ar[i3] = from[i3];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await2 = function(v3) {
          return this instanceof __await2 ? (this.v = v3, this) : new __await2(v3);
        };
        __asyncGenerator2 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g4 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
          return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
            return this;
          }, i3;
          function verb(n4) {
            if (g4[n4])
              i3[n4] = function(v3) {
                return new Promise(function(a3, b3) {
                  q3.push([n4, v3, a3, b3]) > 1 || resume(n4, v3);
                });
              };
          }
          function resume(n4, v3) {
            try {
              step(g4[n4](v3));
            } catch (e2) {
              settle(q3[0][3], e2);
            }
          }
          function step(r2) {
            r2.value instanceof __await2 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q3[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f4, v3) {
            if (f4(v3), q3.shift(), q3.length)
              resume(q3[0][0], q3[0][1]);
          }
        };
        __asyncDelegator2 = function(o3) {
          var i3, p3;
          return i3 = {}, verb("next"), verb("throw", function(e2) {
            throw e2;
          }), verb("return"), i3[Symbol.iterator] = function() {
            return this;
          }, i3;
          function verb(n4, f4) {
            i3[n4] = o3[n4] ? function(v3) {
              return (p3 = !p3) ? { value: __await2(o3[n4](v3)), done: n4 === "return" } : f4 ? f4(v3) : v3;
            } : f4;
          }
        };
        __asyncValues2 = function(o3) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m3 = o3[Symbol.asyncIterator], i3;
          return m3 ? m3.call(o3) : (o3 = typeof __values2 === "function" ? __values2(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
            return this;
          }, i3);
          function verb(n4) {
            i3[n4] = o3[n4] && function(v3) {
              return new Promise(function(resolve, reject) {
                v3 = o3[n4](v3), settle(resolve, reject, v3.done, v3.value);
              });
            };
          }
          function settle(resolve, reject, d4, v3) {
            Promise.resolve(v3).then(function(v4) {
              resolve({ value: v4, done: d4 });
            }, reject);
          }
        };
        __makeTemplateObject2 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o3, v3) {
          Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
        } : function(o3, v3) {
          o3["default"] = v3;
        };
        __importStar2 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k3 in mod)
              if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3))
                __createBinding2(result, mod, k3);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault2 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet2 = function(receiver, state, kind, f4) {
          if (kind === "a" && !f4)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f4 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f4 : kind === "a" ? f4.call(receiver) : f4 ? f4.value : state.get(receiver);
        };
        __classPrivateFieldSet2 = function(receiver, state, value, kind, f4) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f4)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f4 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f4.call(receiver, value) : f4 ? f4.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn2 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends2);
        exporter("__assign", __assign2);
        exporter("__rest", __rest2);
        exporter("__decorate", __decorate2);
        exporter("__param", __param2);
        exporter("__metadata", __metadata2);
        exporter("__awaiter", __awaiter2);
        exporter("__generator", __generator2);
        exporter("__exportStar", __exportStar2);
        exporter("__createBinding", __createBinding2);
        exporter("__values", __values2);
        exporter("__read", __read2);
        exporter("__spread", __spread2);
        exporter("__spreadArrays", __spreadArrays2);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await2);
        exporter("__asyncGenerator", __asyncGenerator2);
        exporter("__asyncDelegator", __asyncDelegator2);
        exporter("__asyncValues", __asyncValues2);
        exporter("__makeTemplateObject", __makeTemplateObject2);
        exporter("__importStar", __importStar2);
        exporter("__importDefault", __importDefault2);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
      });
    }
  });

  // ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i3 = 0; i3 < keys.length; ++i3) {
            var key = keys[i3];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e2) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics2;
    }
  });

  // ../../node_modules/axios/lib/helpers/bind.js
  var require_bind = __commonJS({
    "../../node_modules/axios/lib/helpers/bind.js"(exports, module) {
      "use strict";
      module.exports = function bind(fn4, thisArg) {
        return function wrap() {
          var args = new Array(arguments.length);
          for (var i3 = 0; i3 < args.length; i3++) {
            args[i3] = arguments[i3];
          }
          return fn4.apply(thisArg, args);
        };
      };
    }
  });

  // ../../node_modules/axios/lib/utils.js
  var require_utils = __commonJS({
    "../../node_modules/axios/lib/utils.js"(exports, module) {
      "use strict";
      var bind = require_bind();
      var toString2 = Object.prototype.toString;
      function isArray(val) {
        return Array.isArray(val);
      }
      function isUndefined(val) {
        return typeof val === "undefined";
      }
      function isBuffer(val) {
        return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
      }
      function isArrayBuffer(val) {
        return toString2.call(val) === "[object ArrayBuffer]";
      }
      function isFormData(val) {
        return toString2.call(val) === "[object FormData]";
      }
      function isArrayBufferView(val) {
        var result;
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          result = ArrayBuffer.isView(val);
        } else {
          result = val && val.buffer && isArrayBuffer(val.buffer);
        }
        return result;
      }
      function isString(val) {
        return typeof val === "string";
      }
      function isNumber(val) {
        return typeof val === "number";
      }
      function isObject(val) {
        return val !== null && typeof val === "object";
      }
      function isPlainObject4(val) {
        if (toString2.call(val) !== "[object Object]") {
          return false;
        }
        var prototype = Object.getPrototypeOf(val);
        return prototype === null || prototype === Object.prototype;
      }
      function isDate2(val) {
        return toString2.call(val) === "[object Date]";
      }
      function isFile(val) {
        return toString2.call(val) === "[object File]";
      }
      function isBlob(val) {
        return toString2.call(val) === "[object Blob]";
      }
      function isFunction(val) {
        return toString2.call(val) === "[object Function]";
      }
      function isStream(val) {
        return isObject(val) && isFunction(val.pipe);
      }
      function isURLSearchParams(val) {
        return toString2.call(val) === "[object URLSearchParams]";
      }
      function trim(str) {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
      }
      function isStandardBrowserEnv() {
        if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
          return false;
        }
        return typeof window !== "undefined" && typeof document !== "undefined";
      }
      function forEach(obj, fn4) {
        if (obj === null || typeof obj === "undefined") {
          return;
        }
        if (typeof obj !== "object") {
          obj = [obj];
        }
        if (isArray(obj)) {
          for (var i3 = 0, l3 = obj.length; i3 < l3; i3++) {
            fn4.call(null, obj[i3], i3, obj);
          }
        } else {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              fn4.call(null, obj[key], key, obj);
            }
          }
        }
      }
      function merge() {
        var result = {};
        function assignValue(val, key) {
          if (isPlainObject4(result[key]) && isPlainObject4(val)) {
            result[key] = merge(result[key], val);
          } else if (isPlainObject4(val)) {
            result[key] = merge({}, val);
          } else if (isArray(val)) {
            result[key] = val.slice();
          } else {
            result[key] = val;
          }
        }
        for (var i3 = 0, l3 = arguments.length; i3 < l3; i3++) {
          forEach(arguments[i3], assignValue);
        }
        return result;
      }
      function extend(a3, b3, thisArg) {
        forEach(b3, function assignValue(val, key) {
          if (thisArg && typeof val === "function") {
            a3[key] = bind(val, thisArg);
          } else {
            a3[key] = val;
          }
        });
        return a3;
      }
      function stripBOM(content) {
        if (content.charCodeAt(0) === 65279) {
          content = content.slice(1);
        }
        return content;
      }
      module.exports = {
        isArray,
        isArrayBuffer,
        isBuffer,
        isFormData,
        isArrayBufferView,
        isString,
        isNumber,
        isObject,
        isPlainObject: isPlainObject4,
        isUndefined,
        isDate: isDate2,
        isFile,
        isBlob,
        isFunction,
        isStream,
        isURLSearchParams,
        isStandardBrowserEnv,
        forEach,
        merge,
        extend,
        trim,
        stripBOM
      };
    }
  });

  // ../../node_modules/axios/lib/helpers/buildURL.js
  var require_buildURL = __commonJS({
    "../../node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      function encode(val) {
        return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      module.exports = function buildURL(url, params, paramsSerializer) {
        if (!params) {
          return url;
        }
        var serializedParams;
        if (paramsSerializer) {
          serializedParams = paramsSerializer(params);
        } else if (utils.isURLSearchParams(params)) {
          serializedParams = params.toString();
        } else {
          var parts = [];
          utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") {
              return;
            }
            if (utils.isArray(val)) {
              key = key + "[]";
            } else {
              val = [val];
            }
            utils.forEach(val, function parseValue(v3) {
              if (utils.isDate(v3)) {
                v3 = v3.toISOString();
              } else if (utils.isObject(v3)) {
                v3 = JSON.stringify(v3);
              }
              parts.push(encode(key) + "=" + encode(v3));
            });
          });
          serializedParams = parts.join("&");
        }
        if (serializedParams) {
          var hashmarkIndex = url.indexOf("#");
          if (hashmarkIndex !== -1) {
            url = url.slice(0, hashmarkIndex);
          }
          url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
        }
        return url;
      };
    }
  });

  // ../../node_modules/axios/lib/core/InterceptorManager.js
  var require_InterceptorManager = __commonJS({
    "../../node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      function InterceptorManager() {
        this.handlers = [];
      }
      InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      };
      InterceptorManager.prototype.eject = function eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      };
      InterceptorManager.prototype.forEach = function forEach(fn4) {
        utils.forEach(this.handlers, function forEachHandler(h3) {
          if (h3 !== null) {
            fn4(h3);
          }
        });
      };
      module.exports = InterceptorManager;
    }
  });

  // ../../node_modules/axios/lib/helpers/normalizeHeaderName.js
  var require_normalizeHeaderName = __commonJS({
    "../../node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = function normalizeHeaderName(headers, normalizedName) {
        utils.forEach(headers, function processHeader(value, name) {
          if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
          }
        });
      };
    }
  });

  // ../../node_modules/axios/lib/core/enhanceError.js
  var require_enhanceError = __commonJS({
    "../../node_modules/axios/lib/core/enhanceError.js"(exports, module) {
      "use strict";
      module.exports = function enhanceError(error2, config2, code, request, response) {
        error2.config = config2;
        if (code) {
          error2.code = code;
        }
        error2.request = request;
        error2.response = response;
        error2.isAxiosError = true;
        error2.toJSON = function toJSON() {
          return {
            message: this.message,
            name: this.name,
            description: this.description,
            number: this.number,
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            config: this.config,
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
          };
        };
        return error2;
      };
    }
  });

  // ../../node_modules/axios/lib/core/createError.js
  var require_createError = __commonJS({
    "../../node_modules/axios/lib/core/createError.js"(exports, module) {
      "use strict";
      var enhanceError = require_enhanceError();
      module.exports = function createError(message, config2, code, request, response) {
        var error2 = new Error(message);
        return enhanceError(error2, config2, code, request, response);
      };
    }
  });

  // ../../node_modules/axios/lib/core/settle.js
  var require_settle = __commonJS({
    "../../node_modules/axios/lib/core/settle.js"(exports, module) {
      "use strict";
      var createError = require_createError();
      module.exports = function settle(resolve, reject, response) {
        var validateStatus = response.config.validateStatus;
        if (!response.status || !validateStatus || validateStatus(response.status)) {
          resolve(response);
        } else {
          reject(createError(
            "Request failed with status code " + response.status,
            response.config,
            null,
            response.request,
            response
          ));
        }
      };
    }
  });

  // ../../node_modules/axios/lib/helpers/cookies.js
  var require_cookies = __commonJS({
    "../../node_modules/axios/lib/helpers/cookies.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
        return {
          write: function write2(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read2(name) {
            var match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match2 ? decodeURIComponent(match2[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }() : function nonStandardBrowserEnv() {
        return {
          write: function write2() {
          },
          read: function read2() {
            return null;
          },
          remove: function remove() {
          }
        };
      }();
    }
  });

  // ../../node_modules/axios/lib/helpers/isAbsoluteURL.js
  var require_isAbsoluteURL = __commonJS({
    "../../node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
      "use strict";
      module.exports = function isAbsoluteURL(url) {
        return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
      };
    }
  });

  // ../../node_modules/axios/lib/helpers/combineURLs.js
  var require_combineURLs = __commonJS({
    "../../node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
      "use strict";
      module.exports = function combineURLs(baseURL, relativeURL) {
        return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
      };
    }
  });

  // ../../node_modules/axios/lib/core/buildFullPath.js
  var require_buildFullPath = __commonJS({
    "../../node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
      "use strict";
      var isAbsoluteURL = require_isAbsoluteURL();
      var combineURLs = require_combineURLs();
      module.exports = function buildFullPath(baseURL, requestedURL) {
        if (baseURL && !isAbsoluteURL(requestedURL)) {
          return combineURLs(baseURL, requestedURL);
        }
        return requestedURL;
      };
    }
  });

  // ../../node_modules/axios/lib/helpers/parseHeaders.js
  var require_parseHeaders = __commonJS({
    "../../node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var ignoreDuplicateOf = [
        "age",
        "authorization",
        "content-length",
        "content-type",
        "etag",
        "expires",
        "from",
        "host",
        "if-modified-since",
        "if-unmodified-since",
        "last-modified",
        "location",
        "max-forwards",
        "proxy-authorization",
        "referer",
        "retry-after",
        "user-agent"
      ];
      module.exports = function parseHeaders(headers) {
        var parsed = {};
        var key;
        var val;
        var i3;
        if (!headers) {
          return parsed;
        }
        utils.forEach(headers.split("\n"), function parser(line) {
          i3 = line.indexOf(":");
          key = utils.trim(line.substr(0, i3)).toLowerCase();
          val = utils.trim(line.substr(i3 + 1));
          if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
              return;
            }
            if (key === "set-cookie") {
              parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
            } else {
              parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
            }
          }
        });
        return parsed;
      };
    }
  });

  // ../../node_modules/axios/lib/helpers/isURLSameOrigin.js
  var require_isURLSameOrigin = __commonJS({
    "../../node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }() : function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }();
    }
  });

  // ../../node_modules/axios/lib/cancel/Cancel.js
  var require_Cancel = __commonJS({
    "../../node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
      "use strict";
      function Cancel(message) {
        this.message = message;
      }
      Cancel.prototype.toString = function toString2() {
        return "Cancel" + (this.message ? ": " + this.message : "");
      };
      Cancel.prototype.__CANCEL__ = true;
      module.exports = Cancel;
    }
  });

  // ../../node_modules/axios/lib/adapters/xhr.js
  var require_xhr = __commonJS({
    "../../node_modules/axios/lib/adapters/xhr.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var settle = require_settle();
      var cookies = require_cookies();
      var buildURL = require_buildURL();
      var buildFullPath = require_buildFullPath();
      var parseHeaders = require_parseHeaders();
      var isURLSameOrigin = require_isURLSameOrigin();
      var createError = require_createError();
      var defaults2 = require_defaults();
      var Cancel = require_Cancel();
      module.exports = function xhrAdapter(config2) {
        return new Promise(function dispatchXhrRequest(resolve, reject) {
          var requestData = config2.data;
          var requestHeaders = config2.headers;
          var responseType = config2.responseType;
          var onCanceled;
          function done() {
            if (config2.cancelToken) {
              config2.cancelToken.unsubscribe(onCanceled);
            }
            if (config2.signal) {
              config2.signal.removeEventListener("abort", onCanceled);
            }
          }
          if (utils.isFormData(requestData)) {
            delete requestHeaders["Content-Type"];
          }
          var request = new XMLHttpRequest();
          if (config2.auth) {
            var username = config2.auth.username || "";
            var password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
          }
          var fullPath = buildFullPath(config2.baseURL, config2.url);
          request.open(config2.method.toUpperCase(), buildURL(fullPath, config2.params, config2.paramsSerializer), true);
          request.timeout = config2.timeout;
          function onloadend() {
            if (!request) {
              return;
            }
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
              data: responseData,
              status: request.status,
              statusText: request.statusText,
              headers: responseHeaders,
              config: config2,
              request
            };
            settle(function _resolve(value) {
              resolve(value);
              done();
            }, function _reject(err) {
              reject(err);
              done();
            }, response);
            request = null;
          }
          if ("onloadend" in request) {
            request.onloadend = onloadend;
          } else {
            request.onreadystatechange = function handleLoad() {
              if (!request || request.readyState !== 4) {
                return;
              }
              if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                return;
              }
              setTimeout(onloadend);
            };
          }
          request.onabort = function handleAbort() {
            if (!request) {
              return;
            }
            reject(createError("Request aborted", config2, "ECONNABORTED", request));
            request = null;
          };
          request.onerror = function handleError() {
            reject(createError("Network Error", config2, null, request));
            request = null;
          };
          request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
            var transitional = config2.transitional || defaults2.transitional;
            if (config2.timeoutErrorMessage) {
              timeoutErrorMessage = config2.timeoutErrorMessage;
            }
            reject(createError(
              timeoutErrorMessage,
              config2,
              transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
              request
            ));
            request = null;
          };
          if (utils.isStandardBrowserEnv()) {
            var xsrfValue = (config2.withCredentials || isURLSameOrigin(fullPath)) && config2.xsrfCookieName ? cookies.read(config2.xsrfCookieName) : void 0;
            if (xsrfValue) {
              requestHeaders[config2.xsrfHeaderName] = xsrfValue;
            }
          }
          if ("setRequestHeader" in request) {
            utils.forEach(requestHeaders, function setRequestHeader(val, key) {
              if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
                delete requestHeaders[key];
              } else {
                request.setRequestHeader(key, val);
              }
            });
          }
          if (!utils.isUndefined(config2.withCredentials)) {
            request.withCredentials = !!config2.withCredentials;
          }
          if (responseType && responseType !== "json") {
            request.responseType = config2.responseType;
          }
          if (typeof config2.onDownloadProgress === "function") {
            request.addEventListener("progress", config2.onDownloadProgress);
          }
          if (typeof config2.onUploadProgress === "function" && request.upload) {
            request.upload.addEventListener("progress", config2.onUploadProgress);
          }
          if (config2.cancelToken || config2.signal) {
            onCanceled = function(cancel) {
              if (!request) {
                return;
              }
              reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
              request.abort();
              request = null;
            };
            config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
            if (config2.signal) {
              config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
            }
          }
          if (!requestData) {
            requestData = null;
          }
          request.send(requestData);
        });
      };
    }
  });

  // ../../node_modules/axios/lib/defaults.js
  var require_defaults = __commonJS({
    "../../node_modules/axios/lib/defaults.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var normalizeHeaderName = require_normalizeHeaderName();
      var enhanceError = require_enhanceError();
      var DEFAULT_CONTENT_TYPE = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      function setContentTypeIfUnset(headers, value) {
        if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
          headers["Content-Type"] = value;
        }
      }
      function getDefaultAdapter() {
        var adapter;
        if (typeof XMLHttpRequest !== "undefined") {
          adapter = require_xhr();
        } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
          adapter = require_xhr();
        }
        return adapter;
      }
      function stringifySafely(rawValue, parser, encoder) {
        if (utils.isString(rawValue)) {
          try {
            (parser || JSON.parse)(rawValue);
            return utils.trim(rawValue);
          } catch (e2) {
            if (e2.name !== "SyntaxError") {
              throw e2;
            }
          }
        }
        return (encoder || JSON.stringify)(rawValue);
      }
      var defaults2 = {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: getDefaultAdapter(),
        transformRequest: [function transformRequest(data, headers) {
          normalizeHeaderName(headers, "Accept");
          normalizeHeaderName(headers, "Content-Type");
          if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
            return data;
          }
          if (utils.isArrayBufferView(data)) {
            return data.buffer;
          }
          if (utils.isURLSearchParams(data)) {
            setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
            return data.toString();
          }
          if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
            setContentTypeIfUnset(headers, "application/json");
            return stringifySafely(data);
          }
          return data;
        }],
        transformResponse: [function transformResponse(data) {
          var transitional = this.transitional || defaults2.transitional;
          var silentJSONParsing = transitional && transitional.silentJSONParsing;
          var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
          var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
          if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
            try {
              return JSON.parse(data);
            } catch (e2) {
              if (strictJSONParsing) {
                if (e2.name === "SyntaxError") {
                  throw enhanceError(e2, this, "E_JSON_PARSE");
                }
                throw e2;
              }
            }
          }
          return data;
        }],
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: function validateStatus(status) {
          return status >= 200 && status < 300;
        },
        headers: {
          common: {
            "Accept": "application/json, text/plain, */*"
          }
        }
      };
      utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
        defaults2.headers[method] = {};
      });
      utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        defaults2.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
      });
      module.exports = defaults2;
    }
  });

  // ../../node_modules/axios/lib/core/transformData.js
  var require_transformData = __commonJS({
    "../../node_modules/axios/lib/core/transformData.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var defaults2 = require_defaults();
      module.exports = function transformData(data, headers, fns) {
        var context = this || defaults2;
        utils.forEach(fns, function transform(fn4) {
          data = fn4.call(context, data, headers);
        });
        return data;
      };
    }
  });

  // ../../node_modules/axios/lib/cancel/isCancel.js
  var require_isCancel = __commonJS({
    "../../node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
      "use strict";
      module.exports = function isCancel(value) {
        return !!(value && value.__CANCEL__);
      };
    }
  });

  // ../../node_modules/axios/lib/core/dispatchRequest.js
  var require_dispatchRequest = __commonJS({
    "../../node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var transformData = require_transformData();
      var isCancel = require_isCancel();
      var defaults2 = require_defaults();
      var Cancel = require_Cancel();
      function throwIfCancellationRequested(config2) {
        if (config2.cancelToken) {
          config2.cancelToken.throwIfRequested();
        }
        if (config2.signal && config2.signal.aborted) {
          throw new Cancel("canceled");
        }
      }
      module.exports = function dispatchRequest(config2) {
        throwIfCancellationRequested(config2);
        config2.headers = config2.headers || {};
        config2.data = transformData.call(
          config2,
          config2.data,
          config2.headers,
          config2.transformRequest
        );
        config2.headers = utils.merge(
          config2.headers.common || {},
          config2.headers[config2.method] || {},
          config2.headers
        );
        utils.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          function cleanHeaderConfig(method) {
            delete config2.headers[method];
          }
        );
        var adapter = config2.adapter || defaults2.adapter;
        return adapter(config2).then(function onAdapterResolution(response) {
          throwIfCancellationRequested(config2);
          response.data = transformData.call(
            config2,
            response.data,
            response.headers,
            config2.transformResponse
          );
          return response;
        }, function onAdapterRejection(reason) {
          if (!isCancel(reason)) {
            throwIfCancellationRequested(config2);
            if (reason && reason.response) {
              reason.response.data = transformData.call(
                config2,
                reason.response.data,
                reason.response.headers,
                config2.transformResponse
              );
            }
          }
          return Promise.reject(reason);
        });
      };
    }
  });

  // ../../node_modules/axios/lib/core/mergeConfig.js
  var require_mergeConfig = __commonJS({
    "../../node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = function mergeConfig2(config1, config2) {
        config2 = config2 || {};
        var config3 = {};
        function getMergedValue(target, source) {
          if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
            return utils.merge(target, source);
          } else if (utils.isPlainObject(source)) {
            return utils.merge({}, source);
          } else if (utils.isArray(source)) {
            return source.slice();
          }
          return source;
        }
        function mergeDeepProperties(prop) {
          if (!utils.isUndefined(config2[prop])) {
            return getMergedValue(config1[prop], config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            return getMergedValue(void 0, config1[prop]);
          }
        }
        function valueFromConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            return getMergedValue(void 0, config2[prop]);
          }
        }
        function defaultToConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            return getMergedValue(void 0, config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            return getMergedValue(void 0, config1[prop]);
          }
        }
        function mergeDirectKeys(prop) {
          if (prop in config2) {
            return getMergedValue(config1[prop], config2[prop]);
          } else if (prop in config1) {
            return getMergedValue(void 0, config1[prop]);
          }
        }
        var mergeMap = {
          "url": valueFromConfig2,
          "method": valueFromConfig2,
          "data": valueFromConfig2,
          "baseURL": defaultToConfig2,
          "transformRequest": defaultToConfig2,
          "transformResponse": defaultToConfig2,
          "paramsSerializer": defaultToConfig2,
          "timeout": defaultToConfig2,
          "timeoutMessage": defaultToConfig2,
          "withCredentials": defaultToConfig2,
          "adapter": defaultToConfig2,
          "responseType": defaultToConfig2,
          "xsrfCookieName": defaultToConfig2,
          "xsrfHeaderName": defaultToConfig2,
          "onUploadProgress": defaultToConfig2,
          "onDownloadProgress": defaultToConfig2,
          "decompress": defaultToConfig2,
          "maxContentLength": defaultToConfig2,
          "maxBodyLength": defaultToConfig2,
          "transport": defaultToConfig2,
          "httpAgent": defaultToConfig2,
          "httpsAgent": defaultToConfig2,
          "cancelToken": defaultToConfig2,
          "socketPath": defaultToConfig2,
          "responseEncoding": defaultToConfig2,
          "validateStatus": mergeDirectKeys
        };
        utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
          var merge = mergeMap[prop] || mergeDeepProperties;
          var configValue = merge(prop);
          utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config3[prop] = configValue);
        });
        return config3;
      };
    }
  });

  // ../../node_modules/axios/lib/env/data.js
  var require_data = __commonJS({
    "../../node_modules/axios/lib/env/data.js"(exports, module) {
      module.exports = {
        "version": "0.25.0"
      };
    }
  });

  // ../../node_modules/axios/lib/helpers/validator.js
  var require_validator = __commonJS({
    "../../node_modules/axios/lib/helpers/validator.js"(exports, module) {
      "use strict";
      var VERSION = require_data().version;
      var validators = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i3) {
        validators[type] = function validator(thing) {
          return typeof thing === type || "a" + (i3 < 1 ? "n " : " ") + type;
        };
      });
      var deprecatedWarnings = {};
      validators.transitional = function transitional(validator, version, message) {
        function formatMessage3(opt, desc) {
          return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
        }
        return function(value, opt, opts) {
          if (validator === false) {
            throw new Error(formatMessage3(opt, " has been removed" + (version ? " in " + version : "")));
          }
          if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            console.warn(
              formatMessage3(
                opt,
                " has been deprecated since v" + version + " and will be removed in the near future"
              )
            );
          }
          return validator ? validator(value, opt, opts) : true;
        };
      };
      function assertOptions(options, schema, allowUnknown) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        var keys = Object.keys(options);
        var i3 = keys.length;
        while (i3-- > 0) {
          var opt = keys[i3];
          var validator = schema[opt];
          if (validator) {
            var value = options[opt];
            var result = value === void 0 || validator(value, opt, options);
            if (result !== true) {
              throw new TypeError("option " + opt + " must be " + result);
            }
            continue;
          }
          if (allowUnknown !== true) {
            throw Error("Unknown option " + opt);
          }
        }
      }
      module.exports = {
        assertOptions,
        validators
      };
    }
  });

  // ../../node_modules/axios/lib/core/Axios.js
  var require_Axios = __commonJS({
    "../../node_modules/axios/lib/core/Axios.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var buildURL = require_buildURL();
      var InterceptorManager = require_InterceptorManager();
      var dispatchRequest = require_dispatchRequest();
      var mergeConfig2 = require_mergeConfig();
      var validator = require_validator();
      var validators = validator.validators;
      function Axios(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }
      Axios.prototype.request = function request(configOrUrl, config2) {
        if (typeof configOrUrl === "string") {
          config2 = config2 || {};
          config2.url = configOrUrl;
        } else {
          config2 = configOrUrl || {};
        }
        if (!config2.url) {
          throw new Error("Provided config url is not valid");
        }
        config2 = mergeConfig2(this.defaults, config2);
        if (config2.method) {
          config2.method = config2.method.toLowerCase();
        } else if (this.defaults.method) {
          config2.method = this.defaults.method.toLowerCase();
        } else {
          config2.method = "get";
        }
        var transitional = config2.transitional;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        var requestInterceptorChain = [];
        var synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        var responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        var promise;
        if (!synchronousRequestInterceptors) {
          var chain = [dispatchRequest, void 0];
          Array.prototype.unshift.apply(chain, requestInterceptorChain);
          chain = chain.concat(responseInterceptorChain);
          promise = Promise.resolve(config2);
          while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
          }
          return promise;
        }
        var newConfig = config2;
        while (requestInterceptorChain.length) {
          var onFulfilled = requestInterceptorChain.shift();
          var onRejected = requestInterceptorChain.shift();
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error2) {
            onRejected(error2);
            break;
          }
        }
        try {
          promise = dispatchRequest(newConfig);
        } catch (error2) {
          return Promise.reject(error2);
        }
        while (responseInterceptorChain.length) {
          promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
        }
        return promise;
      };
      Axios.prototype.getUri = function getUri(config2) {
        if (!config2.url) {
          throw new Error("Provided config url is not valid");
        }
        config2 = mergeConfig2(this.defaults, config2);
        return buildURL(config2.url, config2.params, config2.paramsSerializer).replace(/^\?/, "");
      };
      utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
        Axios.prototype[method] = function(url, config2) {
          return this.request(mergeConfig2(config2 || {}, {
            method,
            url,
            data: (config2 || {}).data
          }));
        };
      });
      utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        Axios.prototype[method] = function(url, data, config2) {
          return this.request(mergeConfig2(config2 || {}, {
            method,
            url,
            data
          }));
        };
      });
      module.exports = Axios;
    }
  });

  // ../../node_modules/axios/lib/cancel/CancelToken.js
  var require_CancelToken = __commonJS({
    "../../node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
      "use strict";
      var Cancel = require_Cancel();
      function CancelToken(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        var resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        var token = this;
        this.promise.then(function(cancel) {
          if (!token._listeners)
            return;
          var i3;
          var l3 = token._listeners.length;
          for (i3 = 0; i3 < l3; i3++) {
            token._listeners[i3](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = function(onfulfilled) {
          var _resolve;
          var promise = new Promise(function(resolve) {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message) {
          if (token.reason) {
            return;
          }
          token.reason = new Cancel(message);
          resolvePromise(token.reason);
        });
      }
      CancelToken.prototype.throwIfRequested = function throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      };
      CancelToken.prototype.subscribe = function subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      };
      CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        var index2 = this._listeners.indexOf(listener);
        if (index2 !== -1) {
          this._listeners.splice(index2, 1);
        }
      };
      CancelToken.source = function source() {
        var cancel;
        var token = new CancelToken(function executor(c3) {
          cancel = c3;
        });
        return {
          token,
          cancel
        };
      };
      module.exports = CancelToken;
    }
  });

  // ../../node_modules/axios/lib/helpers/spread.js
  var require_spread = __commonJS({
    "../../node_modules/axios/lib/helpers/spread.js"(exports, module) {
      "use strict";
      module.exports = function spread(callback) {
        return function wrap(arr) {
          return callback.apply(null, arr);
        };
      };
    }
  });

  // ../../node_modules/axios/lib/helpers/isAxiosError.js
  var require_isAxiosError = __commonJS({
    "../../node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = function isAxiosError(payload) {
        return utils.isObject(payload) && payload.isAxiosError === true;
      };
    }
  });

  // ../../node_modules/axios/lib/axios.js
  var require_axios = __commonJS({
    "../../node_modules/axios/lib/axios.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var bind = require_bind();
      var Axios = require_Axios();
      var mergeConfig2 = require_mergeConfig();
      var defaults2 = require_defaults();
      function createInstance(defaultConfig) {
        var context = new Axios(defaultConfig);
        var instance2 = bind(Axios.prototype.request, context);
        utils.extend(instance2, Axios.prototype, context);
        utils.extend(instance2, context);
        instance2.create = function create3(instanceConfig) {
          return createInstance(mergeConfig2(defaultConfig, instanceConfig));
        };
        return instance2;
      }
      var axios2 = createInstance(defaults2);
      axios2.Axios = Axios;
      axios2.Cancel = require_Cancel();
      axios2.CancelToken = require_CancelToken();
      axios2.isCancel = require_isCancel();
      axios2.VERSION = require_data().version;
      axios2.all = function all(promises) {
        return Promise.all(promises);
      };
      axios2.spread = require_spread();
      axios2.isAxiosError = require_isAxiosError();
      module.exports = axios2;
      module.exports.default = axios2;
    }
  });

  // ../../node_modules/axios/index.js
  var require_axios2 = __commonJS({
    "../../node_modules/axios/index.js"(exports, module) {
      module.exports = require_axios();
    }
  });

  // ../../node_modules/react-redux/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "../../node_modules/react-redux/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment7 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense6 = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer2(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement4(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment7;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense6;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement4;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // ../../node_modules/react-redux/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "../../node_modules/react-redux/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // ../../node_modules/lodash/isEqual.js
  var require_isEqual = __commonJS({
    "../../node_modules/lodash/isEqual.js"(exports, module) {
      var baseIsEqual = require_baseIsEqual();
      function isEqual5(value, other) {
        return baseIsEqual(value, other);
      }
      module.exports = isEqual5;
    }
  });

  // ../../node_modules/quill/dist/quill.js
  var require_quill = __commonJS({
    "../../node_modules/quill/dist/quill.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define([], factory);
        else if (typeof exports === "object")
          exports["Quill"] = factory();
        else
          root["Quill"] = factory();
      })(typeof self !== "undefined" ? self : exports, function() {
        return function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              i: moduleId,
              l: false,
              exports: {}
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, {
                configurable: false,
                enumerable: true,
                get: getter
              });
            }
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? function getDefault() {
              return module2["default"];
            } : function getModuleExports() {
              return module2;
            };
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 109);
        }([
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var container_1 = __webpack_require__(17);
            var format_1 = __webpack_require__(18);
            var leaf_1 = __webpack_require__(19);
            var scroll_1 = __webpack_require__(45);
            var inline_1 = __webpack_require__(46);
            var block_1 = __webpack_require__(47);
            var embed_1 = __webpack_require__(48);
            var text_1 = __webpack_require__(49);
            var attributor_1 = __webpack_require__(12);
            var class_1 = __webpack_require__(32);
            var style_1 = __webpack_require__(33);
            var store_1 = __webpack_require__(31);
            var Registry = __webpack_require__(1);
            var Parchment = {
              Scope: Registry.Scope,
              create: Registry.create,
              find: Registry.find,
              query: Registry.query,
              register: Registry.register,
              Container: container_1.default,
              Format: format_1.default,
              Leaf: leaf_1.default,
              Embed: embed_1.default,
              Scroll: scroll_1.default,
              Block: block_1.default,
              Inline: inline_1.default,
              Text: text_1.default,
              Attributor: {
                Attribute: attributor_1.default,
                Class: class_1.default,
                Style: style_1.default,
                Store: store_1.default
              }
            };
            exports2.default = Parchment;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var ParchmentError = function(_super) {
              __extends2(ParchmentError2, _super);
              function ParchmentError2(message) {
                var _this = this;
                message = "[Parchment] " + message;
                _this = _super.call(this, message) || this;
                _this.message = message;
                _this.name = _this.constructor.name;
                return _this;
              }
              return ParchmentError2;
            }(Error);
            exports2.ParchmentError = ParchmentError;
            var attributes = {};
            var classes = {};
            var tags = {};
            var types2 = {};
            exports2.DATA_KEY = "__blot";
            var Scope;
            (function(Scope2) {
              Scope2[Scope2["TYPE"] = 3] = "TYPE";
              Scope2[Scope2["LEVEL"] = 12] = "LEVEL";
              Scope2[Scope2["ATTRIBUTE"] = 13] = "ATTRIBUTE";
              Scope2[Scope2["BLOT"] = 14] = "BLOT";
              Scope2[Scope2["INLINE"] = 7] = "INLINE";
              Scope2[Scope2["BLOCK"] = 11] = "BLOCK";
              Scope2[Scope2["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
              Scope2[Scope2["INLINE_BLOT"] = 6] = "INLINE_BLOT";
              Scope2[Scope2["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
              Scope2[Scope2["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
              Scope2[Scope2["ANY"] = 15] = "ANY";
            })(Scope = exports2.Scope || (exports2.Scope = {}));
            function create3(input, value) {
              var match2 = query(input);
              if (match2 == null) {
                throw new ParchmentError("Unable to create " + input + " blot");
              }
              var BlotClass = match2;
              var node = input instanceof Node || input["nodeType"] === Node.TEXT_NODE ? input : BlotClass.create(value);
              return new BlotClass(node, value);
            }
            exports2.create = create3;
            function find2(node, bubble) {
              if (bubble === void 0) {
                bubble = false;
              }
              if (node == null)
                return null;
              if (node[exports2.DATA_KEY] != null)
                return node[exports2.DATA_KEY].blot;
              if (bubble)
                return find2(node.parentNode, bubble);
              return null;
            }
            exports2.find = find2;
            function query(query2, scope) {
              if (scope === void 0) {
                scope = Scope.ANY;
              }
              var match2;
              if (typeof query2 === "string") {
                match2 = types2[query2] || attributes[query2];
              } else if (query2 instanceof Text || query2["nodeType"] === Node.TEXT_NODE) {
                match2 = types2["text"];
              } else if (typeof query2 === "number") {
                if (query2 & Scope.LEVEL & Scope.BLOCK) {
                  match2 = types2["block"];
                } else if (query2 & Scope.LEVEL & Scope.INLINE) {
                  match2 = types2["inline"];
                }
              } else if (query2 instanceof HTMLElement) {
                var names = (query2.getAttribute("class") || "").split(/\s+/);
                for (var i3 in names) {
                  match2 = classes[names[i3]];
                  if (match2)
                    break;
                }
                match2 = match2 || tags[query2.tagName];
              }
              if (match2 == null)
                return null;
              if (scope & Scope.LEVEL & match2.scope && scope & Scope.TYPE & match2.scope)
                return match2;
              return null;
            }
            exports2.query = query;
            function register() {
              var Definitions = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                Definitions[_i] = arguments[_i];
              }
              if (Definitions.length > 1) {
                return Definitions.map(function(d4) {
                  return register(d4);
                });
              }
              var Definition = Definitions[0];
              if (typeof Definition.blotName !== "string" && typeof Definition.attrName !== "string") {
                throw new ParchmentError("Invalid definition");
              } else if (Definition.blotName === "abstract") {
                throw new ParchmentError("Cannot register abstract class");
              }
              types2[Definition.blotName || Definition.attrName] = Definition;
              if (typeof Definition.keyName === "string") {
                attributes[Definition.keyName] = Definition;
              } else {
                if (Definition.className != null) {
                  classes[Definition.className] = Definition;
                }
                if (Definition.tagName != null) {
                  if (Array.isArray(Definition.tagName)) {
                    Definition.tagName = Definition.tagName.map(function(tagName) {
                      return tagName.toUpperCase();
                    });
                  } else {
                    Definition.tagName = Definition.tagName.toUpperCase();
                  }
                  var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
                  tagNames.forEach(function(tag) {
                    if (tags[tag] == null || Definition.className == null) {
                      tags[tag] = Definition;
                    }
                  });
                }
              }
              return Definition;
            }
            exports2.register = register;
          },
          function(module2, exports2, __webpack_require__) {
            var diff = __webpack_require__(51);
            var equal = __webpack_require__(11);
            var extend = __webpack_require__(3);
            var op = __webpack_require__(20);
            var NULL_CHARACTER = String.fromCharCode(0);
            var Delta = function(ops) {
              if (Array.isArray(ops)) {
                this.ops = ops;
              } else if (ops != null && Array.isArray(ops.ops)) {
                this.ops = ops.ops;
              } else {
                this.ops = [];
              }
            };
            Delta.prototype.insert = function(text, attributes) {
              var newOp = {};
              if (text.length === 0)
                return this;
              newOp.insert = text;
              if (attributes != null && typeof attributes === "object" && Object.keys(attributes).length > 0) {
                newOp.attributes = attributes;
              }
              return this.push(newOp);
            };
            Delta.prototype["delete"] = function(length) {
              if (length <= 0)
                return this;
              return this.push({ "delete": length });
            };
            Delta.prototype.retain = function(length, attributes) {
              if (length <= 0)
                return this;
              var newOp = { retain: length };
              if (attributes != null && typeof attributes === "object" && Object.keys(attributes).length > 0) {
                newOp.attributes = attributes;
              }
              return this.push(newOp);
            };
            Delta.prototype.push = function(newOp) {
              var index2 = this.ops.length;
              var lastOp = this.ops[index2 - 1];
              newOp = extend(true, {}, newOp);
              if (typeof lastOp === "object") {
                if (typeof newOp["delete"] === "number" && typeof lastOp["delete"] === "number") {
                  this.ops[index2 - 1] = { "delete": lastOp["delete"] + newOp["delete"] };
                  return this;
                }
                if (typeof lastOp["delete"] === "number" && newOp.insert != null) {
                  index2 -= 1;
                  lastOp = this.ops[index2 - 1];
                  if (typeof lastOp !== "object") {
                    this.ops.unshift(newOp);
                    return this;
                  }
                }
                if (equal(newOp.attributes, lastOp.attributes)) {
                  if (typeof newOp.insert === "string" && typeof lastOp.insert === "string") {
                    this.ops[index2 - 1] = { insert: lastOp.insert + newOp.insert };
                    if (typeof newOp.attributes === "object")
                      this.ops[index2 - 1].attributes = newOp.attributes;
                    return this;
                  } else if (typeof newOp.retain === "number" && typeof lastOp.retain === "number") {
                    this.ops[index2 - 1] = { retain: lastOp.retain + newOp.retain };
                    if (typeof newOp.attributes === "object")
                      this.ops[index2 - 1].attributes = newOp.attributes;
                    return this;
                  }
                }
              }
              if (index2 === this.ops.length) {
                this.ops.push(newOp);
              } else {
                this.ops.splice(index2, 0, newOp);
              }
              return this;
            };
            Delta.prototype.chop = function() {
              var lastOp = this.ops[this.ops.length - 1];
              if (lastOp && lastOp.retain && !lastOp.attributes) {
                this.ops.pop();
              }
              return this;
            };
            Delta.prototype.filter = function(predicate) {
              return this.ops.filter(predicate);
            };
            Delta.prototype.forEach = function(predicate) {
              this.ops.forEach(predicate);
            };
            Delta.prototype.map = function(predicate) {
              return this.ops.map(predicate);
            };
            Delta.prototype.partition = function(predicate) {
              var passed = [], failed = [];
              this.forEach(function(op2) {
                var target = predicate(op2) ? passed : failed;
                target.push(op2);
              });
              return [passed, failed];
            };
            Delta.prototype.reduce = function(predicate, initial) {
              return this.ops.reduce(predicate, initial);
            };
            Delta.prototype.changeLength = function() {
              return this.reduce(function(length, elem) {
                if (elem.insert) {
                  return length + op.length(elem);
                } else if (elem.delete) {
                  return length - elem.delete;
                }
                return length;
              }, 0);
            };
            Delta.prototype.length = function() {
              return this.reduce(function(length, elem) {
                return length + op.length(elem);
              }, 0);
            };
            Delta.prototype.slice = function(start4, end3) {
              start4 = start4 || 0;
              if (typeof end3 !== "number")
                end3 = Infinity;
              var ops = [];
              var iter = op.iterator(this.ops);
              var index2 = 0;
              while (index2 < end3 && iter.hasNext()) {
                var nextOp;
                if (index2 < start4) {
                  nextOp = iter.next(start4 - index2);
                } else {
                  nextOp = iter.next(end3 - index2);
                  ops.push(nextOp);
                }
                index2 += op.length(nextOp);
              }
              return new Delta(ops);
            };
            Delta.prototype.compose = function(other) {
              var thisIter = op.iterator(this.ops);
              var otherIter = op.iterator(other.ops);
              var ops = [];
              var firstOther = otherIter.peek();
              if (firstOther != null && typeof firstOther.retain === "number" && firstOther.attributes == null) {
                var firstLeft = firstOther.retain;
                while (thisIter.peekType() === "insert" && thisIter.peekLength() <= firstLeft) {
                  firstLeft -= thisIter.peekLength();
                  ops.push(thisIter.next());
                }
                if (firstOther.retain - firstLeft > 0) {
                  otherIter.next(firstOther.retain - firstLeft);
                }
              }
              var delta = new Delta(ops);
              while (thisIter.hasNext() || otherIter.hasNext()) {
                if (otherIter.peekType() === "insert") {
                  delta.push(otherIter.next());
                } else if (thisIter.peekType() === "delete") {
                  delta.push(thisIter.next());
                } else {
                  var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                  var thisOp = thisIter.next(length);
                  var otherOp = otherIter.next(length);
                  if (typeof otherOp.retain === "number") {
                    var newOp = {};
                    if (typeof thisOp.retain === "number") {
                      newOp.retain = length;
                    } else {
                      newOp.insert = thisOp.insert;
                    }
                    var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === "number");
                    if (attributes)
                      newOp.attributes = attributes;
                    delta.push(newOp);
                    if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
                      var rest = new Delta(thisIter.rest());
                      return delta.concat(rest).chop();
                    }
                  } else if (typeof otherOp["delete"] === "number" && typeof thisOp.retain === "number") {
                    delta.push(otherOp);
                  }
                }
              }
              return delta.chop();
            };
            Delta.prototype.concat = function(other) {
              var delta = new Delta(this.ops.slice());
              if (other.ops.length > 0) {
                delta.push(other.ops[0]);
                delta.ops = delta.ops.concat(other.ops.slice(1));
              }
              return delta;
            };
            Delta.prototype.diff = function(other, index2) {
              if (this.ops === other.ops) {
                return new Delta();
              }
              var strings = [this, other].map(function(delta2) {
                return delta2.map(function(op2) {
                  if (op2.insert != null) {
                    return typeof op2.insert === "string" ? op2.insert : NULL_CHARACTER;
                  }
                  var prep = delta2 === other ? "on" : "with";
                  throw new Error("diff() called " + prep + " non-document");
                }).join("");
              });
              var delta = new Delta();
              var diffResult = diff(strings[0], strings[1], index2);
              var thisIter = op.iterator(this.ops);
              var otherIter = op.iterator(other.ops);
              diffResult.forEach(function(component) {
                var length = component[1].length;
                while (length > 0) {
                  var opLength = 0;
                  switch (component[0]) {
                    case diff.INSERT:
                      opLength = Math.min(otherIter.peekLength(), length);
                      delta.push(otherIter.next(opLength));
                      break;
                    case diff.DELETE:
                      opLength = Math.min(length, thisIter.peekLength());
                      thisIter.next(opLength);
                      delta["delete"](opLength);
                      break;
                    case diff.EQUAL:
                      opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
                      var thisOp = thisIter.next(opLength);
                      var otherOp = otherIter.next(opLength);
                      if (equal(thisOp.insert, otherOp.insert)) {
                        delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
                      } else {
                        delta.push(otherOp)["delete"](opLength);
                      }
                      break;
                  }
                  length -= opLength;
                }
              });
              return delta.chop();
            };
            Delta.prototype.eachLine = function(predicate, newline) {
              newline = newline || "\n";
              var iter = op.iterator(this.ops);
              var line = new Delta();
              var i3 = 0;
              while (iter.hasNext()) {
                if (iter.peekType() !== "insert")
                  return;
                var thisOp = iter.peek();
                var start4 = op.length(thisOp) - iter.peekLength();
                var index2 = typeof thisOp.insert === "string" ? thisOp.insert.indexOf(newline, start4) - start4 : -1;
                if (index2 < 0) {
                  line.push(iter.next());
                } else if (index2 > 0) {
                  line.push(iter.next(index2));
                } else {
                  if (predicate(line, iter.next(1).attributes || {}, i3) === false) {
                    return;
                  }
                  i3 += 1;
                  line = new Delta();
                }
              }
              if (line.length() > 0) {
                predicate(line, {}, i3);
              }
            };
            Delta.prototype.transform = function(other, priority) {
              priority = !!priority;
              if (typeof other === "number") {
                return this.transformPosition(other, priority);
              }
              var thisIter = op.iterator(this.ops);
              var otherIter = op.iterator(other.ops);
              var delta = new Delta();
              while (thisIter.hasNext() || otherIter.hasNext()) {
                if (thisIter.peekType() === "insert" && (priority || otherIter.peekType() !== "insert")) {
                  delta.retain(op.length(thisIter.next()));
                } else if (otherIter.peekType() === "insert") {
                  delta.push(otherIter.next());
                } else {
                  var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                  var thisOp = thisIter.next(length);
                  var otherOp = otherIter.next(length);
                  if (thisOp["delete"]) {
                    continue;
                  } else if (otherOp["delete"]) {
                    delta.push(otherOp);
                  } else {
                    delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
                  }
                }
              }
              return delta.chop();
            };
            Delta.prototype.transformPosition = function(index2, priority) {
              priority = !!priority;
              var thisIter = op.iterator(this.ops);
              var offset4 = 0;
              while (thisIter.hasNext() && offset4 <= index2) {
                var length = thisIter.peekLength();
                var nextType = thisIter.peekType();
                thisIter.next();
                if (nextType === "delete") {
                  index2 -= Math.min(length, index2 - offset4);
                  continue;
                } else if (nextType === "insert" && (offset4 < index2 || !priority)) {
                  index2 += length;
                }
                offset4 += length;
              }
              return index2;
            };
            module2.exports = Delta;
          },
          function(module2, exports2) {
            "use strict";
            var hasOwn = Object.prototype.hasOwnProperty;
            var toStr = Object.prototype.toString;
            var defineProperty = Object.defineProperty;
            var gOPD = Object.getOwnPropertyDescriptor;
            var isArray = function isArray2(arr) {
              if (typeof Array.isArray === "function") {
                return Array.isArray(arr);
              }
              return toStr.call(arr) === "[object Array]";
            };
            var isPlainObject4 = function isPlainObject5(obj) {
              if (!obj || toStr.call(obj) !== "[object Object]") {
                return false;
              }
              var hasOwnConstructor = hasOwn.call(obj, "constructor");
              var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
              if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
                return false;
              }
              var key;
              for (key in obj) {
              }
              return typeof key === "undefined" || hasOwn.call(obj, key);
            };
            var setProperty = function setProperty2(target, options) {
              if (defineProperty && options.name === "__proto__") {
                defineProperty(target, options.name, {
                  enumerable: true,
                  configurable: true,
                  value: options.newValue,
                  writable: true
                });
              } else {
                target[options.name] = options.newValue;
              }
            };
            var getProperty = function getProperty2(obj, name) {
              if (name === "__proto__") {
                if (!hasOwn.call(obj, name)) {
                  return void 0;
                } else if (gOPD) {
                  return gOPD(obj, name).value;
                }
              }
              return obj[name];
            };
            module2.exports = function extend() {
              var options, name, src, copy, copyIsArray, clone;
              var target = arguments[0];
              var i3 = 1;
              var length = arguments.length;
              var deep = false;
              if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i3 = 2;
              }
              if (target == null || typeof target !== "object" && typeof target !== "function") {
                target = {};
              }
              for (; i3 < length; ++i3) {
                options = arguments[i3];
                if (options != null) {
                  for (name in options) {
                    src = getProperty(target, name);
                    copy = getProperty(options, name);
                    if (target !== copy) {
                      if (deep && copy && (isPlainObject4(copy) || (copyIsArray = isArray(copy)))) {
                        if (copyIsArray) {
                          copyIsArray = false;
                          clone = src && isArray(src) ? src : [];
                        } else {
                          clone = src && isPlainObject4(src) ? src : {};
                        }
                        setProperty(target, { name, newValue: extend(deep, clone, copy) });
                      } else if (typeof copy !== "undefined") {
                        setProperty(target, { name, newValue: copy });
                      }
                    }
                  }
                }
              }
              return target;
            };
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.BlockEmbed = exports2.bubbleFormats = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var NEWLINE_LENGTH = 1;
            var BlockEmbed = function(_Parchment$Embed) {
              _inherits(BlockEmbed2, _Parchment$Embed);
              function BlockEmbed2() {
                _classCallCheck(this, BlockEmbed2);
                return _possibleConstructorReturn(this, (BlockEmbed2.__proto__ || Object.getPrototypeOf(BlockEmbed2)).apply(this, arguments));
              }
              _createClass(BlockEmbed2, [{
                key: "attach",
                value: function attach() {
                  _get(BlockEmbed2.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed2.prototype), "attach", this).call(this);
                  this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
                }
              }, {
                key: "delta",
                value: function delta() {
                  return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
                }
              }, {
                key: "format",
                value: function format2(name, value) {
                  var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
                  if (attribute != null) {
                    this.attributes.attribute(attribute, value);
                  }
                }
              }, {
                key: "formatAt",
                value: function formatAt(index2, length, name, value) {
                  this.format(name, value);
                }
              }, {
                key: "insertAt",
                value: function insertAt(index2, value, def) {
                  if (typeof value === "string" && value.endsWith("\n")) {
                    var block = _parchment2.default.create(Block2.blotName);
                    this.parent.insertBefore(block, index2 === 0 ? this : this.next);
                    block.insertAt(0, value.slice(0, -1));
                  } else {
                    _get(BlockEmbed2.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed2.prototype), "insertAt", this).call(this, index2, value, def);
                  }
                }
              }]);
              return BlockEmbed2;
            }(_parchment2.default.Embed);
            BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
            var Block2 = function(_Parchment$Block) {
              _inherits(Block3, _Parchment$Block);
              function Block3(domNode) {
                _classCallCheck(this, Block3);
                var _this2 = _possibleConstructorReturn(this, (Block3.__proto__ || Object.getPrototypeOf(Block3)).call(this, domNode));
                _this2.cache = {};
                return _this2;
              }
              _createClass(Block3, [{
                key: "delta",
                value: function delta() {
                  if (this.cache.delta == null) {
                    this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function(delta2, leaf) {
                      if (leaf.length() === 0) {
                        return delta2;
                      } else {
                        return delta2.insert(leaf.value(), bubbleFormats(leaf));
                      }
                    }, new _quillDelta2.default()).insert("\n", bubbleFormats(this));
                  }
                  return this.cache.delta;
                }
              }, {
                key: "deleteAt",
                value: function deleteAt(index2, length) {
                  _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "deleteAt", this).call(this, index2, length);
                  this.cache = {};
                }
              }, {
                key: "formatAt",
                value: function formatAt(index2, length, name, value) {
                  if (length <= 0)
                    return;
                  if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                    if (index2 + length === this.length()) {
                      this.format(name, value);
                    }
                  } else {
                    _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "formatAt", this).call(this, index2, Math.min(length, this.length() - index2 - 1), name, value);
                  }
                  this.cache = {};
                }
              }, {
                key: "insertAt",
                value: function insertAt(index2, value, def) {
                  if (def != null)
                    return _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "insertAt", this).call(this, index2, value, def);
                  if (value.length === 0)
                    return;
                  var lines = value.split("\n");
                  var text = lines.shift();
                  if (text.length > 0) {
                    if (index2 < this.length() - 1 || this.children.tail == null) {
                      _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "insertAt", this).call(this, Math.min(index2, this.length() - 1), text);
                    } else {
                      this.children.tail.insertAt(this.children.tail.length(), text);
                    }
                    this.cache = {};
                  }
                  var block = this;
                  lines.reduce(function(index3, line) {
                    block = block.split(index3, true);
                    block.insertAt(0, line);
                    return line.length;
                  }, index2 + text.length);
                }
              }, {
                key: "insertBefore",
                value: function insertBefore(blot, ref2) {
                  var head = this.children.head;
                  _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "insertBefore", this).call(this, blot, ref2);
                  if (head instanceof _break2.default) {
                    head.remove();
                  }
                  this.cache = {};
                }
              }, {
                key: "length",
                value: function length() {
                  if (this.cache.length == null) {
                    this.cache.length = _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "length", this).call(this) + NEWLINE_LENGTH;
                  }
                  return this.cache.length;
                }
              }, {
                key: "moveChildren",
                value: function moveChildren(target, ref2) {
                  _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "moveChildren", this).call(this, target, ref2);
                  this.cache = {};
                }
              }, {
                key: "optimize",
                value: function optimize(context) {
                  _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "optimize", this).call(this, context);
                  this.cache = {};
                }
              }, {
                key: "path",
                value: function path(index2) {
                  return _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "path", this).call(this, index2, true);
                }
              }, {
                key: "removeChild",
                value: function removeChild(child) {
                  _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "removeChild", this).call(this, child);
                  this.cache = {};
                }
              }, {
                key: "split",
                value: function split(index2) {
                  var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                  if (force && (index2 === 0 || index2 >= this.length() - NEWLINE_LENGTH)) {
                    var clone = this.clone();
                    if (index2 === 0) {
                      this.parent.insertBefore(clone, this);
                      return this;
                    } else {
                      this.parent.insertBefore(clone, this.next);
                      return clone;
                    }
                  } else {
                    var next = _get(Block3.prototype.__proto__ || Object.getPrototypeOf(Block3.prototype), "split", this).call(this, index2, force);
                    this.cache = {};
                    return next;
                  }
                }
              }]);
              return Block3;
            }(_parchment2.default.Block);
            Block2.blotName = "block";
            Block2.tagName = "P";
            Block2.defaultChild = "break";
            Block2.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];
            function bubbleFormats(blot) {
              var formats = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              if (blot == null)
                return formats;
              if (typeof blot.formats === "function") {
                formats = (0, _extend2.default)(formats, blot.formats());
              }
              if (blot.parent == null || blot.parent.blotName == "scroll" || blot.parent.statics.scope !== blot.statics.scope) {
                return formats;
              }
              return bubbleFormats(blot.parent, formats);
            }
            exports2.bubbleFormats = bubbleFormats;
            exports2.BlockEmbed = BlockEmbed;
            exports2.default = Block2;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.overload = exports2.expandConfig = void 0;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            __webpack_require__(50);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _editor = __webpack_require__(14);
            var _editor2 = _interopRequireDefault(_editor);
            var _emitter3 = __webpack_require__(8);
            var _emitter4 = _interopRequireDefault(_emitter3);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _selection = __webpack_require__(15);
            var _selection2 = _interopRequireDefault(_selection);
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _theme = __webpack_require__(34);
            var _theme2 = _interopRequireDefault(_theme);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty2(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var debug = (0, _logger2.default)("quill");
            var Quill2 = function() {
              _createClass(Quill3, null, [{
                key: "debug",
                value: function debug2(limit) {
                  if (limit === true) {
                    limit = "log";
                  }
                  _logger2.default.level(limit);
                }
              }, {
                key: "find",
                value: function find2(node) {
                  return node.__quill || _parchment2.default.find(node);
                }
              }, {
                key: "import",
                value: function _import(name) {
                  if (this.imports[name] == null) {
                    debug.error("Cannot import " + name + ". Are you sure it was registered?");
                  }
                  return this.imports[name];
                }
              }, {
                key: "register",
                value: function register(path, target) {
                  var _this = this;
                  var overwrite = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                  if (typeof path !== "string") {
                    var name = path.attrName || path.blotName;
                    if (typeof name === "string") {
                      this.register("formats/" + name, path, target);
                    } else {
                      Object.keys(path).forEach(function(key) {
                        _this.register(key, path[key], target);
                      });
                    }
                  } else {
                    if (this.imports[path] != null && !overwrite) {
                      debug.warn("Overwriting " + path + " with", target);
                    }
                    this.imports[path] = target;
                    if ((path.startsWith("blots/") || path.startsWith("formats/")) && target.blotName !== "abstract") {
                      _parchment2.default.register(target);
                    } else if (path.startsWith("modules") && typeof target.register === "function") {
                      target.register();
                    }
                  }
                }
              }]);
              function Quill3(container) {
                var _this2 = this;
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                _classCallCheck(this, Quill3);
                this.options = expandConfig(container, options);
                this.container = this.options.container;
                if (this.container == null) {
                  return debug.error("Invalid Quill container", container);
                }
                if (this.options.debug) {
                  Quill3.debug(this.options.debug);
                }
                var html = this.container.innerHTML.trim();
                this.container.classList.add("ql-container");
                this.container.innerHTML = "";
                this.container.__quill = this;
                this.root = this.addContainer("ql-editor");
                this.root.classList.add("ql-blank");
                this.root.setAttribute("data-gramm", false);
                this.scrollingContainer = this.options.scrollingContainer || this.root;
                this.emitter = new _emitter4.default();
                this.scroll = _parchment2.default.create(this.root, {
                  emitter: this.emitter,
                  whitelist: this.options.formats
                });
                this.editor = new _editor2.default(this.scroll);
                this.selection = new _selection2.default(this.scroll, this.emitter);
                this.theme = new this.options.theme(this, this.options);
                this.keyboard = this.theme.addModule("keyboard");
                this.clipboard = this.theme.addModule("clipboard");
                this.history = this.theme.addModule("history");
                this.theme.init();
                this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type) {
                  if (type === _emitter4.default.events.TEXT_CHANGE) {
                    _this2.root.classList.toggle("ql-blank", _this2.editor.isBlank());
                  }
                });
                this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function(source, mutations) {
                  var range = _this2.selection.lastRange;
                  var index2 = range && range.length === 0 ? range.index : void 0;
                  modify.call(_this2, function() {
                    return _this2.editor.update(null, mutations, index2);
                  }, source);
                });
                var contents = this.clipboard.convert(`<div class='ql-editor' style="white-space: normal;">` + html + "<p><br></p></div>");
                this.setContents(contents);
                this.history.clear();
                if (this.options.placeholder) {
                  this.root.setAttribute("data-placeholder", this.options.placeholder);
                }
                if (this.options.readOnly) {
                  this.disable();
                }
              }
              _createClass(Quill3, [{
                key: "addContainer",
                value: function addContainer(container) {
                  var refNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  if (typeof container === "string") {
                    var className = container;
                    container = document.createElement("div");
                    container.classList.add(className);
                  }
                  this.container.insertBefore(container, refNode);
                  return container;
                }
              }, {
                key: "blur",
                value: function blur() {
                  this.selection.setRange(null);
                }
              }, {
                key: "deleteText",
                value: function deleteText(index2, length, source) {
                  var _this3 = this;
                  var _overload = overload(index2, length, source);
                  var _overload2 = _slicedToArray(_overload, 4);
                  index2 = _overload2[0];
                  length = _overload2[1];
                  source = _overload2[3];
                  return modify.call(this, function() {
                    return _this3.editor.deleteText(index2, length);
                  }, source, index2, -1 * length);
                }
              }, {
                key: "disable",
                value: function disable() {
                  this.enable(false);
                }
              }, {
                key: "enable",
                value: function enable() {
                  var enabled = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                  this.scroll.enable(enabled);
                  this.container.classList.toggle("ql-disabled", !enabled);
                }
              }, {
                key: "focus",
                value: function focus2() {
                  var scrollTop = this.scrollingContainer.scrollTop;
                  this.selection.focus();
                  this.scrollingContainer.scrollTop = scrollTop;
                  this.scrollIntoView();
                }
              }, {
                key: "format",
                value: function format2(name, value) {
                  var _this4 = this;
                  var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _emitter4.default.sources.API;
                  return modify.call(this, function() {
                    var range = _this4.getSelection(true);
                    var change = new _quillDelta2.default();
                    if (range == null) {
                      return change;
                    } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                      change = _this4.editor.formatLine(range.index, range.length, _defineProperty2({}, name, value));
                    } else if (range.length === 0) {
                      _this4.selection.format(name, value);
                      return change;
                    } else {
                      change = _this4.editor.formatText(range.index, range.length, _defineProperty2({}, name, value));
                    }
                    _this4.setSelection(range, _emitter4.default.sources.SILENT);
                    return change;
                  }, source);
                }
              }, {
                key: "formatLine",
                value: function formatLine(index2, length, name, value, source) {
                  var _this5 = this;
                  var formats = void 0;
                  var _overload3 = overload(index2, length, name, value, source);
                  var _overload4 = _slicedToArray(_overload3, 4);
                  index2 = _overload4[0];
                  length = _overload4[1];
                  formats = _overload4[2];
                  source = _overload4[3];
                  return modify.call(this, function() {
                    return _this5.editor.formatLine(index2, length, formats);
                  }, source, index2, 0);
                }
              }, {
                key: "formatText",
                value: function formatText(index2, length, name, value, source) {
                  var _this6 = this;
                  var formats = void 0;
                  var _overload5 = overload(index2, length, name, value, source);
                  var _overload6 = _slicedToArray(_overload5, 4);
                  index2 = _overload6[0];
                  length = _overload6[1];
                  formats = _overload6[2];
                  source = _overload6[3];
                  return modify.call(this, function() {
                    return _this6.editor.formatText(index2, length, formats);
                  }, source, index2, 0);
                }
              }, {
                key: "getBounds",
                value: function getBounds(index2) {
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                  var bounds = void 0;
                  if (typeof index2 === "number") {
                    bounds = this.selection.getBounds(index2, length);
                  } else {
                    bounds = this.selection.getBounds(index2.index, index2.length);
                  }
                  var containerBounds = this.container.getBoundingClientRect();
                  return {
                    bottom: bounds.bottom - containerBounds.top,
                    height: bounds.height,
                    left: bounds.left - containerBounds.left,
                    right: bounds.right - containerBounds.left,
                    top: bounds.top - containerBounds.top,
                    width: bounds.width
                  };
                }
              }, {
                key: "getContents",
                value: function getContents() {
                  var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getLength() - index2;
                  var _overload7 = overload(index2, length);
                  var _overload8 = _slicedToArray(_overload7, 2);
                  index2 = _overload8[0];
                  length = _overload8[1];
                  return this.editor.getContents(index2, length);
                }
              }, {
                key: "getFormat",
                value: function getFormat() {
                  var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getSelection(true);
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                  if (typeof index2 === "number") {
                    return this.editor.getFormat(index2, length);
                  } else {
                    return this.editor.getFormat(index2.index, index2.length);
                  }
                }
              }, {
                key: "getIndex",
                value: function getIndex(blot) {
                  return blot.offset(this.scroll);
                }
              }, {
                key: "getLength",
                value: function getLength() {
                  return this.scroll.length();
                }
              }, {
                key: "getLeaf",
                value: function getLeaf(index2) {
                  return this.scroll.leaf(index2);
                }
              }, {
                key: "getLine",
                value: function getLine(index2) {
                  return this.scroll.line(index2);
                }
              }, {
                key: "getLines",
                value: function getLines() {
                  var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Number.MAX_VALUE;
                  if (typeof index2 !== "number") {
                    return this.scroll.lines(index2.index, index2.length);
                  } else {
                    return this.scroll.lines(index2, length);
                  }
                }
              }, {
                key: "getModule",
                value: function getModule(name) {
                  return this.theme.modules[name];
                }
              }, {
                key: "getSelection",
                value: function getSelection() {
                  var focus2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  if (focus2)
                    this.focus();
                  this.update();
                  return this.selection.getRange()[0];
                }
              }, {
                key: "getText",
                value: function getText() {
                  var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getLength() - index2;
                  var _overload9 = overload(index2, length);
                  var _overload10 = _slicedToArray(_overload9, 2);
                  index2 = _overload10[0];
                  length = _overload10[1];
                  return this.editor.getText(index2, length);
                }
              }, {
                key: "hasFocus",
                value: function hasFocus() {
                  return this.selection.hasFocus();
                }
              }, {
                key: "insertEmbed",
                value: function insertEmbed(index2, embed, value) {
                  var _this7 = this;
                  var source = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Quill3.sources.API;
                  return modify.call(this, function() {
                    return _this7.editor.insertEmbed(index2, embed, value);
                  }, source, index2);
                }
              }, {
                key: "insertText",
                value: function insertText(index2, text, name, value, source) {
                  var _this8 = this;
                  var formats = void 0;
                  var _overload11 = overload(index2, 0, name, value, source);
                  var _overload12 = _slicedToArray(_overload11, 4);
                  index2 = _overload12[0];
                  formats = _overload12[2];
                  source = _overload12[3];
                  return modify.call(this, function() {
                    return _this8.editor.insertText(index2, text, formats);
                  }, source, index2, text.length);
                }
              }, {
                key: "isEnabled",
                value: function isEnabled() {
                  return !this.container.classList.contains("ql-disabled");
                }
              }, {
                key: "off",
                value: function off() {
                  return this.emitter.off.apply(this.emitter, arguments);
                }
              }, {
                key: "on",
                value: function on2() {
                  return this.emitter.on.apply(this.emitter, arguments);
                }
              }, {
                key: "once",
                value: function once() {
                  return this.emitter.once.apply(this.emitter, arguments);
                }
              }, {
                key: "pasteHTML",
                value: function pasteHTML(index2, html, source) {
                  this.clipboard.dangerouslyPasteHTML(index2, html, source);
                }
              }, {
                key: "removeFormat",
                value: function removeFormat(index2, length, source) {
                  var _this9 = this;
                  var _overload13 = overload(index2, length, source);
                  var _overload14 = _slicedToArray(_overload13, 4);
                  index2 = _overload14[0];
                  length = _overload14[1];
                  source = _overload14[3];
                  return modify.call(this, function() {
                    return _this9.editor.removeFormat(index2, length);
                  }, source, index2);
                }
              }, {
                key: "scrollIntoView",
                value: function scrollIntoView() {
                  this.selection.scrollIntoView(this.scrollingContainer);
                }
              }, {
                key: "setContents",
                value: function setContents(delta) {
                  var _this10 = this;
                  var source = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _emitter4.default.sources.API;
                  return modify.call(this, function() {
                    delta = new _quillDelta2.default(delta);
                    var length = _this10.getLength();
                    var deleted = _this10.editor.deleteText(0, length);
                    var applied = _this10.editor.applyDelta(delta);
                    var lastOp = applied.ops[applied.ops.length - 1];
                    if (lastOp != null && typeof lastOp.insert === "string" && lastOp.insert[lastOp.insert.length - 1] === "\n") {
                      _this10.editor.deleteText(_this10.getLength() - 1, 1);
                      applied.delete(1);
                    }
                    var ret = deleted.compose(applied);
                    return ret;
                  }, source);
                }
              }, {
                key: "setSelection",
                value: function setSelection(index2, length, source) {
                  if (index2 == null) {
                    this.selection.setRange(null, length || Quill3.sources.API);
                  } else {
                    var _overload15 = overload(index2, length, source);
                    var _overload16 = _slicedToArray(_overload15, 4);
                    index2 = _overload16[0];
                    length = _overload16[1];
                    source = _overload16[3];
                    this.selection.setRange(new _selection.Range(index2, length), source);
                    if (source !== _emitter4.default.sources.SILENT) {
                      this.selection.scrollIntoView(this.scrollingContainer);
                    }
                  }
                }
              }, {
                key: "setText",
                value: function setText(text) {
                  var source = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _emitter4.default.sources.API;
                  var delta = new _quillDelta2.default().insert(text);
                  return this.setContents(delta, source);
                }
              }, {
                key: "update",
                value: function update2() {
                  var source = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _emitter4.default.sources.USER;
                  var change = this.scroll.update(source);
                  this.selection.update(source);
                  return change;
                }
              }, {
                key: "updateContents",
                value: function updateContents(delta) {
                  var _this11 = this;
                  var source = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _emitter4.default.sources.API;
                  return modify.call(this, function() {
                    delta = new _quillDelta2.default(delta);
                    return _this11.editor.applyDelta(delta, source);
                  }, source, true);
                }
              }]);
              return Quill3;
            }();
            Quill2.DEFAULTS = {
              bounds: null,
              formats: null,
              modules: {},
              placeholder: "",
              readOnly: false,
              scrollingContainer: null,
              strict: true,
              theme: "default"
            };
            Quill2.events = _emitter4.default.events;
            Quill2.sources = _emitter4.default.sources;
            Quill2.version = false ? "dev" : "1.3.7";
            Quill2.imports = {
              "delta": _quillDelta2.default,
              "parchment": _parchment2.default,
              "core/module": _module2.default,
              "core/theme": _theme2.default
            };
            function expandConfig(container, userConfig) {
              userConfig = (0, _extend2.default)(true, {
                container,
                modules: {
                  clipboard: true,
                  keyboard: true,
                  history: true
                }
              }, userConfig);
              if (!userConfig.theme || userConfig.theme === Quill2.DEFAULTS.theme) {
                userConfig.theme = _theme2.default;
              } else {
                userConfig.theme = Quill2.import("themes/" + userConfig.theme);
                if (userConfig.theme == null) {
                  throw new Error("Invalid theme " + userConfig.theme + ". Did you register it?");
                }
              }
              var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
              [themeConfig, userConfig].forEach(function(config2) {
                config2.modules = config2.modules || {};
                Object.keys(config2.modules).forEach(function(module3) {
                  if (config2.modules[module3] === true) {
                    config2.modules[module3] = {};
                  }
                });
              });
              var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
              var moduleConfig = moduleNames.reduce(function(config2, name) {
                var moduleClass = Quill2.import("modules/" + name);
                if (moduleClass == null) {
                  debug.error("Cannot load " + name + " module. Are you sure you registered it?");
                } else {
                  config2[name] = moduleClass.DEFAULTS || {};
                }
                return config2;
              }, {});
              if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
                userConfig.modules.toolbar = {
                  container: userConfig.modules.toolbar
                };
              }
              userConfig = (0, _extend2.default)(true, {}, Quill2.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
              ["bounds", "container", "scrollingContainer"].forEach(function(key) {
                if (typeof userConfig[key] === "string") {
                  userConfig[key] = document.querySelector(userConfig[key]);
                }
              });
              userConfig.modules = Object.keys(userConfig.modules).reduce(function(config2, name) {
                if (userConfig.modules[name]) {
                  config2[name] = userConfig.modules[name];
                }
                return config2;
              }, {});
              return userConfig;
            }
            function modify(modifier, source, index2, shift3) {
              if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
                return new _quillDelta2.default();
              }
              var range = index2 == null ? null : this.getSelection();
              var oldDelta = this.editor.delta;
              var change = modifier();
              if (range != null) {
                if (index2 === true)
                  index2 = range.index;
                if (shift3 == null) {
                  range = shiftRange(range, change, source);
                } else if (shift3 !== 0) {
                  range = shiftRange(range, index2, shift3, source);
                }
                this.setSelection(range, _emitter4.default.sources.SILENT);
              }
              if (change.length() > 0) {
                var _emitter;
                var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
                (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
                if (source !== _emitter4.default.sources.SILENT) {
                  var _emitter2;
                  (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                }
              }
              return change;
            }
            function overload(index2, length, name, value, source) {
              var formats = {};
              if (typeof index2.index === "number" && typeof index2.length === "number") {
                if (typeof length !== "number") {
                  source = value, value = name, name = length, length = index2.length, index2 = index2.index;
                } else {
                  length = index2.length, index2 = index2.index;
                }
              } else if (typeof length !== "number") {
                source = value, value = name, name = length, length = 0;
              }
              if ((typeof name === "undefined" ? "undefined" : _typeof(name)) === "object") {
                formats = name;
                source = value;
              } else if (typeof name === "string") {
                if (value != null) {
                  formats[name] = value;
                } else {
                  source = name;
                }
              }
              source = source || _emitter4.default.sources.API;
              return [index2, length, formats, source];
            }
            function shiftRange(range, index2, length, source) {
              if (range == null)
                return null;
              var start4 = void 0, end3 = void 0;
              if (index2 instanceof _quillDelta2.default) {
                var _map = [range.index, range.index + range.length].map(function(pos) {
                  return index2.transformPosition(pos, source !== _emitter4.default.sources.USER);
                });
                var _map2 = _slicedToArray(_map, 2);
                start4 = _map2[0];
                end3 = _map2[1];
              } else {
                var _map3 = [range.index, range.index + range.length].map(function(pos) {
                  if (pos < index2 || pos === index2 && source === _emitter4.default.sources.USER)
                    return pos;
                  if (length >= 0) {
                    return pos + length;
                  } else {
                    return Math.max(index2, pos + length);
                  }
                });
                var _map4 = _slicedToArray(_map3, 2);
                start4 = _map4[0];
                end3 = _map4[1];
              }
              return new _selection.Range(start4, end3 - start4);
            }
            exports2.expandConfig = expandConfig;
            exports2.overload = overload;
            exports2.default = Quill2;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Inline = function(_Parchment$Inline) {
              _inherits(Inline2, _Parchment$Inline);
              function Inline2() {
                _classCallCheck(this, Inline2);
                return _possibleConstructorReturn(this, (Inline2.__proto__ || Object.getPrototypeOf(Inline2)).apply(this, arguments));
              }
              _createClass(Inline2, [{
                key: "formatAt",
                value: function formatAt(index2, length, name, value) {
                  if (Inline2.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
                    var blot = this.isolate(index2, length);
                    if (value) {
                      blot.wrap(name, value);
                    }
                  } else {
                    _get(Inline2.prototype.__proto__ || Object.getPrototypeOf(Inline2.prototype), "formatAt", this).call(this, index2, length, name, value);
                  }
                }
              }, {
                key: "optimize",
                value: function optimize(context) {
                  _get(Inline2.prototype.__proto__ || Object.getPrototypeOf(Inline2.prototype), "optimize", this).call(this, context);
                  if (this.parent instanceof Inline2 && Inline2.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
                    var parent = this.parent.isolate(this.offset(), this.length());
                    this.moveChildren(parent);
                    parent.wrap(this);
                  }
                }
              }], [{
                key: "compare",
                value: function compare(self2, other) {
                  var selfIndex = Inline2.order.indexOf(self2);
                  var otherIndex = Inline2.order.indexOf(other);
                  if (selfIndex >= 0 || otherIndex >= 0) {
                    return selfIndex - otherIndex;
                  } else if (self2 === other) {
                    return 0;
                  } else if (self2 < other) {
                    return -1;
                  } else {
                    return 1;
                  }
                }
              }]);
              return Inline2;
            }(_parchment2.default.Inline);
            Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
            Inline.order = [
              "cursor",
              "inline",
              "underline",
              "strike",
              "italic",
              "bold",
              "script",
              "link",
              "code"
            ];
            exports2.default = Inline;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TextBlot = function(_Parchment$Text) {
              _inherits(TextBlot2, _Parchment$Text);
              function TextBlot2() {
                _classCallCheck(this, TextBlot2);
                return _possibleConstructorReturn(this, (TextBlot2.__proto__ || Object.getPrototypeOf(TextBlot2)).apply(this, arguments));
              }
              return TextBlot2;
            }(_parchment2.default.Text);
            exports2.default = TextBlot;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _eventemitter = __webpack_require__(54);
            var _eventemitter2 = _interopRequireDefault(_eventemitter);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)("quill:events");
            var EVENTS = ["selectionchange", "mousedown", "mouseup", "click"];
            EVENTS.forEach(function(eventName) {
              document.addEventListener(eventName, function() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                [].slice.call(document.querySelectorAll(".ql-container")).forEach(function(node) {
                  if (node.__quill && node.__quill.emitter) {
                    var _node$__quill$emitter;
                    (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
                  }
                });
              });
            });
            var Emitter = function(_EventEmitter) {
              _inherits(Emitter2, _EventEmitter);
              function Emitter2() {
                _classCallCheck(this, Emitter2);
                var _this = _possibleConstructorReturn(this, (Emitter2.__proto__ || Object.getPrototypeOf(Emitter2)).call(this));
                _this.listeners = {};
                _this.on("error", debug.error);
                return _this;
              }
              _createClass(Emitter2, [{
                key: "emit",
                value: function emit() {
                  debug.log.apply(debug, arguments);
                  _get(Emitter2.prototype.__proto__ || Object.getPrototypeOf(Emitter2.prototype), "emit", this).apply(this, arguments);
                }
              }, {
                key: "handleDOM",
                value: function handleDOM(event) {
                  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    args[_key2 - 1] = arguments[_key2];
                  }
                  (this.listeners[event.type] || []).forEach(function(_ref) {
                    var node = _ref.node, handler = _ref.handler;
                    if (event.target === node || node.contains(event.target)) {
                      handler.apply(void 0, [event].concat(args));
                    }
                  });
                }
              }, {
                key: "listenDOM",
                value: function listenDOM(eventName, node, handler) {
                  if (!this.listeners[eventName]) {
                    this.listeners[eventName] = [];
                  }
                  this.listeners[eventName].push({ node, handler });
                }
              }]);
              return Emitter2;
            }(_eventemitter2.default);
            Emitter.events = {
              EDITOR_CHANGE: "editor-change",
              SCROLL_BEFORE_UPDATE: "scroll-before-update",
              SCROLL_OPTIMIZE: "scroll-optimize",
              SCROLL_UPDATE: "scroll-update",
              SELECTION_CHANGE: "selection-change",
              TEXT_CHANGE: "text-change"
            };
            Emitter.sources = {
              API: "api",
              SILENT: "silent",
              USER: "user"
            };
            exports2.default = Emitter;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var Module = function Module2(quill) {
              var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              _classCallCheck(this, Module2);
              this.quill = quill;
              this.options = options;
            };
            Module.DEFAULTS = {};
            exports2.default = Module;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var levels = ["error", "warn", "log", "info"];
            var level = "warn";
            function debug(method) {
              if (levels.indexOf(method) <= levels.indexOf(level)) {
                var _console;
                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                (_console = console)[method].apply(_console, args);
              }
            }
            function namespace(ns) {
              return levels.reduce(function(logger3, method) {
                logger3[method] = debug.bind(console, method, ns);
                return logger3;
              }, {});
            }
            debug.level = namespace.level = function(newLevel) {
              level = newLevel;
            };
            exports2.default = namespace;
          },
          function(module2, exports2, __webpack_require__) {
            var pSlice = Array.prototype.slice;
            var objectKeys = __webpack_require__(52);
            var isArguments = __webpack_require__(53);
            var deepEqual2 = module2.exports = function(actual, expected, opts) {
              if (!opts)
                opts = {};
              if (actual === expected) {
                return true;
              } else if (actual instanceof Date && expected instanceof Date) {
                return actual.getTime() === expected.getTime();
              } else if (!actual || !expected || typeof actual != "object" && typeof expected != "object") {
                return opts.strict ? actual === expected : actual == expected;
              } else {
                return objEquiv(actual, expected, opts);
              }
            };
            function isUndefinedOrNull(value) {
              return value === null || value === void 0;
            }
            function isBuffer(x3) {
              if (!x3 || typeof x3 !== "object" || typeof x3.length !== "number")
                return false;
              if (typeof x3.copy !== "function" || typeof x3.slice !== "function") {
                return false;
              }
              if (x3.length > 0 && typeof x3[0] !== "number")
                return false;
              return true;
            }
            function objEquiv(a3, b3, opts) {
              var i3, key;
              if (isUndefinedOrNull(a3) || isUndefinedOrNull(b3))
                return false;
              if (a3.prototype !== b3.prototype)
                return false;
              if (isArguments(a3)) {
                if (!isArguments(b3)) {
                  return false;
                }
                a3 = pSlice.call(a3);
                b3 = pSlice.call(b3);
                return deepEqual2(a3, b3, opts);
              }
              if (isBuffer(a3)) {
                if (!isBuffer(b3)) {
                  return false;
                }
                if (a3.length !== b3.length)
                  return false;
                for (i3 = 0; i3 < a3.length; i3++) {
                  if (a3[i3] !== b3[i3])
                    return false;
                }
                return true;
              }
              try {
                var ka = objectKeys(a3), kb = objectKeys(b3);
              } catch (e2) {
                return false;
              }
              if (ka.length != kb.length)
                return false;
              ka.sort();
              kb.sort();
              for (i3 = ka.length - 1; i3 >= 0; i3--) {
                if (ka[i3] != kb[i3])
                  return false;
              }
              for (i3 = ka.length - 1; i3 >= 0; i3--) {
                key = ka[i3];
                if (!deepEqual2(a3[key], b3[key], opts))
                  return false;
              }
              return typeof a3 === typeof b3;
            }
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var Registry = __webpack_require__(1);
            var Attributor = function() {
              function Attributor2(attrName, keyName, options) {
                if (options === void 0) {
                  options = {};
                }
                this.attrName = attrName;
                this.keyName = keyName;
                var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
                if (options.scope != null) {
                  this.scope = options.scope & Registry.Scope.LEVEL | attributeBit;
                } else {
                  this.scope = Registry.Scope.ATTRIBUTE;
                }
                if (options.whitelist != null)
                  this.whitelist = options.whitelist;
              }
              Attributor2.keys = function(node) {
                return [].map.call(node.attributes, function(item) {
                  return item.name;
                });
              };
              Attributor2.prototype.add = function(node, value) {
                if (!this.canAdd(node, value))
                  return false;
                node.setAttribute(this.keyName, value);
                return true;
              };
              Attributor2.prototype.canAdd = function(node, value) {
                var match2 = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
                if (match2 == null)
                  return false;
                if (this.whitelist == null)
                  return true;
                if (typeof value === "string") {
                  return this.whitelist.indexOf(value.replace(/["']/g, "")) > -1;
                } else {
                  return this.whitelist.indexOf(value) > -1;
                }
              };
              Attributor2.prototype.remove = function(node) {
                node.removeAttribute(this.keyName);
              };
              Attributor2.prototype.value = function(node) {
                var value = node.getAttribute(this.keyName);
                if (this.canAdd(node, value) && value) {
                  return value;
                }
                return "";
              };
              return Attributor2;
            }();
            exports2.default = Attributor;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.Code = void 0;
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Code = function(_Inline) {
              _inherits(Code2, _Inline);
              function Code2() {
                _classCallCheck(this, Code2);
                return _possibleConstructorReturn(this, (Code2.__proto__ || Object.getPrototypeOf(Code2)).apply(this, arguments));
              }
              return Code2;
            }(_inline2.default);
            Code.blotName = "code";
            Code.tagName = "CODE";
            var CodeBlock = function(_Block) {
              _inherits(CodeBlock2, _Block);
              function CodeBlock2() {
                _classCallCheck(this, CodeBlock2);
                return _possibleConstructorReturn(this, (CodeBlock2.__proto__ || Object.getPrototypeOf(CodeBlock2)).apply(this, arguments));
              }
              _createClass(CodeBlock2, [{
                key: "delta",
                value: function delta() {
                  var _this3 = this;
                  var text = this.domNode.textContent;
                  if (text.endsWith("\n")) {
                    text = text.slice(0, -1);
                  }
                  return text.split("\n").reduce(function(delta2, frag) {
                    return delta2.insert(frag).insert("\n", _this3.formats());
                  }, new _quillDelta2.default());
                }
              }, {
                key: "format",
                value: function format2(name, value) {
                  if (name === this.statics.blotName && value)
                    return;
                  var _descendant = this.descendant(_text2.default, this.length() - 1), _descendant2 = _slicedToArray(_descendant, 1), text = _descendant2[0];
                  if (text != null) {
                    text.deleteAt(text.length() - 1, 1);
                  }
                  _get(CodeBlock2.prototype.__proto__ || Object.getPrototypeOf(CodeBlock2.prototype), "format", this).call(this, name, value);
                }
              }, {
                key: "formatAt",
                value: function formatAt(index2, length, name, value) {
                  if (length === 0)
                    return;
                  if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
                    return;
                  }
                  var nextNewline = this.newlineIndex(index2);
                  if (nextNewline < 0 || nextNewline >= index2 + length)
                    return;
                  var prevNewline = this.newlineIndex(index2, true) + 1;
                  var isolateLength = nextNewline - prevNewline + 1;
                  var blot = this.isolate(prevNewline, isolateLength);
                  var next = blot.next;
                  blot.format(name, value);
                  if (next instanceof CodeBlock2) {
                    next.formatAt(0, index2 - prevNewline + length - isolateLength, name, value);
                  }
                }
              }, {
                key: "insertAt",
                value: function insertAt(index2, value, def) {
                  if (def != null)
                    return;
                  var _descendant3 = this.descendant(_text2.default, index2), _descendant4 = _slicedToArray(_descendant3, 2), text = _descendant4[0], offset4 = _descendant4[1];
                  text.insertAt(offset4, value);
                }
              }, {
                key: "length",
                value: function length() {
                  var length2 = this.domNode.textContent.length;
                  if (!this.domNode.textContent.endsWith("\n")) {
                    return length2 + 1;
                  }
                  return length2;
                }
              }, {
                key: "newlineIndex",
                value: function newlineIndex(searchIndex) {
                  var reverse = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                  if (!reverse) {
                    var offset4 = this.domNode.textContent.slice(searchIndex).indexOf("\n");
                    return offset4 > -1 ? searchIndex + offset4 : -1;
                  } else {
                    return this.domNode.textContent.slice(0, searchIndex).lastIndexOf("\n");
                  }
                }
              }, {
                key: "optimize",
                value: function optimize(context) {
                  if (!this.domNode.textContent.endsWith("\n")) {
                    this.appendChild(_parchment2.default.create("text", "\n"));
                  }
                  _get(CodeBlock2.prototype.__proto__ || Object.getPrototypeOf(CodeBlock2.prototype), "optimize", this).call(this, context);
                  var next = this.next;
                  if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
                    next.optimize(context);
                    next.moveChildren(this);
                    next.remove();
                  }
                }
              }, {
                key: "replace",
                value: function replace(target) {
                  _get(CodeBlock2.prototype.__proto__ || Object.getPrototypeOf(CodeBlock2.prototype), "replace", this).call(this, target);
                  [].slice.call(this.domNode.querySelectorAll("*")).forEach(function(node) {
                    var blot = _parchment2.default.find(node);
                    if (blot == null) {
                      node.parentNode.removeChild(node);
                    } else if (blot instanceof _parchment2.default.Embed) {
                      blot.remove();
                    } else {
                      blot.unwrap();
                    }
                  });
                }
              }], [{
                key: "create",
                value: function create3(value) {
                  var domNode = _get(CodeBlock2.__proto__ || Object.getPrototypeOf(CodeBlock2), "create", this).call(this, value);
                  domNode.setAttribute("spellcheck", false);
                  return domNode;
                }
              }, {
                key: "formats",
                value: function formats() {
                  return true;
                }
              }]);
              return CodeBlock2;
            }(_block2.default);
            CodeBlock.blotName = "code-block";
            CodeBlock.tagName = "PRE";
            CodeBlock.TAB = "  ";
            exports2.Code = Code;
            exports2.default = CodeBlock;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _op = __webpack_require__(20);
            var _op2 = _interopRequireDefault(_op);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _cursor = __webpack_require__(24);
            var _cursor2 = _interopRequireDefault(_cursor);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _clone = __webpack_require__(21);
            var _clone2 = _interopRequireDefault(_clone);
            var _deepEqual = __webpack_require__(11);
            var _deepEqual2 = _interopRequireDefault(_deepEqual);
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty2(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var ASCII = /^[ -~]*$/;
            var Editor2 = function() {
              function Editor3(scroll3) {
                _classCallCheck(this, Editor3);
                this.scroll = scroll3;
                this.delta = this.getDelta();
              }
              _createClass(Editor3, [{
                key: "applyDelta",
                value: function applyDelta(delta) {
                  var _this = this;
                  var consumeNextNewline = false;
                  this.scroll.update();
                  var scrollLength = this.scroll.length();
                  this.scroll.batchStart();
                  delta = normalizeDelta(delta);
                  delta.reduce(function(index2, op) {
                    var length = op.retain || op.delete || op.insert.length || 1;
                    var attributes = op.attributes || {};
                    if (op.insert != null) {
                      if (typeof op.insert === "string") {
                        var text = op.insert;
                        if (text.endsWith("\n") && consumeNextNewline) {
                          consumeNextNewline = false;
                          text = text.slice(0, -1);
                        }
                        if (index2 >= scrollLength && !text.endsWith("\n")) {
                          consumeNextNewline = true;
                        }
                        _this.scroll.insertAt(index2, text);
                        var _scroll$line = _this.scroll.line(index2), _scroll$line2 = _slicedToArray(_scroll$line, 2), line = _scroll$line2[0], offset4 = _scroll$line2[1];
                        var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
                        if (line instanceof _block2.default) {
                          var _line$descendant = line.descendant(_parchment2.default.Leaf, offset4), _line$descendant2 = _slicedToArray(_line$descendant, 1), leaf = _line$descendant2[0];
                          formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
                        }
                        attributes = _op2.default.attributes.diff(formats, attributes) || {};
                      } else if (_typeof(op.insert) === "object") {
                        var key = Object.keys(op.insert)[0];
                        if (key == null)
                          return index2;
                        _this.scroll.insertAt(index2, key, op.insert[key]);
                      }
                      scrollLength += length;
                    }
                    Object.keys(attributes).forEach(function(name) {
                      _this.scroll.formatAt(index2, length, name, attributes[name]);
                    });
                    return index2 + length;
                  }, 0);
                  delta.reduce(function(index2, op) {
                    if (typeof op.delete === "number") {
                      _this.scroll.deleteAt(index2, op.delete);
                      return index2;
                    }
                    return index2 + (op.retain || op.insert.length || 1);
                  }, 0);
                  this.scroll.batchEnd();
                  return this.update(delta);
                }
              }, {
                key: "deleteText",
                value: function deleteText(index2, length) {
                  this.scroll.deleteAt(index2, length);
                  return this.update(new _quillDelta2.default().retain(index2).delete(length));
                }
              }, {
                key: "formatLine",
                value: function formatLine(index2, length) {
                  var _this2 = this;
                  var formats = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                  this.scroll.update();
                  Object.keys(formats).forEach(function(format2) {
                    if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format2])
                      return;
                    var lines = _this2.scroll.lines(index2, Math.max(length, 1));
                    var lengthRemaining = length;
                    lines.forEach(function(line) {
                      var lineLength = line.length();
                      if (!(line instanceof _code2.default)) {
                        line.format(format2, formats[format2]);
                      } else {
                        var codeIndex = index2 - line.offset(_this2.scroll);
                        var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
                        line.formatAt(codeIndex, codeLength, format2, formats[format2]);
                      }
                      lengthRemaining -= lineLength;
                    });
                  });
                  this.scroll.optimize();
                  return this.update(new _quillDelta2.default().retain(index2).retain(length, (0, _clone2.default)(formats)));
                }
              }, {
                key: "formatText",
                value: function formatText(index2, length) {
                  var _this3 = this;
                  var formats = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                  Object.keys(formats).forEach(function(format2) {
                    _this3.scroll.formatAt(index2, length, format2, formats[format2]);
                  });
                  return this.update(new _quillDelta2.default().retain(index2).retain(length, (0, _clone2.default)(formats)));
                }
              }, {
                key: "getContents",
                value: function getContents(index2, length) {
                  return this.delta.slice(index2, index2 + length);
                }
              }, {
                key: "getDelta",
                value: function getDelta() {
                  return this.scroll.lines().reduce(function(delta, line) {
                    return delta.concat(line.delta());
                  }, new _quillDelta2.default());
                }
              }, {
                key: "getFormat",
                value: function getFormat(index2) {
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                  var lines = [], leaves = [];
                  if (length === 0) {
                    this.scroll.path(index2).forEach(function(path) {
                      var _path = _slicedToArray(path, 1), blot = _path[0];
                      if (blot instanceof _block2.default) {
                        lines.push(blot);
                      } else if (blot instanceof _parchment2.default.Leaf) {
                        leaves.push(blot);
                      }
                    });
                  } else {
                    lines = this.scroll.lines(index2, length);
                    leaves = this.scroll.descendants(_parchment2.default.Leaf, index2, length);
                  }
                  var formatsArr = [lines, leaves].map(function(blots) {
                    if (blots.length === 0)
                      return {};
                    var formats = (0, _block.bubbleFormats)(blots.shift());
                    while (Object.keys(formats).length > 0) {
                      var blot = blots.shift();
                      if (blot == null)
                        return formats;
                      formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
                    }
                    return formats;
                  });
                  return _extend2.default.apply(_extend2.default, formatsArr);
                }
              }, {
                key: "getText",
                value: function getText(index2, length) {
                  return this.getContents(index2, length).filter(function(op) {
                    return typeof op.insert === "string";
                  }).map(function(op) {
                    return op.insert;
                  }).join("");
                }
              }, {
                key: "insertEmbed",
                value: function insertEmbed(index2, embed, value) {
                  this.scroll.insertAt(index2, embed, value);
                  return this.update(new _quillDelta2.default().retain(index2).insert(_defineProperty2({}, embed, value)));
                }
              }, {
                key: "insertText",
                value: function insertText(index2, text) {
                  var _this4 = this;
                  var formats = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                  text = text.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
                  this.scroll.insertAt(index2, text);
                  Object.keys(formats).forEach(function(format2) {
                    _this4.scroll.formatAt(index2, text.length, format2, formats[format2]);
                  });
                  return this.update(new _quillDelta2.default().retain(index2).insert(text, (0, _clone2.default)(formats)));
                }
              }, {
                key: "isBlank",
                value: function isBlank() {
                  if (this.scroll.children.length == 0)
                    return true;
                  if (this.scroll.children.length > 1)
                    return false;
                  var block = this.scroll.children.head;
                  if (block.statics.blotName !== _block2.default.blotName)
                    return false;
                  if (block.children.length > 1)
                    return false;
                  return block.children.head instanceof _break2.default;
                }
              }, {
                key: "removeFormat",
                value: function removeFormat(index2, length) {
                  var text = this.getText(index2, length);
                  var _scroll$line3 = this.scroll.line(index2 + length), _scroll$line4 = _slicedToArray(_scroll$line3, 2), line = _scroll$line4[0], offset4 = _scroll$line4[1];
                  var suffixLength = 0, suffix2 = new _quillDelta2.default();
                  if (line != null) {
                    if (!(line instanceof _code2.default)) {
                      suffixLength = line.length() - offset4;
                    } else {
                      suffixLength = line.newlineIndex(offset4) - offset4 + 1;
                    }
                    suffix2 = line.delta().slice(offset4, offset4 + suffixLength - 1).insert("\n");
                  }
                  var contents = this.getContents(index2, length + suffixLength);
                  var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix2));
                  var delta = new _quillDelta2.default().retain(index2).concat(diff);
                  return this.applyDelta(delta);
                }
              }, {
                key: "update",
                value: function update2(change) {
                  var mutations = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
                  var cursorIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
                  var oldDelta = this.delta;
                  if (mutations.length === 1 && mutations[0].type === "characterData" && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
                    var textBlot = _parchment2.default.find(mutations[0].target);
                    var formats = (0, _block.bubbleFormats)(textBlot);
                    var index2 = textBlot.offset(this.scroll);
                    var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, "");
                    var oldText = new _quillDelta2.default().insert(oldValue);
                    var newText = new _quillDelta2.default().insert(textBlot.value());
                    var diffDelta = new _quillDelta2.default().retain(index2).concat(oldText.diff(newText, cursorIndex));
                    change = diffDelta.reduce(function(delta, op) {
                      if (op.insert) {
                        return delta.insert(op.insert, formats);
                      } else {
                        return delta.push(op);
                      }
                    }, new _quillDelta2.default());
                    this.delta = oldDelta.compose(change);
                  } else {
                    this.delta = this.getDelta();
                    if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
                      change = oldDelta.diff(this.delta, cursorIndex);
                    }
                  }
                  return change;
                }
              }]);
              return Editor3;
            }();
            function combineFormats(formats, combined) {
              return Object.keys(combined).reduce(function(merged, name) {
                if (formats[name] == null)
                  return merged;
                if (combined[name] === formats[name]) {
                  merged[name] = combined[name];
                } else if (Array.isArray(combined[name])) {
                  if (combined[name].indexOf(formats[name]) < 0) {
                    merged[name] = combined[name].concat([formats[name]]);
                  }
                } else {
                  merged[name] = [combined[name], formats[name]];
                }
                return merged;
              }, {});
            }
            function normalizeDelta(delta) {
              return delta.reduce(function(delta2, op) {
                if (op.insert === 1) {
                  var attributes = (0, _clone2.default)(op.attributes);
                  delete attributes["image"];
                  return delta2.insert({ image: op.attributes.image }, attributes);
                }
                if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
                  op = (0, _clone2.default)(op);
                  if (op.attributes.list) {
                    op.attributes.list = "ordered";
                  } else {
                    op.attributes.list = "bullet";
                    delete op.attributes.bullet;
                  }
                }
                if (typeof op.insert === "string") {
                  var text = op.insert.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
                  return delta2.insert(text, op.attributes);
                }
                return delta2.push(op);
              }, new _quillDelta2.default());
            }
            exports2.default = Editor2;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.Range = void 0;
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _clone = __webpack_require__(21);
            var _clone2 = _interopRequireDefault(_clone);
            var _deepEqual = __webpack_require__(11);
            var _deepEqual2 = _interopRequireDefault(_deepEqual);
            var _emitter3 = __webpack_require__(8);
            var _emitter4 = _interopRequireDefault(_emitter3);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _toConsumableArray(arr) {
              if (Array.isArray(arr)) {
                for (var i3 = 0, arr2 = Array(arr.length); i3 < arr.length; i3++) {
                  arr2[i3] = arr[i3];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var debug = (0, _logger2.default)("quill:selection");
            var Range = function Range2(index2) {
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
              _classCallCheck(this, Range2);
              this.index = index2;
              this.length = length;
            };
            var Selection = function() {
              function Selection2(scroll3, emitter) {
                var _this = this;
                _classCallCheck(this, Selection2);
                this.emitter = emitter;
                this.scroll = scroll3;
                this.composing = false;
                this.mouseDown = false;
                this.root = this.scroll.domNode;
                this.cursor = _parchment2.default.create("cursor", this);
                this.lastRange = this.savedRange = new Range(0, 0);
                this.handleComposition();
                this.handleDragging();
                this.emitter.listenDOM("selectionchange", document, function() {
                  if (!_this.mouseDown) {
                    setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
                  }
                });
                this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type, delta) {
                  if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
                    _this.update(_emitter4.default.sources.SILENT);
                  }
                });
                this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function() {
                  if (!_this.hasFocus())
                    return;
                  var native = _this.getNativeRange();
                  if (native == null)
                    return;
                  if (native.start.node === _this.cursor.textNode)
                    return;
                  _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function() {
                    try {
                      _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
                    } catch (ignored) {
                    }
                  });
                });
                this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function(mutations, context) {
                  if (context.range) {
                    var _context$range = context.range, startNode = _context$range.startNode, startOffset = _context$range.startOffset, endNode = _context$range.endNode, endOffset = _context$range.endOffset;
                    _this.setNativeRange(startNode, startOffset, endNode, endOffset);
                  }
                });
                this.update(_emitter4.default.sources.SILENT);
              }
              _createClass(Selection2, [{
                key: "handleComposition",
                value: function handleComposition() {
                  var _this2 = this;
                  this.root.addEventListener("compositionstart", function() {
                    _this2.composing = true;
                  });
                  this.root.addEventListener("compositionend", function() {
                    _this2.composing = false;
                    if (_this2.cursor.parent) {
                      var range = _this2.cursor.restore();
                      if (!range)
                        return;
                      setTimeout(function() {
                        _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
                      }, 1);
                    }
                  });
                }
              }, {
                key: "handleDragging",
                value: function handleDragging() {
                  var _this3 = this;
                  this.emitter.listenDOM("mousedown", document.body, function() {
                    _this3.mouseDown = true;
                  });
                  this.emitter.listenDOM("mouseup", document.body, function() {
                    _this3.mouseDown = false;
                    _this3.update(_emitter4.default.sources.USER);
                  });
                }
              }, {
                key: "focus",
                value: function focus2() {
                  if (this.hasFocus())
                    return;
                  this.root.focus();
                  this.setRange(this.savedRange);
                }
              }, {
                key: "format",
                value: function format2(_format, value) {
                  if (this.scroll.whitelist != null && !this.scroll.whitelist[_format])
                    return;
                  this.scroll.update();
                  var nativeRange = this.getNativeRange();
                  if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK))
                    return;
                  if (nativeRange.start.node !== this.cursor.textNode) {
                    var blot = _parchment2.default.find(nativeRange.start.node, false);
                    if (blot == null)
                      return;
                    if (blot instanceof _parchment2.default.Leaf) {
                      var after = blot.split(nativeRange.start.offset);
                      blot.parent.insertBefore(this.cursor, after);
                    } else {
                      blot.insertBefore(this.cursor, nativeRange.start.node);
                    }
                    this.cursor.attach();
                  }
                  this.cursor.format(_format, value);
                  this.scroll.optimize();
                  this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
                  this.update();
                }
              }, {
                key: "getBounds",
                value: function getBounds(index2) {
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                  var scrollLength = this.scroll.length();
                  index2 = Math.min(index2, scrollLength - 1);
                  length = Math.min(index2 + length, scrollLength - 1) - index2;
                  var node = void 0, _scroll$leaf = this.scroll.leaf(index2), _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2), leaf = _scroll$leaf2[0], offset4 = _scroll$leaf2[1];
                  if (leaf == null)
                    return null;
                  var _leaf$position = leaf.position(offset4, true);
                  var _leaf$position2 = _slicedToArray(_leaf$position, 2);
                  node = _leaf$position2[0];
                  offset4 = _leaf$position2[1];
                  var range = document.createRange();
                  if (length > 0) {
                    range.setStart(node, offset4);
                    var _scroll$leaf3 = this.scroll.leaf(index2 + length);
                    var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);
                    leaf = _scroll$leaf4[0];
                    offset4 = _scroll$leaf4[1];
                    if (leaf == null)
                      return null;
                    var _leaf$position3 = leaf.position(offset4, true);
                    var _leaf$position4 = _slicedToArray(_leaf$position3, 2);
                    node = _leaf$position4[0];
                    offset4 = _leaf$position4[1];
                    range.setEnd(node, offset4);
                    return range.getBoundingClientRect();
                  } else {
                    var side = "left";
                    var rect = void 0;
                    if (node instanceof Text) {
                      if (offset4 < node.data.length) {
                        range.setStart(node, offset4);
                        range.setEnd(node, offset4 + 1);
                      } else {
                        range.setStart(node, offset4 - 1);
                        range.setEnd(node, offset4);
                        side = "right";
                      }
                      rect = range.getBoundingClientRect();
                    } else {
                      rect = leaf.domNode.getBoundingClientRect();
                      if (offset4 > 0)
                        side = "right";
                    }
                    return {
                      bottom: rect.top + rect.height,
                      height: rect.height,
                      left: rect[side],
                      right: rect[side],
                      top: rect.top,
                      width: 0
                    };
                  }
                }
              }, {
                key: "getNativeRange",
                value: function getNativeRange() {
                  var selection = document.getSelection();
                  if (selection == null || selection.rangeCount <= 0)
                    return null;
                  var nativeRange = selection.getRangeAt(0);
                  if (nativeRange == null)
                    return null;
                  var range = this.normalizeNative(nativeRange);
                  debug.info("getNativeRange", range);
                  return range;
                }
              }, {
                key: "getRange",
                value: function getRange() {
                  var normalized = this.getNativeRange();
                  if (normalized == null)
                    return [null, null];
                  var range = this.normalizedToRange(normalized);
                  return [range, normalized];
                }
              }, {
                key: "hasFocus",
                value: function hasFocus() {
                  return document.activeElement === this.root;
                }
              }, {
                key: "normalizedToRange",
                value: function normalizedToRange(range) {
                  var _this4 = this;
                  var positions = [[range.start.node, range.start.offset]];
                  if (!range.native.collapsed) {
                    positions.push([range.end.node, range.end.offset]);
                  }
                  var indexes = positions.map(function(position3) {
                    var _position = _slicedToArray(position3, 2), node = _position[0], offset4 = _position[1];
                    var blot = _parchment2.default.find(node, true);
                    var index2 = blot.offset(_this4.scroll);
                    if (offset4 === 0) {
                      return index2;
                    } else if (blot instanceof _parchment2.default.Container) {
                      return index2 + blot.length();
                    } else {
                      return index2 + blot.index(node, offset4);
                    }
                  });
                  var end3 = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
                  var start4 = Math.min.apply(Math, [end3].concat(_toConsumableArray(indexes)));
                  return new Range(start4, end3 - start4);
                }
              }, {
                key: "normalizeNative",
                value: function normalizeNative(nativeRange) {
                  if (!contains2(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains2(this.root, nativeRange.endContainer)) {
                    return null;
                  }
                  var range = {
                    start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
                    end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
                    native: nativeRange
                  };
                  [range.start, range.end].forEach(function(position3) {
                    var node = position3.node, offset4 = position3.offset;
                    while (!(node instanceof Text) && node.childNodes.length > 0) {
                      if (node.childNodes.length > offset4) {
                        node = node.childNodes[offset4];
                        offset4 = 0;
                      } else if (node.childNodes.length === offset4) {
                        node = node.lastChild;
                        offset4 = node instanceof Text ? node.data.length : node.childNodes.length + 1;
                      } else {
                        break;
                      }
                    }
                    position3.node = node, position3.offset = offset4;
                  });
                  return range;
                }
              }, {
                key: "rangeToNative",
                value: function rangeToNative(range) {
                  var _this5 = this;
                  var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
                  var args = [];
                  var scrollLength = this.scroll.length();
                  indexes.forEach(function(index2, i3) {
                    index2 = Math.min(scrollLength - 1, index2);
                    var node = void 0, _scroll$leaf5 = _this5.scroll.leaf(index2), _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2), leaf = _scroll$leaf6[0], offset4 = _scroll$leaf6[1];
                    var _leaf$position5 = leaf.position(offset4, i3 !== 0);
                    var _leaf$position6 = _slicedToArray(_leaf$position5, 2);
                    node = _leaf$position6[0];
                    offset4 = _leaf$position6[1];
                    args.push(node, offset4);
                  });
                  if (args.length < 2) {
                    args = args.concat(args);
                  }
                  return args;
                }
              }, {
                key: "scrollIntoView",
                value: function scrollIntoView(scrollingContainer) {
                  var range = this.lastRange;
                  if (range == null)
                    return;
                  var bounds = this.getBounds(range.index, range.length);
                  if (bounds == null)
                    return;
                  var limit = this.scroll.length() - 1;
                  var _scroll$line = this.scroll.line(Math.min(range.index, limit)), _scroll$line2 = _slicedToArray(_scroll$line, 1), first = _scroll$line2[0];
                  var last = first;
                  if (range.length > 0) {
                    var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));
                    var _scroll$line4 = _slicedToArray(_scroll$line3, 1);
                    last = _scroll$line4[0];
                  }
                  if (first == null || last == null)
                    return;
                  var scrollBounds = scrollingContainer.getBoundingClientRect();
                  if (bounds.top < scrollBounds.top) {
                    scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
                  } else if (bounds.bottom > scrollBounds.bottom) {
                    scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
                  }
                }
              }, {
                key: "setNativeRange",
                value: function setNativeRange(startNode, startOffset) {
                  var endNode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : startNode;
                  var endOffset = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : startOffset;
                  var force = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
                  debug.info("setNativeRange", startNode, startOffset, endNode, endOffset);
                  if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
                    return;
                  }
                  var selection = document.getSelection();
                  if (selection == null)
                    return;
                  if (startNode != null) {
                    if (!this.hasFocus())
                      this.root.focus();
                    var native = (this.getNativeRange() || {}).native;
                    if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
                      if (startNode.tagName == "BR") {
                        startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
                        startNode = startNode.parentNode;
                      }
                      if (endNode.tagName == "BR") {
                        endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
                        endNode = endNode.parentNode;
                      }
                      var range = document.createRange();
                      range.setStart(startNode, startOffset);
                      range.setEnd(endNode, endOffset);
                      selection.removeAllRanges();
                      selection.addRange(range);
                    }
                  } else {
                    selection.removeAllRanges();
                    this.root.blur();
                    document.body.focus();
                  }
                }
              }, {
                key: "setRange",
                value: function setRange(range) {
                  var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                  var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _emitter4.default.sources.API;
                  if (typeof force === "string") {
                    source = force;
                    force = false;
                  }
                  debug.info("setRange", range);
                  if (range != null) {
                    var args = this.rangeToNative(range);
                    this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
                  } else {
                    this.setNativeRange(null);
                  }
                  this.update(source);
                }
              }, {
                key: "update",
                value: function update2() {
                  var source = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _emitter4.default.sources.USER;
                  var oldRange = this.lastRange;
                  var _getRange = this.getRange(), _getRange2 = _slicedToArray(_getRange, 2), lastRange = _getRange2[0], nativeRange = _getRange2[1];
                  this.lastRange = lastRange;
                  if (this.lastRange != null) {
                    this.savedRange = this.lastRange;
                  }
                  if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
                    var _emitter;
                    if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
                      this.cursor.restore();
                    }
                    var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
                    (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
                    if (source !== _emitter4.default.sources.SILENT) {
                      var _emitter2;
                      (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                    }
                  }
                }
              }]);
              return Selection2;
            }();
            function contains2(parent, descendant) {
              try {
                descendant.parentNode;
              } catch (e2) {
                return false;
              }
              if (descendant instanceof Text) {
                descendant = descendant.parentNode;
              }
              return parent.contains(descendant);
            }
            exports2.Range = Range;
            exports2.default = Selection;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Break = function(_Parchment$Embed) {
              _inherits(Break2, _Parchment$Embed);
              function Break2() {
                _classCallCheck(this, Break2);
                return _possibleConstructorReturn(this, (Break2.__proto__ || Object.getPrototypeOf(Break2)).apply(this, arguments));
              }
              _createClass(Break2, [{
                key: "insertInto",
                value: function insertInto(parent, ref2) {
                  if (parent.children.length === 0) {
                    _get(Break2.prototype.__proto__ || Object.getPrototypeOf(Break2.prototype), "insertInto", this).call(this, parent, ref2);
                  } else {
                    this.remove();
                  }
                }
              }, {
                key: "length",
                value: function length() {
                  return 0;
                }
              }, {
                key: "value",
                value: function value() {
                  return "";
                }
              }], [{
                key: "value",
                value: function value() {
                  return void 0;
                }
              }]);
              return Break2;
            }(_parchment2.default.Embed);
            Break.blotName = "break";
            Break.tagName = "BR";
            exports2.default = Break;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var linked_list_1 = __webpack_require__(44);
            var shadow_1 = __webpack_require__(30);
            var Registry = __webpack_require__(1);
            var ContainerBlot = function(_super) {
              __extends2(ContainerBlot2, _super);
              function ContainerBlot2(domNode) {
                var _this = _super.call(this, domNode) || this;
                _this.build();
                return _this;
              }
              ContainerBlot2.prototype.appendChild = function(other) {
                this.insertBefore(other);
              };
              ContainerBlot2.prototype.attach = function() {
                _super.prototype.attach.call(this);
                this.children.forEach(function(child) {
                  child.attach();
                });
              };
              ContainerBlot2.prototype.build = function() {
                var _this = this;
                this.children = new linked_list_1.default();
                [].slice.call(this.domNode.childNodes).reverse().forEach(function(node) {
                  try {
                    var child = makeBlot(node);
                    _this.insertBefore(child, _this.children.head || void 0);
                  } catch (err) {
                    if (err instanceof Registry.ParchmentError)
                      return;
                    else
                      throw err;
                  }
                });
              };
              ContainerBlot2.prototype.deleteAt = function(index2, length) {
                if (index2 === 0 && length === this.length()) {
                  return this.remove();
                }
                this.children.forEachAt(index2, length, function(child, offset4, length2) {
                  child.deleteAt(offset4, length2);
                });
              };
              ContainerBlot2.prototype.descendant = function(criteria, index2) {
                var _a2 = this.children.find(index2), child = _a2[0], offset4 = _a2[1];
                if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                  return [child, offset4];
                } else if (child instanceof ContainerBlot2) {
                  return child.descendant(criteria, offset4);
                } else {
                  return [null, -1];
                }
              };
              ContainerBlot2.prototype.descendants = function(criteria, index2, length) {
                if (index2 === void 0) {
                  index2 = 0;
                }
                if (length === void 0) {
                  length = Number.MAX_VALUE;
                }
                var descendants = [];
                var lengthLeft = length;
                this.children.forEachAt(index2, length, function(child, index3, length2) {
                  if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                    descendants.push(child);
                  }
                  if (child instanceof ContainerBlot2) {
                    descendants = descendants.concat(child.descendants(criteria, index3, lengthLeft));
                  }
                  lengthLeft -= length2;
                });
                return descendants;
              };
              ContainerBlot2.prototype.detach = function() {
                this.children.forEach(function(child) {
                  child.detach();
                });
                _super.prototype.detach.call(this);
              };
              ContainerBlot2.prototype.formatAt = function(index2, length, name, value) {
                this.children.forEachAt(index2, length, function(child, offset4, length2) {
                  child.formatAt(offset4, length2, name, value);
                });
              };
              ContainerBlot2.prototype.insertAt = function(index2, value, def) {
                var _a2 = this.children.find(index2), child = _a2[0], offset4 = _a2[1];
                if (child) {
                  child.insertAt(offset4, value, def);
                } else {
                  var blot = def == null ? Registry.create("text", value) : Registry.create(value, def);
                  this.appendChild(blot);
                }
              };
              ContainerBlot2.prototype.insertBefore = function(childBlot, refBlot) {
                if (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function(child) {
                  return childBlot instanceof child;
                })) {
                  throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
                }
                childBlot.insertInto(this, refBlot);
              };
              ContainerBlot2.prototype.length = function() {
                return this.children.reduce(function(memo2, child) {
                  return memo2 + child.length();
                }, 0);
              };
              ContainerBlot2.prototype.moveChildren = function(targetParent, refNode) {
                this.children.forEach(function(child) {
                  targetParent.insertBefore(child, refNode);
                });
              };
              ContainerBlot2.prototype.optimize = function(context) {
                _super.prototype.optimize.call(this, context);
                if (this.children.length === 0) {
                  if (this.statics.defaultChild != null) {
                    var child = Registry.create(this.statics.defaultChild);
                    this.appendChild(child);
                    child.optimize(context);
                  } else {
                    this.remove();
                  }
                }
              };
              ContainerBlot2.prototype.path = function(index2, inclusive) {
                if (inclusive === void 0) {
                  inclusive = false;
                }
                var _a2 = this.children.find(index2, inclusive), child = _a2[0], offset4 = _a2[1];
                var position3 = [[this, index2]];
                if (child instanceof ContainerBlot2) {
                  return position3.concat(child.path(offset4, inclusive));
                } else if (child != null) {
                  position3.push([child, offset4]);
                }
                return position3;
              };
              ContainerBlot2.prototype.removeChild = function(child) {
                this.children.remove(child);
              };
              ContainerBlot2.prototype.replace = function(target) {
                if (target instanceof ContainerBlot2) {
                  target.moveChildren(this);
                }
                _super.prototype.replace.call(this, target);
              };
              ContainerBlot2.prototype.split = function(index2, force) {
                if (force === void 0) {
                  force = false;
                }
                if (!force) {
                  if (index2 === 0)
                    return this;
                  if (index2 === this.length())
                    return this.next;
                }
                var after = this.clone();
                this.parent.insertBefore(after, this.next);
                this.children.forEachAt(index2, this.length(), function(child, offset4, length) {
                  child = child.split(offset4, force);
                  after.appendChild(child);
                });
                return after;
              };
              ContainerBlot2.prototype.unwrap = function() {
                this.moveChildren(this.parent, this.next);
                this.remove();
              };
              ContainerBlot2.prototype.update = function(mutations, context) {
                var _this = this;
                var addedNodes = [];
                var removedNodes = [];
                mutations.forEach(function(mutation) {
                  if (mutation.target === _this.domNode && mutation.type === "childList") {
                    addedNodes.push.apply(addedNodes, mutation.addedNodes);
                    removedNodes.push.apply(removedNodes, mutation.removedNodes);
                  }
                });
                removedNodes.forEach(function(node) {
                  if (node.parentNode != null && node.tagName !== "IFRAME" && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                    return;
                  }
                  var blot = Registry.find(node);
                  if (blot == null)
                    return;
                  if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
                    blot.detach();
                  }
                });
                addedNodes.filter(function(node) {
                  return node.parentNode == _this.domNode;
                }).sort(function(a3, b3) {
                  if (a3 === b3)
                    return 0;
                  if (a3.compareDocumentPosition(b3) & Node.DOCUMENT_POSITION_FOLLOWING) {
                    return 1;
                  }
                  return -1;
                }).forEach(function(node) {
                  var refBlot = null;
                  if (node.nextSibling != null) {
                    refBlot = Registry.find(node.nextSibling);
                  }
                  var blot = makeBlot(node);
                  if (blot.next != refBlot || blot.next == null) {
                    if (blot.parent != null) {
                      blot.parent.removeChild(_this);
                    }
                    _this.insertBefore(blot, refBlot || void 0);
                  }
                });
              };
              return ContainerBlot2;
            }(shadow_1.default);
            function makeBlot(node) {
              var blot = Registry.find(node);
              if (blot == null) {
                try {
                  blot = Registry.create(node);
                } catch (e2) {
                  blot = Registry.create(Registry.Scope.INLINE);
                  [].slice.call(node.childNodes).forEach(function(child) {
                    blot.domNode.appendChild(child);
                  });
                  if (node.parentNode) {
                    node.parentNode.replaceChild(blot.domNode, node);
                  }
                  blot.attach();
                }
              }
              return blot;
            }
            exports2.default = ContainerBlot;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var attributor_1 = __webpack_require__(12);
            var store_1 = __webpack_require__(31);
            var container_1 = __webpack_require__(17);
            var Registry = __webpack_require__(1);
            var FormatBlot = function(_super) {
              __extends2(FormatBlot2, _super);
              function FormatBlot2(domNode) {
                var _this = _super.call(this, domNode) || this;
                _this.attributes = new store_1.default(_this.domNode);
                return _this;
              }
              FormatBlot2.formats = function(domNode) {
                if (typeof this.tagName === "string") {
                  return true;
                } else if (Array.isArray(this.tagName)) {
                  return domNode.tagName.toLowerCase();
                }
                return void 0;
              };
              FormatBlot2.prototype.format = function(name, value) {
                var format2 = Registry.query(name);
                if (format2 instanceof attributor_1.default) {
                  this.attributes.attribute(format2, value);
                } else if (value) {
                  if (format2 != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
                    this.replaceWith(name, value);
                  }
                }
              };
              FormatBlot2.prototype.formats = function() {
                var formats = this.attributes.values();
                var format2 = this.statics.formats(this.domNode);
                if (format2 != null) {
                  formats[this.statics.blotName] = format2;
                }
                return formats;
              };
              FormatBlot2.prototype.replaceWith = function(name, value) {
                var replacement = _super.prototype.replaceWith.call(this, name, value);
                this.attributes.copy(replacement);
                return replacement;
              };
              FormatBlot2.prototype.update = function(mutations, context) {
                var _this = this;
                _super.prototype.update.call(this, mutations, context);
                if (mutations.some(function(mutation) {
                  return mutation.target === _this.domNode && mutation.type === "attributes";
                })) {
                  this.attributes.build();
                }
              };
              FormatBlot2.prototype.wrap = function(name, value) {
                var wrapper = _super.prototype.wrap.call(this, name, value);
                if (wrapper instanceof FormatBlot2 && wrapper.statics.scope === this.statics.scope) {
                  this.attributes.move(wrapper);
                }
                return wrapper;
              };
              return FormatBlot2;
            }(container_1.default);
            exports2.default = FormatBlot;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var shadow_1 = __webpack_require__(30);
            var Registry = __webpack_require__(1);
            var LeafBlot = function(_super) {
              __extends2(LeafBlot2, _super);
              function LeafBlot2() {
                return _super !== null && _super.apply(this, arguments) || this;
              }
              LeafBlot2.value = function(domNode) {
                return true;
              };
              LeafBlot2.prototype.index = function(node, offset4) {
                if (this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                  return Math.min(offset4, 1);
                }
                return -1;
              };
              LeafBlot2.prototype.position = function(index2, inclusive) {
                var offset4 = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
                if (index2 > 0)
                  offset4 += 1;
                return [this.parent.domNode, offset4];
              };
              LeafBlot2.prototype.value = function() {
                var _a2;
                return _a2 = {}, _a2[this.statics.blotName] = this.statics.value(this.domNode) || true, _a2;
              };
              LeafBlot2.scope = Registry.Scope.INLINE_BLOT;
              return LeafBlot2;
            }(shadow_1.default);
            exports2.default = LeafBlot;
          },
          function(module2, exports2, __webpack_require__) {
            var equal = __webpack_require__(11);
            var extend = __webpack_require__(3);
            var lib = {
              attributes: {
                compose: function(a3, b3, keepNull) {
                  if (typeof a3 !== "object")
                    a3 = {};
                  if (typeof b3 !== "object")
                    b3 = {};
                  var attributes = extend(true, {}, b3);
                  if (!keepNull) {
                    attributes = Object.keys(attributes).reduce(function(copy, key2) {
                      if (attributes[key2] != null) {
                        copy[key2] = attributes[key2];
                      }
                      return copy;
                    }, {});
                  }
                  for (var key in a3) {
                    if (a3[key] !== void 0 && b3[key] === void 0) {
                      attributes[key] = a3[key];
                    }
                  }
                  return Object.keys(attributes).length > 0 ? attributes : void 0;
                },
                diff: function(a3, b3) {
                  if (typeof a3 !== "object")
                    a3 = {};
                  if (typeof b3 !== "object")
                    b3 = {};
                  var attributes = Object.keys(a3).concat(Object.keys(b3)).reduce(function(attributes2, key) {
                    if (!equal(a3[key], b3[key])) {
                      attributes2[key] = b3[key] === void 0 ? null : b3[key];
                    }
                    return attributes2;
                  }, {});
                  return Object.keys(attributes).length > 0 ? attributes : void 0;
                },
                transform: function(a3, b3, priority) {
                  if (typeof a3 !== "object")
                    return b3;
                  if (typeof b3 !== "object")
                    return void 0;
                  if (!priority)
                    return b3;
                  var attributes = Object.keys(b3).reduce(function(attributes2, key) {
                    if (a3[key] === void 0)
                      attributes2[key] = b3[key];
                    return attributes2;
                  }, {});
                  return Object.keys(attributes).length > 0 ? attributes : void 0;
                }
              },
              iterator: function(ops) {
                return new Iterator(ops);
              },
              length: function(op) {
                if (typeof op["delete"] === "number") {
                  return op["delete"];
                } else if (typeof op.retain === "number") {
                  return op.retain;
                } else {
                  return typeof op.insert === "string" ? op.insert.length : 1;
                }
              }
            };
            function Iterator(ops) {
              this.ops = ops;
              this.index = 0;
              this.offset = 0;
            }
            ;
            Iterator.prototype.hasNext = function() {
              return this.peekLength() < Infinity;
            };
            Iterator.prototype.next = function(length) {
              if (!length)
                length = Infinity;
              var nextOp = this.ops[this.index];
              if (nextOp) {
                var offset4 = this.offset;
                var opLength = lib.length(nextOp);
                if (length >= opLength - offset4) {
                  length = opLength - offset4;
                  this.index += 1;
                  this.offset = 0;
                } else {
                  this.offset += length;
                }
                if (typeof nextOp["delete"] === "number") {
                  return { "delete": length };
                } else {
                  var retOp = {};
                  if (nextOp.attributes) {
                    retOp.attributes = nextOp.attributes;
                  }
                  if (typeof nextOp.retain === "number") {
                    retOp.retain = length;
                  } else if (typeof nextOp.insert === "string") {
                    retOp.insert = nextOp.insert.substr(offset4, length);
                  } else {
                    retOp.insert = nextOp.insert;
                  }
                  return retOp;
                }
              } else {
                return { retain: Infinity };
              }
            };
            Iterator.prototype.peek = function() {
              return this.ops[this.index];
            };
            Iterator.prototype.peekLength = function() {
              if (this.ops[this.index]) {
                return lib.length(this.ops[this.index]) - this.offset;
              } else {
                return Infinity;
              }
            };
            Iterator.prototype.peekType = function() {
              if (this.ops[this.index]) {
                if (typeof this.ops[this.index]["delete"] === "number") {
                  return "delete";
                } else if (typeof this.ops[this.index].retain === "number") {
                  return "retain";
                } else {
                  return "insert";
                }
              }
              return "retain";
            };
            Iterator.prototype.rest = function() {
              if (!this.hasNext()) {
                return [];
              } else if (this.offset === 0) {
                return this.ops.slice(this.index);
              } else {
                var offset4 = this.offset;
                var index2 = this.index;
                var next = this.next();
                var rest = this.ops.slice(this.index);
                this.offset = offset4;
                this.index = index2;
                return [next].concat(rest);
              }
            };
            module2.exports = lib;
          },
          function(module2, exports2) {
            var clone = function() {
              "use strict";
              function _instanceof(obj, type) {
                return type != null && obj instanceof type;
              }
              var nativeMap;
              try {
                nativeMap = Map;
              } catch (_3) {
                nativeMap = function() {
                };
              }
              var nativeSet;
              try {
                nativeSet = Set;
              } catch (_3) {
                nativeSet = function() {
                };
              }
              var nativePromise;
              try {
                nativePromise = Promise;
              } catch (_3) {
                nativePromise = function() {
                };
              }
              function clone2(parent, circular, depth, prototype, includeNonEnumerable) {
                if (typeof circular === "object") {
                  depth = circular.depth;
                  prototype = circular.prototype;
                  includeNonEnumerable = circular.includeNonEnumerable;
                  circular = circular.circular;
                }
                var allParents = [];
                var allChildren = [];
                var useBuffer = typeof Buffer != "undefined";
                if (typeof circular == "undefined")
                  circular = true;
                if (typeof depth == "undefined")
                  depth = Infinity;
                function _clone(parent2, depth2) {
                  if (parent2 === null)
                    return null;
                  if (depth2 === 0)
                    return parent2;
                  var child;
                  var proto;
                  if (typeof parent2 != "object") {
                    return parent2;
                  }
                  if (_instanceof(parent2, nativeMap)) {
                    child = new nativeMap();
                  } else if (_instanceof(parent2, nativeSet)) {
                    child = new nativeSet();
                  } else if (_instanceof(parent2, nativePromise)) {
                    child = new nativePromise(function(resolve, reject) {
                      parent2.then(function(value) {
                        resolve(_clone(value, depth2 - 1));
                      }, function(err) {
                        reject(_clone(err, depth2 - 1));
                      });
                    });
                  } else if (clone2.__isArray(parent2)) {
                    child = [];
                  } else if (clone2.__isRegExp(parent2)) {
                    child = new RegExp(parent2.source, __getRegExpFlags(parent2));
                    if (parent2.lastIndex)
                      child.lastIndex = parent2.lastIndex;
                  } else if (clone2.__isDate(parent2)) {
                    child = new Date(parent2.getTime());
                  } else if (useBuffer && Buffer.isBuffer(parent2)) {
                    if (Buffer.allocUnsafe) {
                      child = Buffer.allocUnsafe(parent2.length);
                    } else {
                      child = new Buffer(parent2.length);
                    }
                    parent2.copy(child);
                    return child;
                  } else if (_instanceof(parent2, Error)) {
                    child = Object.create(parent2);
                  } else {
                    if (typeof prototype == "undefined") {
                      proto = Object.getPrototypeOf(parent2);
                      child = Object.create(proto);
                    } else {
                      child = Object.create(prototype);
                      proto = prototype;
                    }
                  }
                  if (circular) {
                    var index2 = allParents.indexOf(parent2);
                    if (index2 != -1) {
                      return allChildren[index2];
                    }
                    allParents.push(parent2);
                    allChildren.push(child);
                  }
                  if (_instanceof(parent2, nativeMap)) {
                    parent2.forEach(function(value, key) {
                      var keyChild = _clone(key, depth2 - 1);
                      var valueChild = _clone(value, depth2 - 1);
                      child.set(keyChild, valueChild);
                    });
                  }
                  if (_instanceof(parent2, nativeSet)) {
                    parent2.forEach(function(value) {
                      var entryChild = _clone(value, depth2 - 1);
                      child.add(entryChild);
                    });
                  }
                  for (var i3 in parent2) {
                    var attrs;
                    if (proto) {
                      attrs = Object.getOwnPropertyDescriptor(proto, i3);
                    }
                    if (attrs && attrs.set == null) {
                      continue;
                    }
                    child[i3] = _clone(parent2[i3], depth2 - 1);
                  }
                  if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(parent2);
                    for (var i3 = 0; i3 < symbols.length; i3++) {
                      var symbol = symbols[i3];
                      var descriptor = Object.getOwnPropertyDescriptor(parent2, symbol);
                      if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                        continue;
                      }
                      child[symbol] = _clone(parent2[symbol], depth2 - 1);
                      if (!descriptor.enumerable) {
                        Object.defineProperty(child, symbol, {
                          enumerable: false
                        });
                      }
                    }
                  }
                  if (includeNonEnumerable) {
                    var allPropertyNames = Object.getOwnPropertyNames(parent2);
                    for (var i3 = 0; i3 < allPropertyNames.length; i3++) {
                      var propertyName = allPropertyNames[i3];
                      var descriptor = Object.getOwnPropertyDescriptor(parent2, propertyName);
                      if (descriptor && descriptor.enumerable) {
                        continue;
                      }
                      child[propertyName] = _clone(parent2[propertyName], depth2 - 1);
                      Object.defineProperty(child, propertyName, {
                        enumerable: false
                      });
                    }
                  }
                  return child;
                }
                return _clone(parent, depth);
              }
              clone2.clonePrototype = function clonePrototype(parent) {
                if (parent === null)
                  return null;
                var c3 = function() {
                };
                c3.prototype = parent;
                return new c3();
              };
              function __objToStr(o3) {
                return Object.prototype.toString.call(o3);
              }
              clone2.__objToStr = __objToStr;
              function __isDate(o3) {
                return typeof o3 === "object" && __objToStr(o3) === "[object Date]";
              }
              clone2.__isDate = __isDate;
              function __isArray(o3) {
                return typeof o3 === "object" && __objToStr(o3) === "[object Array]";
              }
              clone2.__isArray = __isArray;
              function __isRegExp(o3) {
                return typeof o3 === "object" && __objToStr(o3) === "[object RegExp]";
              }
              clone2.__isRegExp = __isRegExp;
              function __getRegExpFlags(re) {
                var flags = "";
                if (re.global)
                  flags += "g";
                if (re.ignoreCase)
                  flags += "i";
                if (re.multiline)
                  flags += "m";
                return flags;
              }
              clone2.__getRegExpFlags = __getRegExpFlags;
              return clone2;
            }();
            if (typeof module2 === "object" && module2.exports) {
              module2.exports = clone;
            }
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _container = __webpack_require__(25);
            var _container2 = _interopRequireDefault(_container);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            function isLine(blot) {
              return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
            }
            var Scroll = function(_Parchment$Scroll) {
              _inherits(Scroll2, _Parchment$Scroll);
              function Scroll2(domNode, config2) {
                _classCallCheck(this, Scroll2);
                var _this = _possibleConstructorReturn(this, (Scroll2.__proto__ || Object.getPrototypeOf(Scroll2)).call(this, domNode));
                _this.emitter = config2.emitter;
                if (Array.isArray(config2.whitelist)) {
                  _this.whitelist = config2.whitelist.reduce(function(whitelist, format2) {
                    whitelist[format2] = true;
                    return whitelist;
                  }, {});
                }
                _this.domNode.addEventListener("DOMNodeInserted", function() {
                });
                _this.optimize();
                _this.enable();
                return _this;
              }
              _createClass(Scroll2, [{
                key: "batchStart",
                value: function batchStart() {
                  this.batch = true;
                }
              }, {
                key: "batchEnd",
                value: function batchEnd() {
                  this.batch = false;
                  this.optimize();
                }
              }, {
                key: "deleteAt",
                value: function deleteAt(index2, length) {
                  var _line = this.line(index2), _line2 = _slicedToArray(_line, 2), first = _line2[0], offset4 = _line2[1];
                  var _line3 = this.line(index2 + length), _line4 = _slicedToArray(_line3, 1), last = _line4[0];
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "deleteAt", this).call(this, index2, length);
                  if (last != null && first !== last && offset4 > 0) {
                    if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
                      this.optimize();
                      return;
                    }
                    if (first instanceof _code2.default) {
                      var newlineIndex = first.newlineIndex(first.length(), true);
                      if (newlineIndex > -1) {
                        first = first.split(newlineIndex + 1);
                        if (first === last) {
                          this.optimize();
                          return;
                        }
                      }
                    } else if (last instanceof _code2.default) {
                      var _newlineIndex = last.newlineIndex(0);
                      if (_newlineIndex > -1) {
                        last.split(_newlineIndex + 1);
                      }
                    }
                    var ref2 = last.children.head instanceof _break2.default ? null : last.children.head;
                    first.moveChildren(last, ref2);
                    first.remove();
                  }
                  this.optimize();
                }
              }, {
                key: "enable",
                value: function enable() {
                  var enabled = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                  this.domNode.setAttribute("contenteditable", enabled);
                }
              }, {
                key: "formatAt",
                value: function formatAt(index2, length, format2, value) {
                  if (this.whitelist != null && !this.whitelist[format2])
                    return;
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "formatAt", this).call(this, index2, length, format2, value);
                  this.optimize();
                }
              }, {
                key: "insertAt",
                value: function insertAt(index2, value, def) {
                  if (def != null && this.whitelist != null && !this.whitelist[value])
                    return;
                  if (index2 >= this.length()) {
                    if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
                      var blot = _parchment2.default.create(this.statics.defaultChild);
                      this.appendChild(blot);
                      if (def == null && value.endsWith("\n")) {
                        value = value.slice(0, -1);
                      }
                      blot.insertAt(0, value, def);
                    } else {
                      var embed = _parchment2.default.create(value, def);
                      this.appendChild(embed);
                    }
                  } else {
                    _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "insertAt", this).call(this, index2, value, def);
                  }
                  this.optimize();
                }
              }, {
                key: "insertBefore",
                value: function insertBefore(blot, ref2) {
                  if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
                    var wrapper = _parchment2.default.create(this.statics.defaultChild);
                    wrapper.appendChild(blot);
                    blot = wrapper;
                  }
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "insertBefore", this).call(this, blot, ref2);
                }
              }, {
                key: "leaf",
                value: function leaf(index2) {
                  return this.path(index2).pop() || [null, -1];
                }
              }, {
                key: "line",
                value: function line(index2) {
                  if (index2 === this.length()) {
                    return this.line(index2 - 1);
                  }
                  return this.descendant(isLine, index2);
                }
              }, {
                key: "lines",
                value: function lines() {
                  var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Number.MAX_VALUE;
                  var getLines = function getLines2(blot, index3, length2) {
                    var lines2 = [], lengthLeft = length2;
                    blot.children.forEachAt(index3, length2, function(child, index4, length3) {
                      if (isLine(child)) {
                        lines2.push(child);
                      } else if (child instanceof _parchment2.default.Container) {
                        lines2 = lines2.concat(getLines2(child, index4, lengthLeft));
                      }
                      lengthLeft -= length3;
                    });
                    return lines2;
                  };
                  return getLines(this, index2, length);
                }
              }, {
                key: "optimize",
                value: function optimize() {
                  var mutations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                  var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  if (this.batch === true)
                    return;
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "optimize", this).call(this, mutations, context);
                  if (mutations.length > 0) {
                    this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
                  }
                }
              }, {
                key: "path",
                value: function path(index2) {
                  return _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "path", this).call(this, index2).slice(1);
                }
              }, {
                key: "update",
                value: function update2(mutations) {
                  if (this.batch === true)
                    return;
                  var source = _emitter2.default.sources.USER;
                  if (typeof mutations === "string") {
                    source = mutations;
                  }
                  if (!Array.isArray(mutations)) {
                    mutations = this.observer.takeRecords();
                  }
                  if (mutations.length > 0) {
                    this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
                  }
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "update", this).call(this, mutations.concat([]));
                  if (mutations.length > 0) {
                    this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
                  }
                }
              }]);
              return Scroll2;
            }(_parchment2.default.Scroll);
            Scroll.blotName = "scroll";
            Scroll.className = "ql-editor";
            Scroll.tagName = "DIV";
            Scroll.defaultChild = "block";
            Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];
            exports2.default = Scroll;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.SHORTKEY = exports2.default = void 0;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _clone = __webpack_require__(21);
            var _clone2 = _interopRequireDefault(_clone);
            var _deepEqual = __webpack_require__(11);
            var _deepEqual2 = _interopRequireDefault(_deepEqual);
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _op = __webpack_require__(20);
            var _op2 = _interopRequireDefault(_op);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty2(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)("quill:keyboard");
            var SHORTKEY = /Mac/i.test(navigator.platform) ? "metaKey" : "ctrlKey";
            var Keyboard = function(_Module) {
              _inherits(Keyboard2, _Module);
              _createClass(Keyboard2, null, [{
                key: "match",
                value: function match2(evt, binding) {
                  binding = normalize(binding);
                  if (["altKey", "ctrlKey", "metaKey", "shiftKey"].some(function(key) {
                    return !!binding[key] !== evt[key] && binding[key] !== null;
                  })) {
                    return false;
                  }
                  return binding.key === (evt.which || evt.keyCode);
                }
              }]);
              function Keyboard2(quill, options) {
                _classCallCheck(this, Keyboard2);
                var _this = _possibleConstructorReturn(this, (Keyboard2.__proto__ || Object.getPrototypeOf(Keyboard2)).call(this, quill, options));
                _this.bindings = {};
                Object.keys(_this.options.bindings).forEach(function(name) {
                  if (name === "list autofill" && quill.scroll.whitelist != null && !quill.scroll.whitelist["list"]) {
                    return;
                  }
                  if (_this.options.bindings[name]) {
                    _this.addBinding(_this.options.bindings[name]);
                  }
                });
                _this.addBinding({ key: Keyboard2.keys.ENTER, shiftKey: null }, handleEnter);
                _this.addBinding({ key: Keyboard2.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function() {
                });
                if (/Firefox/i.test(navigator.userAgent)) {
                  _this.addBinding({ key: Keyboard2.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
                  _this.addBinding({ key: Keyboard2.keys.DELETE }, { collapsed: true }, handleDelete);
                } else {
                  _this.addBinding({ key: Keyboard2.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
                  _this.addBinding({ key: Keyboard2.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
                }
                _this.addBinding({ key: Keyboard2.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
                _this.addBinding({ key: Keyboard2.keys.DELETE }, { collapsed: false }, handleDeleteRange);
                _this.addBinding({ key: Keyboard2.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
                _this.listen();
                return _this;
              }
              _createClass(Keyboard2, [{
                key: "addBinding",
                value: function addBinding(key) {
                  var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  var handler = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                  var binding = normalize(key);
                  if (binding == null || binding.key == null) {
                    return debug.warn("Attempted to add invalid keyboard binding", binding);
                  }
                  if (typeof context === "function") {
                    context = { handler: context };
                  }
                  if (typeof handler === "function") {
                    handler = { handler };
                  }
                  binding = (0, _extend2.default)(binding, context, handler);
                  this.bindings[binding.key] = this.bindings[binding.key] || [];
                  this.bindings[binding.key].push(binding);
                }
              }, {
                key: "listen",
                value: function listen() {
                  var _this2 = this;
                  this.quill.root.addEventListener("keydown", function(evt) {
                    if (evt.defaultPrevented)
                      return;
                    var which = evt.which || evt.keyCode;
                    var bindings = (_this2.bindings[which] || []).filter(function(binding) {
                      return Keyboard2.match(evt, binding);
                    });
                    if (bindings.length === 0)
                      return;
                    var range = _this2.quill.getSelection();
                    if (range == null || !_this2.quill.hasFocus())
                      return;
                    var _quill$getLine = _this2.quill.getLine(range.index), _quill$getLine2 = _slicedToArray(_quill$getLine, 2), line = _quill$getLine2[0], offset4 = _quill$getLine2[1];
                    var _quill$getLeaf = _this2.quill.getLeaf(range.index), _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2), leafStart = _quill$getLeaf2[0], offsetStart = _quill$getLeaf2[1];
                    var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length), _ref2 = _slicedToArray(_ref, 2), leafEnd = _ref2[0], offsetEnd = _ref2[1];
                    var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : "";
                    var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : "";
                    var curContext = {
                      collapsed: range.length === 0,
                      empty: range.length === 0 && line.length() <= 1,
                      format: _this2.quill.getFormat(range),
                      offset: offset4,
                      prefix: prefixText,
                      suffix: suffixText
                    };
                    var prevented = bindings.some(function(binding) {
                      if (binding.collapsed != null && binding.collapsed !== curContext.collapsed)
                        return false;
                      if (binding.empty != null && binding.empty !== curContext.empty)
                        return false;
                      if (binding.offset != null && binding.offset !== curContext.offset)
                        return false;
                      if (Array.isArray(binding.format)) {
                        if (binding.format.every(function(name) {
                          return curContext.format[name] == null;
                        })) {
                          return false;
                        }
                      } else if (_typeof(binding.format) === "object") {
                        if (!Object.keys(binding.format).every(function(name) {
                          if (binding.format[name] === true)
                            return curContext.format[name] != null;
                          if (binding.format[name] === false)
                            return curContext.format[name] == null;
                          return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
                        })) {
                          return false;
                        }
                      }
                      if (binding.prefix != null && !binding.prefix.test(curContext.prefix))
                        return false;
                      if (binding.suffix != null && !binding.suffix.test(curContext.suffix))
                        return false;
                      return binding.handler.call(_this2, range, curContext) !== true;
                    });
                    if (prevented) {
                      evt.preventDefault();
                    }
                  });
                }
              }]);
              return Keyboard2;
            }(_module2.default);
            Keyboard.keys = {
              BACKSPACE: 8,
              TAB: 9,
              ENTER: 13,
              ESCAPE: 27,
              LEFT: 37,
              UP: 38,
              RIGHT: 39,
              DOWN: 40,
              DELETE: 46
            };
            Keyboard.DEFAULTS = {
              bindings: {
                "bold": makeFormatHandler("bold"),
                "italic": makeFormatHandler("italic"),
                "underline": makeFormatHandler("underline"),
                "indent": {
                  key: Keyboard.keys.TAB,
                  format: ["blockquote", "indent", "list"],
                  handler: function handler(range, context) {
                    if (context.collapsed && context.offset !== 0)
                      return true;
                    this.quill.format("indent", "+1", _quill2.default.sources.USER);
                  }
                },
                "outdent": {
                  key: Keyboard.keys.TAB,
                  shiftKey: true,
                  format: ["blockquote", "indent", "list"],
                  handler: function handler(range, context) {
                    if (context.collapsed && context.offset !== 0)
                      return true;
                    this.quill.format("indent", "-1", _quill2.default.sources.USER);
                  }
                },
                "outdent backspace": {
                  key: Keyboard.keys.BACKSPACE,
                  collapsed: true,
                  shiftKey: null,
                  metaKey: null,
                  ctrlKey: null,
                  altKey: null,
                  format: ["indent", "list"],
                  offset: 0,
                  handler: function handler(range, context) {
                    if (context.format.indent != null) {
                      this.quill.format("indent", "-1", _quill2.default.sources.USER);
                    } else if (context.format.list != null) {
                      this.quill.format("list", false, _quill2.default.sources.USER);
                    }
                  }
                },
                "indent code-block": makeCodeBlockHandler(true),
                "outdent code-block": makeCodeBlockHandler(false),
                "remove tab": {
                  key: Keyboard.keys.TAB,
                  shiftKey: true,
                  collapsed: true,
                  prefix: /\t$/,
                  handler: function handler(range) {
                    this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
                  }
                },
                "tab": {
                  key: Keyboard.keys.TAB,
                  handler: function handler(range) {
                    this.quill.history.cutoff();
                    var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert("	");
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                    this.quill.history.cutoff();
                    this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                  }
                },
                "list empty enter": {
                  key: Keyboard.keys.ENTER,
                  collapsed: true,
                  format: ["list"],
                  empty: true,
                  handler: function handler(range, context) {
                    this.quill.format("list", false, _quill2.default.sources.USER);
                    if (context.format.indent) {
                      this.quill.format("indent", false, _quill2.default.sources.USER);
                    }
                  }
                },
                "checklist enter": {
                  key: Keyboard.keys.ENTER,
                  collapsed: true,
                  format: { list: "checked" },
                  handler: function handler(range) {
                    var _quill$getLine3 = this.quill.getLine(range.index), _quill$getLine4 = _slicedToArray(_quill$getLine3, 2), line = _quill$getLine4[0], offset4 = _quill$getLine4[1];
                    var formats = (0, _extend2.default)({}, line.formats(), { list: "checked" });
                    var delta = new _quillDelta2.default().retain(range.index).insert("\n", formats).retain(line.length() - offset4 - 1).retain(1, { list: "unchecked" });
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                    this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                    this.quill.scrollIntoView();
                  }
                },
                "header enter": {
                  key: Keyboard.keys.ENTER,
                  collapsed: true,
                  format: ["header"],
                  suffix: /^$/,
                  handler: function handler(range, context) {
                    var _quill$getLine5 = this.quill.getLine(range.index), _quill$getLine6 = _slicedToArray(_quill$getLine5, 2), line = _quill$getLine6[0], offset4 = _quill$getLine6[1];
                    var delta = new _quillDelta2.default().retain(range.index).insert("\n", context.format).retain(line.length() - offset4 - 1).retain(1, { header: null });
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                    this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                    this.quill.scrollIntoView();
                  }
                },
                "list autofill": {
                  key: " ",
                  collapsed: true,
                  format: { list: false },
                  prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
                  handler: function handler(range, context) {
                    var length = context.prefix.length;
                    var _quill$getLine7 = this.quill.getLine(range.index), _quill$getLine8 = _slicedToArray(_quill$getLine7, 2), line = _quill$getLine8[0], offset4 = _quill$getLine8[1];
                    if (offset4 > length)
                      return true;
                    var value = void 0;
                    switch (context.prefix.trim()) {
                      case "[]":
                      case "[ ]":
                        value = "unchecked";
                        break;
                      case "[x]":
                        value = "checked";
                        break;
                      case "-":
                      case "*":
                        value = "bullet";
                        break;
                      default:
                        value = "ordered";
                    }
                    this.quill.insertText(range.index, " ", _quill2.default.sources.USER);
                    this.quill.history.cutoff();
                    var delta = new _quillDelta2.default().retain(range.index - offset4).delete(length + 1).retain(line.length() - 2 - offset4).retain(1, { list: value });
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                    this.quill.history.cutoff();
                    this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
                  }
                },
                "code exit": {
                  key: Keyboard.keys.ENTER,
                  collapsed: true,
                  format: ["code-block"],
                  prefix: /\n\n$/,
                  suffix: /^\s+$/,
                  handler: function handler(range) {
                    var _quill$getLine9 = this.quill.getLine(range.index), _quill$getLine10 = _slicedToArray(_quill$getLine9, 2), line = _quill$getLine10[0], offset4 = _quill$getLine10[1];
                    var delta = new _quillDelta2.default().retain(range.index + line.length() - offset4 - 2).retain(1, { "code-block": null }).delete(1);
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                  }
                },
                "embed left": makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
                "embed left shift": makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
                "embed right": makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
                "embed right shift": makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
              }
            };
            function makeEmbedArrowHandler(key, shiftKey) {
              var _ref3;
              var where = key === Keyboard.keys.LEFT ? "prefix" : "suffix";
              return _ref3 = {
                key,
                shiftKey,
                altKey: null
              }, _defineProperty2(_ref3, where, /^$/), _defineProperty2(_ref3, "handler", function handler(range) {
                var index2 = range.index;
                if (key === Keyboard.keys.RIGHT) {
                  index2 += range.length + 1;
                }
                var _quill$getLeaf3 = this.quill.getLeaf(index2), _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1), leaf = _quill$getLeaf4[0];
                if (!(leaf instanceof _parchment2.default.Embed))
                  return true;
                if (key === Keyboard.keys.LEFT) {
                  if (shiftKey) {
                    this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
                  } else {
                    this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
                  }
                } else {
                  if (shiftKey) {
                    this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
                  } else {
                    this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
                  }
                }
                return false;
              }), _ref3;
            }
            function handleBackspace(range, context) {
              if (range.index === 0 || this.quill.getLength() <= 1)
                return;
              var _quill$getLine11 = this.quill.getLine(range.index), _quill$getLine12 = _slicedToArray(_quill$getLine11, 1), line = _quill$getLine12[0];
              var formats = {};
              if (context.offset === 0) {
                var _quill$getLine13 = this.quill.getLine(range.index - 1), _quill$getLine14 = _slicedToArray(_quill$getLine13, 1), prev = _quill$getLine14[0];
                if (prev != null && prev.length() > 1) {
                  var curFormats = line.formats();
                  var prevFormats = this.quill.getFormat(range.index - 1, 1);
                  formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
                }
              }
              var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
              this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
              if (Object.keys(formats).length > 0) {
                this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
              }
              this.quill.focus();
            }
            function handleDelete(range, context) {
              var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
              if (range.index >= this.quill.getLength() - length)
                return;
              var formats = {}, nextLength = 0;
              var _quill$getLine15 = this.quill.getLine(range.index), _quill$getLine16 = _slicedToArray(_quill$getLine15, 1), line = _quill$getLine16[0];
              if (context.offset >= line.length() - 1) {
                var _quill$getLine17 = this.quill.getLine(range.index + 1), _quill$getLine18 = _slicedToArray(_quill$getLine17, 1), next = _quill$getLine18[0];
                if (next) {
                  var curFormats = line.formats();
                  var nextFormats = this.quill.getFormat(range.index, 1);
                  formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
                  nextLength = next.length();
                }
              }
              this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
              if (Object.keys(formats).length > 0) {
                this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
              }
            }
            function handleDeleteRange(range) {
              var lines = this.quill.getLines(range);
              var formats = {};
              if (lines.length > 1) {
                var firstFormats = lines[0].formats();
                var lastFormats = lines[lines.length - 1].formats();
                formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
              }
              this.quill.deleteText(range, _quill2.default.sources.USER);
              if (Object.keys(formats).length > 0) {
                this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
              }
              this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
              this.quill.focus();
            }
            function handleEnter(range, context) {
              var _this3 = this;
              if (range.length > 0) {
                this.quill.scroll.deleteAt(range.index, range.length);
              }
              var lineFormats = Object.keys(context.format).reduce(function(lineFormats2, format2) {
                if (_parchment2.default.query(format2, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format2])) {
                  lineFormats2[format2] = context.format[format2];
                }
                return lineFormats2;
              }, {});
              this.quill.insertText(range.index, "\n", lineFormats, _quill2.default.sources.USER);
              this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
              this.quill.focus();
              Object.keys(context.format).forEach(function(name) {
                if (lineFormats[name] != null)
                  return;
                if (Array.isArray(context.format[name]))
                  return;
                if (name === "link")
                  return;
                _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
              });
            }
            function makeCodeBlockHandler(indent) {
              return {
                key: Keyboard.keys.TAB,
                shiftKey: !indent,
                format: { "code-block": true },
                handler: function handler(range) {
                  var CodeBlock = _parchment2.default.query("code-block");
                  var index2 = range.index, length = range.length;
                  var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index2), _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2), block = _quill$scroll$descend2[0], offset4 = _quill$scroll$descend2[1];
                  if (block == null)
                    return;
                  var scrollIndex = this.quill.getIndex(block);
                  var start4 = block.newlineIndex(offset4, true) + 1;
                  var end3 = block.newlineIndex(scrollIndex + offset4 + length);
                  var lines = block.domNode.textContent.slice(start4, end3).split("\n");
                  offset4 = 0;
                  lines.forEach(function(line, i3) {
                    if (indent) {
                      block.insertAt(start4 + offset4, CodeBlock.TAB);
                      offset4 += CodeBlock.TAB.length;
                      if (i3 === 0) {
                        index2 += CodeBlock.TAB.length;
                      } else {
                        length += CodeBlock.TAB.length;
                      }
                    } else if (line.startsWith(CodeBlock.TAB)) {
                      block.deleteAt(start4 + offset4, CodeBlock.TAB.length);
                      offset4 -= CodeBlock.TAB.length;
                      if (i3 === 0) {
                        index2 -= CodeBlock.TAB.length;
                      } else {
                        length -= CodeBlock.TAB.length;
                      }
                    }
                    offset4 += line.length + 1;
                  });
                  this.quill.update(_quill2.default.sources.USER);
                  this.quill.setSelection(index2, length, _quill2.default.sources.SILENT);
                }
              };
            }
            function makeFormatHandler(format2) {
              return {
                key: format2[0].toUpperCase(),
                shortKey: true,
                handler: function handler(range, context) {
                  this.quill.format(format2, !context.format[format2], _quill2.default.sources.USER);
                }
              };
            }
            function normalize(binding) {
              if (typeof binding === "string" || typeof binding === "number") {
                return normalize({ key: binding });
              }
              if ((typeof binding === "undefined" ? "undefined" : _typeof(binding)) === "object") {
                binding = (0, _clone2.default)(binding, false);
              }
              if (typeof binding.key === "string") {
                if (Keyboard.keys[binding.key.toUpperCase()] != null) {
                  binding.key = Keyboard.keys[binding.key.toUpperCase()];
                } else if (binding.key.length === 1) {
                  binding.key = binding.key.toUpperCase().charCodeAt(0);
                } else {
                  return null;
                }
              }
              if (binding.shortKey) {
                binding[SHORTKEY] = binding.shortKey;
                delete binding.shortKey;
              }
              return binding;
            }
            exports2.default = Keyboard;
            exports2.SHORTKEY = SHORTKEY;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Cursor = function(_Parchment$Embed) {
              _inherits(Cursor2, _Parchment$Embed);
              _createClass(Cursor2, null, [{
                key: "value",
                value: function value() {
                  return void 0;
                }
              }]);
              function Cursor2(domNode, selection) {
                _classCallCheck(this, Cursor2);
                var _this = _possibleConstructorReturn(this, (Cursor2.__proto__ || Object.getPrototypeOf(Cursor2)).call(this, domNode));
                _this.selection = selection;
                _this.textNode = document.createTextNode(Cursor2.CONTENTS);
                _this.domNode.appendChild(_this.textNode);
                _this._length = 0;
                return _this;
              }
              _createClass(Cursor2, [{
                key: "detach",
                value: function detach() {
                  if (this.parent != null)
                    this.parent.removeChild(this);
                }
              }, {
                key: "format",
                value: function format2(name, value) {
                  if (this._length !== 0) {
                    return _get(Cursor2.prototype.__proto__ || Object.getPrototypeOf(Cursor2.prototype), "format", this).call(this, name, value);
                  }
                  var target = this, index2 = 0;
                  while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
                    index2 += target.offset(target.parent);
                    target = target.parent;
                  }
                  if (target != null) {
                    this._length = Cursor2.CONTENTS.length;
                    target.optimize();
                    target.formatAt(index2, Cursor2.CONTENTS.length, name, value);
                    this._length = 0;
                  }
                }
              }, {
                key: "index",
                value: function index2(node, offset4) {
                  if (node === this.textNode)
                    return 0;
                  return _get(Cursor2.prototype.__proto__ || Object.getPrototypeOf(Cursor2.prototype), "index", this).call(this, node, offset4);
                }
              }, {
                key: "length",
                value: function length() {
                  return this._length;
                }
              }, {
                key: "position",
                value: function position3() {
                  return [this.textNode, this.textNode.data.length];
                }
              }, {
                key: "remove",
                value: function remove() {
                  _get(Cursor2.prototype.__proto__ || Object.getPrototypeOf(Cursor2.prototype), "remove", this).call(this);
                  this.parent = null;
                }
              }, {
                key: "restore",
                value: function restore() {
                  if (this.selection.composing || this.parent == null)
                    return;
                  var textNode = this.textNode;
                  var range = this.selection.getNativeRange();
                  var restoreText = void 0, start4 = void 0, end3 = void 0;
                  if (range != null && range.start.node === textNode && range.end.node === textNode) {
                    var _ref = [textNode, range.start.offset, range.end.offset];
                    restoreText = _ref[0];
                    start4 = _ref[1];
                    end3 = _ref[2];
                  }
                  while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
                    this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
                  }
                  if (this.textNode.data !== Cursor2.CONTENTS) {
                    var text = this.textNode.data.split(Cursor2.CONTENTS).join("");
                    if (this.next instanceof _text2.default) {
                      restoreText = this.next.domNode;
                      this.next.insertAt(0, text);
                      this.textNode.data = Cursor2.CONTENTS;
                    } else {
                      this.textNode.data = text;
                      this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
                      this.textNode = document.createTextNode(Cursor2.CONTENTS);
                      this.domNode.appendChild(this.textNode);
                    }
                  }
                  this.remove();
                  if (start4 != null) {
                    var _map = [start4, end3].map(function(offset4) {
                      return Math.max(0, Math.min(restoreText.data.length, offset4 - 1));
                    });
                    var _map2 = _slicedToArray(_map, 2);
                    start4 = _map2[0];
                    end3 = _map2[1];
                    return {
                      startNode: restoreText,
                      startOffset: start4,
                      endNode: restoreText,
                      endOffset: end3
                    };
                  }
                }
              }, {
                key: "update",
                value: function update2(mutations, context) {
                  var _this2 = this;
                  if (mutations.some(function(mutation) {
                    return mutation.type === "characterData" && mutation.target === _this2.textNode;
                  })) {
                    var range = this.restore();
                    if (range)
                      context.range = range;
                  }
                }
              }, {
                key: "value",
                value: function value() {
                  return "";
                }
              }]);
              return Cursor2;
            }(_parchment2.default.Embed);
            Cursor.blotName = "cursor";
            Cursor.className = "ql-cursor";
            Cursor.tagName = "span";
            Cursor.CONTENTS = "\uFEFF";
            exports2.default = Cursor;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Container = function(_Parchment$Container) {
              _inherits(Container2, _Parchment$Container);
              function Container2() {
                _classCallCheck(this, Container2);
                return _possibleConstructorReturn(this, (Container2.__proto__ || Object.getPrototypeOf(Container2)).apply(this, arguments));
              }
              return Container2;
            }(_parchment2.default.Container);
            Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];
            exports2.default = Container;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.ColorStyle = exports2.ColorClass = exports2.ColorAttributor = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ColorAttributor = function(_Parchment$Attributor) {
              _inherits(ColorAttributor2, _Parchment$Attributor);
              function ColorAttributor2() {
                _classCallCheck(this, ColorAttributor2);
                return _possibleConstructorReturn(this, (ColorAttributor2.__proto__ || Object.getPrototypeOf(ColorAttributor2)).apply(this, arguments));
              }
              _createClass(ColorAttributor2, [{
                key: "value",
                value: function value(domNode) {
                  var value2 = _get(ColorAttributor2.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor2.prototype), "value", this).call(this, domNode);
                  if (!value2.startsWith("rgb("))
                    return value2;
                  value2 = value2.replace(/^[^\d]+/, "").replace(/[^\d]+$/, "");
                  return "#" + value2.split(",").map(function(component) {
                    return ("00" + parseInt(component).toString(16)).slice(-2);
                  }).join("");
                }
              }]);
              return ColorAttributor2;
            }(_parchment2.default.Attributor.Style);
            var ColorClass = new _parchment2.default.Attributor.Class("color", "ql-color", {
              scope: _parchment2.default.Scope.INLINE
            });
            var ColorStyle = new ColorAttributor("color", "color", {
              scope: _parchment2.default.Scope.INLINE
            });
            exports2.ColorAttributor = ColorAttributor;
            exports2.ColorClass = ColorClass;
            exports2.ColorStyle = ColorStyle;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.sanitize = exports2.default = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Link = function(_Inline) {
              _inherits(Link2, _Inline);
              function Link2() {
                _classCallCheck(this, Link2);
                return _possibleConstructorReturn(this, (Link2.__proto__ || Object.getPrototypeOf(Link2)).apply(this, arguments));
              }
              _createClass(Link2, [{
                key: "format",
                value: function format2(name, value) {
                  if (name !== this.statics.blotName || !value)
                    return _get(Link2.prototype.__proto__ || Object.getPrototypeOf(Link2.prototype), "format", this).call(this, name, value);
                  value = this.constructor.sanitize(value);
                  this.domNode.setAttribute("href", value);
                }
              }], [{
                key: "create",
                value: function create3(value) {
                  var node = _get(Link2.__proto__ || Object.getPrototypeOf(Link2), "create", this).call(this, value);
                  value = this.sanitize(value);
                  node.setAttribute("href", value);
                  node.setAttribute("rel", "noopener noreferrer");
                  node.setAttribute("target", "_blank");
                  return node;
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  return domNode.getAttribute("href");
                }
              }, {
                key: "sanitize",
                value: function sanitize(url) {
                  return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
                }
              }]);
              return Link2;
            }(_inline2.default);
            Link.blotName = "link";
            Link.tagName = "A";
            Link.SANITIZED_URL = "about:blank";
            Link.PROTOCOL_WHITELIST = ["http", "https", "mailto", "tel"];
            function _sanitize(url, protocols) {
              var anchor = document.createElement("a");
              anchor.href = url;
              var protocol = anchor.href.slice(0, anchor.href.indexOf(":"));
              return protocols.indexOf(protocol) > -1;
            }
            exports2.default = Link;
            exports2.sanitize = _sanitize;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _keyboard = __webpack_require__(23);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            var _dropdown = __webpack_require__(107);
            var _dropdown2 = _interopRequireDefault(_dropdown);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var optionsCounter = 0;
            function toggleAriaAttribute(element, attribute) {
              element.setAttribute(attribute, !(element.getAttribute(attribute) === "true"));
            }
            var Picker = function() {
              function Picker2(select) {
                var _this = this;
                _classCallCheck(this, Picker2);
                this.select = select;
                this.container = document.createElement("span");
                this.buildPicker();
                this.select.style.display = "none";
                this.select.parentNode.insertBefore(this.container, this.select);
                this.label.addEventListener("mousedown", function() {
                  _this.togglePicker();
                });
                this.label.addEventListener("keydown", function(event) {
                  switch (event.keyCode) {
                    case _keyboard2.default.keys.ENTER:
                      _this.togglePicker();
                      break;
                    case _keyboard2.default.keys.ESCAPE:
                      _this.escape();
                      event.preventDefault();
                      break;
                    default:
                  }
                });
                this.select.addEventListener("change", this.update.bind(this));
              }
              _createClass(Picker2, [{
                key: "togglePicker",
                value: function togglePicker() {
                  this.container.classList.toggle("ql-expanded");
                  toggleAriaAttribute(this.label, "aria-expanded");
                  toggleAriaAttribute(this.options, "aria-hidden");
                }
              }, {
                key: "buildItem",
                value: function buildItem(option) {
                  var _this2 = this;
                  var item = document.createElement("span");
                  item.tabIndex = "0";
                  item.setAttribute("role", "button");
                  item.classList.add("ql-picker-item");
                  if (option.hasAttribute("value")) {
                    item.setAttribute("data-value", option.getAttribute("value"));
                  }
                  if (option.textContent) {
                    item.setAttribute("data-label", option.textContent);
                  }
                  item.addEventListener("click", function() {
                    _this2.selectItem(item, true);
                  });
                  item.addEventListener("keydown", function(event) {
                    switch (event.keyCode) {
                      case _keyboard2.default.keys.ENTER:
                        _this2.selectItem(item, true);
                        event.preventDefault();
                        break;
                      case _keyboard2.default.keys.ESCAPE:
                        _this2.escape();
                        event.preventDefault();
                        break;
                      default:
                    }
                  });
                  return item;
                }
              }, {
                key: "buildLabel",
                value: function buildLabel() {
                  var label = document.createElement("span");
                  label.classList.add("ql-picker-label");
                  label.innerHTML = _dropdown2.default;
                  label.tabIndex = "0";
                  label.setAttribute("role", "button");
                  label.setAttribute("aria-expanded", "false");
                  this.container.appendChild(label);
                  return label;
                }
              }, {
                key: "buildOptions",
                value: function buildOptions() {
                  var _this3 = this;
                  var options = document.createElement("span");
                  options.classList.add("ql-picker-options");
                  options.setAttribute("aria-hidden", "true");
                  options.tabIndex = "-1";
                  options.id = "ql-picker-options-" + optionsCounter;
                  optionsCounter += 1;
                  this.label.setAttribute("aria-controls", options.id);
                  this.options = options;
                  [].slice.call(this.select.options).forEach(function(option) {
                    var item = _this3.buildItem(option);
                    options.appendChild(item);
                    if (option.selected === true) {
                      _this3.selectItem(item);
                    }
                  });
                  this.container.appendChild(options);
                }
              }, {
                key: "buildPicker",
                value: function buildPicker() {
                  var _this4 = this;
                  [].slice.call(this.select.attributes).forEach(function(item) {
                    _this4.container.setAttribute(item.name, item.value);
                  });
                  this.container.classList.add("ql-picker");
                  this.label = this.buildLabel();
                  this.buildOptions();
                }
              }, {
                key: "escape",
                value: function escape2() {
                  var _this5 = this;
                  this.close();
                  setTimeout(function() {
                    return _this5.label.focus();
                  }, 1);
                }
              }, {
                key: "close",
                value: function close() {
                  this.container.classList.remove("ql-expanded");
                  this.label.setAttribute("aria-expanded", "false");
                  this.options.setAttribute("aria-hidden", "true");
                }
              }, {
                key: "selectItem",
                value: function selectItem(item) {
                  var trigger = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                  var selected = this.container.querySelector(".ql-selected");
                  if (item === selected)
                    return;
                  if (selected != null) {
                    selected.classList.remove("ql-selected");
                  }
                  if (item == null)
                    return;
                  item.classList.add("ql-selected");
                  this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
                  if (item.hasAttribute("data-value")) {
                    this.label.setAttribute("data-value", item.getAttribute("data-value"));
                  } else {
                    this.label.removeAttribute("data-value");
                  }
                  if (item.hasAttribute("data-label")) {
                    this.label.setAttribute("data-label", item.getAttribute("data-label"));
                  } else {
                    this.label.removeAttribute("data-label");
                  }
                  if (trigger) {
                    if (typeof Event === "function") {
                      this.select.dispatchEvent(new Event("change"));
                    } else if ((typeof Event === "undefined" ? "undefined" : _typeof(Event)) === "object") {
                      var event = document.createEvent("Event");
                      event.initEvent("change", true, true);
                      this.select.dispatchEvent(event);
                    }
                    this.close();
                  }
                }
              }, {
                key: "update",
                value: function update2() {
                  var option = void 0;
                  if (this.select.selectedIndex > -1) {
                    var item = this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];
                    option = this.select.options[this.select.selectedIndex];
                    this.selectItem(item);
                  } else {
                    this.selectItem(null);
                  }
                  var isActive = option != null && option !== this.select.querySelector("option[selected]");
                  this.label.classList.toggle("ql-active", isActive);
                }
              }]);
              return Picker2;
            }();
            exports2.default = Picker;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _container = __webpack_require__(25);
            var _container2 = _interopRequireDefault(_container);
            var _cursor = __webpack_require__(24);
            var _cursor2 = _interopRequireDefault(_cursor);
            var _embed = __webpack_require__(35);
            var _embed2 = _interopRequireDefault(_embed);
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            var _scroll = __webpack_require__(22);
            var _scroll2 = _interopRequireDefault(_scroll);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            var _clipboard = __webpack_require__(55);
            var _clipboard2 = _interopRequireDefault(_clipboard);
            var _history = __webpack_require__(42);
            var _history2 = _interopRequireDefault(_history);
            var _keyboard = __webpack_require__(23);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            _quill2.default.register({
              "blots/block": _block2.default,
              "blots/block/embed": _block.BlockEmbed,
              "blots/break": _break2.default,
              "blots/container": _container2.default,
              "blots/cursor": _cursor2.default,
              "blots/embed": _embed2.default,
              "blots/inline": _inline2.default,
              "blots/scroll": _scroll2.default,
              "blots/text": _text2.default,
              "modules/clipboard": _clipboard2.default,
              "modules/history": _history2.default,
              "modules/keyboard": _keyboard2.default
            });
            _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);
            exports2.default = _quill2.default;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var Registry = __webpack_require__(1);
            var ShadowBlot = function() {
              function ShadowBlot2(domNode) {
                this.domNode = domNode;
                this.domNode[Registry.DATA_KEY] = { blot: this };
              }
              Object.defineProperty(ShadowBlot2.prototype, "statics", {
                get: function() {
                  return this.constructor;
                },
                enumerable: true,
                configurable: true
              });
              ShadowBlot2.create = function(value) {
                if (this.tagName == null) {
                  throw new Registry.ParchmentError("Blot definition missing tagName");
                }
                var node;
                if (Array.isArray(this.tagName)) {
                  if (typeof value === "string") {
                    value = value.toUpperCase();
                    if (parseInt(value).toString() === value) {
                      value = parseInt(value);
                    }
                  }
                  if (typeof value === "number") {
                    node = document.createElement(this.tagName[value - 1]);
                  } else if (this.tagName.indexOf(value) > -1) {
                    node = document.createElement(value);
                  } else {
                    node = document.createElement(this.tagName[0]);
                  }
                } else {
                  node = document.createElement(this.tagName);
                }
                if (this.className) {
                  node.classList.add(this.className);
                }
                return node;
              };
              ShadowBlot2.prototype.attach = function() {
                if (this.parent != null) {
                  this.scroll = this.parent.scroll;
                }
              };
              ShadowBlot2.prototype.clone = function() {
                var domNode = this.domNode.cloneNode(false);
                return Registry.create(domNode);
              };
              ShadowBlot2.prototype.detach = function() {
                if (this.parent != null)
                  this.parent.removeChild(this);
                delete this.domNode[Registry.DATA_KEY];
              };
              ShadowBlot2.prototype.deleteAt = function(index2, length) {
                var blot = this.isolate(index2, length);
                blot.remove();
              };
              ShadowBlot2.prototype.formatAt = function(index2, length, name, value) {
                var blot = this.isolate(index2, length);
                if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
                  blot.wrap(name, value);
                } else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
                  var parent = Registry.create(this.statics.scope);
                  blot.wrap(parent);
                  parent.format(name, value);
                }
              };
              ShadowBlot2.prototype.insertAt = function(index2, value, def) {
                var blot = def == null ? Registry.create("text", value) : Registry.create(value, def);
                var ref2 = this.split(index2);
                this.parent.insertBefore(blot, ref2);
              };
              ShadowBlot2.prototype.insertInto = function(parentBlot, refBlot) {
                if (refBlot === void 0) {
                  refBlot = null;
                }
                if (this.parent != null) {
                  this.parent.children.remove(this);
                }
                var refDomNode = null;
                parentBlot.children.insertBefore(this, refBlot);
                if (refBlot != null) {
                  refDomNode = refBlot.domNode;
                }
                if (this.domNode.parentNode != parentBlot.domNode || this.domNode.nextSibling != refDomNode) {
                  parentBlot.domNode.insertBefore(this.domNode, refDomNode);
                }
                this.parent = parentBlot;
                this.attach();
              };
              ShadowBlot2.prototype.isolate = function(index2, length) {
                var target = this.split(index2);
                target.split(length);
                return target;
              };
              ShadowBlot2.prototype.length = function() {
                return 1;
              };
              ShadowBlot2.prototype.offset = function(root) {
                if (root === void 0) {
                  root = this.parent;
                }
                if (this.parent == null || this == root)
                  return 0;
                return this.parent.children.offset(this) + this.parent.offset(root);
              };
              ShadowBlot2.prototype.optimize = function(context) {
                if (this.domNode[Registry.DATA_KEY] != null) {
                  delete this.domNode[Registry.DATA_KEY].mutations;
                }
              };
              ShadowBlot2.prototype.remove = function() {
                if (this.domNode.parentNode != null) {
                  this.domNode.parentNode.removeChild(this.domNode);
                }
                this.detach();
              };
              ShadowBlot2.prototype.replace = function(target) {
                if (target.parent == null)
                  return;
                target.parent.insertBefore(this, target.next);
                target.remove();
              };
              ShadowBlot2.prototype.replaceWith = function(name, value) {
                var replacement = typeof name === "string" ? Registry.create(name, value) : name;
                replacement.replace(this);
                return replacement;
              };
              ShadowBlot2.prototype.split = function(index2, force) {
                return index2 === 0 ? this : this.next;
              };
              ShadowBlot2.prototype.update = function(mutations, context) {
              };
              ShadowBlot2.prototype.wrap = function(name, value) {
                var wrapper = typeof name === "string" ? Registry.create(name, value) : name;
                if (this.parent != null) {
                  this.parent.insertBefore(wrapper, this.next);
                }
                wrapper.appendChild(this);
                return wrapper;
              };
              ShadowBlot2.blotName = "abstract";
              return ShadowBlot2;
            }();
            exports2.default = ShadowBlot;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var attributor_1 = __webpack_require__(12);
            var class_1 = __webpack_require__(32);
            var style_1 = __webpack_require__(33);
            var Registry = __webpack_require__(1);
            var AttributorStore = function() {
              function AttributorStore2(domNode) {
                this.attributes = {};
                this.domNode = domNode;
                this.build();
              }
              AttributorStore2.prototype.attribute = function(attribute, value) {
                if (value) {
                  if (attribute.add(this.domNode, value)) {
                    if (attribute.value(this.domNode) != null) {
                      this.attributes[attribute.attrName] = attribute;
                    } else {
                      delete this.attributes[attribute.attrName];
                    }
                  }
                } else {
                  attribute.remove(this.domNode);
                  delete this.attributes[attribute.attrName];
                }
              };
              AttributorStore2.prototype.build = function() {
                var _this = this;
                this.attributes = {};
                var attributes = attributor_1.default.keys(this.domNode);
                var classes = class_1.default.keys(this.domNode);
                var styles = style_1.default.keys(this.domNode);
                attributes.concat(classes).concat(styles).forEach(function(name) {
                  var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
                  if (attr instanceof attributor_1.default) {
                    _this.attributes[attr.attrName] = attr;
                  }
                });
              };
              AttributorStore2.prototype.copy = function(target) {
                var _this = this;
                Object.keys(this.attributes).forEach(function(key) {
                  var value = _this.attributes[key].value(_this.domNode);
                  target.format(key, value);
                });
              };
              AttributorStore2.prototype.move = function(target) {
                var _this = this;
                this.copy(target);
                Object.keys(this.attributes).forEach(function(key) {
                  _this.attributes[key].remove(_this.domNode);
                });
                this.attributes = {};
              };
              AttributorStore2.prototype.values = function() {
                var _this = this;
                return Object.keys(this.attributes).reduce(function(attributes, name) {
                  attributes[name] = _this.attributes[name].value(_this.domNode);
                  return attributes;
                }, {});
              };
              return AttributorStore2;
            }();
            exports2.default = AttributorStore;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var attributor_1 = __webpack_require__(12);
            function match2(node, prefix3) {
              var className = node.getAttribute("class") || "";
              return className.split(/\s+/).filter(function(name) {
                return name.indexOf(prefix3 + "-") === 0;
              });
            }
            var ClassAttributor = function(_super) {
              __extends2(ClassAttributor2, _super);
              function ClassAttributor2() {
                return _super !== null && _super.apply(this, arguments) || this;
              }
              ClassAttributor2.keys = function(node) {
                return (node.getAttribute("class") || "").split(/\s+/).map(function(name) {
                  return name.split("-").slice(0, -1).join("-");
                });
              };
              ClassAttributor2.prototype.add = function(node, value) {
                if (!this.canAdd(node, value))
                  return false;
                this.remove(node);
                node.classList.add(this.keyName + "-" + value);
                return true;
              };
              ClassAttributor2.prototype.remove = function(node) {
                var matches = match2(node, this.keyName);
                matches.forEach(function(name) {
                  node.classList.remove(name);
                });
                if (node.classList.length === 0) {
                  node.removeAttribute("class");
                }
              };
              ClassAttributor2.prototype.value = function(node) {
                var result = match2(node, this.keyName)[0] || "";
                var value = result.slice(this.keyName.length + 1);
                return this.canAdd(node, value) ? value : "";
              };
              return ClassAttributor2;
            }(attributor_1.default);
            exports2.default = ClassAttributor;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var attributor_1 = __webpack_require__(12);
            function camelize(name) {
              var parts = name.split("-");
              var rest = parts.slice(1).map(function(part) {
                return part[0].toUpperCase() + part.slice(1);
              }).join("");
              return parts[0] + rest;
            }
            var StyleAttributor = function(_super) {
              __extends2(StyleAttributor2, _super);
              function StyleAttributor2() {
                return _super !== null && _super.apply(this, arguments) || this;
              }
              StyleAttributor2.keys = function(node) {
                return (node.getAttribute("style") || "").split(";").map(function(value) {
                  var arr = value.split(":");
                  return arr[0].trim();
                });
              };
              StyleAttributor2.prototype.add = function(node, value) {
                if (!this.canAdd(node, value))
                  return false;
                node.style[camelize(this.keyName)] = value;
                return true;
              };
              StyleAttributor2.prototype.remove = function(node) {
                node.style[camelize(this.keyName)] = "";
                if (!node.getAttribute("style")) {
                  node.removeAttribute("style");
                }
              };
              StyleAttributor2.prototype.value = function(node) {
                var value = node.style[camelize(this.keyName)];
                return this.canAdd(node, value) ? value : "";
              };
              return StyleAttributor2;
            }(attributor_1.default);
            exports2.default = StyleAttributor;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var Theme = function() {
              function Theme2(quill, options) {
                _classCallCheck(this, Theme2);
                this.quill = quill;
                this.options = options;
                this.modules = {};
              }
              _createClass(Theme2, [{
                key: "init",
                value: function init() {
                  var _this = this;
                  Object.keys(this.options.modules).forEach(function(name) {
                    if (_this.modules[name] == null) {
                      _this.addModule(name);
                    }
                  });
                }
              }, {
                key: "addModule",
                value: function addModule(name) {
                  var moduleClass = this.quill.constructor.import("modules/" + name);
                  this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
                  return this.modules[name];
                }
              }]);
              return Theme2;
            }();
            Theme.DEFAULTS = {
              modules: {}
            };
            Theme.themes = {
              "default": Theme
            };
            exports2.default = Theme;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var GUARD_TEXT = "\uFEFF";
            var Embed = function(_Parchment$Embed) {
              _inherits(Embed2, _Parchment$Embed);
              function Embed2(node) {
                _classCallCheck(this, Embed2);
                var _this = _possibleConstructorReturn(this, (Embed2.__proto__ || Object.getPrototypeOf(Embed2)).call(this, node));
                _this.contentNode = document.createElement("span");
                _this.contentNode.setAttribute("contenteditable", false);
                [].slice.call(_this.domNode.childNodes).forEach(function(childNode) {
                  _this.contentNode.appendChild(childNode);
                });
                _this.leftGuard = document.createTextNode(GUARD_TEXT);
                _this.rightGuard = document.createTextNode(GUARD_TEXT);
                _this.domNode.appendChild(_this.leftGuard);
                _this.domNode.appendChild(_this.contentNode);
                _this.domNode.appendChild(_this.rightGuard);
                return _this;
              }
              _createClass(Embed2, [{
                key: "index",
                value: function index2(node, offset4) {
                  if (node === this.leftGuard)
                    return 0;
                  if (node === this.rightGuard)
                    return 1;
                  return _get(Embed2.prototype.__proto__ || Object.getPrototypeOf(Embed2.prototype), "index", this).call(this, node, offset4);
                }
              }, {
                key: "restore",
                value: function restore(node) {
                  var range = void 0, textNode = void 0;
                  var text = node.data.split(GUARD_TEXT).join("");
                  if (node === this.leftGuard) {
                    if (this.prev instanceof _text2.default) {
                      var prevLength = this.prev.length();
                      this.prev.insertAt(prevLength, text);
                      range = {
                        startNode: this.prev.domNode,
                        startOffset: prevLength + text.length
                      };
                    } else {
                      textNode = document.createTextNode(text);
                      this.parent.insertBefore(_parchment2.default.create(textNode), this);
                      range = {
                        startNode: textNode,
                        startOffset: text.length
                      };
                    }
                  } else if (node === this.rightGuard) {
                    if (this.next instanceof _text2.default) {
                      this.next.insertAt(0, text);
                      range = {
                        startNode: this.next.domNode,
                        startOffset: text.length
                      };
                    } else {
                      textNode = document.createTextNode(text);
                      this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
                      range = {
                        startNode: textNode,
                        startOffset: text.length
                      };
                    }
                  }
                  node.data = GUARD_TEXT;
                  return range;
                }
              }, {
                key: "update",
                value: function update2(mutations, context) {
                  var _this2 = this;
                  mutations.forEach(function(mutation) {
                    if (mutation.type === "characterData" && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
                      var range = _this2.restore(mutation.target);
                      if (range)
                        context.range = range;
                    }
                  });
                }
              }]);
              return Embed2;
            }(_parchment2.default.Embed);
            exports2.default = Embed;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.AlignStyle = exports2.AlignClass = exports2.AlignAttribute = void 0;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            var config2 = {
              scope: _parchment2.default.Scope.BLOCK,
              whitelist: ["right", "center", "justify"]
            };
            var AlignAttribute = new _parchment2.default.Attributor.Attribute("align", "align", config2);
            var AlignClass = new _parchment2.default.Attributor.Class("align", "ql-align", config2);
            var AlignStyle = new _parchment2.default.Attributor.Style("align", "text-align", config2);
            exports2.AlignAttribute = AlignAttribute;
            exports2.AlignClass = AlignClass;
            exports2.AlignStyle = AlignStyle;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.BackgroundStyle = exports2.BackgroundClass = void 0;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _color = __webpack_require__(26);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            var BackgroundClass = new _parchment2.default.Attributor.Class("background", "ql-bg", {
              scope: _parchment2.default.Scope.INLINE
            });
            var BackgroundStyle = new _color.ColorAttributor("background", "background-color", {
              scope: _parchment2.default.Scope.INLINE
            });
            exports2.BackgroundClass = BackgroundClass;
            exports2.BackgroundStyle = BackgroundStyle;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.DirectionStyle = exports2.DirectionClass = exports2.DirectionAttribute = void 0;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            var config2 = {
              scope: _parchment2.default.Scope.BLOCK,
              whitelist: ["rtl"]
            };
            var DirectionAttribute = new _parchment2.default.Attributor.Attribute("direction", "dir", config2);
            var DirectionClass = new _parchment2.default.Attributor.Class("direction", "ql-direction", config2);
            var DirectionStyle = new _parchment2.default.Attributor.Style("direction", "direction", config2);
            exports2.DirectionAttribute = DirectionAttribute;
            exports2.DirectionClass = DirectionClass;
            exports2.DirectionStyle = DirectionStyle;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.FontClass = exports2.FontStyle = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var config2 = {
              scope: _parchment2.default.Scope.INLINE,
              whitelist: ["serif", "monospace"]
            };
            var FontClass = new _parchment2.default.Attributor.Class("font", "ql-font", config2);
            var FontStyleAttributor = function(_Parchment$Attributor) {
              _inherits(FontStyleAttributor2, _Parchment$Attributor);
              function FontStyleAttributor2() {
                _classCallCheck(this, FontStyleAttributor2);
                return _possibleConstructorReturn(this, (FontStyleAttributor2.__proto__ || Object.getPrototypeOf(FontStyleAttributor2)).apply(this, arguments));
              }
              _createClass(FontStyleAttributor2, [{
                key: "value",
                value: function value(node) {
                  return _get(FontStyleAttributor2.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor2.prototype), "value", this).call(this, node).replace(/["']/g, "");
                }
              }]);
              return FontStyleAttributor2;
            }(_parchment2.default.Attributor.Style);
            var FontStyle = new FontStyleAttributor("font", "font-family", config2);
            exports2.FontStyle = FontStyle;
            exports2.FontClass = FontClass;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.SizeStyle = exports2.SizeClass = void 0;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            var SizeClass = new _parchment2.default.Attributor.Class("size", "ql-size", {
              scope: _parchment2.default.Scope.INLINE,
              whitelist: ["small", "large", "huge"]
            });
            var SizeStyle = new _parchment2.default.Attributor.Style("size", "font-size", {
              scope: _parchment2.default.Scope.INLINE,
              whitelist: ["10px", "18px", "32px"]
            });
            exports2.SizeClass = SizeClass;
            exports2.SizeStyle = SizeStyle;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            module2.exports = {
              "align": {
                "": __webpack_require__(76),
                "center": __webpack_require__(77),
                "right": __webpack_require__(78),
                "justify": __webpack_require__(79)
              },
              "background": __webpack_require__(80),
              "blockquote": __webpack_require__(81),
              "bold": __webpack_require__(82),
              "clean": __webpack_require__(83),
              "code": __webpack_require__(58),
              "code-block": __webpack_require__(58),
              "color": __webpack_require__(84),
              "direction": {
                "": __webpack_require__(85),
                "rtl": __webpack_require__(86)
              },
              "float": {
                "center": __webpack_require__(87),
                "full": __webpack_require__(88),
                "left": __webpack_require__(89),
                "right": __webpack_require__(90)
              },
              "formula": __webpack_require__(91),
              "header": {
                "1": __webpack_require__(92),
                "2": __webpack_require__(93)
              },
              "italic": __webpack_require__(94),
              "image": __webpack_require__(95),
              "indent": {
                "+1": __webpack_require__(96),
                "-1": __webpack_require__(97)
              },
              "link": __webpack_require__(98),
              "list": {
                "ordered": __webpack_require__(99),
                "bullet": __webpack_require__(100),
                "check": __webpack_require__(101)
              },
              "script": {
                "sub": __webpack_require__(102),
                "super": __webpack_require__(103)
              },
              "strike": __webpack_require__(104),
              "underline": __webpack_require__(105),
              "video": __webpack_require__(106)
            };
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.getLastChangeIndex = exports2.default = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var History = function(_Module) {
              _inherits(History2, _Module);
              function History2(quill, options) {
                _classCallCheck(this, History2);
                var _this = _possibleConstructorReturn(this, (History2.__proto__ || Object.getPrototypeOf(History2)).call(this, quill, options));
                _this.lastRecorded = 0;
                _this.ignoreChange = false;
                _this.clear();
                _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(eventName, delta, oldDelta, source) {
                  if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange)
                    return;
                  if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
                    _this.record(delta, oldDelta);
                  } else {
                    _this.transform(delta);
                  }
                });
                _this.quill.keyboard.addBinding({ key: "Z", shortKey: true }, _this.undo.bind(_this));
                _this.quill.keyboard.addBinding({ key: "Z", shortKey: true, shiftKey: true }, _this.redo.bind(_this));
                if (/Win/i.test(navigator.platform)) {
                  _this.quill.keyboard.addBinding({ key: "Y", shortKey: true }, _this.redo.bind(_this));
                }
                return _this;
              }
              _createClass(History2, [{
                key: "change",
                value: function change(source, dest) {
                  if (this.stack[source].length === 0)
                    return;
                  var delta = this.stack[source].pop();
                  this.stack[dest].push(delta);
                  this.lastRecorded = 0;
                  this.ignoreChange = true;
                  this.quill.updateContents(delta[source], _quill2.default.sources.USER);
                  this.ignoreChange = false;
                  var index2 = getLastChangeIndex(delta[source]);
                  this.quill.setSelection(index2);
                }
              }, {
                key: "clear",
                value: function clear() {
                  this.stack = { undo: [], redo: [] };
                }
              }, {
                key: "cutoff",
                value: function cutoff() {
                  this.lastRecorded = 0;
                }
              }, {
                key: "record",
                value: function record(changeDelta, oldDelta) {
                  if (changeDelta.ops.length === 0)
                    return;
                  this.stack.redo = [];
                  var undoDelta = this.quill.getContents().diff(oldDelta);
                  var timestamp = Date.now();
                  if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
                    var delta = this.stack.undo.pop();
                    undoDelta = undoDelta.compose(delta.undo);
                    changeDelta = delta.redo.compose(changeDelta);
                  } else {
                    this.lastRecorded = timestamp;
                  }
                  this.stack.undo.push({
                    redo: changeDelta,
                    undo: undoDelta
                  });
                  if (this.stack.undo.length > this.options.maxStack) {
                    this.stack.undo.shift();
                  }
                }
              }, {
                key: "redo",
                value: function redo() {
                  this.change("redo", "undo");
                }
              }, {
                key: "transform",
                value: function transform(delta) {
                  this.stack.undo.forEach(function(change) {
                    change.undo = delta.transform(change.undo, true);
                    change.redo = delta.transform(change.redo, true);
                  });
                  this.stack.redo.forEach(function(change) {
                    change.undo = delta.transform(change.undo, true);
                    change.redo = delta.transform(change.redo, true);
                  });
                }
              }, {
                key: "undo",
                value: function undo() {
                  this.change("undo", "redo");
                }
              }]);
              return History2;
            }(_module2.default);
            History.DEFAULTS = {
              delay: 1e3,
              maxStack: 100,
              userOnly: false
            };
            function endsWithNewlineChange(delta) {
              var lastOp = delta.ops[delta.ops.length - 1];
              if (lastOp == null)
                return false;
              if (lastOp.insert != null) {
                return typeof lastOp.insert === "string" && lastOp.insert.endsWith("\n");
              }
              if (lastOp.attributes != null) {
                return Object.keys(lastOp.attributes).some(function(attr) {
                  return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
                });
              }
              return false;
            }
            function getLastChangeIndex(delta) {
              var deleteLength = delta.reduce(function(length, op) {
                length += op.delete || 0;
                return length;
              }, 0);
              var changeIndex = delta.length() - deleteLength;
              if (endsWithNewlineChange(delta)) {
                changeIndex -= 1;
              }
              return changeIndex;
            }
            exports2.default = History;
            exports2.getLastChangeIndex = getLastChangeIndex;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.BaseTooltip = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _keyboard = __webpack_require__(23);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            var _theme = __webpack_require__(34);
            var _theme2 = _interopRequireDefault(_theme);
            var _colorPicker = __webpack_require__(59);
            var _colorPicker2 = _interopRequireDefault(_colorPicker);
            var _iconPicker = __webpack_require__(60);
            var _iconPicker2 = _interopRequireDefault(_iconPicker);
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            var _tooltip = __webpack_require__(61);
            var _tooltip2 = _interopRequireDefault(_tooltip);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ALIGNS = [false, "center", "right", "justify"];
            var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];
            var FONTS = [false, "serif", "monospace"];
            var HEADERS = ["1", "2", "3", false];
            var SIZES = ["small", false, "large", "huge"];
            var BaseTheme = function(_Theme) {
              _inherits(BaseTheme2, _Theme);
              function BaseTheme2(quill, options) {
                _classCallCheck(this, BaseTheme2);
                var _this = _possibleConstructorReturn(this, (BaseTheme2.__proto__ || Object.getPrototypeOf(BaseTheme2)).call(this, quill, options));
                var listener = function listener2(e2) {
                  if (!document.body.contains(quill.root)) {
                    return document.body.removeEventListener("click", listener2);
                  }
                  if (_this.tooltip != null && !_this.tooltip.root.contains(e2.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
                    _this.tooltip.hide();
                  }
                  if (_this.pickers != null) {
                    _this.pickers.forEach(function(picker) {
                      if (!picker.container.contains(e2.target)) {
                        picker.close();
                      }
                    });
                  }
                };
                quill.emitter.listenDOM("click", document.body, listener);
                return _this;
              }
              _createClass(BaseTheme2, [{
                key: "addModule",
                value: function addModule(name) {
                  var module3 = _get(BaseTheme2.prototype.__proto__ || Object.getPrototypeOf(BaseTheme2.prototype), "addModule", this).call(this, name);
                  if (name === "toolbar") {
                    this.extendToolbar(module3);
                  }
                  return module3;
                }
              }, {
                key: "buildButtons",
                value: function buildButtons(buttons, icons) {
                  buttons.forEach(function(button) {
                    var className = button.getAttribute("class") || "";
                    className.split(/\s+/).forEach(function(name) {
                      if (!name.startsWith("ql-"))
                        return;
                      name = name.slice("ql-".length);
                      if (icons[name] == null)
                        return;
                      if (name === "direction") {
                        button.innerHTML = icons[name][""] + icons[name]["rtl"];
                      } else if (typeof icons[name] === "string") {
                        button.innerHTML = icons[name];
                      } else {
                        var value = button.value || "";
                        if (value != null && icons[name][value]) {
                          button.innerHTML = icons[name][value];
                        }
                      }
                    });
                  });
                }
              }, {
                key: "buildPickers",
                value: function buildPickers(selects, icons) {
                  var _this2 = this;
                  this.pickers = selects.map(function(select) {
                    if (select.classList.contains("ql-align")) {
                      if (select.querySelector("option") == null) {
                        fillSelect(select, ALIGNS);
                      }
                      return new _iconPicker2.default(select, icons.align);
                    } else if (select.classList.contains("ql-background") || select.classList.contains("ql-color")) {
                      var format2 = select.classList.contains("ql-background") ? "background" : "color";
                      if (select.querySelector("option") == null) {
                        fillSelect(select, COLORS, format2 === "background" ? "#ffffff" : "#000000");
                      }
                      return new _colorPicker2.default(select, icons[format2]);
                    } else {
                      if (select.querySelector("option") == null) {
                        if (select.classList.contains("ql-font")) {
                          fillSelect(select, FONTS);
                        } else if (select.classList.contains("ql-header")) {
                          fillSelect(select, HEADERS);
                        } else if (select.classList.contains("ql-size")) {
                          fillSelect(select, SIZES);
                        }
                      }
                      return new _picker2.default(select);
                    }
                  });
                  var update2 = function update3() {
                    _this2.pickers.forEach(function(picker) {
                      picker.update();
                    });
                  };
                  this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update2);
                }
              }]);
              return BaseTheme2;
            }(_theme2.default);
            BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
              modules: {
                toolbar: {
                  handlers: {
                    formula: function formula() {
                      this.quill.theme.tooltip.edit("formula");
                    },
                    image: function image() {
                      var _this3 = this;
                      var fileInput = this.container.querySelector("input.ql-image[type=file]");
                      if (fileInput == null) {
                        fileInput = document.createElement("input");
                        fileInput.setAttribute("type", "file");
                        fileInput.setAttribute("accept", "image/png, image/gif, image/jpeg, image/bmp, image/x-icon");
                        fileInput.classList.add("ql-image");
                        fileInput.addEventListener("change", function() {
                          if (fileInput.files != null && fileInput.files[0] != null) {
                            var reader = new FileReader();
                            reader.onload = function(e2) {
                              var range = _this3.quill.getSelection(true);
                              _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e2.target.result }), _emitter2.default.sources.USER);
                              _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
                              fileInput.value = "";
                            };
                            reader.readAsDataURL(fileInput.files[0]);
                          }
                        });
                        this.container.appendChild(fileInput);
                      }
                      fileInput.click();
                    },
                    video: function video() {
                      this.quill.theme.tooltip.edit("video");
                    }
                  }
                }
              }
            });
            var BaseTooltip = function(_Tooltip) {
              _inherits(BaseTooltip2, _Tooltip);
              function BaseTooltip2(quill, boundsContainer) {
                _classCallCheck(this, BaseTooltip2);
                var _this4 = _possibleConstructorReturn(this, (BaseTooltip2.__proto__ || Object.getPrototypeOf(BaseTooltip2)).call(this, quill, boundsContainer));
                _this4.textbox = _this4.root.querySelector('input[type="text"]');
                _this4.listen();
                return _this4;
              }
              _createClass(BaseTooltip2, [{
                key: "listen",
                value: function listen() {
                  var _this5 = this;
                  this.textbox.addEventListener("keydown", function(event) {
                    if (_keyboard2.default.match(event, "enter")) {
                      _this5.save();
                      event.preventDefault();
                    } else if (_keyboard2.default.match(event, "escape")) {
                      _this5.cancel();
                      event.preventDefault();
                    }
                  });
                }
              }, {
                key: "cancel",
                value: function cancel() {
                  this.hide();
                }
              }, {
                key: "edit",
                value: function edit() {
                  var mode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "link";
                  var preview = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  this.root.classList.remove("ql-hidden");
                  this.root.classList.add("ql-editing");
                  if (preview != null) {
                    this.textbox.value = preview;
                  } else if (mode !== this.root.getAttribute("data-mode")) {
                    this.textbox.value = "";
                  }
                  this.position(this.quill.getBounds(this.quill.selection.savedRange));
                  this.textbox.select();
                  this.textbox.setAttribute("placeholder", this.textbox.getAttribute("data-" + mode) || "");
                  this.root.setAttribute("data-mode", mode);
                }
              }, {
                key: "restoreFocus",
                value: function restoreFocus() {
                  var scrollTop = this.quill.scrollingContainer.scrollTop;
                  this.quill.focus();
                  this.quill.scrollingContainer.scrollTop = scrollTop;
                }
              }, {
                key: "save",
                value: function save() {
                  var value = this.textbox.value;
                  switch (this.root.getAttribute("data-mode")) {
                    case "link": {
                      var scrollTop = this.quill.root.scrollTop;
                      if (this.linkRange) {
                        this.quill.formatText(this.linkRange, "link", value, _emitter2.default.sources.USER);
                        delete this.linkRange;
                      } else {
                        this.restoreFocus();
                        this.quill.format("link", value, _emitter2.default.sources.USER);
                      }
                      this.quill.root.scrollTop = scrollTop;
                      break;
                    }
                    case "video": {
                      value = extractVideoUrl(value);
                    }
                    case "formula": {
                      if (!value)
                        break;
                      var range = this.quill.getSelection(true);
                      if (range != null) {
                        var index2 = range.index + range.length;
                        this.quill.insertEmbed(index2, this.root.getAttribute("data-mode"), value, _emitter2.default.sources.USER);
                        if (this.root.getAttribute("data-mode") === "formula") {
                          this.quill.insertText(index2 + 1, " ", _emitter2.default.sources.USER);
                        }
                        this.quill.setSelection(index2 + 2, _emitter2.default.sources.USER);
                      }
                      break;
                    }
                    default:
                  }
                  this.textbox.value = "";
                  this.hide();
                }
              }]);
              return BaseTooltip2;
            }(_tooltip2.default);
            function extractVideoUrl(url) {
              var match2 = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
              if (match2) {
                return (match2[1] || "https") + "://www.youtube.com/embed/" + match2[2] + "?showinfo=0";
              }
              if (match2 = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
                return (match2[1] || "https") + "://player.vimeo.com/video/" + match2[2] + "/";
              }
              return url;
            }
            function fillSelect(select, values2) {
              var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              values2.forEach(function(value) {
                var option = document.createElement("option");
                if (value === defaultValue) {
                  option.setAttribute("selected", "selected");
                } else {
                  option.setAttribute("value", value);
                }
                select.appendChild(option);
              });
            }
            exports2.BaseTooltip = BaseTooltip;
            exports2.default = BaseTheme;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var LinkedList = function() {
              function LinkedList2() {
                this.head = this.tail = null;
                this.length = 0;
              }
              LinkedList2.prototype.append = function() {
                var nodes = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  nodes[_i] = arguments[_i];
                }
                this.insertBefore(nodes[0], null);
                if (nodes.length > 1) {
                  this.append.apply(this, nodes.slice(1));
                }
              };
              LinkedList2.prototype.contains = function(node) {
                var cur, next = this.iterator();
                while (cur = next()) {
                  if (cur === node)
                    return true;
                }
                return false;
              };
              LinkedList2.prototype.insertBefore = function(node, refNode) {
                if (!node)
                  return;
                node.next = refNode;
                if (refNode != null) {
                  node.prev = refNode.prev;
                  if (refNode.prev != null) {
                    refNode.prev.next = node;
                  }
                  refNode.prev = node;
                  if (refNode === this.head) {
                    this.head = node;
                  }
                } else if (this.tail != null) {
                  this.tail.next = node;
                  node.prev = this.tail;
                  this.tail = node;
                } else {
                  node.prev = null;
                  this.head = this.tail = node;
                }
                this.length += 1;
              };
              LinkedList2.prototype.offset = function(target) {
                var index2 = 0, cur = this.head;
                while (cur != null) {
                  if (cur === target)
                    return index2;
                  index2 += cur.length();
                  cur = cur.next;
                }
                return -1;
              };
              LinkedList2.prototype.remove = function(node) {
                if (!this.contains(node))
                  return;
                if (node.prev != null)
                  node.prev.next = node.next;
                if (node.next != null)
                  node.next.prev = node.prev;
                if (node === this.head)
                  this.head = node.next;
                if (node === this.tail)
                  this.tail = node.prev;
                this.length -= 1;
              };
              LinkedList2.prototype.iterator = function(curNode) {
                if (curNode === void 0) {
                  curNode = this.head;
                }
                return function() {
                  var ret = curNode;
                  if (curNode != null)
                    curNode = curNode.next;
                  return ret;
                };
              };
              LinkedList2.prototype.find = function(index2, inclusive) {
                if (inclusive === void 0) {
                  inclusive = false;
                }
                var cur, next = this.iterator();
                while (cur = next()) {
                  var length = cur.length();
                  if (index2 < length || inclusive && index2 === length && (cur.next == null || cur.next.length() !== 0)) {
                    return [cur, index2];
                  }
                  index2 -= length;
                }
                return [null, 0];
              };
              LinkedList2.prototype.forEach = function(callback) {
                var cur, next = this.iterator();
                while (cur = next()) {
                  callback(cur);
                }
              };
              LinkedList2.prototype.forEachAt = function(index2, length, callback) {
                if (length <= 0)
                  return;
                var _a2 = this.find(index2), startNode = _a2[0], offset4 = _a2[1];
                var cur, curIndex = index2 - offset4, next = this.iterator(startNode);
                while ((cur = next()) && curIndex < index2 + length) {
                  var curLength = cur.length();
                  if (index2 > curIndex) {
                    callback(cur, index2 - curIndex, Math.min(length, curIndex + curLength - index2));
                  } else {
                    callback(cur, 0, Math.min(curLength, index2 + length - curIndex));
                  }
                  curIndex += curLength;
                }
              };
              LinkedList2.prototype.map = function(callback) {
                return this.reduce(function(memo2, cur) {
                  memo2.push(callback(cur));
                  return memo2;
                }, []);
              };
              LinkedList2.prototype.reduce = function(callback, memo2) {
                var cur, next = this.iterator();
                while (cur = next()) {
                  memo2 = callback(memo2, cur);
                }
                return memo2;
              };
              return LinkedList2;
            }();
            exports2.default = LinkedList;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var container_1 = __webpack_require__(17);
            var Registry = __webpack_require__(1);
            var OBSERVER_CONFIG = {
              attributes: true,
              characterData: true,
              characterDataOldValue: true,
              childList: true,
              subtree: true
            };
            var MAX_OPTIMIZE_ITERATIONS = 100;
            var ScrollBlot = function(_super) {
              __extends2(ScrollBlot2, _super);
              function ScrollBlot2(node) {
                var _this = _super.call(this, node) || this;
                _this.scroll = _this;
                _this.observer = new MutationObserver(function(mutations) {
                  _this.update(mutations);
                });
                _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
                _this.attach();
                return _this;
              }
              ScrollBlot2.prototype.detach = function() {
                _super.prototype.detach.call(this);
                this.observer.disconnect();
              };
              ScrollBlot2.prototype.deleteAt = function(index2, length) {
                this.update();
                if (index2 === 0 && length === this.length()) {
                  this.children.forEach(function(child) {
                    child.remove();
                  });
                } else {
                  _super.prototype.deleteAt.call(this, index2, length);
                }
              };
              ScrollBlot2.prototype.formatAt = function(index2, length, name, value) {
                this.update();
                _super.prototype.formatAt.call(this, index2, length, name, value);
              };
              ScrollBlot2.prototype.insertAt = function(index2, value, def) {
                this.update();
                _super.prototype.insertAt.call(this, index2, value, def);
              };
              ScrollBlot2.prototype.optimize = function(mutations, context) {
                var _this = this;
                if (mutations === void 0) {
                  mutations = [];
                }
                if (context === void 0) {
                  context = {};
                }
                _super.prototype.optimize.call(this, context);
                var records = [].slice.call(this.observer.takeRecords());
                while (records.length > 0)
                  mutations.push(records.pop());
                var mark = function(blot, markParent) {
                  if (markParent === void 0) {
                    markParent = true;
                  }
                  if (blot == null || blot === _this)
                    return;
                  if (blot.domNode.parentNode == null)
                    return;
                  if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                    blot.domNode[Registry.DATA_KEY].mutations = [];
                  }
                  if (markParent)
                    mark(blot.parent);
                };
                var optimize = function(blot) {
                  if (blot.domNode[Registry.DATA_KEY] == null || blot.domNode[Registry.DATA_KEY].mutations == null) {
                    return;
                  }
                  if (blot instanceof container_1.default) {
                    blot.children.forEach(optimize);
                  }
                  blot.optimize(context);
                };
                var remaining = mutations;
                for (var i3 = 0; remaining.length > 0; i3 += 1) {
                  if (i3 >= MAX_OPTIMIZE_ITERATIONS) {
                    throw new Error("[Parchment] Maximum optimize iterations reached");
                  }
                  remaining.forEach(function(mutation) {
                    var blot = Registry.find(mutation.target, true);
                    if (blot == null)
                      return;
                    if (blot.domNode === mutation.target) {
                      if (mutation.type === "childList") {
                        mark(Registry.find(mutation.previousSibling, false));
                        [].forEach.call(mutation.addedNodes, function(node) {
                          var child = Registry.find(node, false);
                          mark(child, false);
                          if (child instanceof container_1.default) {
                            child.children.forEach(function(grandChild) {
                              mark(grandChild, false);
                            });
                          }
                        });
                      } else if (mutation.type === "attributes") {
                        mark(blot.prev);
                      }
                    }
                    mark(blot);
                  });
                  this.children.forEach(optimize);
                  remaining = [].slice.call(this.observer.takeRecords());
                  records = remaining.slice();
                  while (records.length > 0)
                    mutations.push(records.pop());
                }
              };
              ScrollBlot2.prototype.update = function(mutations, context) {
                var _this = this;
                if (context === void 0) {
                  context = {};
                }
                mutations = mutations || this.observer.takeRecords();
                mutations.map(function(mutation) {
                  var blot = Registry.find(mutation.target, true);
                  if (blot == null)
                    return null;
                  if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                    blot.domNode[Registry.DATA_KEY].mutations = [mutation];
                    return blot;
                  } else {
                    blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                    return null;
                  }
                }).forEach(function(blot) {
                  if (blot == null || blot === _this || blot.domNode[Registry.DATA_KEY] == null)
                    return;
                  blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
                });
                if (this.domNode[Registry.DATA_KEY].mutations != null) {
                  _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
                }
                this.optimize(mutations, context);
              };
              ScrollBlot2.blotName = "scroll";
              ScrollBlot2.defaultChild = "block";
              ScrollBlot2.scope = Registry.Scope.BLOCK_BLOT;
              ScrollBlot2.tagName = "DIV";
              return ScrollBlot2;
            }(container_1.default);
            exports2.default = ScrollBlot;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var format_1 = __webpack_require__(18);
            var Registry = __webpack_require__(1);
            function isEqual5(obj1, obj2) {
              if (Object.keys(obj1).length !== Object.keys(obj2).length)
                return false;
              for (var prop in obj1) {
                if (obj1[prop] !== obj2[prop])
                  return false;
              }
              return true;
            }
            var InlineBlot = function(_super) {
              __extends2(InlineBlot2, _super);
              function InlineBlot2() {
                return _super !== null && _super.apply(this, arguments) || this;
              }
              InlineBlot2.formats = function(domNode) {
                if (domNode.tagName === InlineBlot2.tagName)
                  return void 0;
                return _super.formats.call(this, domNode);
              };
              InlineBlot2.prototype.format = function(name, value) {
                var _this = this;
                if (name === this.statics.blotName && !value) {
                  this.children.forEach(function(child) {
                    if (!(child instanceof format_1.default)) {
                      child = child.wrap(InlineBlot2.blotName, true);
                    }
                    _this.attributes.copy(child);
                  });
                  this.unwrap();
                } else {
                  _super.prototype.format.call(this, name, value);
                }
              };
              InlineBlot2.prototype.formatAt = function(index2, length, name, value) {
                if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
                  var blot = this.isolate(index2, length);
                  blot.format(name, value);
                } else {
                  _super.prototype.formatAt.call(this, index2, length, name, value);
                }
              };
              InlineBlot2.prototype.optimize = function(context) {
                _super.prototype.optimize.call(this, context);
                var formats = this.formats();
                if (Object.keys(formats).length === 0) {
                  return this.unwrap();
                }
                var next = this.next;
                if (next instanceof InlineBlot2 && next.prev === this && isEqual5(formats, next.formats())) {
                  next.moveChildren(this);
                  next.remove();
                }
              };
              InlineBlot2.blotName = "inline";
              InlineBlot2.scope = Registry.Scope.INLINE_BLOT;
              InlineBlot2.tagName = "SPAN";
              return InlineBlot2;
            }(format_1.default);
            exports2.default = InlineBlot;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var format_1 = __webpack_require__(18);
            var Registry = __webpack_require__(1);
            var BlockBlot = function(_super) {
              __extends2(BlockBlot2, _super);
              function BlockBlot2() {
                return _super !== null && _super.apply(this, arguments) || this;
              }
              BlockBlot2.formats = function(domNode) {
                var tagName = Registry.query(BlockBlot2.blotName).tagName;
                if (domNode.tagName === tagName)
                  return void 0;
                return _super.formats.call(this, domNode);
              };
              BlockBlot2.prototype.format = function(name, value) {
                if (Registry.query(name, Registry.Scope.BLOCK) == null) {
                  return;
                } else if (name === this.statics.blotName && !value) {
                  this.replaceWith(BlockBlot2.blotName);
                } else {
                  _super.prototype.format.call(this, name, value);
                }
              };
              BlockBlot2.prototype.formatAt = function(index2, length, name, value) {
                if (Registry.query(name, Registry.Scope.BLOCK) != null) {
                  this.format(name, value);
                } else {
                  _super.prototype.formatAt.call(this, index2, length, name, value);
                }
              };
              BlockBlot2.prototype.insertAt = function(index2, value, def) {
                if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
                  _super.prototype.insertAt.call(this, index2, value, def);
                } else {
                  var after = this.split(index2);
                  var blot = Registry.create(value, def);
                  after.parent.insertBefore(blot, after);
                }
              };
              BlockBlot2.prototype.update = function(mutations, context) {
                if (navigator.userAgent.match(/Trident/)) {
                  this.build();
                } else {
                  _super.prototype.update.call(this, mutations, context);
                }
              };
              BlockBlot2.blotName = "block";
              BlockBlot2.scope = Registry.Scope.BLOCK_BLOT;
              BlockBlot2.tagName = "P";
              return BlockBlot2;
            }(format_1.default);
            exports2.default = BlockBlot;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var leaf_1 = __webpack_require__(19);
            var EmbedBlot = function(_super) {
              __extends2(EmbedBlot2, _super);
              function EmbedBlot2() {
                return _super !== null && _super.apply(this, arguments) || this;
              }
              EmbedBlot2.formats = function(domNode) {
                return void 0;
              };
              EmbedBlot2.prototype.format = function(name, value) {
                _super.prototype.formatAt.call(this, 0, this.length(), name, value);
              };
              EmbedBlot2.prototype.formatAt = function(index2, length, name, value) {
                if (index2 === 0 && length === this.length()) {
                  this.format(name, value);
                } else {
                  _super.prototype.formatAt.call(this, index2, length, name, value);
                }
              };
              EmbedBlot2.prototype.formats = function() {
                return this.statics.formats(this.domNode);
              };
              return EmbedBlot2;
            }(leaf_1.default);
            exports2.default = EmbedBlot;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends2 = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
                d4.__proto__ = b3;
              } || function(d4, b3) {
                for (var p3 in b3)
                  if (b3.hasOwnProperty(p3))
                    d4[p3] = b3[p3];
              };
              return function(d4, b3) {
                extendStatics(d4, b3);
                function __() {
                  this.constructor = d4;
                }
                d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var leaf_1 = __webpack_require__(19);
            var Registry = __webpack_require__(1);
            var TextBlot = function(_super) {
              __extends2(TextBlot2, _super);
              function TextBlot2(node) {
                var _this = _super.call(this, node) || this;
                _this.text = _this.statics.value(_this.domNode);
                return _this;
              }
              TextBlot2.create = function(value) {
                return document.createTextNode(value);
              };
              TextBlot2.value = function(domNode) {
                var text = domNode.data;
                if (text["normalize"])
                  text = text["normalize"]();
                return text;
              };
              TextBlot2.prototype.deleteAt = function(index2, length) {
                this.domNode.data = this.text = this.text.slice(0, index2) + this.text.slice(index2 + length);
              };
              TextBlot2.prototype.index = function(node, offset4) {
                if (this.domNode === node) {
                  return offset4;
                }
                return -1;
              };
              TextBlot2.prototype.insertAt = function(index2, value, def) {
                if (def == null) {
                  this.text = this.text.slice(0, index2) + value + this.text.slice(index2);
                  this.domNode.data = this.text;
                } else {
                  _super.prototype.insertAt.call(this, index2, value, def);
                }
              };
              TextBlot2.prototype.length = function() {
                return this.text.length;
              };
              TextBlot2.prototype.optimize = function(context) {
                _super.prototype.optimize.call(this, context);
                this.text = this.statics.value(this.domNode);
                if (this.text.length === 0) {
                  this.remove();
                } else if (this.next instanceof TextBlot2 && this.next.prev === this) {
                  this.insertAt(this.length(), this.next.value());
                  this.next.remove();
                }
              };
              TextBlot2.prototype.position = function(index2, inclusive) {
                if (inclusive === void 0) {
                  inclusive = false;
                }
                return [this.domNode, index2];
              };
              TextBlot2.prototype.split = function(index2, force) {
                if (force === void 0) {
                  force = false;
                }
                if (!force) {
                  if (index2 === 0)
                    return this;
                  if (index2 === this.length())
                    return this.next;
                }
                var after = Registry.create(this.domNode.splitText(index2));
                this.parent.insertBefore(after, this.next);
                this.text = this.statics.value(this.domNode);
                return after;
              };
              TextBlot2.prototype.update = function(mutations, context) {
                var _this = this;
                if (mutations.some(function(mutation) {
                  return mutation.type === "characterData" && mutation.target === _this.domNode;
                })) {
                  this.text = this.statics.value(this.domNode);
                }
              };
              TextBlot2.prototype.value = function() {
                return this.text;
              };
              TextBlot2.blotName = "text";
              TextBlot2.scope = Registry.Scope.INLINE_BLOT;
              return TextBlot2;
            }(leaf_1.default);
            exports2.default = TextBlot;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var elem = document.createElement("div");
            elem.classList.toggle("test-class", false);
            if (elem.classList.contains("test-class")) {
              var _toggle = DOMTokenList.prototype.toggle;
              DOMTokenList.prototype.toggle = function(token, force) {
                if (arguments.length > 1 && !this.contains(token) === !force) {
                  return force;
                } else {
                  return _toggle.call(this, token);
                }
              };
            }
            if (!String.prototype.startsWith) {
              String.prototype.startsWith = function(searchString, position3) {
                position3 = position3 || 0;
                return this.substr(position3, searchString.length) === searchString;
              };
            }
            if (!String.prototype.endsWith) {
              String.prototype.endsWith = function(searchString, position3) {
                var subjectString = this.toString();
                if (typeof position3 !== "number" || !isFinite(position3) || Math.floor(position3) !== position3 || position3 > subjectString.length) {
                  position3 = subjectString.length;
                }
                position3 -= searchString.length;
                var lastIndex = subjectString.indexOf(searchString, position3);
                return lastIndex !== -1 && lastIndex === position3;
              };
            }
            if (!Array.prototype.find) {
              Object.defineProperty(Array.prototype, "find", {
                value: function value(predicate) {
                  if (this === null) {
                    throw new TypeError("Array.prototype.find called on null or undefined");
                  }
                  if (typeof predicate !== "function") {
                    throw new TypeError("predicate must be a function");
                  }
                  var list = Object(this);
                  var length = list.length >>> 0;
                  var thisArg = arguments[1];
                  var value2;
                  for (var i3 = 0; i3 < length; i3++) {
                    value2 = list[i3];
                    if (predicate.call(thisArg, value2, i3, list)) {
                      return value2;
                    }
                  }
                  return void 0;
                }
              });
            }
            document.addEventListener("DOMContentLoaded", function() {
              document.execCommand("enableObjectResizing", false, false);
              document.execCommand("autoUrlDetect", false, false);
            });
          },
          function(module2, exports2) {
            var DIFF_DELETE = -1;
            var DIFF_INSERT = 1;
            var DIFF_EQUAL = 0;
            function diff_main(text1, text2, cursor_pos) {
              if (text1 == text2) {
                if (text1) {
                  return [[DIFF_EQUAL, text1]];
                }
                return [];
              }
              if (cursor_pos < 0 || text1.length < cursor_pos) {
                cursor_pos = null;
              }
              var commonlength = diff_commonPrefix(text1, text2);
              var commonprefix = text1.substring(0, commonlength);
              text1 = text1.substring(commonlength);
              text2 = text2.substring(commonlength);
              commonlength = diff_commonSuffix(text1, text2);
              var commonsuffix = text1.substring(text1.length - commonlength);
              text1 = text1.substring(0, text1.length - commonlength);
              text2 = text2.substring(0, text2.length - commonlength);
              var diffs = diff_compute_(text1, text2);
              if (commonprefix) {
                diffs.unshift([DIFF_EQUAL, commonprefix]);
              }
              if (commonsuffix) {
                diffs.push([DIFF_EQUAL, commonsuffix]);
              }
              diff_cleanupMerge(diffs);
              if (cursor_pos != null) {
                diffs = fix_cursor(diffs, cursor_pos);
              }
              diffs = fix_emoji(diffs);
              return diffs;
            }
            ;
            function diff_compute_(text1, text2) {
              var diffs;
              if (!text1) {
                return [[DIFF_INSERT, text2]];
              }
              if (!text2) {
                return [[DIFF_DELETE, text1]];
              }
              var longtext = text1.length > text2.length ? text1 : text2;
              var shorttext = text1.length > text2.length ? text2 : text1;
              var i3 = longtext.indexOf(shorttext);
              if (i3 != -1) {
                diffs = [
                  [DIFF_INSERT, longtext.substring(0, i3)],
                  [DIFF_EQUAL, shorttext],
                  [DIFF_INSERT, longtext.substring(i3 + shorttext.length)]
                ];
                if (text1.length > text2.length) {
                  diffs[0][0] = diffs[2][0] = DIFF_DELETE;
                }
                return diffs;
              }
              if (shorttext.length == 1) {
                return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
              }
              var hm = diff_halfMatch_(text1, text2);
              if (hm) {
                var text1_a = hm[0];
                var text1_b = hm[1];
                var text2_a = hm[2];
                var text2_b = hm[3];
                var mid_common = hm[4];
                var diffs_a = diff_main(text1_a, text2_a);
                var diffs_b = diff_main(text1_b, text2_b);
                return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
              }
              return diff_bisect_(text1, text2);
            }
            ;
            function diff_bisect_(text1, text2) {
              var text1_length = text1.length;
              var text2_length = text2.length;
              var max_d = Math.ceil((text1_length + text2_length) / 2);
              var v_offset = max_d;
              var v_length = 2 * max_d;
              var v1 = new Array(v_length);
              var v22 = new Array(v_length);
              for (var x3 = 0; x3 < v_length; x3++) {
                v1[x3] = -1;
                v22[x3] = -1;
              }
              v1[v_offset + 1] = 0;
              v22[v_offset + 1] = 0;
              var delta = text1_length - text2_length;
              var front = delta % 2 != 0;
              var k1start = 0;
              var k1end = 0;
              var k2start = 0;
              var k2end = 0;
              for (var d4 = 0; d4 < max_d; d4++) {
                for (var k1 = -d4 + k1start; k1 <= d4 - k1end; k1 += 2) {
                  var k1_offset = v_offset + k1;
                  var x1;
                  if (k1 == -d4 || k1 != d4 && v1[k1_offset - 1] < v1[k1_offset + 1]) {
                    x1 = v1[k1_offset + 1];
                  } else {
                    x1 = v1[k1_offset - 1] + 1;
                  }
                  var y1 = x1 - k1;
                  while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
                    x1++;
                    y1++;
                  }
                  v1[k1_offset] = x1;
                  if (x1 > text1_length) {
                    k1end += 2;
                  } else if (y1 > text2_length) {
                    k1start += 2;
                  } else if (front) {
                    var k2_offset = v_offset + delta - k1;
                    if (k2_offset >= 0 && k2_offset < v_length && v22[k2_offset] != -1) {
                      var x22 = text1_length - v22[k2_offset];
                      if (x1 >= x22) {
                        return diff_bisectSplit_(text1, text2, x1, y1);
                      }
                    }
                  }
                }
                for (var k22 = -d4 + k2start; k22 <= d4 - k2end; k22 += 2) {
                  var k2_offset = v_offset + k22;
                  var x22;
                  if (k22 == -d4 || k22 != d4 && v22[k2_offset - 1] < v22[k2_offset + 1]) {
                    x22 = v22[k2_offset + 1];
                  } else {
                    x22 = v22[k2_offset - 1] + 1;
                  }
                  var y2 = x22 - k22;
                  while (x22 < text1_length && y2 < text2_length && text1.charAt(text1_length - x22 - 1) == text2.charAt(text2_length - y2 - 1)) {
                    x22++;
                    y2++;
                  }
                  v22[k2_offset] = x22;
                  if (x22 > text1_length) {
                    k2end += 2;
                  } else if (y2 > text2_length) {
                    k2start += 2;
                  } else if (!front) {
                    var k1_offset = v_offset + delta - k22;
                    if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
                      var x1 = v1[k1_offset];
                      var y1 = v_offset + x1 - k1_offset;
                      x22 = text1_length - x22;
                      if (x1 >= x22) {
                        return diff_bisectSplit_(text1, text2, x1, y1);
                      }
                    }
                  }
                }
              }
              return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
            }
            ;
            function diff_bisectSplit_(text1, text2, x3, y2) {
              var text1a = text1.substring(0, x3);
              var text2a = text2.substring(0, y2);
              var text1b = text1.substring(x3);
              var text2b = text2.substring(y2);
              var diffs = diff_main(text1a, text2a);
              var diffsb = diff_main(text1b, text2b);
              return diffs.concat(diffsb);
            }
            ;
            function diff_commonPrefix(text1, text2) {
              if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
                return 0;
              }
              var pointermin = 0;
              var pointermax = Math.min(text1.length, text2.length);
              var pointermid = pointermax;
              var pointerstart = 0;
              while (pointermin < pointermid) {
                if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
                  pointermin = pointermid;
                  pointerstart = pointermin;
                } else {
                  pointermax = pointermid;
                }
                pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
              }
              return pointermid;
            }
            ;
            function diff_commonSuffix(text1, text2) {
              if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
                return 0;
              }
              var pointermin = 0;
              var pointermax = Math.min(text1.length, text2.length);
              var pointermid = pointermax;
              var pointerend = 0;
              while (pointermin < pointermid) {
                if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
                  pointermin = pointermid;
                  pointerend = pointermin;
                } else {
                  pointermax = pointermid;
                }
                pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
              }
              return pointermid;
            }
            ;
            function diff_halfMatch_(text1, text2) {
              var longtext = text1.length > text2.length ? text1 : text2;
              var shorttext = text1.length > text2.length ? text2 : text1;
              if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
                return null;
              }
              function diff_halfMatchI_(longtext2, shorttext2, i3) {
                var seed = longtext2.substring(i3, i3 + Math.floor(longtext2.length / 4));
                var j4 = -1;
                var best_common = "";
                var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
                while ((j4 = shorttext2.indexOf(seed, j4 + 1)) != -1) {
                  var prefixLength = diff_commonPrefix(
                    longtext2.substring(i3),
                    shorttext2.substring(j4)
                  );
                  var suffixLength = diff_commonSuffix(
                    longtext2.substring(0, i3),
                    shorttext2.substring(0, j4)
                  );
                  if (best_common.length < suffixLength + prefixLength) {
                    best_common = shorttext2.substring(j4 - suffixLength, j4) + shorttext2.substring(j4, j4 + prefixLength);
                    best_longtext_a = longtext2.substring(0, i3 - suffixLength);
                    best_longtext_b = longtext2.substring(i3 + prefixLength);
                    best_shorttext_a = shorttext2.substring(0, j4 - suffixLength);
                    best_shorttext_b = shorttext2.substring(j4 + prefixLength);
                  }
                }
                if (best_common.length * 2 >= longtext2.length) {
                  return [
                    best_longtext_a,
                    best_longtext_b,
                    best_shorttext_a,
                    best_shorttext_b,
                    best_common
                  ];
                } else {
                  return null;
                }
              }
              var hm1 = diff_halfMatchI_(
                longtext,
                shorttext,
                Math.ceil(longtext.length / 4)
              );
              var hm2 = diff_halfMatchI_(
                longtext,
                shorttext,
                Math.ceil(longtext.length / 2)
              );
              var hm;
              if (!hm1 && !hm2) {
                return null;
              } else if (!hm2) {
                hm = hm1;
              } else if (!hm1) {
                hm = hm2;
              } else {
                hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
              }
              var text1_a, text1_b, text2_a, text2_b;
              if (text1.length > text2.length) {
                text1_a = hm[0];
                text1_b = hm[1];
                text2_a = hm[2];
                text2_b = hm[3];
              } else {
                text2_a = hm[0];
                text2_b = hm[1];
                text1_a = hm[2];
                text1_b = hm[3];
              }
              var mid_common = hm[4];
              return [text1_a, text1_b, text2_a, text2_b, mid_common];
            }
            ;
            function diff_cleanupMerge(diffs) {
              diffs.push([DIFF_EQUAL, ""]);
              var pointer = 0;
              var count_delete = 0;
              var count_insert = 0;
              var text_delete = "";
              var text_insert = "";
              var commonlength;
              while (pointer < diffs.length) {
                switch (diffs[pointer][0]) {
                  case DIFF_INSERT:
                    count_insert++;
                    text_insert += diffs[pointer][1];
                    pointer++;
                    break;
                  case DIFF_DELETE:
                    count_delete++;
                    text_delete += diffs[pointer][1];
                    pointer++;
                    break;
                  case DIFF_EQUAL:
                    if (count_delete + count_insert > 1) {
                      if (count_delete !== 0 && count_insert !== 0) {
                        commonlength = diff_commonPrefix(text_insert, text_delete);
                        if (commonlength !== 0) {
                          if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                            diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                          } else {
                            diffs.splice(0, 0, [
                              DIFF_EQUAL,
                              text_insert.substring(0, commonlength)
                            ]);
                            pointer++;
                          }
                          text_insert = text_insert.substring(commonlength);
                          text_delete = text_delete.substring(commonlength);
                        }
                        commonlength = diff_commonSuffix(text_insert, text_delete);
                        if (commonlength !== 0) {
                          diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                          text_insert = text_insert.substring(0, text_insert.length - commonlength);
                          text_delete = text_delete.substring(0, text_delete.length - commonlength);
                        }
                      }
                      if (count_delete === 0) {
                        diffs.splice(
                          pointer - count_insert,
                          count_delete + count_insert,
                          [DIFF_INSERT, text_insert]
                        );
                      } else if (count_insert === 0) {
                        diffs.splice(
                          pointer - count_delete,
                          count_delete + count_insert,
                          [DIFF_DELETE, text_delete]
                        );
                      } else {
                        diffs.splice(
                          pointer - count_delete - count_insert,
                          count_delete + count_insert,
                          [DIFF_DELETE, text_delete],
                          [DIFF_INSERT, text_insert]
                        );
                      }
                      pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
                    } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
                      diffs[pointer - 1][1] += diffs[pointer][1];
                      diffs.splice(pointer, 1);
                    } else {
                      pointer++;
                    }
                    count_insert = 0;
                    count_delete = 0;
                    text_delete = "";
                    text_insert = "";
                    break;
                }
              }
              if (diffs[diffs.length - 1][1] === "") {
                diffs.pop();
              }
              var changes = false;
              pointer = 1;
              while (pointer < diffs.length - 1) {
                if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
                  if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
                    diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
                    diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
                    diffs.splice(pointer - 1, 1);
                    changes = true;
                  } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
                    diffs[pointer - 1][1] += diffs[pointer + 1][1];
                    diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
                    diffs.splice(pointer + 1, 1);
                    changes = true;
                  }
                }
                pointer++;
              }
              if (changes) {
                diff_cleanupMerge(diffs);
              }
            }
            ;
            var diff = diff_main;
            diff.INSERT = DIFF_INSERT;
            diff.DELETE = DIFF_DELETE;
            diff.EQUAL = DIFF_EQUAL;
            module2.exports = diff;
            function cursor_normalize_diff(diffs, cursor_pos) {
              if (cursor_pos === 0) {
                return [DIFF_EQUAL, diffs];
              }
              for (var current_pos = 0, i3 = 0; i3 < diffs.length; i3++) {
                var d4 = diffs[i3];
                if (d4[0] === DIFF_DELETE || d4[0] === DIFF_EQUAL) {
                  var next_pos = current_pos + d4[1].length;
                  if (cursor_pos === next_pos) {
                    return [i3 + 1, diffs];
                  } else if (cursor_pos < next_pos) {
                    diffs = diffs.slice();
                    var split_pos = cursor_pos - current_pos;
                    var d_left = [d4[0], d4[1].slice(0, split_pos)];
                    var d_right = [d4[0], d4[1].slice(split_pos)];
                    diffs.splice(i3, 1, d_left, d_right);
                    return [i3 + 1, diffs];
                  } else {
                    current_pos = next_pos;
                  }
                }
              }
              throw new Error("cursor_pos is out of bounds!");
            }
            function fix_cursor(diffs, cursor_pos) {
              var norm = cursor_normalize_diff(diffs, cursor_pos);
              var ndiffs = norm[1];
              var cursor_pointer = norm[0];
              var d4 = ndiffs[cursor_pointer];
              var d_next = ndiffs[cursor_pointer + 1];
              if (d4 == null) {
                return diffs;
              } else if (d4[0] !== DIFF_EQUAL) {
                return diffs;
              } else {
                if (d_next != null && d4[1] + d_next[1] === d_next[1] + d4[1]) {
                  ndiffs.splice(cursor_pointer, 2, d_next, d4);
                  return merge_tuples(ndiffs, cursor_pointer, 2);
                } else if (d_next != null && d_next[1].indexOf(d4[1]) === 0) {
                  ndiffs.splice(cursor_pointer, 2, [d_next[0], d4[1]], [0, d4[1]]);
                  var suffix2 = d_next[1].slice(d4[1].length);
                  if (suffix2.length > 0) {
                    ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix2]);
                  }
                  return merge_tuples(ndiffs, cursor_pointer, 3);
                } else {
                  return diffs;
                }
              }
            }
            function fix_emoji(diffs) {
              var compact = false;
              var starts_with_pair_end = function(str) {
                return str.charCodeAt(0) >= 56320 && str.charCodeAt(0) <= 57343;
              };
              var ends_with_pair_start = function(str) {
                return str.charCodeAt(str.length - 1) >= 55296 && str.charCodeAt(str.length - 1) <= 56319;
              };
              for (var i3 = 2; i3 < diffs.length; i3 += 1) {
                if (diffs[i3 - 2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i3 - 2][1]) && diffs[i3 - 1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i3 - 1][1]) && diffs[i3][0] === DIFF_INSERT && starts_with_pair_end(diffs[i3][1])) {
                  compact = true;
                  diffs[i3 - 1][1] = diffs[i3 - 2][1].slice(-1) + diffs[i3 - 1][1];
                  diffs[i3][1] = diffs[i3 - 2][1].slice(-1) + diffs[i3][1];
                  diffs[i3 - 2][1] = diffs[i3 - 2][1].slice(0, -1);
                }
              }
              if (!compact) {
                return diffs;
              }
              var fixed_diffs = [];
              for (var i3 = 0; i3 < diffs.length; i3 += 1) {
                if (diffs[i3][1].length > 0) {
                  fixed_diffs.push(diffs[i3]);
                }
              }
              return fixed_diffs;
            }
            function merge_tuples(diffs, start4, length) {
              for (var i3 = start4 + length - 1; i3 >= 0 && i3 >= start4 - 1; i3--) {
                if (i3 + 1 < diffs.length) {
                  var left_d = diffs[i3];
                  var right_d = diffs[i3 + 1];
                  if (left_d[0] === right_d[1]) {
                    diffs.splice(i3, 2, [left_d[0], left_d[1] + right_d[1]]);
                  }
                }
              }
              return diffs;
            }
          },
          function(module2, exports2) {
            exports2 = module2.exports = typeof Object.keys === "function" ? Object.keys : shim;
            exports2.shim = shim;
            function shim(obj) {
              var keys = [];
              for (var key in obj)
                keys.push(key);
              return keys;
            }
          },
          function(module2, exports2) {
            var supportsArgumentsClass = function() {
              return Object.prototype.toString.call(arguments);
            }() == "[object Arguments]";
            exports2 = module2.exports = supportsArgumentsClass ? supported : unsupported;
            exports2.supported = supported;
            function supported(object) {
              return Object.prototype.toString.call(object) == "[object Arguments]";
            }
            ;
            exports2.unsupported = unsupported;
            function unsupported(object) {
              return object && typeof object == "object" && typeof object.length == "number" && Object.prototype.hasOwnProperty.call(object, "callee") && !Object.prototype.propertyIsEnumerable.call(object, "callee") || false;
            }
            ;
          },
          function(module2, exports2) {
            "use strict";
            var has = Object.prototype.hasOwnProperty, prefix3 = "~";
            function Events() {
            }
            if (Object.create) {
              Events.prototype = /* @__PURE__ */ Object.create(null);
              if (!new Events().__proto__)
                prefix3 = false;
            }
            function EE(fn4, context, once) {
              this.fn = fn4;
              this.context = context;
              this.once = once || false;
            }
            function EventEmitter() {
              this._events = new Events();
              this._eventsCount = 0;
            }
            EventEmitter.prototype.eventNames = function eventNames() {
              var names = [], events, name;
              if (this._eventsCount === 0)
                return names;
              for (name in events = this._events) {
                if (has.call(events, name))
                  names.push(prefix3 ? name.slice(1) : name);
              }
              if (Object.getOwnPropertySymbols) {
                return names.concat(Object.getOwnPropertySymbols(events));
              }
              return names;
            };
            EventEmitter.prototype.listeners = function listeners(event, exists) {
              var evt = prefix3 ? prefix3 + event : event, available = this._events[evt];
              if (exists)
                return !!available;
              if (!available)
                return [];
              if (available.fn)
                return [available.fn];
              for (var i3 = 0, l3 = available.length, ee2 = new Array(l3); i3 < l3; i3++) {
                ee2[i3] = available[i3].fn;
              }
              return ee2;
            };
            EventEmitter.prototype.emit = function emit(event, a1, a22, a3, a4, a5) {
              var evt = prefix3 ? prefix3 + event : event;
              if (!this._events[evt])
                return false;
              var listeners = this._events[evt], len = arguments.length, args, i3;
              if (listeners.fn) {
                if (listeners.once)
                  this.removeListener(event, listeners.fn, void 0, true);
                switch (len) {
                  case 1:
                    return listeners.fn.call(listeners.context), true;
                  case 2:
                    return listeners.fn.call(listeners.context, a1), true;
                  case 3:
                    return listeners.fn.call(listeners.context, a1, a22), true;
                  case 4:
                    return listeners.fn.call(listeners.context, a1, a22, a3), true;
                  case 5:
                    return listeners.fn.call(listeners.context, a1, a22, a3, a4), true;
                  case 6:
                    return listeners.fn.call(listeners.context, a1, a22, a3, a4, a5), true;
                }
                for (i3 = 1, args = new Array(len - 1); i3 < len; i3++) {
                  args[i3 - 1] = arguments[i3];
                }
                listeners.fn.apply(listeners.context, args);
              } else {
                var length = listeners.length, j4;
                for (i3 = 0; i3 < length; i3++) {
                  if (listeners[i3].once)
                    this.removeListener(event, listeners[i3].fn, void 0, true);
                  switch (len) {
                    case 1:
                      listeners[i3].fn.call(listeners[i3].context);
                      break;
                    case 2:
                      listeners[i3].fn.call(listeners[i3].context, a1);
                      break;
                    case 3:
                      listeners[i3].fn.call(listeners[i3].context, a1, a22);
                      break;
                    case 4:
                      listeners[i3].fn.call(listeners[i3].context, a1, a22, a3);
                      break;
                    default:
                      if (!args)
                        for (j4 = 1, args = new Array(len - 1); j4 < len; j4++) {
                          args[j4 - 1] = arguments[j4];
                        }
                      listeners[i3].fn.apply(listeners[i3].context, args);
                  }
                }
              }
              return true;
            };
            EventEmitter.prototype.on = function on2(event, fn4, context) {
              var listener = new EE(fn4, context || this), evt = prefix3 ? prefix3 + event : event;
              if (!this._events[evt])
                this._events[evt] = listener, this._eventsCount++;
              else if (!this._events[evt].fn)
                this._events[evt].push(listener);
              else
                this._events[evt] = [this._events[evt], listener];
              return this;
            };
            EventEmitter.prototype.once = function once(event, fn4, context) {
              var listener = new EE(fn4, context || this, true), evt = prefix3 ? prefix3 + event : event;
              if (!this._events[evt])
                this._events[evt] = listener, this._eventsCount++;
              else if (!this._events[evt].fn)
                this._events[evt].push(listener);
              else
                this._events[evt] = [this._events[evt], listener];
              return this;
            };
            EventEmitter.prototype.removeListener = function removeListener(event, fn4, context, once) {
              var evt = prefix3 ? prefix3 + event : event;
              if (!this._events[evt])
                return this;
              if (!fn4) {
                if (--this._eventsCount === 0)
                  this._events = new Events();
                else
                  delete this._events[evt];
                return this;
              }
              var listeners = this._events[evt];
              if (listeners.fn) {
                if (listeners.fn === fn4 && (!once || listeners.once) && (!context || listeners.context === context)) {
                  if (--this._eventsCount === 0)
                    this._events = new Events();
                  else
                    delete this._events[evt];
                }
              } else {
                for (var i3 = 0, events = [], length = listeners.length; i3 < length; i3++) {
                  if (listeners[i3].fn !== fn4 || once && !listeners[i3].once || context && listeners[i3].context !== context) {
                    events.push(listeners[i3]);
                  }
                }
                if (events.length)
                  this._events[evt] = events.length === 1 ? events[0] : events;
                else if (--this._eventsCount === 0)
                  this._events = new Events();
                else
                  delete this._events[evt];
              }
              return this;
            };
            EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
              var evt;
              if (event) {
                evt = prefix3 ? prefix3 + event : event;
                if (this._events[evt]) {
                  if (--this._eventsCount === 0)
                    this._events = new Events();
                  else
                    delete this._events[evt];
                }
              } else {
                this._events = new Events();
                this._eventsCount = 0;
              }
              return this;
            };
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.addListener = EventEmitter.prototype.on;
            EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
              return this;
            };
            EventEmitter.prefixed = prefix3;
            EventEmitter.EventEmitter = EventEmitter;
            if ("undefined" !== typeof module2) {
              module2.exports = EventEmitter;
            }
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.matchText = exports2.matchSpacing = exports2.matchNewline = exports2.matchBlot = exports2.matchAttributor = exports2.default = void 0;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _extend2 = __webpack_require__(3);
            var _extend3 = _interopRequireDefault(_extend2);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            var _align = __webpack_require__(36);
            var _background = __webpack_require__(37);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _color = __webpack_require__(26);
            var _direction = __webpack_require__(38);
            var _font = __webpack_require__(39);
            var _size = __webpack_require__(40);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty2(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)("quill:clipboard");
            var DOM_KEY = "__ql-matcher";
            var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ["br", matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ["li", matchIndent], ["b", matchAlias.bind(matchAlias, "bold")], ["i", matchAlias.bind(matchAlias, "italic")], ["style", matchIgnore]];
            var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function(memo2, attr) {
              memo2[attr.keyName] = attr;
              return memo2;
            }, {});
            var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function(memo2, attr) {
              memo2[attr.keyName] = attr;
              return memo2;
            }, {});
            var Clipboard = function(_Module) {
              _inherits(Clipboard2, _Module);
              function Clipboard2(quill, options) {
                _classCallCheck(this, Clipboard2);
                var _this = _possibleConstructorReturn(this, (Clipboard2.__proto__ || Object.getPrototypeOf(Clipboard2)).call(this, quill, options));
                _this.quill.root.addEventListener("paste", _this.onPaste.bind(_this));
                _this.container = _this.quill.addContainer("ql-clipboard");
                _this.container.setAttribute("contenteditable", true);
                _this.container.setAttribute("tabindex", -1);
                _this.matchers = [];
                CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function(_ref) {
                  var _ref2 = _slicedToArray(_ref, 2), selector = _ref2[0], matcher = _ref2[1];
                  if (!options.matchVisual && matcher === matchSpacing)
                    return;
                  _this.addMatcher(selector, matcher);
                });
                return _this;
              }
              _createClass(Clipboard2, [{
                key: "addMatcher",
                value: function addMatcher(selector, matcher) {
                  this.matchers.push([selector, matcher]);
                }
              }, {
                key: "convert",
                value: function convert(html) {
                  if (typeof html === "string") {
                    this.container.innerHTML = html.replace(/\>\r?\n +\</g, "><");
                    return this.convert();
                  }
                  var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
                  if (formats[_code2.default.blotName]) {
                    var text = this.container.innerText;
                    this.container.innerHTML = "";
                    return new _quillDelta2.default().insert(text, _defineProperty2({}, _code2.default.blotName, formats[_code2.default.blotName]));
                  }
                  var _prepareMatching = this.prepareMatching(), _prepareMatching2 = _slicedToArray(_prepareMatching, 2), elementMatchers = _prepareMatching2[0], textMatchers = _prepareMatching2[1];
                  var delta = traverse(this.container, elementMatchers, textMatchers);
                  if (deltaEndsWith(delta, "\n") && delta.ops[delta.ops.length - 1].attributes == null) {
                    delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
                  }
                  debug.log("convert", this.container.innerHTML, delta);
                  this.container.innerHTML = "";
                  return delta;
                }
              }, {
                key: "dangerouslyPasteHTML",
                value: function dangerouslyPasteHTML(index2, html) {
                  var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _quill2.default.sources.API;
                  if (typeof index2 === "string") {
                    this.quill.setContents(this.convert(index2), html);
                    this.quill.setSelection(0, _quill2.default.sources.SILENT);
                  } else {
                    var paste = this.convert(html);
                    this.quill.updateContents(new _quillDelta2.default().retain(index2).concat(paste), source);
                    this.quill.setSelection(index2 + paste.length(), _quill2.default.sources.SILENT);
                  }
                }
              }, {
                key: "onPaste",
                value: function onPaste(e2) {
                  var _this2 = this;
                  if (e2.defaultPrevented || !this.quill.isEnabled())
                    return;
                  var range = this.quill.getSelection();
                  var delta = new _quillDelta2.default().retain(range.index);
                  var scrollTop = this.quill.scrollingContainer.scrollTop;
                  this.container.focus();
                  this.quill.selection.update(_quill2.default.sources.SILENT);
                  setTimeout(function() {
                    delta = delta.concat(_this2.convert()).delete(range.length);
                    _this2.quill.updateContents(delta, _quill2.default.sources.USER);
                    _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
                    _this2.quill.scrollingContainer.scrollTop = scrollTop;
                    _this2.quill.focus();
                  }, 1);
                }
              }, {
                key: "prepareMatching",
                value: function prepareMatching() {
                  var _this3 = this;
                  var elementMatchers = [], textMatchers = [];
                  this.matchers.forEach(function(pair) {
                    var _pair = _slicedToArray(pair, 2), selector = _pair[0], matcher = _pair[1];
                    switch (selector) {
                      case Node.TEXT_NODE:
                        textMatchers.push(matcher);
                        break;
                      case Node.ELEMENT_NODE:
                        elementMatchers.push(matcher);
                        break;
                      default:
                        [].forEach.call(_this3.container.querySelectorAll(selector), function(node) {
                          node[DOM_KEY] = node[DOM_KEY] || [];
                          node[DOM_KEY].push(matcher);
                        });
                        break;
                    }
                  });
                  return [elementMatchers, textMatchers];
                }
              }]);
              return Clipboard2;
            }(_module2.default);
            Clipboard.DEFAULTS = {
              matchers: [],
              matchVisual: true
            };
            function applyFormat(delta, format2, value) {
              if ((typeof format2 === "undefined" ? "undefined" : _typeof(format2)) === "object") {
                return Object.keys(format2).reduce(function(delta2, key) {
                  return applyFormat(delta2, key, format2[key]);
                }, delta);
              } else {
                return delta.reduce(function(delta2, op) {
                  if (op.attributes && op.attributes[format2]) {
                    return delta2.push(op);
                  } else {
                    return delta2.insert(op.insert, (0, _extend3.default)({}, _defineProperty2({}, format2, value), op.attributes));
                  }
                }, new _quillDelta2.default());
              }
            }
            function computeStyle(node) {
              if (node.nodeType !== Node.ELEMENT_NODE)
                return {};
              var DOM_KEY2 = "__ql-computed-style";
              return node[DOM_KEY2] || (node[DOM_KEY2] = window.getComputedStyle(node));
            }
            function deltaEndsWith(delta, text) {
              var endText = "";
              for (var i3 = delta.ops.length - 1; i3 >= 0 && endText.length < text.length; --i3) {
                var op = delta.ops[i3];
                if (typeof op.insert !== "string")
                  break;
                endText = op.insert + endText;
              }
              return endText.slice(-1 * text.length) === text;
            }
            function isLine(node) {
              if (node.childNodes.length === 0)
                return false;
              var style2 = computeStyle(node);
              return ["block", "list-item"].indexOf(style2.display) > -1;
            }
            function traverse(node, elementMatchers, textMatchers) {
              if (node.nodeType === node.TEXT_NODE) {
                return textMatchers.reduce(function(delta, matcher) {
                  return matcher(node, delta);
                }, new _quillDelta2.default());
              } else if (node.nodeType === node.ELEMENT_NODE) {
                return [].reduce.call(node.childNodes || [], function(delta, childNode) {
                  var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
                  if (childNode.nodeType === node.ELEMENT_NODE) {
                    childrenDelta = elementMatchers.reduce(function(childrenDelta2, matcher) {
                      return matcher(childNode, childrenDelta2);
                    }, childrenDelta);
                    childrenDelta = (childNode[DOM_KEY] || []).reduce(function(childrenDelta2, matcher) {
                      return matcher(childNode, childrenDelta2);
                    }, childrenDelta);
                  }
                  return delta.concat(childrenDelta);
                }, new _quillDelta2.default());
              } else {
                return new _quillDelta2.default();
              }
            }
            function matchAlias(format2, node, delta) {
              return applyFormat(delta, format2, true);
            }
            function matchAttributor(node, delta) {
              var attributes = _parchment2.default.Attributor.Attribute.keys(node);
              var classes = _parchment2.default.Attributor.Class.keys(node);
              var styles = _parchment2.default.Attributor.Style.keys(node);
              var formats = {};
              attributes.concat(classes).concat(styles).forEach(function(name) {
                var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
                if (attr != null) {
                  formats[attr.attrName] = attr.value(node);
                  if (formats[attr.attrName])
                    return;
                }
                attr = ATTRIBUTE_ATTRIBUTORS[name];
                if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                  formats[attr.attrName] = attr.value(node) || void 0;
                }
                attr = STYLE_ATTRIBUTORS[name];
                if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                  attr = STYLE_ATTRIBUTORS[name];
                  formats[attr.attrName] = attr.value(node) || void 0;
                }
              });
              if (Object.keys(formats).length > 0) {
                delta = applyFormat(delta, formats);
              }
              return delta;
            }
            function matchBlot(node, delta) {
              var match2 = _parchment2.default.query(node);
              if (match2 == null)
                return delta;
              if (match2.prototype instanceof _parchment2.default.Embed) {
                var embed = {};
                var value = match2.value(node);
                if (value != null) {
                  embed[match2.blotName] = value;
                  delta = new _quillDelta2.default().insert(embed, match2.formats(node));
                }
              } else if (typeof match2.formats === "function") {
                delta = applyFormat(delta, match2.blotName, match2.formats(node));
              }
              return delta;
            }
            function matchBreak(node, delta) {
              if (!deltaEndsWith(delta, "\n")) {
                delta.insert("\n");
              }
              return delta;
            }
            function matchIgnore() {
              return new _quillDelta2.default();
            }
            function matchIndent(node, delta) {
              var match2 = _parchment2.default.query(node);
              if (match2 == null || match2.blotName !== "list-item" || !deltaEndsWith(delta, "\n")) {
                return delta;
              }
              var indent = -1, parent = node.parentNode;
              while (!parent.classList.contains("ql-clipboard")) {
                if ((_parchment2.default.query(parent) || {}).blotName === "list") {
                  indent += 1;
                }
                parent = parent.parentNode;
              }
              if (indent <= 0)
                return delta;
              return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent }));
            }
            function matchNewline(node, delta) {
              if (!deltaEndsWith(delta, "\n")) {
                if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
                  delta.insert("\n");
                }
              }
              return delta;
            }
            function matchSpacing(node, delta) {
              if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, "\n\n")) {
                var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
                if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
                  delta.insert("\n");
                }
              }
              return delta;
            }
            function matchStyles(node, delta) {
              var formats = {};
              var style2 = node.style || {};
              if (style2.fontStyle && computeStyle(node).fontStyle === "italic") {
                formats.italic = true;
              }
              if (style2.fontWeight && (computeStyle(node).fontWeight.startsWith("bold") || parseInt(computeStyle(node).fontWeight) >= 700)) {
                formats.bold = true;
              }
              if (Object.keys(formats).length > 0) {
                delta = applyFormat(delta, formats);
              }
              if (parseFloat(style2.textIndent || 0) > 0) {
                delta = new _quillDelta2.default().insert("	").concat(delta);
              }
              return delta;
            }
            function matchText(node, delta) {
              var text = node.data;
              if (node.parentNode.tagName === "O:P") {
                return delta.insert(text.trim());
              }
              if (text.trim().length === 0 && node.parentNode.classList.contains("ql-clipboard")) {
                return delta;
              }
              if (!computeStyle(node.parentNode).whiteSpace.startsWith("pre")) {
                var replacer = function replacer2(collapse, match2) {
                  match2 = match2.replace(/[^\u00a0]/g, "");
                  return match2.length < 1 && collapse ? " " : match2;
                };
                text = text.replace(/\r\n/g, " ").replace(/\n/g, " ");
                text = text.replace(/\s\s+/g, replacer.bind(replacer, true));
                if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
                  text = text.replace(/^\s+/, replacer.bind(replacer, false));
                }
                if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
                  text = text.replace(/\s+$/, replacer.bind(replacer, false));
                }
              }
              return delta.insert(text);
            }
            exports2.default = Clipboard;
            exports2.matchAttributor = matchAttributor;
            exports2.matchBlot = matchBlot;
            exports2.matchNewline = matchNewline;
            exports2.matchSpacing = matchSpacing;
            exports2.matchText = matchText;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Bold = function(_Inline) {
              _inherits(Bold2, _Inline);
              function Bold2() {
                _classCallCheck(this, Bold2);
                return _possibleConstructorReturn(this, (Bold2.__proto__ || Object.getPrototypeOf(Bold2)).apply(this, arguments));
              }
              _createClass(Bold2, [{
                key: "optimize",
                value: function optimize(context) {
                  _get(Bold2.prototype.__proto__ || Object.getPrototypeOf(Bold2.prototype), "optimize", this).call(this, context);
                  if (this.domNode.tagName !== this.statics.tagName[0]) {
                    this.replaceWith(this.statics.blotName);
                  }
                }
              }], [{
                key: "create",
                value: function create3() {
                  return _get(Bold2.__proto__ || Object.getPrototypeOf(Bold2), "create", this).call(this);
                }
              }, {
                key: "formats",
                value: function formats() {
                  return true;
                }
              }]);
              return Bold2;
            }(_inline2.default);
            Bold.blotName = "bold";
            Bold.tagName = ["STRONG", "B"];
            exports2.default = Bold;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.addControls = exports2.default = void 0;
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty2(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)("quill:toolbar");
            var Toolbar = function(_Module) {
              _inherits(Toolbar2, _Module);
              function Toolbar2(quill, options) {
                _classCallCheck(this, Toolbar2);
                var _this = _possibleConstructorReturn(this, (Toolbar2.__proto__ || Object.getPrototypeOf(Toolbar2)).call(this, quill, options));
                if (Array.isArray(_this.options.container)) {
                  var container = document.createElement("div");
                  addControls(container, _this.options.container);
                  quill.container.parentNode.insertBefore(container, quill.container);
                  _this.container = container;
                } else if (typeof _this.options.container === "string") {
                  _this.container = document.querySelector(_this.options.container);
                } else {
                  _this.container = _this.options.container;
                }
                if (!(_this.container instanceof HTMLElement)) {
                  var _ret;
                  return _ret = debug.error("Container required for toolbar", _this.options), _possibleConstructorReturn(_this, _ret);
                }
                _this.container.classList.add("ql-toolbar");
                _this.controls = [];
                _this.handlers = {};
                Object.keys(_this.options.handlers).forEach(function(format2) {
                  _this.addHandler(format2, _this.options.handlers[format2]);
                });
                [].forEach.call(_this.container.querySelectorAll("button, select"), function(input) {
                  _this.attach(input);
                });
                _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(type, range) {
                  if (type === _quill2.default.events.SELECTION_CHANGE) {
                    _this.update(range);
                  }
                });
                _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {
                  var _this$quill$selection = _this.quill.selection.getRange(), _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1), range = _this$quill$selection2[0];
                  _this.update(range);
                });
                return _this;
              }
              _createClass(Toolbar2, [{
                key: "addHandler",
                value: function addHandler(format2, handler) {
                  this.handlers[format2] = handler;
                }
              }, {
                key: "attach",
                value: function attach(input) {
                  var _this2 = this;
                  var format2 = [].find.call(input.classList, function(className) {
                    return className.indexOf("ql-") === 0;
                  });
                  if (!format2)
                    return;
                  format2 = format2.slice("ql-".length);
                  if (input.tagName === "BUTTON") {
                    input.setAttribute("type", "button");
                  }
                  if (this.handlers[format2] == null) {
                    if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format2] == null) {
                      debug.warn("ignoring attaching to disabled format", format2, input);
                      return;
                    }
                    if (_parchment2.default.query(format2) == null) {
                      debug.warn("ignoring attaching to nonexistent format", format2, input);
                      return;
                    }
                  }
                  var eventName = input.tagName === "SELECT" ? "change" : "click";
                  input.addEventListener(eventName, function(e2) {
                    var value = void 0;
                    if (input.tagName === "SELECT") {
                      if (input.selectedIndex < 0)
                        return;
                      var selected = input.options[input.selectedIndex];
                      if (selected.hasAttribute("selected")) {
                        value = false;
                      } else {
                        value = selected.value || false;
                      }
                    } else {
                      if (input.classList.contains("ql-active")) {
                        value = false;
                      } else {
                        value = input.value || !input.hasAttribute("value");
                      }
                      e2.preventDefault();
                    }
                    _this2.quill.focus();
                    var _quill$selection$getR = _this2.quill.selection.getRange(), _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1), range = _quill$selection$getR2[0];
                    if (_this2.handlers[format2] != null) {
                      _this2.handlers[format2].call(_this2, value);
                    } else if (_parchment2.default.query(format2).prototype instanceof _parchment2.default.Embed) {
                      value = prompt("Enter " + format2);
                      if (!value)
                        return;
                      _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty2({}, format2, value)), _quill2.default.sources.USER);
                    } else {
                      _this2.quill.format(format2, value, _quill2.default.sources.USER);
                    }
                    _this2.update(range);
                  });
                  this.controls.push([format2, input]);
                }
              }, {
                key: "update",
                value: function update2(range) {
                  var formats = range == null ? {} : this.quill.getFormat(range);
                  this.controls.forEach(function(pair) {
                    var _pair = _slicedToArray(pair, 2), format2 = _pair[0], input = _pair[1];
                    if (input.tagName === "SELECT") {
                      var option = void 0;
                      if (range == null) {
                        option = null;
                      } else if (formats[format2] == null) {
                        option = input.querySelector("option[selected]");
                      } else if (!Array.isArray(formats[format2])) {
                        var value = formats[format2];
                        if (typeof value === "string") {
                          value = value.replace(/\"/g, '\\"');
                        }
                        option = input.querySelector('option[value="' + value + '"]');
                      }
                      if (option == null) {
                        input.value = "";
                        input.selectedIndex = -1;
                      } else {
                        option.selected = true;
                      }
                    } else {
                      if (range == null) {
                        input.classList.remove("ql-active");
                      } else if (input.hasAttribute("value")) {
                        var isActive = formats[format2] === input.getAttribute("value") || formats[format2] != null && formats[format2].toString() === input.getAttribute("value") || formats[format2] == null && !input.getAttribute("value");
                        input.classList.toggle("ql-active", isActive);
                      } else {
                        input.classList.toggle("ql-active", formats[format2] != null);
                      }
                    }
                  });
                }
              }]);
              return Toolbar2;
            }(_module2.default);
            Toolbar.DEFAULTS = {};
            function addButton(container, format2, value) {
              var input = document.createElement("button");
              input.setAttribute("type", "button");
              input.classList.add("ql-" + format2);
              if (value != null) {
                input.value = value;
              }
              container.appendChild(input);
            }
            function addControls(container, groups) {
              if (!Array.isArray(groups[0])) {
                groups = [groups];
              }
              groups.forEach(function(controls) {
                var group = document.createElement("span");
                group.classList.add("ql-formats");
                controls.forEach(function(control) {
                  if (typeof control === "string") {
                    addButton(group, control);
                  } else {
                    var format2 = Object.keys(control)[0];
                    var value = control[format2];
                    if (Array.isArray(value)) {
                      addSelect(group, format2, value);
                    } else {
                      addButton(group, format2, value);
                    }
                  }
                });
                container.appendChild(group);
              });
            }
            function addSelect(container, format2, values2) {
              var input = document.createElement("select");
              input.classList.add("ql-" + format2);
              values2.forEach(function(value) {
                var option = document.createElement("option");
                if (value !== false) {
                  option.setAttribute("value", value);
                } else {
                  option.setAttribute("selected", "selected");
                }
                input.appendChild(option);
              });
              container.appendChild(input);
            }
            Toolbar.DEFAULTS = {
              container: null,
              handlers: {
                clean: function clean5() {
                  var _this3 = this;
                  var range = this.quill.getSelection();
                  if (range == null)
                    return;
                  if (range.length == 0) {
                    var formats = this.quill.getFormat();
                    Object.keys(formats).forEach(function(name) {
                      if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
                        _this3.quill.format(name, false);
                      }
                    });
                  } else {
                    this.quill.removeFormat(range, _quill2.default.sources.USER);
                  }
                },
                direction: function direction(value) {
                  var align = this.quill.getFormat()["align"];
                  if (value === "rtl" && align == null) {
                    this.quill.format("align", "right", _quill2.default.sources.USER);
                  } else if (!value && align === "right") {
                    this.quill.format("align", false, _quill2.default.sources.USER);
                  }
                  this.quill.format("direction", value, _quill2.default.sources.USER);
                },
                indent: function indent(value) {
                  var range = this.quill.getSelection();
                  var formats = this.quill.getFormat(range);
                  var indent2 = parseInt(formats.indent || 0);
                  if (value === "+1" || value === "-1") {
                    var modifier = value === "+1" ? 1 : -1;
                    if (formats.direction === "rtl")
                      modifier *= -1;
                    this.quill.format("indent", indent2 + modifier, _quill2.default.sources.USER);
                  }
                },
                link: function link(value) {
                  if (value === true) {
                    value = prompt("Enter link URL:");
                  }
                  this.quill.format("link", value, _quill2.default.sources.USER);
                },
                list: function list(value) {
                  var range = this.quill.getSelection();
                  var formats = this.quill.getFormat(range);
                  if (value === "check") {
                    if (formats["list"] === "checked" || formats["list"] === "unchecked") {
                      this.quill.format("list", false, _quill2.default.sources.USER);
                    } else {
                      this.quill.format("list", "unchecked", _quill2.default.sources.USER);
                    }
                  } else {
                    this.quill.format("list", value, _quill2.default.sources.USER);
                  }
                }
              }
            };
            exports2.default = Toolbar;
            exports2.addControls = addControls;
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>';
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ColorPicker = function(_Picker) {
              _inherits(ColorPicker2, _Picker);
              function ColorPicker2(select, label) {
                _classCallCheck(this, ColorPicker2);
                var _this = _possibleConstructorReturn(this, (ColorPicker2.__proto__ || Object.getPrototypeOf(ColorPicker2)).call(this, select));
                _this.label.innerHTML = label;
                _this.container.classList.add("ql-color-picker");
                [].slice.call(_this.container.querySelectorAll(".ql-picker-item"), 0, 7).forEach(function(item) {
                  item.classList.add("ql-primary");
                });
                return _this;
              }
              _createClass(ColorPicker2, [{
                key: "buildItem",
                value: function buildItem(option) {
                  var item = _get(ColorPicker2.prototype.__proto__ || Object.getPrototypeOf(ColorPicker2.prototype), "buildItem", this).call(this, option);
                  item.style.backgroundColor = option.getAttribute("value") || "";
                  return item;
                }
              }, {
                key: "selectItem",
                value: function selectItem(item, trigger) {
                  _get(ColorPicker2.prototype.__proto__ || Object.getPrototypeOf(ColorPicker2.prototype), "selectItem", this).call(this, item, trigger);
                  var colorLabel = this.label.querySelector(".ql-color-label");
                  var value = item ? item.getAttribute("data-value") || "" : "";
                  if (colorLabel) {
                    if (colorLabel.tagName === "line") {
                      colorLabel.style.stroke = value;
                    } else {
                      colorLabel.style.fill = value;
                    }
                  }
                }
              }]);
              return ColorPicker2;
            }(_picker2.default);
            exports2.default = ColorPicker;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var IconPicker = function(_Picker) {
              _inherits(IconPicker2, _Picker);
              function IconPicker2(select, icons) {
                _classCallCheck(this, IconPicker2);
                var _this = _possibleConstructorReturn(this, (IconPicker2.__proto__ || Object.getPrototypeOf(IconPicker2)).call(this, select));
                _this.container.classList.add("ql-icon-picker");
                [].forEach.call(_this.container.querySelectorAll(".ql-picker-item"), function(item) {
                  item.innerHTML = icons[item.getAttribute("data-value") || ""];
                });
                _this.defaultItem = _this.container.querySelector(".ql-selected");
                _this.selectItem(_this.defaultItem);
                return _this;
              }
              _createClass(IconPicker2, [{
                key: "selectItem",
                value: function selectItem(item, trigger) {
                  _get(IconPicker2.prototype.__proto__ || Object.getPrototypeOf(IconPicker2.prototype), "selectItem", this).call(this, item, trigger);
                  item = item || this.defaultItem;
                  this.label.innerHTML = item.innerHTML;
                }
              }]);
              return IconPicker2;
            }(_picker2.default);
            exports2.default = IconPicker;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var Tooltip = function() {
              function Tooltip2(quill, boundsContainer) {
                var _this = this;
                _classCallCheck(this, Tooltip2);
                this.quill = quill;
                this.boundsContainer = boundsContainer || document.body;
                this.root = quill.addContainer("ql-tooltip");
                this.root.innerHTML = this.constructor.TEMPLATE;
                if (this.quill.root === this.quill.scrollingContainer) {
                  this.quill.root.addEventListener("scroll", function() {
                    _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + "px";
                  });
                }
                this.hide();
              }
              _createClass(Tooltip2, [{
                key: "hide",
                value: function hide2() {
                  this.root.classList.add("ql-hidden");
                }
              }, {
                key: "position",
                value: function position3(reference2) {
                  var left2 = reference2.left + reference2.width / 2 - this.root.offsetWidth / 2;
                  var top2 = reference2.bottom + this.quill.root.scrollTop;
                  this.root.style.left = left2 + "px";
                  this.root.style.top = top2 + "px";
                  this.root.classList.remove("ql-flip");
                  var containerBounds = this.boundsContainer.getBoundingClientRect();
                  var rootBounds = this.root.getBoundingClientRect();
                  var shift3 = 0;
                  if (rootBounds.right > containerBounds.right) {
                    shift3 = containerBounds.right - rootBounds.right;
                    this.root.style.left = left2 + shift3 + "px";
                  }
                  if (rootBounds.left < containerBounds.left) {
                    shift3 = containerBounds.left - rootBounds.left;
                    this.root.style.left = left2 + shift3 + "px";
                  }
                  if (rootBounds.bottom > containerBounds.bottom) {
                    var height = rootBounds.bottom - rootBounds.top;
                    var verticalShift = reference2.bottom - reference2.top + height;
                    this.root.style.top = top2 - verticalShift + "px";
                    this.root.classList.add("ql-flip");
                  }
                  return shift3;
                }
              }, {
                key: "show",
                value: function show() {
                  this.root.classList.remove("ql-editing");
                  this.root.classList.remove("ql-hidden");
                }
              }]);
              return Tooltip2;
            }();
            exports2.default = Tooltip;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _slicedToArray = function() {
              function sliceIterator(arr, i3) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i3 && _arr.length === i3)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"])
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i3) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i3);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _base = __webpack_require__(43);
            var _base2 = _interopRequireDefault(_base);
            var _link = __webpack_require__(27);
            var _link2 = _interopRequireDefault(_link);
            var _selection = __webpack_require__(15);
            var _icons = __webpack_require__(41);
            var _icons2 = _interopRequireDefault(_icons);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TOOLBAR_CONFIG = [[{ header: ["1", "2", "3", false] }], ["bold", "italic", "underline", "link"], [{ list: "ordered" }, { list: "bullet" }], ["clean"]];
            var SnowTheme = function(_BaseTheme) {
              _inherits(SnowTheme2, _BaseTheme);
              function SnowTheme2(quill, options) {
                _classCallCheck(this, SnowTheme2);
                if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                  options.modules.toolbar.container = TOOLBAR_CONFIG;
                }
                var _this = _possibleConstructorReturn(this, (SnowTheme2.__proto__ || Object.getPrototypeOf(SnowTheme2)).call(this, quill, options));
                _this.quill.container.classList.add("ql-snow");
                return _this;
              }
              _createClass(SnowTheme2, [{
                key: "extendToolbar",
                value: function extendToolbar(toolbar) {
                  toolbar.container.classList.add("ql-snow");
                  this.buildButtons([].slice.call(toolbar.container.querySelectorAll("button")), _icons2.default);
                  this.buildPickers([].slice.call(toolbar.container.querySelectorAll("select")), _icons2.default);
                  this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
                  if (toolbar.container.querySelector(".ql-link")) {
                    this.quill.keyboard.addBinding({ key: "K", shortKey: true }, function(range, context) {
                      toolbar.handlers["link"].call(toolbar, !context.format.link);
                    });
                  }
                }
              }]);
              return SnowTheme2;
            }(_base2.default);
            SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
              modules: {
                toolbar: {
                  handlers: {
                    link: function link(value) {
                      if (value) {
                        var range = this.quill.getSelection();
                        if (range == null || range.length == 0)
                          return;
                        var preview = this.quill.getText(range);
                        if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf("mailto:") !== 0) {
                          preview = "mailto:" + preview;
                        }
                        var tooltip = this.quill.theme.tooltip;
                        tooltip.edit("link", preview);
                      } else {
                        this.quill.format("link", false);
                      }
                    }
                  }
                }
              }
            });
            var SnowTooltip = function(_BaseTooltip) {
              _inherits(SnowTooltip2, _BaseTooltip);
              function SnowTooltip2(quill, bounds) {
                _classCallCheck(this, SnowTooltip2);
                var _this2 = _possibleConstructorReturn(this, (SnowTooltip2.__proto__ || Object.getPrototypeOf(SnowTooltip2)).call(this, quill, bounds));
                _this2.preview = _this2.root.querySelector("a.ql-preview");
                return _this2;
              }
              _createClass(SnowTooltip2, [{
                key: "listen",
                value: function listen() {
                  var _this3 = this;
                  _get(SnowTooltip2.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip2.prototype), "listen", this).call(this);
                  this.root.querySelector("a.ql-action").addEventListener("click", function(event) {
                    if (_this3.root.classList.contains("ql-editing")) {
                      _this3.save();
                    } else {
                      _this3.edit("link", _this3.preview.textContent);
                    }
                    event.preventDefault();
                  });
                  this.root.querySelector("a.ql-remove").addEventListener("click", function(event) {
                    if (_this3.linkRange != null) {
                      var range = _this3.linkRange;
                      _this3.restoreFocus();
                      _this3.quill.formatText(range, "link", false, _emitter2.default.sources.USER);
                      delete _this3.linkRange;
                    }
                    event.preventDefault();
                    _this3.hide();
                  });
                  this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function(range, oldRange, source) {
                    if (range == null)
                      return;
                    if (range.length === 0 && source === _emitter2.default.sources.USER) {
                      var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index), _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2), link = _quill$scroll$descend2[0], offset4 = _quill$scroll$descend2[1];
                      if (link != null) {
                        _this3.linkRange = new _selection.Range(range.index - offset4, link.length());
                        var preview = _link2.default.formats(link.domNode);
                        _this3.preview.textContent = preview;
                        _this3.preview.setAttribute("href", preview);
                        _this3.show();
                        _this3.position(_this3.quill.getBounds(_this3.linkRange));
                        return;
                      }
                    } else {
                      delete _this3.linkRange;
                    }
                    _this3.hide();
                  });
                }
              }, {
                key: "show",
                value: function show() {
                  _get(SnowTooltip2.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip2.prototype), "show", this).call(this);
                  this.root.removeAttribute("data-mode");
                }
              }]);
              return SnowTooltip2;
            }(_base.BaseTooltip);
            SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join("");
            exports2.default = SnowTheme;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _core = __webpack_require__(29);
            var _core2 = _interopRequireDefault(_core);
            var _align = __webpack_require__(36);
            var _direction = __webpack_require__(38);
            var _indent = __webpack_require__(64);
            var _blockquote = __webpack_require__(65);
            var _blockquote2 = _interopRequireDefault(_blockquote);
            var _header = __webpack_require__(66);
            var _header2 = _interopRequireDefault(_header);
            var _list = __webpack_require__(67);
            var _list2 = _interopRequireDefault(_list);
            var _background = __webpack_require__(37);
            var _color = __webpack_require__(26);
            var _font = __webpack_require__(39);
            var _size = __webpack_require__(40);
            var _bold = __webpack_require__(56);
            var _bold2 = _interopRequireDefault(_bold);
            var _italic = __webpack_require__(68);
            var _italic2 = _interopRequireDefault(_italic);
            var _link = __webpack_require__(27);
            var _link2 = _interopRequireDefault(_link);
            var _script = __webpack_require__(69);
            var _script2 = _interopRequireDefault(_script);
            var _strike = __webpack_require__(70);
            var _strike2 = _interopRequireDefault(_strike);
            var _underline = __webpack_require__(71);
            var _underline2 = _interopRequireDefault(_underline);
            var _image = __webpack_require__(72);
            var _image2 = _interopRequireDefault(_image);
            var _video = __webpack_require__(73);
            var _video2 = _interopRequireDefault(_video);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _formula = __webpack_require__(74);
            var _formula2 = _interopRequireDefault(_formula);
            var _syntax = __webpack_require__(75);
            var _syntax2 = _interopRequireDefault(_syntax);
            var _toolbar = __webpack_require__(57);
            var _toolbar2 = _interopRequireDefault(_toolbar);
            var _icons = __webpack_require__(41);
            var _icons2 = _interopRequireDefault(_icons);
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            var _colorPicker = __webpack_require__(59);
            var _colorPicker2 = _interopRequireDefault(_colorPicker);
            var _iconPicker = __webpack_require__(60);
            var _iconPicker2 = _interopRequireDefault(_iconPicker);
            var _tooltip = __webpack_require__(61);
            var _tooltip2 = _interopRequireDefault(_tooltip);
            var _bubble = __webpack_require__(108);
            var _bubble2 = _interopRequireDefault(_bubble);
            var _snow = __webpack_require__(62);
            var _snow2 = _interopRequireDefault(_snow);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            _core2.default.register({
              "attributors/attribute/direction": _direction.DirectionAttribute,
              "attributors/class/align": _align.AlignClass,
              "attributors/class/background": _background.BackgroundClass,
              "attributors/class/color": _color.ColorClass,
              "attributors/class/direction": _direction.DirectionClass,
              "attributors/class/font": _font.FontClass,
              "attributors/class/size": _size.SizeClass,
              "attributors/style/align": _align.AlignStyle,
              "attributors/style/background": _background.BackgroundStyle,
              "attributors/style/color": _color.ColorStyle,
              "attributors/style/direction": _direction.DirectionStyle,
              "attributors/style/font": _font.FontStyle,
              "attributors/style/size": _size.SizeStyle
            }, true);
            _core2.default.register({
              "formats/align": _align.AlignClass,
              "formats/direction": _direction.DirectionClass,
              "formats/indent": _indent.IndentClass,
              "formats/background": _background.BackgroundStyle,
              "formats/color": _color.ColorStyle,
              "formats/font": _font.FontClass,
              "formats/size": _size.SizeClass,
              "formats/blockquote": _blockquote2.default,
              "formats/code-block": _code2.default,
              "formats/header": _header2.default,
              "formats/list": _list2.default,
              "formats/bold": _bold2.default,
              "formats/code": _code.Code,
              "formats/italic": _italic2.default,
              "formats/link": _link2.default,
              "formats/script": _script2.default,
              "formats/strike": _strike2.default,
              "formats/underline": _underline2.default,
              "formats/image": _image2.default,
              "formats/video": _video2.default,
              "formats/list/item": _list.ListItem,
              "modules/formula": _formula2.default,
              "modules/syntax": _syntax2.default,
              "modules/toolbar": _toolbar2.default,
              "themes/bubble": _bubble2.default,
              "themes/snow": _snow2.default,
              "ui/icons": _icons2.default,
              "ui/picker": _picker2.default,
              "ui/icon-picker": _iconPicker2.default,
              "ui/color-picker": _colorPicker2.default,
              "ui/tooltip": _tooltip2.default
            }, true);
            exports2.default = _core2.default;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.IndentClass = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var IdentAttributor = function(_Parchment$Attributor) {
              _inherits(IdentAttributor2, _Parchment$Attributor);
              function IdentAttributor2() {
                _classCallCheck(this, IdentAttributor2);
                return _possibleConstructorReturn(this, (IdentAttributor2.__proto__ || Object.getPrototypeOf(IdentAttributor2)).apply(this, arguments));
              }
              _createClass(IdentAttributor2, [{
                key: "add",
                value: function add3(node, value) {
                  if (value === "+1" || value === "-1") {
                    var indent = this.value(node) || 0;
                    value = value === "+1" ? indent + 1 : indent - 1;
                  }
                  if (value === 0) {
                    this.remove(node);
                    return true;
                  } else {
                    return _get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "add", this).call(this, node, value);
                  }
                }
              }, {
                key: "canAdd",
                value: function canAdd(node, value) {
                  return _get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "canAdd", this).call(this, node, value) || _get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "canAdd", this).call(this, node, parseInt(value));
                }
              }, {
                key: "value",
                value: function value(node) {
                  return parseInt(_get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "value", this).call(this, node)) || void 0;
                }
              }]);
              return IdentAttributor2;
            }(_parchment2.default.Attributor.Class);
            var IndentClass = new IdentAttributor("indent", "ql-indent", {
              scope: _parchment2.default.Scope.BLOCK,
              whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
            });
            exports2.IndentClass = IndentClass;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Blockquote = function(_Block) {
              _inherits(Blockquote2, _Block);
              function Blockquote2() {
                _classCallCheck(this, Blockquote2);
                return _possibleConstructorReturn(this, (Blockquote2.__proto__ || Object.getPrototypeOf(Blockquote2)).apply(this, arguments));
              }
              return Blockquote2;
            }(_block2.default);
            Blockquote.blotName = "blockquote";
            Blockquote.tagName = "blockquote";
            exports2.default = Blockquote;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Header = function(_Block) {
              _inherits(Header2, _Block);
              function Header2() {
                _classCallCheck(this, Header2);
                return _possibleConstructorReturn(this, (Header2.__proto__ || Object.getPrototypeOf(Header2)).apply(this, arguments));
              }
              _createClass(Header2, null, [{
                key: "formats",
                value: function formats(domNode) {
                  return this.tagName.indexOf(domNode.tagName) + 1;
                }
              }]);
              return Header2;
            }(_block2.default);
            Header.blotName = "header";
            Header.tagName = ["H1", "H2", "H3", "H4", "H5", "H6"];
            exports2.default = Header;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.ListItem = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _container = __webpack_require__(25);
            var _container2 = _interopRequireDefault(_container);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty2(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ListItem = function(_Block) {
              _inherits(ListItem2, _Block);
              function ListItem2() {
                _classCallCheck(this, ListItem2);
                return _possibleConstructorReturn(this, (ListItem2.__proto__ || Object.getPrototypeOf(ListItem2)).apply(this, arguments));
              }
              _createClass(ListItem2, [{
                key: "format",
                value: function format2(name, value) {
                  if (name === List2.blotName && !value) {
                    this.replaceWith(_parchment2.default.create(this.statics.scope));
                  } else {
                    _get(ListItem2.prototype.__proto__ || Object.getPrototypeOf(ListItem2.prototype), "format", this).call(this, name, value);
                  }
                }
              }, {
                key: "remove",
                value: function remove() {
                  if (this.prev == null && this.next == null) {
                    this.parent.remove();
                  } else {
                    _get(ListItem2.prototype.__proto__ || Object.getPrototypeOf(ListItem2.prototype), "remove", this).call(this);
                  }
                }
              }, {
                key: "replaceWith",
                value: function replaceWith(name, value) {
                  this.parent.isolate(this.offset(this.parent), this.length());
                  if (name === this.parent.statics.blotName) {
                    this.parent.replaceWith(name, value);
                    return this;
                  } else {
                    this.parent.unwrap();
                    return _get(ListItem2.prototype.__proto__ || Object.getPrototypeOf(ListItem2.prototype), "replaceWith", this).call(this, name, value);
                  }
                }
              }], [{
                key: "formats",
                value: function formats(domNode) {
                  return domNode.tagName === this.tagName ? void 0 : _get(ListItem2.__proto__ || Object.getPrototypeOf(ListItem2), "formats", this).call(this, domNode);
                }
              }]);
              return ListItem2;
            }(_block2.default);
            ListItem.blotName = "list-item";
            ListItem.tagName = "LI";
            var List2 = function(_Container) {
              _inherits(List3, _Container);
              _createClass(List3, null, [{
                key: "create",
                value: function create3(value) {
                  var tagName = value === "ordered" ? "OL" : "UL";
                  var node = _get(List3.__proto__ || Object.getPrototypeOf(List3), "create", this).call(this, tagName);
                  if (value === "checked" || value === "unchecked") {
                    node.setAttribute("data-checked", value === "checked");
                  }
                  return node;
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  if (domNode.tagName === "OL")
                    return "ordered";
                  if (domNode.tagName === "UL") {
                    if (domNode.hasAttribute("data-checked")) {
                      return domNode.getAttribute("data-checked") === "true" ? "checked" : "unchecked";
                    } else {
                      return "bullet";
                    }
                  }
                  return void 0;
                }
              }]);
              function List3(domNode) {
                _classCallCheck(this, List3);
                var _this2 = _possibleConstructorReturn(this, (List3.__proto__ || Object.getPrototypeOf(List3)).call(this, domNode));
                var listEventHandler = function listEventHandler2(e2) {
                  if (e2.target.parentNode !== domNode)
                    return;
                  var format2 = _this2.statics.formats(domNode);
                  var blot = _parchment2.default.find(e2.target);
                  if (format2 === "checked") {
                    blot.format("list", "unchecked");
                  } else if (format2 === "unchecked") {
                    blot.format("list", "checked");
                  }
                };
                domNode.addEventListener("touchstart", listEventHandler);
                domNode.addEventListener("mousedown", listEventHandler);
                return _this2;
              }
              _createClass(List3, [{
                key: "format",
                value: function format2(name, value) {
                  if (this.children.length > 0) {
                    this.children.tail.format(name, value);
                  }
                }
              }, {
                key: "formats",
                value: function formats() {
                  return _defineProperty2({}, this.statics.blotName, this.statics.formats(this.domNode));
                }
              }, {
                key: "insertBefore",
                value: function insertBefore(blot, ref2) {
                  if (blot instanceof ListItem) {
                    _get(List3.prototype.__proto__ || Object.getPrototypeOf(List3.prototype), "insertBefore", this).call(this, blot, ref2);
                  } else {
                    var index2 = ref2 == null ? this.length() : ref2.offset(this);
                    var after = this.split(index2);
                    after.parent.insertBefore(blot, after);
                  }
                }
              }, {
                key: "optimize",
                value: function optimize(context) {
                  _get(List3.prototype.__proto__ || Object.getPrototypeOf(List3.prototype), "optimize", this).call(this, context);
                  var next = this.next;
                  if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute("data-checked") === this.domNode.getAttribute("data-checked")) {
                    next.moveChildren(this);
                    next.remove();
                  }
                }
              }, {
                key: "replace",
                value: function replace(target) {
                  if (target.statics.blotName !== this.statics.blotName) {
                    var item = _parchment2.default.create(this.statics.defaultChild);
                    target.moveChildren(item);
                    this.appendChild(item);
                  }
                  _get(List3.prototype.__proto__ || Object.getPrototypeOf(List3.prototype), "replace", this).call(this, target);
                }
              }]);
              return List3;
            }(_container2.default);
            List2.blotName = "list";
            List2.scope = _parchment2.default.Scope.BLOCK_BLOT;
            List2.tagName = ["OL", "UL"];
            List2.defaultChild = "list-item";
            List2.allowedChildren = [ListItem];
            exports2.ListItem = ListItem;
            exports2.default = List2;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _bold = __webpack_require__(56);
            var _bold2 = _interopRequireDefault(_bold);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Italic = function(_Bold) {
              _inherits(Italic2, _Bold);
              function Italic2() {
                _classCallCheck(this, Italic2);
                return _possibleConstructorReturn(this, (Italic2.__proto__ || Object.getPrototypeOf(Italic2)).apply(this, arguments));
              }
              return Italic2;
            }(_bold2.default);
            Italic.blotName = "italic";
            Italic.tagName = ["EM", "I"];
            exports2.default = Italic;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Script = function(_Inline) {
              _inherits(Script2, _Inline);
              function Script2() {
                _classCallCheck(this, Script2);
                return _possibleConstructorReturn(this, (Script2.__proto__ || Object.getPrototypeOf(Script2)).apply(this, arguments));
              }
              _createClass(Script2, null, [{
                key: "create",
                value: function create3(value) {
                  if (value === "super") {
                    return document.createElement("sup");
                  } else if (value === "sub") {
                    return document.createElement("sub");
                  } else {
                    return _get(Script2.__proto__ || Object.getPrototypeOf(Script2), "create", this).call(this, value);
                  }
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  if (domNode.tagName === "SUB")
                    return "sub";
                  if (domNode.tagName === "SUP")
                    return "super";
                  return void 0;
                }
              }]);
              return Script2;
            }(_inline2.default);
            Script.blotName = "script";
            Script.tagName = ["SUB", "SUP"];
            exports2.default = Script;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Strike = function(_Inline) {
              _inherits(Strike2, _Inline);
              function Strike2() {
                _classCallCheck(this, Strike2);
                return _possibleConstructorReturn(this, (Strike2.__proto__ || Object.getPrototypeOf(Strike2)).apply(this, arguments));
              }
              return Strike2;
            }(_inline2.default);
            Strike.blotName = "strike";
            Strike.tagName = "S";
            exports2.default = Strike;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Underline = function(_Inline) {
              _inherits(Underline2, _Inline);
              function Underline2() {
                _classCallCheck(this, Underline2);
                return _possibleConstructorReturn(this, (Underline2.__proto__ || Object.getPrototypeOf(Underline2)).apply(this, arguments));
              }
              return Underline2;
            }(_inline2.default);
            Underline.blotName = "underline";
            Underline.tagName = "U";
            exports2.default = Underline;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _link = __webpack_require__(27);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ATTRIBUTES = ["alt", "height", "width"];
            var Image = function(_Parchment$Embed) {
              _inherits(Image2, _Parchment$Embed);
              function Image2() {
                _classCallCheck(this, Image2);
                return _possibleConstructorReturn(this, (Image2.__proto__ || Object.getPrototypeOf(Image2)).apply(this, arguments));
              }
              _createClass(Image2, [{
                key: "format",
                value: function format2(name, value) {
                  if (ATTRIBUTES.indexOf(name) > -1) {
                    if (value) {
                      this.domNode.setAttribute(name, value);
                    } else {
                      this.domNode.removeAttribute(name);
                    }
                  } else {
                    _get(Image2.prototype.__proto__ || Object.getPrototypeOf(Image2.prototype), "format", this).call(this, name, value);
                  }
                }
              }], [{
                key: "create",
                value: function create3(value) {
                  var node = _get(Image2.__proto__ || Object.getPrototypeOf(Image2), "create", this).call(this, value);
                  if (typeof value === "string") {
                    node.setAttribute("src", this.sanitize(value));
                  }
                  return node;
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  return ATTRIBUTES.reduce(function(formats2, attribute) {
                    if (domNode.hasAttribute(attribute)) {
                      formats2[attribute] = domNode.getAttribute(attribute);
                    }
                    return formats2;
                  }, {});
                }
              }, {
                key: "match",
                value: function match2(url) {
                  return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
                }
              }, {
                key: "sanitize",
                value: function sanitize(url) {
                  return (0, _link.sanitize)(url, ["http", "https", "data"]) ? url : "//:0";
                }
              }, {
                key: "value",
                value: function value(domNode) {
                  return domNode.getAttribute("src");
                }
              }]);
              return Image2;
            }(_parchment2.default.Embed);
            Image.blotName = "image";
            Image.tagName = "IMG";
            exports2.default = Image;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _block = __webpack_require__(4);
            var _link = __webpack_require__(27);
            var _link2 = _interopRequireDefault(_link);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ATTRIBUTES = ["height", "width"];
            var Video = function(_BlockEmbed) {
              _inherits(Video2, _BlockEmbed);
              function Video2() {
                _classCallCheck(this, Video2);
                return _possibleConstructorReturn(this, (Video2.__proto__ || Object.getPrototypeOf(Video2)).apply(this, arguments));
              }
              _createClass(Video2, [{
                key: "format",
                value: function format2(name, value) {
                  if (ATTRIBUTES.indexOf(name) > -1) {
                    if (value) {
                      this.domNode.setAttribute(name, value);
                    } else {
                      this.domNode.removeAttribute(name);
                    }
                  } else {
                    _get(Video2.prototype.__proto__ || Object.getPrototypeOf(Video2.prototype), "format", this).call(this, name, value);
                  }
                }
              }], [{
                key: "create",
                value: function create3(value) {
                  var node = _get(Video2.__proto__ || Object.getPrototypeOf(Video2), "create", this).call(this, value);
                  node.setAttribute("frameborder", "0");
                  node.setAttribute("allowfullscreen", true);
                  node.setAttribute("src", this.sanitize(value));
                  return node;
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  return ATTRIBUTES.reduce(function(formats2, attribute) {
                    if (domNode.hasAttribute(attribute)) {
                      formats2[attribute] = domNode.getAttribute(attribute);
                    }
                    return formats2;
                  }, {});
                }
              }, {
                key: "sanitize",
                value: function sanitize(url) {
                  return _link2.default.sanitize(url);
                }
              }, {
                key: "value",
                value: function value(domNode) {
                  return domNode.getAttribute("src");
                }
              }]);
              return Video2;
            }(_block.BlockEmbed);
            Video.blotName = "video";
            Video.className = "ql-video";
            Video.tagName = "IFRAME";
            exports2.default = Video;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.FormulaBlot = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _embed = __webpack_require__(35);
            var _embed2 = _interopRequireDefault(_embed);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var FormulaBlot = function(_Embed) {
              _inherits(FormulaBlot2, _Embed);
              function FormulaBlot2() {
                _classCallCheck(this, FormulaBlot2);
                return _possibleConstructorReturn(this, (FormulaBlot2.__proto__ || Object.getPrototypeOf(FormulaBlot2)).apply(this, arguments));
              }
              _createClass(FormulaBlot2, null, [{
                key: "create",
                value: function create3(value) {
                  var node = _get(FormulaBlot2.__proto__ || Object.getPrototypeOf(FormulaBlot2), "create", this).call(this, value);
                  if (typeof value === "string") {
                    window.katex.render(value, node, {
                      throwOnError: false,
                      errorColor: "#f00"
                    });
                    node.setAttribute("data-value", value);
                  }
                  return node;
                }
              }, {
                key: "value",
                value: function value(domNode) {
                  return domNode.getAttribute("data-value");
                }
              }]);
              return FormulaBlot2;
            }(_embed2.default);
            FormulaBlot.blotName = "formula";
            FormulaBlot.className = "ql-formula";
            FormulaBlot.tagName = "SPAN";
            var Formula = function(_Module) {
              _inherits(Formula2, _Module);
              _createClass(Formula2, null, [{
                key: "register",
                value: function register() {
                  _quill2.default.register(FormulaBlot, true);
                }
              }]);
              function Formula2() {
                _classCallCheck(this, Formula2);
                var _this2 = _possibleConstructorReturn(this, (Formula2.__proto__ || Object.getPrototypeOf(Formula2)).call(this));
                if (window.katex == null) {
                  throw new Error("Formula module requires KaTeX.");
                }
                return _this2;
              }
              return Formula2;
            }(_module2.default);
            exports2.FormulaBlot = FormulaBlot;
            exports2.default = Formula;
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.CodeToken = exports2.CodeBlock = void 0;
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var SyntaxCodeBlock = function(_CodeBlock) {
              _inherits(SyntaxCodeBlock2, _CodeBlock);
              function SyntaxCodeBlock2() {
                _classCallCheck(this, SyntaxCodeBlock2);
                return _possibleConstructorReturn(this, (SyntaxCodeBlock2.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock2)).apply(this, arguments));
              }
              _createClass(SyntaxCodeBlock2, [{
                key: "replaceWith",
                value: function replaceWith(block) {
                  this.domNode.textContent = this.domNode.textContent;
                  this.attach();
                  _get(SyntaxCodeBlock2.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock2.prototype), "replaceWith", this).call(this, block);
                }
              }, {
                key: "highlight",
                value: function highlight(_highlight) {
                  var text = this.domNode.textContent;
                  if (this.cachedText !== text) {
                    if (text.trim().length > 0 || this.cachedText == null) {
                      this.domNode.innerHTML = _highlight(text);
                      this.domNode.normalize();
                      this.attach();
                    }
                    this.cachedText = text;
                  }
                }
              }]);
              return SyntaxCodeBlock2;
            }(_code2.default);
            SyntaxCodeBlock.className = "ql-syntax";
            var CodeToken = new _parchment2.default.Attributor.Class("token", "hljs", {
              scope: _parchment2.default.Scope.INLINE
            });
            var Syntax = function(_Module) {
              _inherits(Syntax2, _Module);
              _createClass(Syntax2, null, [{
                key: "register",
                value: function register() {
                  _quill2.default.register(CodeToken, true);
                  _quill2.default.register(SyntaxCodeBlock, true);
                }
              }]);
              function Syntax2(quill, options) {
                _classCallCheck(this, Syntax2);
                var _this2 = _possibleConstructorReturn(this, (Syntax2.__proto__ || Object.getPrototypeOf(Syntax2)).call(this, quill, options));
                if (typeof _this2.options.highlight !== "function") {
                  throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");
                }
                var timer = null;
                _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {
                  clearTimeout(timer);
                  timer = setTimeout(function() {
                    _this2.highlight();
                    timer = null;
                  }, _this2.options.interval);
                });
                _this2.highlight();
                return _this2;
              }
              _createClass(Syntax2, [{
                key: "highlight",
                value: function highlight() {
                  var _this3 = this;
                  if (this.quill.selection.composing)
                    return;
                  this.quill.update(_quill2.default.sources.USER);
                  var range = this.quill.getSelection();
                  this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function(code) {
                    code.highlight(_this3.options.highlight);
                  });
                  this.quill.update(_quill2.default.sources.SILENT);
                  if (range != null) {
                    this.quill.setSelection(range, _quill2.default.sources.SILENT);
                  }
                }
              }]);
              return Syntax2;
            }(_module2.default);
            Syntax.DEFAULTS = {
              highlight: function() {
                if (window.hljs == null)
                  return null;
                return function(text) {
                  var result = window.hljs.highlightAuto(text);
                  return result.value;
                };
              }(),
              interval: 1e3
            };
            exports2.CodeBlock = SyntaxCodeBlock;
            exports2.CodeToken = CodeToken;
            exports2.default = Syntax;
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points="5.5 13 9 5 12.5 13"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height=3 width=3 x=4 y=5></rect> <rect class="ql-fill ql-stroke" height=3 width=3 x=11 y=5></rect> <path class="ql-even ql-fill ql-stroke" d=M7,8c0,4.031-3,5-3,5></path> <path class="ql-even ql-fill ql-stroke" d=M14,8c0,4.031-3,5-3,5></path> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points="5.5 11 9 3 12.5 11"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform="translate(24 18) rotate(-180)"/> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewBox="0 0 18 18"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewBox="0 0 18 18"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="5 7 5 11 3 9 5 7"></polyline> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class="ql-even ql-stroke" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class="ql-even ql-stroke" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class="ql-stroke ql-thin" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class="ql-stroke ql-thin" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class="ql-stroke ql-thin" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points="3 4 4 5 6 3"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points="3 14 4 15 6 13"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="3 9 4 10 6 8"></polyline> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>';
          },
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <polygon class=ql-stroke points="7 11 9 13 11 11 7 11"></polygon> <polygon class=ql-stroke points="7 7 9 5 11 7 7 7"></polygon> </svg>';
          },
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.BubbleTooltip = void 0;
            var _get = function get2(object, property, receiver) {
              if (object === null)
                object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get2(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _base = __webpack_require__(43);
            var _base2 = _interopRequireDefault(_base);
            var _selection = __webpack_require__(15);
            var _icons = __webpack_require__(41);
            var _icons2 = _interopRequireDefault(_icons);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance2, Constructor) {
              if (!(instance2 instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TOOLBAR_CONFIG = [["bold", "italic", "link"], [{ header: 1 }, { header: 2 }, "blockquote"]];
            var BubbleTheme = function(_BaseTheme) {
              _inherits(BubbleTheme2, _BaseTheme);
              function BubbleTheme2(quill, options) {
                _classCallCheck(this, BubbleTheme2);
                if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                  options.modules.toolbar.container = TOOLBAR_CONFIG;
                }
                var _this = _possibleConstructorReturn(this, (BubbleTheme2.__proto__ || Object.getPrototypeOf(BubbleTheme2)).call(this, quill, options));
                _this.quill.container.classList.add("ql-bubble");
                return _this;
              }
              _createClass(BubbleTheme2, [{
                key: "extendToolbar",
                value: function extendToolbar(toolbar) {
                  this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
                  this.tooltip.root.appendChild(toolbar.container);
                  this.buildButtons([].slice.call(toolbar.container.querySelectorAll("button")), _icons2.default);
                  this.buildPickers([].slice.call(toolbar.container.querySelectorAll("select")), _icons2.default);
                }
              }]);
              return BubbleTheme2;
            }(_base2.default);
            BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
              modules: {
                toolbar: {
                  handlers: {
                    link: function link(value) {
                      if (!value) {
                        this.quill.format("link", false);
                      } else {
                        this.quill.theme.tooltip.edit();
                      }
                    }
                  }
                }
              }
            });
            var BubbleTooltip = function(_BaseTooltip) {
              _inherits(BubbleTooltip2, _BaseTooltip);
              function BubbleTooltip2(quill, bounds) {
                _classCallCheck(this, BubbleTooltip2);
                var _this2 = _possibleConstructorReturn(this, (BubbleTooltip2.__proto__ || Object.getPrototypeOf(BubbleTooltip2)).call(this, quill, bounds));
                _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function(type, range, oldRange, source) {
                  if (type !== _emitter2.default.events.SELECTION_CHANGE)
                    return;
                  if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
                    _this2.show();
                    _this2.root.style.left = "0px";
                    _this2.root.style.width = "";
                    _this2.root.style.width = _this2.root.offsetWidth + "px";
                    var lines = _this2.quill.getLines(range.index, range.length);
                    if (lines.length === 1) {
                      _this2.position(_this2.quill.getBounds(range));
                    } else {
                      var lastLine = lines[lines.length - 1];
                      var index2 = _this2.quill.getIndex(lastLine);
                      var length = Math.min(lastLine.length() - 1, range.index + range.length - index2);
                      var _bounds = _this2.quill.getBounds(new _selection.Range(index2, length));
                      _this2.position(_bounds);
                    }
                  } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
                    _this2.hide();
                  }
                });
                return _this2;
              }
              _createClass(BubbleTooltip2, [{
                key: "listen",
                value: function listen() {
                  var _this3 = this;
                  _get(BubbleTooltip2.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip2.prototype), "listen", this).call(this);
                  this.root.querySelector(".ql-close").addEventListener("click", function() {
                    _this3.root.classList.remove("ql-editing");
                  });
                  this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function() {
                    setTimeout(function() {
                      if (_this3.root.classList.contains("ql-hidden"))
                        return;
                      var range = _this3.quill.getSelection();
                      if (range != null) {
                        _this3.position(_this3.quill.getBounds(range));
                      }
                    }, 1);
                  });
                }
              }, {
                key: "cancel",
                value: function cancel() {
                  this.show();
                }
              }, {
                key: "position",
                value: function position3(reference2) {
                  var shift3 = _get(BubbleTooltip2.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip2.prototype), "position", this).call(this, reference2);
                  var arrow2 = this.root.querySelector(".ql-tooltip-arrow");
                  arrow2.style.marginLeft = "";
                  if (shift3 === 0)
                    return shift3;
                  arrow2.style.marginLeft = -1 * shift3 - arrow2.offsetWidth / 2 + "px";
                }
              }]);
              return BubbleTooltip2;
            }(_base.BaseTooltip);
            BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', "</div>"].join("");
            exports2.BubbleTooltip = BubbleTooltip;
            exports2.default = BubbleTheme;
          },
          function(module2, exports2, __webpack_require__) {
            module2.exports = __webpack_require__(63);
          }
        ])["default"];
      });
    }
  });

  // ../../node_modules/react-quill/lib/index.js
  var require_lib2 = __commonJS({
    "../../node_modules/react-quill/lib/index.js"(exports, module) {
      "use strict";
      var __extends2 = exports && exports.__extends || function() {
        var extendStatics = function(d4, b3) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d5, b4) {
            d5.__proto__ = b4;
          } || function(d5, b4) {
            for (var p3 in b4)
              if (b4.hasOwnProperty(p3))
                d5[p3] = b4[p3];
          };
          return extendStatics(d4, b3);
        };
        return function(d4, b3) {
          extendStatics(d4, b3);
          function __() {
            this.constructor = d4;
          }
          d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
        };
      }();
      var __assign2 = exports && exports.__assign || function() {
        __assign2 = Object.assign || function(t3) {
          for (var s3, i3 = 1, n4 = arguments.length; i3 < n4; i3++) {
            s3 = arguments[i3];
            for (var p3 in s3)
              if (Object.prototype.hasOwnProperty.call(s3, p3))
                t3[p3] = s3[p3];
          }
          return t3;
        };
        return __assign2.apply(this, arguments);
      };
      var __spreadArrays2 = exports && exports.__spreadArrays || function() {
        for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s3 += arguments[i3].length;
        for (var r2 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j4 = 0, jl = a3.length; j4 < jl; j4++, k3++)
            r2[k3] = a3[j4];
        return r2;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      var react_1 = __importDefault2(require_react());
      var react_dom_1 = __importDefault2(require_react_dom());
      var isEqual_1 = __importDefault2(require_isEqual());
      var quill_1 = __importDefault2(require_quill());
      var ReactQuill2 = function(_super) {
        __extends2(ReactQuill3, _super);
        function ReactQuill3(props) {
          var _this = _super.call(this, props) || this;
          _this.dirtyProps = [
            "modules",
            "formats",
            "bounds",
            "theme",
            "children"
          ];
          _this.cleanProps = [
            "id",
            "className",
            "style",
            "placeholder",
            "tabIndex",
            "onChange",
            "onChangeSelection",
            "onFocus",
            "onBlur",
            "onKeyPress",
            "onKeyDown",
            "onKeyUp"
          ];
          _this.state = {
            generation: 0
          };
          _this.selection = null;
          _this.onEditorChange = function(eventName, rangeOrDelta, oldRangeOrDelta, source) {
            var _a2, _b, _c, _d;
            if (eventName === "text-change") {
              (_b = (_a2 = _this).onEditorChangeText) === null || _b === void 0 ? void 0 : _b.call(_a2, _this.editor.root.innerHTML, rangeOrDelta, source, _this.unprivilegedEditor);
            } else if (eventName === "selection-change") {
              (_d = (_c = _this).onEditorChangeSelection) === null || _d === void 0 ? void 0 : _d.call(_c, rangeOrDelta, source, _this.unprivilegedEditor);
            }
          };
          var value = _this.isControlled() ? props.value : props.defaultValue;
          _this.value = value !== null && value !== void 0 ? value : "";
          return _this;
        }
        ReactQuill3.prototype.validateProps = function(props) {
          var _a2;
          if (react_1.default.Children.count(props.children) > 1)
            throw new Error("The Quill editing area can only be composed of a single React element.");
          if (react_1.default.Children.count(props.children)) {
            var child = react_1.default.Children.only(props.children);
            if (((_a2 = child) === null || _a2 === void 0 ? void 0 : _a2.type) === "textarea")
              throw new Error("Quill does not support editing on a <textarea>. Use a <div> instead.");
          }
          if (this.lastDeltaChangeSet && props.value === this.lastDeltaChangeSet)
            throw new Error("You are passing the `delta` object from the `onChange` event back as `value`. You most probably want `editor.getContents()` instead. See: https://github.com/zenoamaro/react-quill#using-deltas");
        };
        ReactQuill3.prototype.shouldComponentUpdate = function(nextProps, nextState) {
          var _this = this;
          var _a2;
          this.validateProps(nextProps);
          if (!this.editor || this.state.generation !== nextState.generation) {
            return true;
          }
          if ("value" in nextProps) {
            var prevContents = this.getEditorContents();
            var nextContents = (_a2 = nextProps.value, _a2 !== null && _a2 !== void 0 ? _a2 : "");
            if (!this.isEqualValue(nextContents, prevContents)) {
              this.setEditorContents(this.editor, nextContents);
            }
          }
          if (nextProps.readOnly !== this.props.readOnly) {
            this.setEditorReadOnly(this.editor, nextProps.readOnly);
          }
          return __spreadArrays2(this.cleanProps, this.dirtyProps).some(function(prop) {
            return !isEqual_1.default(nextProps[prop], _this.props[prop]);
          });
        };
        ReactQuill3.prototype.shouldComponentRegenerate = function(nextProps) {
          var _this = this;
          return this.dirtyProps.some(function(prop) {
            return !isEqual_1.default(nextProps[prop], _this.props[prop]);
          });
        };
        ReactQuill3.prototype.componentDidMount = function() {
          this.instantiateEditor();
          this.setEditorContents(this.editor, this.getEditorContents());
        };
        ReactQuill3.prototype.componentWillUnmount = function() {
          this.destroyEditor();
        };
        ReactQuill3.prototype.componentDidUpdate = function(prevProps, prevState) {
          var _this = this;
          if (this.editor && this.shouldComponentRegenerate(prevProps)) {
            var delta = this.editor.getContents();
            var selection = this.editor.getSelection();
            this.regenerationSnapshot = { delta, selection };
            this.setState({ generation: this.state.generation + 1 });
            this.destroyEditor();
          }
          if (this.state.generation !== prevState.generation) {
            var _a2 = this.regenerationSnapshot, delta = _a2.delta, selection_1 = _a2.selection;
            delete this.regenerationSnapshot;
            this.instantiateEditor();
            var editor_1 = this.editor;
            editor_1.setContents(delta);
            postpone(function() {
              return _this.setEditorSelection(editor_1, selection_1);
            });
          }
        };
        ReactQuill3.prototype.instantiateEditor = function() {
          if (this.editor) {
            this.hookEditor(this.editor);
          } else {
            this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());
          }
        };
        ReactQuill3.prototype.destroyEditor = function() {
          if (!this.editor)
            return;
          this.unhookEditor(this.editor);
        };
        ReactQuill3.prototype.isControlled = function() {
          return "value" in this.props;
        };
        ReactQuill3.prototype.getEditorConfig = function() {
          return {
            bounds: this.props.bounds,
            formats: this.props.formats,
            modules: this.props.modules,
            placeholder: this.props.placeholder,
            readOnly: this.props.readOnly,
            scrollingContainer: this.props.scrollingContainer,
            tabIndex: this.props.tabIndex,
            theme: this.props.theme
          };
        };
        ReactQuill3.prototype.getEditor = function() {
          if (!this.editor)
            throw new Error("Accessing non-instantiated editor");
          return this.editor;
        };
        ReactQuill3.prototype.createEditor = function(element, config2) {
          var editor = new quill_1.default(element, config2);
          if (config2.tabIndex != null) {
            this.setEditorTabIndex(editor, config2.tabIndex);
          }
          this.hookEditor(editor);
          return editor;
        };
        ReactQuill3.prototype.hookEditor = function(editor) {
          this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);
          editor.on("editor-change", this.onEditorChange);
        };
        ReactQuill3.prototype.unhookEditor = function(editor) {
          editor.off("editor-change", this.onEditorChange);
        };
        ReactQuill3.prototype.getEditorContents = function() {
          return this.value;
        };
        ReactQuill3.prototype.getEditorSelection = function() {
          return this.selection;
        };
        ReactQuill3.prototype.isDelta = function(value) {
          return value && value.ops;
        };
        ReactQuill3.prototype.isEqualValue = function(value, nextValue) {
          if (this.isDelta(value) && this.isDelta(nextValue)) {
            return isEqual_1.default(value.ops, nextValue.ops);
          } else {
            return isEqual_1.default(value, nextValue);
          }
        };
        ReactQuill3.prototype.setEditorContents = function(editor, value) {
          var _this = this;
          this.value = value;
          var sel = this.getEditorSelection();
          if (typeof value === "string") {
            editor.setContents(editor.clipboard.convert(value));
          } else {
            editor.setContents(value);
          }
          postpone(function() {
            return _this.setEditorSelection(editor, sel);
          });
        };
        ReactQuill3.prototype.setEditorSelection = function(editor, range) {
          this.selection = range;
          if (range) {
            var length_1 = editor.getLength();
            range.index = Math.max(0, Math.min(range.index, length_1 - 1));
            range.length = Math.max(0, Math.min(range.length, length_1 - 1 - range.index));
            editor.setSelection(range);
          }
        };
        ReactQuill3.prototype.setEditorTabIndex = function(editor, tabIndex) {
          var _a2, _b;
          if ((_b = (_a2 = editor) === null || _a2 === void 0 ? void 0 : _a2.scroll) === null || _b === void 0 ? void 0 : _b.domNode) {
            editor.scroll.domNode.tabIndex = tabIndex;
          }
        };
        ReactQuill3.prototype.setEditorReadOnly = function(editor, value) {
          if (value) {
            editor.disable();
          } else {
            editor.enable();
          }
        };
        ReactQuill3.prototype.makeUnprivilegedEditor = function(editor) {
          var e2 = editor;
          return {
            getHTML: function() {
              return e2.root.innerHTML;
            },
            getLength: e2.getLength.bind(e2),
            getText: e2.getText.bind(e2),
            getContents: e2.getContents.bind(e2),
            getSelection: e2.getSelection.bind(e2),
            getBounds: e2.getBounds.bind(e2)
          };
        };
        ReactQuill3.prototype.getEditingArea = function() {
          if (!this.editingArea) {
            throw new Error("Instantiating on missing editing area");
          }
          var element = react_dom_1.default.findDOMNode(this.editingArea);
          if (!element) {
            throw new Error("Cannot find element for editing area");
          }
          if (element.nodeType === 3) {
            throw new Error("Editing area cannot be a text node");
          }
          return element;
        };
        ReactQuill3.prototype.renderEditingArea = function() {
          var _this = this;
          var _a2 = this.props, children = _a2.children, preserveWhitespace = _a2.preserveWhitespace;
          var generation = this.state.generation;
          var properties = {
            key: generation,
            ref: function(instance2) {
              _this.editingArea = instance2;
            }
          };
          if (react_1.default.Children.count(children)) {
            return react_1.default.cloneElement(react_1.default.Children.only(children), properties);
          }
          return preserveWhitespace ? react_1.default.createElement("pre", __assign2({}, properties)) : react_1.default.createElement("div", __assign2({}, properties));
        };
        ReactQuill3.prototype.render = function() {
          var _a2;
          return react_1.default.createElement("div", { id: this.props.id, style: this.props.style, key: this.state.generation, className: "quill " + (_a2 = this.props.className, _a2 !== null && _a2 !== void 0 ? _a2 : ""), onKeyPress: this.props.onKeyPress, onKeyDown: this.props.onKeyDown, onKeyUp: this.props.onKeyUp }, this.renderEditingArea());
        };
        ReactQuill3.prototype.onEditorChangeText = function(value, delta, source, editor) {
          var _a2, _b;
          if (!this.editor)
            return;
          var nextContents = this.isDelta(this.value) ? editor.getContents() : editor.getHTML();
          if (nextContents !== this.getEditorContents()) {
            this.lastDeltaChangeSet = delta;
            this.value = nextContents;
            (_b = (_a2 = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a2, value, delta, source, editor);
          }
        };
        ReactQuill3.prototype.onEditorChangeSelection = function(nextSelection, source, editor) {
          var _a2, _b, _c, _d, _e, _f;
          if (!this.editor)
            return;
          var currentSelection = this.getEditorSelection();
          var hasGainedFocus = !currentSelection && nextSelection;
          var hasLostFocus = currentSelection && !nextSelection;
          if (isEqual_1.default(nextSelection, currentSelection))
            return;
          this.selection = nextSelection;
          (_b = (_a2 = this.props).onChangeSelection) === null || _b === void 0 ? void 0 : _b.call(_a2, nextSelection, source, editor);
          if (hasGainedFocus) {
            (_d = (_c = this.props).onFocus) === null || _d === void 0 ? void 0 : _d.call(_c, nextSelection, source, editor);
          } else if (hasLostFocus) {
            (_f = (_e = this.props).onBlur) === null || _f === void 0 ? void 0 : _f.call(_e, currentSelection, source, editor);
          }
        };
        ReactQuill3.prototype.focus = function() {
          if (!this.editor)
            return;
          this.editor.focus();
        };
        ReactQuill3.prototype.blur = function() {
          if (!this.editor)
            return;
          this.selection = null;
          this.editor.blur();
        };
        ReactQuill3.displayName = "React Quill";
        ReactQuill3.Quill = quill_1.default;
        ReactQuill3.defaultProps = {
          theme: "snow",
          modules: {},
          readOnly: false
        };
        return ReactQuill3;
      }(react_1.default.Component);
      function postpone(fn4) {
        Promise.resolve().then(fn4);
      }
      module.exports = ReactQuill2;
    }
  });

  // ../../node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "../../node_modules/lodash/lodash.js"(exports, module) {
      (function() {
        var undefined2;
        var VERSION = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types2 = freeModule && freeModule.require && freeModule.require("util").types;
            if (types2) {
              return types2;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e2) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply3(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            var value = array[index2];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (iteratee(array[index2], index2, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (!predicate(array[index2], index2, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index2 < length) {
            var value = array[index2];
            if (predicate(value, index2, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        function arrayIncludesWith(array, value, comparator) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (comparator(value, array[index2])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index2 < length) {
            result[index2] = iteratee(array[index2], index2, array);
          }
          return result;
        }
        function arrayPush(array, values2) {
          var index2 = -1, length = values2.length, offset4 = array.length;
          while (++index2 < length) {
            array[offset4 + index2] = values2[index2];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index2 = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index2];
          }
          while (++index2 < length) {
            accumulator = iteratee(accumulator, array[index2], index2, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (predicate(array[index2], index2, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index2-- : ++index2 < length) {
            if (predicate(array[index2], index2, array)) {
              return index2;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index2 = fromIndex - 1, length = array.length;
          while (++index2 < length) {
            if (comparator(array[index2], value)) {
              return index2;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index2, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index2, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result, index2 = -1, length = array.length;
          while (++index2 < length) {
            var current = iteratee(array[index2]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        function baseTimes(n4, iteratee) {
          var index2 = -1, result = Array(n4);
          while (++index2 < n4) {
            result[index2] = iteratee(index2);
          }
          return result;
        }
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index2 = -1, length = strSymbols.length;
          while (++index2 < length && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
          }
          return index2;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index2 = strSymbols.length;
          while (index2-- && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
          }
          return index2;
        }
        function countHolders(array, placeholder2) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder2) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue2(object, key) {
          return object == null ? undefined2 : object[key];
        }
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        function mapToArray(map) {
          var index2 = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index2] = [key, value];
          });
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function replaceHolders(array, placeholder2) {
          var index2 = -1, length = array.length, resIndex = 0, result = [];
          while (++index2 < length) {
            var value = array[index2];
            if (value === placeholder2 || value === PLACEHOLDER) {
              array[index2] = PLACEHOLDER;
              result[resIndex++] = index2;
            }
          }
          return result;
        }
        function setToArray(set) {
          var index2 = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index2] = value;
          });
          return result;
        }
        function setToPairs(set) {
          var index2 = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index2] = [value, value];
          });
          return result;
        }
        function strictIndexOf(array, value, fromIndex) {
          var index2 = fromIndex - 1, length = array.length;
          while (++index2 < length) {
            if (array[index2] === value) {
              return index2;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value, fromIndex) {
          var index2 = fromIndex + 1;
          while (index2--) {
            if (array[index2] === value) {
              return index2;
            }
          }
          return index2;
        }
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        function trimmedEndIndex(string) {
          var index2 = string.length;
          while (index2-- && reWhitespace.test(string.charAt(index2))) {
          }
          return index2;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root : _3.defaults(root.Object(), context, _3.pick(root, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty2 = objectProto.hasOwnProperty;
          var idCounter2 = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2(
            "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
          );
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e2) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap && new WeakMap();
          var realNames = {};
          var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty2.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = function() {
            function object() {
            }
            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            "escape": reEscape,
            "evaluate": reEvaluate,
            "interpolate": reInterpolate,
            "variable": "",
            "imports": {
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start4 = view.start, end3 = view.end, length = end3 - start4, index2 = isRight ? end3 : start4 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index2 += dir;
                var iterIndex = -1, value = array[index2];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index2 = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index2 < length) {
              var entry = entries[index2];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty2.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty2.call(data, key);
          }
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index2 = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index2 < length) {
              var entry = entries[index2];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index2 = assocIndexOf(data, key);
            if (index2 < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index2 == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index2, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index2 = assocIndexOf(data, key);
            return index2 < 0 ? undefined2 : data[index2][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data = this.__data__, index2 = assocIndexOf(data, key);
            if (index2 < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index2][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index2 = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index2 < length) {
              var entry = entries[index2];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values3) {
            var index2 = -1, length = values3 == null ? 0 : values3.length;
            this.__data__ = new MapCache();
            while (++index2 < length) {
              this.add(values3[index2]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType2 = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType2, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType2 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          function arraySampleSize(array, n4) {
            return shuffleSelf(copyArray(array), baseClamp(n4, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          function baseAt(object, paths) {
            var index2 = -1, length = paths.length, result2 = Array2(length), skip = object == null;
            while (++index2 < length) {
              result2[index2] = skip ? undefined2 : get2(object, paths[index2]);
            }
            return result2;
          }
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values3, iteratee2, comparator) {
            var index2 = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values3.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values3 = arrayMap(values3, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values3.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values3 = new SetCache(values3);
            }
            outer:
              while (++index2 < length) {
                var value = array[index2], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values3[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values3, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index2, collection2) {
              result2 = !!predicate(value, index2, collection2);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index2 = -1, length = array.length;
            while (++index2 < length) {
              var value = array[index2], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          function baseFill(array, value, start4, end3) {
            var length = array.length;
            start4 = toInteger(start4);
            if (start4 < 0) {
              start4 = -start4 > length ? 0 : length + start4;
            }
            end3 = end3 === undefined2 || end3 > length ? length : toInteger(end3);
            if (end3 < 0) {
              end3 += length;
            }
            end3 = start4 > end3 ? 0 : toLength(end3);
            while (start4 < end3) {
              array[start4++] = value;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index2, collection2) {
              if (predicate(value, index2, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index2 = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index2 < length) {
              var value = array[index2];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction(object[key]);
            });
          }
          function baseGet(object, path) {
            path = castPath(path, object);
            var index2 = 0, length = path.length;
            while (object != null && index2 < length) {
              object = object[toKey(path[index2++])];
            }
            return index2 && index2 == length ? object : undefined2;
          }
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object, key) {
            return object != null && hasOwnProperty2.call(object, key);
          }
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          function baseInRange(number, start4, end3) {
            return number >= nativeMin(start4, end3) && number < nativeMax(start4, end3);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index2 = -1, seen = caches[0];
            outer:
              while (++index2 < length && result2.length < maxLength) {
                var value = array[index2], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply3(func, object, args);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object, source, matchData, customizer) {
            var index2 = matchData.length, length = index2, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index2--) {
              var data = matchData[index2];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index2 < length) {
              data = matchData[index2];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty2.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection, iteratee2) {
            var index2 = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index2] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get2(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject4(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          function baseNth(array, n4) {
            var length = array.length;
            if (!length) {
              return;
            }
            n4 += n4 < 0 ? length : 0;
            return isIndex(n4, length) ? array[n4] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index2 = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index2, "value": value };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          function basePickBy(object, paths, predicate) {
            var index2 = -1, length = paths.length, result2 = {};
            while (++index2 < length) {
              var path = paths[index2], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object), value);
              }
            }
            return result2;
          }
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          function basePullAll(array, values3, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index2 = -1, length = values3.length, seen = array;
            if (array === values3) {
              values3 = copyArray(values3);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index2 < length) {
              var fromIndex = 0, value = values3[index2], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index2 = indexes[length];
              if (length == lastIndex || index2 !== previous) {
                var previous = index2;
                if (isIndex(index2)) {
                  splice.call(array, index2, 1);
                } else {
                  baseUnset(array, index2);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start4, end3, step, fromRight) {
            var index2 = -1, length = nativeMax(nativeCeil((end3 - start4) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index2] = start4;
              start4 += step;
            }
            return result2;
          }
          function baseRepeat(string, n4) {
            var result2 = "";
            if (!string || n4 < 1 || n4 > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n4 % 2) {
                result2 += string;
              }
              n4 = nativeFloor(n4 / 2);
              if (n4) {
                string += string;
              }
            } while (n4);
            return result2;
          }
          function baseRest(func, start4) {
            return setToString(overRest(func, start4, identity), func + "");
          }
          function baseSample(collection) {
            return arraySample(values2(collection));
          }
          function baseSampleSize(collection, n4) {
            var array = values2(collection);
            return shuffleSelf(array, baseClamp(n4, 0, array.length));
          }
          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object;
            }
            path = castPath(path, object);
            var index2 = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index2 < length) {
              var key = toKey(path[index2]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index2 != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index2 + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values2(collection));
          }
          function baseSlice(array, start4, end3) {
            var index2 = -1, length = array.length;
            if (start4 < 0) {
              start4 = -start4 > length ? 0 : length + start4;
            }
            end3 = end3 > length ? length : end3;
            if (end3 < 0) {
              end3 += length;
            }
            length = start4 > end3 ? 0 : end3 - start4 >>> 0;
            start4 >>>= 0;
            var result2 = Array2(length);
            while (++index2 < length) {
              result2[index2] = array[index2 + start4];
            }
            return result2;
          }
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index2, collection2) {
              result2 = predicate(value, index2, collection2);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index2 = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index2 < length) {
              var value = array[index2], computed = iteratee2 ? iteratee2(value) : value;
              if (!index2 || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index2 = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index2 < length) {
                var value = array[index2], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index2 = fromRight ? length : -1;
            while ((fromRight ? index2-- : ++index2 < length) && predicate(array[index2], index2, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index2, fromRight ? index2 + 1 : length) : baseSlice(array, fromRight ? index2 + 1 : 0, fromRight ? length : index2);
          }
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index2 = -1, result2 = Array2(length);
            while (++index2 < length) {
              var array = arrays[index2], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index2) {
                  result2[index2] = baseDifference(result2[index2] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values3, assignFunc) {
            var index2 = -1, length = props.length, valsLength = values3.length, result2 = {};
            while (++index2 < length) {
              var value = index2 < valsLength ? values3[index2] : undefined2;
              assignFunc(result2, props[index2], value);
            }
            return result2;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString2(value));
          }
          var castRest = baseRest;
          function castSlice(array, start4, end3) {
            var length = array.length;
            end3 = end3 === undefined2 ? length : end3;
            return !start4 && end3 >= length ? array : baseSlice(array, start4, end3);
          }
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object, other, orders) {
            var index2 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index2 < length) {
              var result2 = compareAscending(objCriteria[index2], othCriteria[index2]);
              if (result2) {
                if (index2 >= ordersLength) {
                  return result2;
                }
                var order2 = orders[index2];
                return result2 * (order2 == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset4 = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset4 + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset4 + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array) {
            var index2 = -1, length = source.length;
            array || (array = Array2(length));
            while (++index2 < length) {
              array[index2] = source[index2];
            }
            return array;
          }
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index2 = -1, length = props.length;
            while (++index2 < length) {
              var key = props[index2];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index2 < length) {
                var source = sources[index2];
                if (source) {
                  assigner(object, source, index2, customizer);
                }
              }
              return object;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index2 = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index2-- : ++index2 < length) {
                if (iteratee2(iterable[index2], index2, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index2 = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index2];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn4 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn4.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString2(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index2 = length, placeholder2 = getHolder(wrapper);
              while (index2--) {
                args[index2] = arguments[index2];
              }
              var holders = length < 3 && args[0] !== placeholder2 && args[length - 1] !== placeholder2 ? [] : replaceHolders(args, placeholder2);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined2,
                  args,
                  holders,
                  undefined2,
                  undefined2,
                  arity - length
                );
              }
              var fn4 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply3(fn4, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index2 = findIndexFunc(collection, predicate, fromIndex);
              return index2 > -1 ? iterable[iteratee2 ? collection[index2] : index2] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index2 = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index2--) {
                var func = funcs[index2];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index2 = wrapper ? index2 : length;
              while (++index2 < length) {
                func = funcs[index2];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }
                var index3 = 0, result2 = length ? funcs[index3].apply(this, args) : value;
                while (++index3 < length) {
                  result2 = funcs[index3].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index2 = length;
              while (index2--) {
                args[index2] = arguments[index2];
              }
              if (isCurried) {
                var placeholder2 = getHolder(wrapper), holdersCount = countHolders(args, placeholder2);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder2);
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary2,
                  arity - length
                );
              }
              var thisBinding = isBind ? thisArg : this, fn4 = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder2(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn4 = Ctor || createCtor(fn4);
              }
              return fn4.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply3(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn4 = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply3(fn4, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start4, end3, step) {
              if (step && typeof step != "number" && isIterateeCall(start4, end3, step)) {
                end3 = step = undefined2;
              }
              start4 = toFinite(start4);
              if (end3 === undefined2) {
                end3 = start4;
                start4 = 0;
              } else {
                end3 = toFinite(end3);
              }
              step = step === undefined2 ? start4 < end3 ? 1 : -1 : toFinite(step);
              return baseRange(start4, end3, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder2, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder2;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString2(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString2(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop3 : function(values3) {
            return new Set2(values3);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject4(value) ? undefined2 : value;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index2 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index2 < arrLength) {
              var arrValue = array[index2], othValue = other[index2];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index2 = objLength;
            while (index2--) {
              var key = objProps[index2];
              if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index2 < objLength) {
              key = objProps[index2];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop3 : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object = hasOwnProperty2.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object) {
            var result2 = keys(object), length = result2.length;
            while (length--) {
              var key = result2[length], value = object[key];
              result2[length] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          function getNative(object, key) {
            var value = getValue2(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e2) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
            getTag = function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start4, end3, transforms2) {
            var index2 = -1, length = transforms2.length;
            while (++index2 < length) {
              var data = transforms2[index2], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start4 += size2;
                  break;
                case "dropRight":
                  end3 -= size2;
                  break;
                case "take":
                  end3 = nativeMin(end3, start4 + size2);
                  break;
                case "takeRight":
                  start4 = nativeMax(start4, end3 - size2);
                  break;
              }
            }
            return { "start": start4, "end": end3 };
          }
          function getWrapDetails(source) {
            var match2 = source.match(reWrapDetails);
            return match2 ? match2[1].split(reSplitDetails) : [];
          }
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index2 = -1, length = path.length, result2 = false;
            while (++index2 < length) {
              var key = toKey(path[index2]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index2 != length) {
              return result2;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          function isIterateeCall(value, index2, object) {
            if (!isObject(object)) {
              return false;
            }
            var type = typeof index2;
            if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
              return eq(object[index2], value);
            }
            return false;
          }
          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize2(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result2.cache;
            return result2;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start4, transform2) {
            start4 = nativeMax(start4 === undefined2 ? func.length - 1 : start4, 0);
            return function() {
              var args = arguments, index2 = -1, length = nativeMax(args.length - start4, 0), array = Array2(length);
              while (++index2 < length) {
                array[index2] = args[start4 + index2];
              }
              index2 = -1;
              var otherArgs = Array2(start4 + 1);
              while (++index2 < start4) {
                otherArgs[index2] = args[index2];
              }
              otherArgs[start4] = transform2(array);
              return apply3(func, this, otherArgs);
            };
          }
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          function reorder2(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index2 = indexes[length];
              array[length] = isIndex(index2, arrLength) ? oldArray[index2] : undefined2;
            }
            return array;
          }
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference2, bitmask) {
            var source = reference2 + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count2 = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count2 >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count2 = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size2) {
            var index2 = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index2 < size2) {
              var rand = baseRandom(index2, lastIndex), value = array[rand];
              array[rand] = array[index2];
              array[index2] = value;
            }
            array.length = size2;
            return array;
          }
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match2, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e2) {
              }
              try {
                return func + "";
              } catch (e2) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index2 = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index2 < length) {
              result2[resIndex++] = baseSlice(array, index2, index2 += size2);
            }
            return result2;
          }
          function compact(array) {
            var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index2 < length) {
              var value = array[index2];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          function concat() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index2 = length;
            while (index2--) {
              args[index2 - 1] = arguments[index2];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values3) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values3) {
            var iteratee2 = last(values3);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values3) {
            var comparator = last(values3);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop5(array, n4, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n4 = guard || n4 === undefined2 ? 1 : toInteger(n4);
            return baseSlice(array, n4 < 0 ? 0 : n4, length);
          }
          function dropRight(array, n4, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n4 = guard || n4 === undefined2 ? 1 : toInteger(n4);
            n4 = length - n4;
            return baseSlice(array, 0, n4 < 0 ? 0 : n4);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value, start4, end3) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start4 && typeof start4 != "number" && isIterateeCall(array, value, start4)) {
              start4 = 0;
              end3 = length;
            }
            return baseFill(array, value, start4, end3);
          }
          function findIndex2(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index2 < 0) {
              index2 = nativeMax(length + index2, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index2);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index2 = length - 1;
            if (fromIndex !== undefined2) {
              index2 = toInteger(fromIndex);
              index2 = fromIndex < 0 ? nativeMax(length + index2, 0) : nativeMin(index2, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index2, true);
          }
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index2 = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index2 < length) {
              var pair = pairs[index2];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index2 < 0) {
              index2 = nativeMax(length + index2, 0);
            }
            return baseIndexOf(array, value, index2);
          }
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index2 = length;
            if (fromIndex !== undefined2) {
              index2 = toInteger(fromIndex);
              index2 = index2 < 0 ? nativeMax(length + index2, 0) : nativeMin(index2, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index2) : baseFindIndex(array, baseIsNaN, index2, true);
          }
          function nth(array, n4) {
            return array && array.length ? baseNth(array, toInteger(n4)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values3) {
            return array && array.length && values3 && values3.length ? basePullAll(array, values3) : array;
          }
          function pullAllBy(array, values3, iteratee2) {
            return array && array.length && values3 && values3.length ? basePullAll(array, values3, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values3, comparator) {
            return array && array.length && values3 && values3.length ? basePullAll(array, values3, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index2) {
              return isIndex(index2, length) ? +index2 : index2;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index2 = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index2 < length) {
              var value = array[index2];
              if (predicate(value, index2, array)) {
                result2.push(value);
                indexes.push(index2);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice(array, start4, end3) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end3 && typeof end3 != "number" && isIterateeCall(array, start4, end3)) {
              start4 = 0;
              end3 = length;
            } else {
              start4 = start4 == null ? 0 : toInteger(start4);
              end3 = end3 === undefined2 ? length : toInteger(end3);
            }
            return baseSlice(array, start4, end3);
          }
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index2 = baseSortedIndex(array, value);
              if (index2 < length && eq(array[index2], value)) {
                return index2;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index2 = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index2], value)) {
                return index2;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          function take(array, n4, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n4 = guard || n4 === undefined2 ? 1 : toInteger(n4);
            return baseSlice(array, 0, n4 < 0 ? 0 : n4);
          }
          function takeRight(array, n4, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n4 = guard || n4 === undefined2 ? 1 : toInteger(n4);
            n4 = length - n4;
            return baseSlice(array, n4 < 0 ? 0 : n4, length);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index2) {
              return arrayMap(array, baseProperty(index2));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply3(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values3) {
            return isArrayLikeObject(array) ? baseDifference(array, values3) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values3) {
            return baseZipObject(props || [], values3 || [], assignValue);
          }
          function zipObjectDeep(props, values3) {
            return baseZipObject(props || [], values3 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start4 = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
              return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start4)) {
              return this.thru(interceptor);
            }
            value = value.slice(start4, +start4 + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray2(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone2;
              } else {
                result2 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty2.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find2 = createFind(findIndex2);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy3 = createAggregator(function(result2, value, key) {
            if (hasOwnProperty2.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values2(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index2 = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index2] = isFunc ? apply3(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition3 = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate3(getIteratee(predicate, 3)));
          }
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n4, guard) {
            if (guard ? isIterateeCall(collection, n4, guard) : n4 === undefined2) {
              n4 = 1;
            } else {
              n4 = toInteger(n4);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n4);
          }
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now2 = ctxNow || function() {
            return root.Date.now();
          };
          function after(n4, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n4 = toInteger(n4);
            return function() {
              if (--n4 < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n4, guard) {
            n4 = guard ? undefined2 : n4;
            n4 = func && n4 == null ? func.length : n4;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n4);
          }
          function before(n4, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n4 = toInteger(n4);
            return function() {
              if (--n4 > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n4 <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce3(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now2();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush3() {
              return timerId === undefined2 ? result2 : trailingEdge(now2());
            }
            function debounced() {
              var time = now2(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush3;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip2(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize2(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache.set(key, result2) || cache;
              return result2;
            };
            memoized.cache = new (memoize2.Cache || MapCache)();
            return memoized;
          }
          memoize2.Cache = MapCache;
          function negate3(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms2) {
            transforms2 = transforms2.length == 1 && isArray(transforms2[0]) ? arrayMap(transforms2[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms2, 1), baseUnary(getIteratee()));
            var funcsLength = transforms2.length;
            return baseRest(function(args) {
              var index2 = -1, length = nativeMin(args.length, funcsLength);
              while (++index2 < length) {
                args[index2] = transforms2[index2].call(this, args[index2]);
              }
              return apply3(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start4) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start4 = start4 === undefined2 ? start4 : toInteger(start4);
            return baseRest(func, start4);
          }
          function spread(func, start4) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start4 = start4 == null ? 0 : nativeMax(toInteger(start4), 0);
            return baseRest(function(args) {
              var array = args[start4], otherArgs = castSlice(args, 0, start4);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply3(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce3(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          function isBoolean2(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement4(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject4(value);
          }
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty2.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual5(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          function isError2(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject4(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction(value) {
            if (!isObject(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger2(value) {
            return typeof value == "number" && value == toInteger(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          function isNaN2(value) {
            return isNumber(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject4(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger2(value) {
            return isInteger2(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray2(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values2;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          function toString2(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty2.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at = flatRest(baseAt);
          function create3(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults2 = baseRest(function(object, sources) {
            object = Object2(object);
            var index2 = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index2 < length) {
              var source = sources[index2];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply3(mergeWith, undefined2, args);
          });
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          function get2(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty2.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, iteratee2(value, key, object2), value);
            });
            return result2;
          }
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, key, iteratee2(value, key, object2));
            });
            return result2;
          }
          var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate3(getIteratee(predicate)));
          }
          var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index2 = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index2 < length) {
              var value = object == null ? undefined2 : object[toKey(path[index2])];
              if (value === undefined2) {
                index2 = length;
                value = defaultValue;
              }
              object = isFunction(value) ? value.call(object) : value;
            }
            return object;
          }
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform(object, iteratee2, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index2, object2) {
              return iteratee2(accumulator, value, index2, object2);
            });
            return accumulator;
          }
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          function update2(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          function values2(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          function clamp(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          function inRange(number, start4, end3) {
            start4 = toFinite(start4);
            if (end3 === undefined2) {
              end3 = start4;
              start4 = 0;
            } else {
              end3 = toFinite(end3);
            }
            number = toNumber(number);
            return baseInRange(number, start4, end3);
          }
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result2, word, index2) {
            word = word.toLowerCase();
            return result2 + (index2 ? capitalize(word) : word);
          });
          function capitalize(string) {
            return upperFirst(toString2(string).toLowerCase());
          }
          function deburr(string) {
            string = toString2(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string, target, position3) {
            string = toString2(string);
            target = baseToString(target);
            var length = string.length;
            position3 = position3 === undefined2 ? length : baseClamp(toInteger(position3), 0, length);
            var end3 = position3;
            position3 -= target.length;
            return position3 >= 0 && string.slice(position3, end3) == target;
          }
          function escape2(string) {
            string = toString2(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          function escapeRegExp(string) {
            string = toString2(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          var kebabCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length, chars) {
            string = toString2(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string, length, chars) {
            string = toString2(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          function padStart(string, length, chars) {
            string = toString2(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString2(string).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string, n4, guard) {
            if (guard ? isIterateeCall(string, n4, guard) : n4 === undefined2) {
              n4 = 1;
            } else {
              n4 = toInteger(n4);
            }
            return baseRepeat(toString2(string), n4);
          }
          function replace() {
            var args = arguments, string = toString2(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString2(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? " " : "") + upperFirst(word);
          });
          function startsWith4(string, target, position3) {
            string = toString2(string);
            position3 = position3 == null ? 0 : baseClamp(toInteger(position3), 0, string.length);
            target = baseToString(target);
            return string.slice(position3, position3 + target.length) == target;
          }
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString2(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match2, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset4) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index2, offset4).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index2 = offset4 + match2.length;
              return match2;
            });
            source += "';\n";
            var variable = hasOwnProperty2.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError2(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value) {
            return toString2(value).toLowerCase();
          }
          function toUpper(value) {
            return toString2(value).toUpperCase();
          }
          function trim(string, chars, guard) {
            string = toString2(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start4 = charsStartIndex(strSymbols, chrSymbols), end3 = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start4, end3).join("");
          }
          function trimEnd4(string, chars, guard) {
            string = toString2(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end3 = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end3).join("");
          }
          function trimStart4(string, chars, guard) {
            string = toString2(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start4 = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start4).join("");
          }
          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString2(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end3 = length - stringSize(omission);
            if (end3 < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end3).join("") : string.slice(0, end3);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end3 += result2.length - end3;
            }
            if (isRegExp(separator)) {
              if (string.slice(end3).search(separator)) {
                var match2, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString2(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match2 = separator.exec(substring)) {
                  var newEnd = match2.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end3 : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end3) != end3) {
              var index2 = result2.lastIndexOf(separator);
              if (index2 > -1) {
                result2 = result2.slice(0, index2);
              }
            }
            return result2 + omission;
          }
          function unescape2(string) {
            string = toString2(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          var upperCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString2(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply3(func, undefined2, args);
            } catch (e2) {
              return isError2(e2) ? e2 : new Error2(e2);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index2 = -1;
              while (++index2 < length) {
                var pair = pairs[index2];
                if (apply3(pair[0], this, args)) {
                  return apply3(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop3() {
          }
          function nthArg(n4) {
            n4 = toInteger(n4);
            return baseRest(function(args) {
              return baseNth(args, n4);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n4, iteratee2) {
            n4 = toInteger(n4);
            if (n4 < 1 || n4 > MAX_SAFE_INTEGER) {
              return [];
            }
            var index2 = MAX_ARRAY_LENGTH, length = nativeMin(n4, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n4 -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index2 < n4) {
              iteratee2(index2);
            }
            return result2;
          }
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString2(value)));
          }
          function uniqueId(prefix3) {
            var id = ++idCounter2;
            return toString2(prefix3) + id;
          }
          var add3 = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max2(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min2(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round2 = createRound("round");
          var subtract3 = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create3;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce3;
          lodash.defaults = defaults2;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop5;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip2;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy3;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize2;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate3;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition3;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray2;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update2;
          lodash.updateWith = updateWith;
          lodash.values = values2;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add3;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape2;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find2;
          lodash.findIndex = findIndex2;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get2;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean2;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate2;
          lodash.isElement = isElement4;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual5;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError2;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger2;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject4;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger2;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max2;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min2;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop3;
          lodash.now = now2;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round2;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith4;
          lodash.subtract = subtract3;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString2;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd4;
          lodash.trimStart = trimStart4;
          lodash.truncate = truncate;
          lodash.unescape = unescape2;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty2.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index2) {
            LazyWrapper.prototype[methodName] = function(n4) {
              n4 = n4 === undefined2 ? 1 : nativeMax(toInteger(n4), 0);
              var result2 = this.__filtered__ && !index2 ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n4, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n4, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n4) {
              return this.reverse()[methodName](n4).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index2) {
            var type = index2 + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index2) {
            var takeName = "take" + (index2 ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index2) {
            var dropName = "drop" + (index2 ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate3(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start4, end3) {
            start4 = toInteger(start4);
            var result2 = this;
            if (result2.__filtered__ && (start4 > 0 || end3 < 0)) {
              return new LazyWrapper(result2);
            }
            if (start4 < 0) {
              result2 = result2.takeRight(-start4);
            } else if (start4) {
              result2 = result2.drop(start4);
            }
            if (end3 !== undefined2) {
              end3 = toInteger(end3);
              result2 = end3 < 0 ? result2.dropRight(-end3) : result2.take(end3 - start4);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
              var interceptor = function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty2.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _3 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _3;
          define(function() {
            return _3;
          });
        } else if (freeModule) {
          (freeModule.exports = _3)._ = _3;
          freeExports._ = _3;
        } else {
          root._ = _3;
        }
      }).call(exports);
    }
  });

  // ../../node_modules/toggle-selection/index.js
  var require_toggle_selection = __commonJS({
    "../../node_modules/toggle-selection/index.js"(exports, module) {
      module.exports = function() {
        var selection = document.getSelection();
        if (!selection.rangeCount) {
          return function() {
          };
        }
        var active = document.activeElement;
        var ranges = [];
        for (var i3 = 0; i3 < selection.rangeCount; i3++) {
          ranges.push(selection.getRangeAt(i3));
        }
        switch (active.tagName.toUpperCase()) {
          case "INPUT":
          case "TEXTAREA":
            active.blur();
            break;
          default:
            active = null;
            break;
        }
        selection.removeAllRanges();
        return function() {
          selection.type === "Caret" && selection.removeAllRanges();
          if (!selection.rangeCount) {
            ranges.forEach(function(range) {
              selection.addRange(range);
            });
          }
          active && active.focus();
        };
      };
    }
  });

  // ../../node_modules/copy-to-clipboard/index.js
  var require_copy_to_clipboard = __commonJS({
    "../../node_modules/copy-to-clipboard/index.js"(exports, module) {
      "use strict";
      var deselectCurrent = require_toggle_selection();
      var clipboardToIE11Formatting = {
        "text/plain": "Text",
        "text/html": "Url",
        "default": "Text"
      };
      var defaultMessage = "Copy to clipboard: #{key}, Enter";
      function format2(message) {
        var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
        return message.replace(/#{\s*key\s*}/g, copyKey);
      }
      function copy(text, options) {
        var debug, message, reselectPrevious, range, selection, mark, success = false;
        if (!options) {
          options = {};
        }
        debug = options.debug || false;
        try {
          reselectPrevious = deselectCurrent();
          range = document.createRange();
          selection = document.getSelection();
          mark = document.createElement("span");
          mark.textContent = text;
          mark.style.all = "unset";
          mark.style.position = "fixed";
          mark.style.top = 0;
          mark.style.clip = "rect(0, 0, 0, 0)";
          mark.style.whiteSpace = "pre";
          mark.style.webkitUserSelect = "text";
          mark.style.MozUserSelect = "text";
          mark.style.msUserSelect = "text";
          mark.style.userSelect = "text";
          mark.addEventListener("copy", function(e2) {
            e2.stopPropagation();
            if (options.format) {
              e2.preventDefault();
              if (typeof e2.clipboardData === "undefined") {
                debug && console.warn("unable to use e.clipboardData");
                debug && console.warn("trying IE specific stuff");
                window.clipboardData.clearData();
                var format3 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
                window.clipboardData.setData(format3, text);
              } else {
                e2.clipboardData.clearData();
                e2.clipboardData.setData(options.format, text);
              }
            }
            if (options.onCopy) {
              e2.preventDefault();
              options.onCopy(e2.clipboardData);
            }
          });
          document.body.appendChild(mark);
          range.selectNodeContents(mark);
          selection.addRange(range);
          var successful = document.execCommand("copy");
          if (!successful) {
            throw new Error("copy command was unsuccessful");
          }
          success = true;
        } catch (err) {
          debug && console.error("unable to copy using execCommand: ", err);
          debug && console.warn("trying IE specific stuff");
          try {
            window.clipboardData.setData(options.format || "text", text);
            options.onCopy && options.onCopy(window.clipboardData);
            success = true;
          } catch (err2) {
            debug && console.error("unable to copy using clipboardData: ", err2);
            debug && console.error("falling back to prompt");
            message = format2("message" in options ? options.message : defaultMessage);
            window.prompt(message, text);
          }
        } finally {
          if (selection) {
            if (typeof selection.removeRange == "function") {
              selection.removeRange(range);
            } else {
              selection.removeAllRanges();
            }
          }
          if (mark) {
            document.body.removeChild(mark);
          }
          reselectPrevious();
        }
        return success;
      }
      module.exports = copy;
    }
  });

  // src/index.tsx
  var src_exports = {};
  __export(src_exports, {
    BlocksEditor: () => BlocksEditor,
    BlocksList: () => BlocksList_default,
    LinkBlockToItem: () => LinkBlockToItem_default,
    blocks: () => blocks_exports,
    generateId: () => nanoid,
    registerPlugin: () => registerPlugin
  });

  // src/BlocksEditor.tsx
  var import_react57 = __toESM(require_react(), 1);

  // src/components/BlockTooltip/BlockTooltip.tsx
  var BlockTooltip = ({
    title,
    description
  }) => {
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockTooltip"
    }, /* @__PURE__ */ React.createElement("p", {
      className: "BlockTooltip__Title"
    }, title), description && /* @__PURE__ */ React.createElement("p", {
      className: "BlockTooltip__Description"
    }, description));
  };
  var BlockTooltip_default = BlockTooltip;

  // src/components/AddBlocks/AddBlocks.tsx
  var import_react_modal3 = __toESM(require_lib(), 1);

  // ../../node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // ../../node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style2 = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style2);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style2 = styleProperties.reduce(function(style3, property) {
          style3[property] = "";
          return style3;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style2);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // ../../node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // ../../node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // ../../node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth;
      if (offsetWidth > 0) {
        scaleX = round(rect.width) / offsetWidth || 1;
      }
      if (offsetHeight > 0) {
        scaleY = round(rect.height) / offsetHeight || 1;
      }
    }
    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
    var isIE = navigator.userAgent.indexOf("Trident") !== -1;
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // ../../node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // ../../node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v3 = within(min2, value, max2);
    return v3 > max2 ? max2 : v3;
  }

  // ../../node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // ../../node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset4 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset4, _state$modifiersData$.centerOffset = offset4 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (true) {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      if (true) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // ../../node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref) {
    var x3 = _ref.x, y2 = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x3 * dpr) / dpr || 0,
      y: round(y2 * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position3 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x3 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x: x3,
      y: y2
    }) : {
      x: x3,
      y: y2
    };
    x3 = _ref3.x;
    y2 = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle(offsetParent).position !== "static" && position3 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
        y2 -= offsetY - popperRect.height;
        y2 *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
        x3 -= offsetX - popperRect.width;
        x3 *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position3
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x3,
      y: y2
    }) : {
      x: x3,
      y: y2
    };
    x3 = _ref4.x;
    y2 = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x3 + "px, " + y2 + "px)" : "translate3d(" + x3 + "px, " + y2 + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x3 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    if (true) {
      var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
      }
    }
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance2 = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll3 = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll3) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance2.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance2.update, passive);
    }
    return function() {
      if (scroll3) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance2.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance2.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }

  // ../../node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash2 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash2[matched];
    });
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x3 = 0;
    var y2 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x3 = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x3 + getWindowScrollBarX(element),
      y: y2
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x3 = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y2 = -winScroll.scrollTop;
    if (getComputedStyle(body || html).direction === "rtl") {
      x3 += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x: x3,
      y: y2
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
  }

  // ../../node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // ../../node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // ../../node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset4 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset4[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // ../../node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
      if (true) {
        console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
      }
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a3, b3) {
      return overflows[a3] - overflows[b3];
    });
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i3 = 0; i3 < placements2.length; i3++) {
      var placement = placements2[i3];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset4) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset4 === "function" ? offset4(Object.assign({}, rects, {
      placement
    })) : offset4, skidding = _ref[0], distance3 = _ref[1];
    skidding = skidding || 0;
    distance3 = (distance3 || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance3,
      y: skidding
    } : {
      x: skidding,
      y: distance3
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset4 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset4);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x3 = _data$state$placement.x, y2 = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x3;
      state.modifiersData.popperOffsets.y += y2;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset4 = popperOffsets2[mainAxis];
      var min2 = offset4 + overflow[mainSide];
      var max2 = offset4 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset4 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset4 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset4, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset4;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // ../../node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll3 = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
        scroll3 = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll3.scrollLeft - offsets.x,
      y: rect.top + scroll3.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // ../../node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn4) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn4());
          });
        });
      }
      return pending;
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/format.js
  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function(p3, c3) {
      return p3.replace(/%s/, c3);
    }, str);
  }

  // ../../node_modules/@popperjs/core/lib/utils/validateModifiers.js
  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
  function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index2, self2) {
        return self2.indexOf(value) === index2;
      }).forEach(function(key) {
        switch (key) {
          case "name":
            if (typeof modifier.name !== "string") {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
            }
            break;
          case "enabled":
            if (typeof modifier.enabled !== "boolean") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
            }
            break;
          case "phase":
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
            }
            break;
          case "fn":
            if (typeof modifier.fn !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "effect":
            if (modifier.effect != null && typeof modifier.effect !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "requires":
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
            }
            break;
          case "requiresIfExists":
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
            }
            break;
          case "options":
          case "data":
            break;
          default:
            console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s3) {
              return '"' + s3 + '"';
            }).join(", ") + '; but "' + key + '" was provided.');
        }
        modifier.requires && modifier.requires.forEach(function(requirement) {
          if (modifiers.find(function(mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  // ../../node_modules/@popperjs/core/lib/utils/uniqueBy.js
  function uniqueBy(arr, fn4) {
    var identifiers = /* @__PURE__ */ new Set();
    return arr.filter(function(item) {
      var identifier = fn4(item);
      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  // ../../node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // ../../node_modules/@popperjs/core/lib/createPopper.js
  var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
  var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance2 = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m3) {
            return m3.enabled;
          });
          if (true) {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);
            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function(_ref2) {
                var name = _ref2.name;
                return name === "flip";
              });
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
            if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
            }
          }
          runModifierEffects();
          return instance2.update();
        },
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;
          for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
            if (true) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index2 = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index2], fn4 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn4 === "function") {
              state = fn4({
                state,
                options: _options,
                name,
                instance: instance2
              }) || state;
            }
          }
        },
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance2.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        if (true) {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance2;
      }
      instance2.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref3) {
          var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect5 = _ref3.effect;
          if (typeof effect5 === "function") {
            var cleanupFn = effect5({
              state,
              name,
              instance: instance2,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn4) {
          return fn4();
        });
        effectCleanupFns = [];
      }
      return instance2;
    };
  }

  // ../../node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // ../../node_modules/tippy.js/dist/tippy.esm.js
  var BOX_CLASS = "tippy-box";
  var CONTENT_CLASS = "tippy-content";
  var BACKDROP_CLASS = "tippy-backdrop";
  var ARROW_CLASS = "tippy-arrow";
  var SVG_ARROW_CLASS = "tippy-svg-arrow";
  var TOUCH_OPTIONS = {
    passive: true,
    capture: true
  };
  var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO2() {
    return document.body;
  };
  function hasOwnProperty(obj, key) {
    return {}.hasOwnProperty.call(obj, key);
  }
  function getValueAtIndexOrReturn(value, index2, defaultValue) {
    if (Array.isArray(value)) {
      var v3 = value[index2];
      return v3 == null ? Array.isArray(defaultValue) ? defaultValue[index2] : defaultValue : v3;
    }
    return value;
  }
  function isType(value, type) {
    var str = {}.toString.call(value);
    return str.indexOf("[object") === 0 && str.indexOf(type + "]") > -1;
  }
  function invokeWithArgsOrReturn(value, args) {
    return typeof value === "function" ? value.apply(void 0, args) : value;
  }
  function debounce2(fn4, ms) {
    if (ms === 0) {
      return fn4;
    }
    var timeout;
    return function(arg) {
      clearTimeout(timeout);
      timeout = setTimeout(function() {
        fn4(arg);
      }, ms);
    };
  }
  function removeProperties(obj, keys) {
    var clone = Object.assign({}, obj);
    keys.forEach(function(key) {
      delete clone[key];
    });
    return clone;
  }
  function splitBySpaces(value) {
    return value.split(/\s+/).filter(Boolean);
  }
  function normalizeToArray(value) {
    return [].concat(value);
  }
  function pushIfUnique(arr, value) {
    if (arr.indexOf(value) === -1) {
      arr.push(value);
    }
  }
  function unique(arr) {
    return arr.filter(function(item, index2) {
      return arr.indexOf(item) === index2;
    });
  }
  function getBasePlacement2(placement) {
    return placement.split("-")[0];
  }
  function arrayFrom(value) {
    return [].slice.call(value);
  }
  function removeUndefinedProps(obj) {
    return Object.keys(obj).reduce(function(acc, key) {
      if (obj[key] !== void 0) {
        acc[key] = obj[key];
      }
      return acc;
    }, {});
  }
  function div() {
    return document.createElement("div");
  }
  function isElement2(value) {
    return ["Element", "Fragment"].some(function(type) {
      return isType(value, type);
    });
  }
  function isNodeList(value) {
    return isType(value, "NodeList");
  }
  function isMouseEvent(value) {
    return isType(value, "MouseEvent");
  }
  function isReferenceElement(value) {
    return !!(value && value._tippy && value._tippy.reference === value);
  }
  function getArrayOfElements(value) {
    if (isElement2(value)) {
      return [value];
    }
    if (isNodeList(value)) {
      return arrayFrom(value);
    }
    if (Array.isArray(value)) {
      return value;
    }
    return arrayFrom(document.querySelectorAll(value));
  }
  function setTransitionDuration(els, value) {
    els.forEach(function(el) {
      if (el) {
        el.style.transitionDuration = value + "ms";
      }
    });
  }
  function setVisibilityState(els, state) {
    els.forEach(function(el) {
      if (el) {
        el.setAttribute("data-state", state);
      }
    });
  }
  function getOwnerDocument(elementOrElements) {
    var _element$ownerDocumen;
    var _normalizeToArray = normalizeToArray(elementOrElements), element = _normalizeToArray[0];
    return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;
  }
  function isCursorOutsideInteractiveBorder(popperTreeData, event) {
    var clientX = event.clientX, clientY = event.clientY;
    return popperTreeData.every(function(_ref) {
      var popperRect = _ref.popperRect, popperState = _ref.popperState, props = _ref.props;
      var interactiveBorder = props.interactiveBorder;
      var basePlacement = getBasePlacement2(popperState.placement);
      var offsetData = popperState.modifiersData.offset;
      if (!offsetData) {
        return true;
      }
      var topDistance = basePlacement === "bottom" ? offsetData.top.y : 0;
      var bottomDistance = basePlacement === "top" ? offsetData.bottom.y : 0;
      var leftDistance = basePlacement === "right" ? offsetData.left.x : 0;
      var rightDistance = basePlacement === "left" ? offsetData.right.x : 0;
      var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
      var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
      var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
      var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
      return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
    });
  }
  function updateTransitionEndListener(box, action, listener) {
    var method = action + "EventListener";
    ["transitionend", "webkitTransitionEnd"].forEach(function(event) {
      box[method](event, listener);
    });
  }
  function actualContains(parent, child) {
    var target = child;
    while (target) {
      var _target$getRootNode;
      if (parent.contains(target)) {
        return true;
      }
      target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
    }
    return false;
  }
  var currentInput = {
    isTouch: false
  };
  var lastMouseMoveTime = 0;
  function onDocumentTouchStart() {
    if (currentInput.isTouch) {
      return;
    }
    currentInput.isTouch = true;
    if (window.performance) {
      document.addEventListener("mousemove", onDocumentMouseMove);
    }
  }
  function onDocumentMouseMove() {
    var now2 = performance.now();
    if (now2 - lastMouseMoveTime < 20) {
      currentInput.isTouch = false;
      document.removeEventListener("mousemove", onDocumentMouseMove);
    }
    lastMouseMoveTime = now2;
  }
  function onWindowBlur() {
    var activeElement = document.activeElement;
    if (isReferenceElement(activeElement)) {
      var instance2 = activeElement._tippy;
      if (activeElement.blur && !instance2.state.isVisible) {
        activeElement.blur();
      }
    }
  }
  function bindGlobalEventListeners() {
    document.addEventListener("touchstart", onDocumentTouchStart, TOUCH_OPTIONS);
    window.addEventListener("blur", onWindowBlur);
  }
  var isBrowser = typeof window !== "undefined" && typeof document !== "undefined";
  var isIE11 = isBrowser ? !!window.msCrypto : false;
  function createMemoryLeakWarning(method) {
    var txt = method === "destroy" ? "n already-" : " ";
    return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", "indicates a potential memory leak."].join(" ");
  }
  function clean(value) {
    var spacesAndTabs2 = /[ \t]{2,}/g;
    var lineStartWithSpaces2 = /^[ \t]*/gm;
    return value.replace(spacesAndTabs2, " ").replace(lineStartWithSpaces2, "").trim();
  }
  function getDevMessage(message) {
    return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\u{1F477}\u200D This is a development-only message. It will be removed in production.\n  ");
  }
  function getFormattedMessage(message) {
    return [
      getDevMessage(message),
      "color: #00C584; font-size: 1.3em; font-weight: bold;",
      "line-height: 1.5",
      "color: #a6a095;"
    ];
  }
  var visitedMessages;
  if (true) {
    resetVisitedMessages();
  }
  function resetVisitedMessages() {
    visitedMessages = /* @__PURE__ */ new Set();
  }
  function warnWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console;
      visitedMessages.add(message);
      (_console = console).warn.apply(_console, getFormattedMessage(message));
    }
  }
  function errorWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console2;
      visitedMessages.add(message);
      (_console2 = console).error.apply(_console2, getFormattedMessage(message));
    }
  }
  function validateTargets(targets) {
    var didPassFalsyValue = !targets;
    var didPassPlainObject = Object.prototype.toString.call(targets) === "[object Object]" && !targets.addEventListener;
    errorWhen(didPassFalsyValue, ["tippy() was passed", "`" + String(targets) + "`", "as its targets (first) argument. Valid types are: String, Element,", "Element[], or NodeList."].join(" "));
    errorWhen(didPassPlainObject, ["tippy() was passed a plain object which is not supported as an argument", "for virtual positioning. Use props.getReferenceClientRect instead."].join(" "));
  }
  var pluginProps = {
    animateFill: false,
    followCursor: false,
    inlinePositioning: false,
    sticky: false
  };
  var renderProps = {
    allowHTML: false,
    animation: "fade",
    arrow: true,
    content: "",
    inertia: false,
    maxWidth: 350,
    role: "tooltip",
    theme: "",
    zIndex: 9999
  };
  var defaultProps = Object.assign({
    appendTo: TIPPY_DEFAULT_APPEND_TO,
    aria: {
      content: "auto",
      expanded: "auto"
    },
    delay: 0,
    duration: [300, 250],
    getReferenceClientRect: null,
    hideOnClick: true,
    ignoreAttributes: false,
    interactive: false,
    interactiveBorder: 2,
    interactiveDebounce: 0,
    moveTransition: "",
    offset: [0, 10],
    onAfterUpdate: function onAfterUpdate() {
    },
    onBeforeUpdate: function onBeforeUpdate() {
    },
    onCreate: function onCreate() {
    },
    onDestroy: function onDestroy() {
    },
    onHidden: function onHidden() {
    },
    onHide: function onHide() {
    },
    onMount: function onMount() {
    },
    onShow: function onShow() {
    },
    onShown: function onShown() {
    },
    onTrigger: function onTrigger() {
    },
    onUntrigger: function onUntrigger() {
    },
    onClickOutside: function onClickOutside() {
    },
    placement: "top",
    plugins: [],
    popperOptions: {},
    render: null,
    showOnCreate: false,
    touch: true,
    trigger: "mouseenter focus",
    triggerTarget: null
  }, pluginProps, renderProps);
  var defaultKeys = Object.keys(defaultProps);
  var setDefaultProps = function setDefaultProps2(partialProps) {
    if (true) {
      validateProps(partialProps, []);
    }
    var keys = Object.keys(partialProps);
    keys.forEach(function(key) {
      defaultProps[key] = partialProps[key];
    });
  };
  function getExtendedPassedProps(passedProps) {
    var plugins = passedProps.plugins || [];
    var pluginProps2 = plugins.reduce(function(acc, plugin) {
      var name = plugin.name, defaultValue = plugin.defaultValue;
      if (name) {
        var _name;
        acc[name] = passedProps[name] !== void 0 ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;
      }
      return acc;
    }, {});
    return Object.assign({}, passedProps, pluginProps2);
  }
  function getDataAttributeProps(reference2, plugins) {
    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
      plugins
    }))) : defaultKeys;
    var props = propKeys.reduce(function(acc, key) {
      var valueAsString = (reference2.getAttribute("data-tippy-" + key) || "").trim();
      if (!valueAsString) {
        return acc;
      }
      if (key === "content") {
        acc[key] = valueAsString;
      } else {
        try {
          acc[key] = JSON.parse(valueAsString);
        } catch (e2) {
          acc[key] = valueAsString;
        }
      }
      return acc;
    }, {});
    return props;
  }
  function evaluateProps(reference2, props) {
    var out = Object.assign({}, props, {
      content: invokeWithArgsOrReturn(props.content, [reference2])
    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference2, props.plugins));
    out.aria = Object.assign({}, defaultProps.aria, out.aria);
    out.aria = {
      expanded: out.aria.expanded === "auto" ? props.interactive : out.aria.expanded,
      content: out.aria.content === "auto" ? props.interactive ? null : "describedby" : out.aria.content
    };
    return out;
  }
  function validateProps(partialProps, plugins) {
    if (partialProps === void 0) {
      partialProps = {};
    }
    if (plugins === void 0) {
      plugins = [];
    }
    var keys = Object.keys(partialProps);
    keys.forEach(function(prop) {
      var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
      var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop);
      if (didPassUnknownProp) {
        didPassUnknownProp = plugins.filter(function(plugin) {
          return plugin.name === prop;
        }).length === 0;
      }
      warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", "a plugin, forgot to pass it in an array as props.plugins.", "\n\n", "All props: https://atomiks.github.io/tippyjs/v6/all-props/\n", "Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "));
    });
  }
  var innerHTML = function innerHTML2() {
    return "innerHTML";
  };
  function dangerouslySetInnerHTML(element, html) {
    element[innerHTML()] = html;
  }
  function createArrowElement(value) {
    var arrow2 = div();
    if (value === true) {
      arrow2.className = ARROW_CLASS;
    } else {
      arrow2.className = SVG_ARROW_CLASS;
      if (isElement2(value)) {
        arrow2.appendChild(value);
      } else {
        dangerouslySetInnerHTML(arrow2, value);
      }
    }
    return arrow2;
  }
  function setContent(content, props) {
    if (isElement2(props.content)) {
      dangerouslySetInnerHTML(content, "");
      content.appendChild(props.content);
    } else if (typeof props.content !== "function") {
      if (props.allowHTML) {
        dangerouslySetInnerHTML(content, props.content);
      } else {
        content.textContent = props.content;
      }
    }
  }
  function getChildren(popper2) {
    var box = popper2.firstElementChild;
    var boxChildren = arrayFrom(box.children);
    return {
      box,
      content: boxChildren.find(function(node) {
        return node.classList.contains(CONTENT_CLASS);
      }),
      arrow: boxChildren.find(function(node) {
        return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
      }),
      backdrop: boxChildren.find(function(node) {
        return node.classList.contains(BACKDROP_CLASS);
      })
    };
  }
  function render(instance2) {
    var popper2 = div();
    var box = div();
    box.className = BOX_CLASS;
    box.setAttribute("data-state", "hidden");
    box.setAttribute("tabindex", "-1");
    var content = div();
    content.className = CONTENT_CLASS;
    content.setAttribute("data-state", "hidden");
    setContent(content, instance2.props);
    popper2.appendChild(box);
    box.appendChild(content);
    onUpdate(instance2.props, instance2.props);
    function onUpdate(prevProps, nextProps) {
      var _getChildren = getChildren(popper2), box2 = _getChildren.box, content2 = _getChildren.content, arrow2 = _getChildren.arrow;
      if (nextProps.theme) {
        box2.setAttribute("data-theme", nextProps.theme);
      } else {
        box2.removeAttribute("data-theme");
      }
      if (typeof nextProps.animation === "string") {
        box2.setAttribute("data-animation", nextProps.animation);
      } else {
        box2.removeAttribute("data-animation");
      }
      if (nextProps.inertia) {
        box2.setAttribute("data-inertia", "");
      } else {
        box2.removeAttribute("data-inertia");
      }
      box2.style.maxWidth = typeof nextProps.maxWidth === "number" ? nextProps.maxWidth + "px" : nextProps.maxWidth;
      if (nextProps.role) {
        box2.setAttribute("role", nextProps.role);
      } else {
        box2.removeAttribute("role");
      }
      if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
        setContent(content2, instance2.props);
      }
      if (nextProps.arrow) {
        if (!arrow2) {
          box2.appendChild(createArrowElement(nextProps.arrow));
        } else if (prevProps.arrow !== nextProps.arrow) {
          box2.removeChild(arrow2);
          box2.appendChild(createArrowElement(nextProps.arrow));
        }
      } else if (arrow2) {
        box2.removeChild(arrow2);
      }
    }
    return {
      popper: popper2,
      onUpdate
    };
  }
  render.$$tippy = true;
  var idCounter = 1;
  var mouseMoveListeners = [];
  var mountedInstances = [];
  function createTippy(reference2, passedProps) {
    var props = evaluateProps(reference2, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps))));
    var showTimeout;
    var hideTimeout;
    var scheduleHideAnimationFrame;
    var isVisibleFromClick = false;
    var didHideDueToDocumentMouseDown = false;
    var didTouchMove = false;
    var ignoreOnFirstUpdate = false;
    var lastTriggerEvent;
    var currentTransitionEndListener;
    var onFirstUpdate;
    var listeners = [];
    var debouncedOnMouseMove = debounce2(onMouseMove, props.interactiveDebounce);
    var currentTarget;
    var id = idCounter++;
    var popperInstance = null;
    var plugins = unique(props.plugins);
    var state = {
      isEnabled: true,
      isVisible: false,
      isDestroyed: false,
      isMounted: false,
      isShown: false
    };
    var instance2 = {
      id,
      reference: reference2,
      popper: div(),
      popperInstance,
      props,
      state,
      plugins,
      clearDelayTimeouts,
      setProps,
      setContent: setContent2,
      show,
      hide: hide2,
      hideWithInteractivity,
      enable,
      disable,
      unmount,
      destroy
    };
    if (!props.render) {
      if (true) {
        errorWhen(true, "render() function has not been supplied.");
      }
      return instance2;
    }
    var _props$render = props.render(instance2), popper2 = _props$render.popper, onUpdate = _props$render.onUpdate;
    popper2.setAttribute("data-tippy-root", "");
    popper2.id = "tippy-" + instance2.id;
    instance2.popper = popper2;
    reference2._tippy = instance2;
    popper2._tippy = instance2;
    var pluginsHooks = plugins.map(function(plugin) {
      return plugin.fn(instance2);
    });
    var hasAriaExpanded = reference2.hasAttribute("aria-expanded");
    addListeners();
    handleAriaExpandedAttribute();
    handleStyles();
    invokeHook("onCreate", [instance2]);
    if (props.showOnCreate) {
      scheduleShow();
    }
    popper2.addEventListener("mouseenter", function() {
      if (instance2.props.interactive && instance2.state.isVisible) {
        instance2.clearDelayTimeouts();
      }
    });
    popper2.addEventListener("mouseleave", function() {
      if (instance2.props.interactive && instance2.props.trigger.indexOf("mouseenter") >= 0) {
        getDocument().addEventListener("mousemove", debouncedOnMouseMove);
      }
    });
    return instance2;
    function getNormalizedTouchSettings() {
      var touch = instance2.props.touch;
      return Array.isArray(touch) ? touch : [touch, 0];
    }
    function getIsCustomTouchBehavior() {
      return getNormalizedTouchSettings()[0] === "hold";
    }
    function getIsDefaultRenderFn() {
      var _instance$props$rende;
      return !!((_instance$props$rende = instance2.props.render) != null && _instance$props$rende.$$tippy);
    }
    function getCurrentTarget() {
      return currentTarget || reference2;
    }
    function getDocument() {
      var parent = getCurrentTarget().parentNode;
      return parent ? getOwnerDocument(parent) : document;
    }
    function getDefaultTemplateChildren() {
      return getChildren(popper2);
    }
    function getDelay(isShow) {
      if (instance2.state.isMounted && !instance2.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === "focus") {
        return 0;
      }
      return getValueAtIndexOrReturn(instance2.props.delay, isShow ? 0 : 1, defaultProps.delay);
    }
    function handleStyles(fromHide) {
      if (fromHide === void 0) {
        fromHide = false;
      }
      popper2.style.pointerEvents = instance2.props.interactive && !fromHide ? "" : "none";
      popper2.style.zIndex = "" + instance2.props.zIndex;
    }
    function invokeHook(hook, args, shouldInvokePropsHook) {
      if (shouldInvokePropsHook === void 0) {
        shouldInvokePropsHook = true;
      }
      pluginsHooks.forEach(function(pluginHooks) {
        if (pluginHooks[hook]) {
          pluginHooks[hook].apply(pluginHooks, args);
        }
      });
      if (shouldInvokePropsHook) {
        var _instance$props;
        (_instance$props = instance2.props)[hook].apply(_instance$props, args);
      }
    }
    function handleAriaContentAttribute() {
      var aria = instance2.props.aria;
      if (!aria.content) {
        return;
      }
      var attr = "aria-" + aria.content;
      var id2 = popper2.id;
      var nodes = normalizeToArray(instance2.props.triggerTarget || reference2);
      nodes.forEach(function(node) {
        var currentValue = node.getAttribute(attr);
        if (instance2.state.isVisible) {
          node.setAttribute(attr, currentValue ? currentValue + " " + id2 : id2);
        } else {
          var nextValue = currentValue && currentValue.replace(id2, "").trim();
          if (nextValue) {
            node.setAttribute(attr, nextValue);
          } else {
            node.removeAttribute(attr);
          }
        }
      });
    }
    function handleAriaExpandedAttribute() {
      if (hasAriaExpanded || !instance2.props.aria.expanded) {
        return;
      }
      var nodes = normalizeToArray(instance2.props.triggerTarget || reference2);
      nodes.forEach(function(node) {
        if (instance2.props.interactive) {
          node.setAttribute("aria-expanded", instance2.state.isVisible && node === getCurrentTarget() ? "true" : "false");
        } else {
          node.removeAttribute("aria-expanded");
        }
      });
    }
    function cleanupInteractiveMouseListeners() {
      getDocument().removeEventListener("mousemove", debouncedOnMouseMove);
      mouseMoveListeners = mouseMoveListeners.filter(function(listener) {
        return listener !== debouncedOnMouseMove;
      });
    }
    function onDocumentPress(event) {
      if (currentInput.isTouch) {
        if (didTouchMove || event.type === "mousedown") {
          return;
        }
      }
      var actualTarget = event.composedPath && event.composedPath()[0] || event.target;
      if (instance2.props.interactive && actualContains(popper2, actualTarget)) {
        return;
      }
      if (normalizeToArray(instance2.props.triggerTarget || reference2).some(function(el) {
        return actualContains(el, actualTarget);
      })) {
        if (currentInput.isTouch) {
          return;
        }
        if (instance2.state.isVisible && instance2.props.trigger.indexOf("click") >= 0) {
          return;
        }
      } else {
        invokeHook("onClickOutside", [instance2, event]);
      }
      if (instance2.props.hideOnClick === true) {
        instance2.clearDelayTimeouts();
        instance2.hide();
        didHideDueToDocumentMouseDown = true;
        setTimeout(function() {
          didHideDueToDocumentMouseDown = false;
        });
        if (!instance2.state.isMounted) {
          removeDocumentPress();
        }
      }
    }
    function onTouchMove() {
      didTouchMove = true;
    }
    function onTouchStart() {
      didTouchMove = false;
    }
    function addDocumentPress() {
      var doc = getDocument();
      doc.addEventListener("mousedown", onDocumentPress, true);
      doc.addEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
      doc.addEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
      doc.addEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
    }
    function removeDocumentPress() {
      var doc = getDocument();
      doc.removeEventListener("mousedown", onDocumentPress, true);
      doc.removeEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
      doc.removeEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
      doc.removeEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
    }
    function onTransitionedOut(duration, callback) {
      onTransitionEnd(duration, function() {
        if (!instance2.state.isVisible && popper2.parentNode && popper2.parentNode.contains(popper2)) {
          callback();
        }
      });
    }
    function onTransitionedIn(duration, callback) {
      onTransitionEnd(duration, callback);
    }
    function onTransitionEnd(duration, callback) {
      var box = getDefaultTemplateChildren().box;
      function listener(event) {
        if (event.target === box) {
          updateTransitionEndListener(box, "remove", listener);
          callback();
        }
      }
      if (duration === 0) {
        return callback();
      }
      updateTransitionEndListener(box, "remove", currentTransitionEndListener);
      updateTransitionEndListener(box, "add", listener);
      currentTransitionEndListener = listener;
    }
    function on2(eventType, handler, options) {
      if (options === void 0) {
        options = false;
      }
      var nodes = normalizeToArray(instance2.props.triggerTarget || reference2);
      nodes.forEach(function(node) {
        node.addEventListener(eventType, handler, options);
        listeners.push({
          node,
          eventType,
          handler,
          options
        });
      });
    }
    function addListeners() {
      if (getIsCustomTouchBehavior()) {
        on2("touchstart", onTrigger2, {
          passive: true
        });
        on2("touchend", onMouseLeave, {
          passive: true
        });
      }
      splitBySpaces(instance2.props.trigger).forEach(function(eventType) {
        if (eventType === "manual") {
          return;
        }
        on2(eventType, onTrigger2);
        switch (eventType) {
          case "mouseenter":
            on2("mouseleave", onMouseLeave);
            break;
          case "focus":
            on2(isIE11 ? "focusout" : "blur", onBlurOrFocusOut);
            break;
          case "focusin":
            on2("focusout", onBlurOrFocusOut);
            break;
        }
      });
    }
    function removeListeners() {
      listeners.forEach(function(_ref) {
        var node = _ref.node, eventType = _ref.eventType, handler = _ref.handler, options = _ref.options;
        node.removeEventListener(eventType, handler, options);
      });
      listeners = [];
    }
    function onTrigger2(event) {
      var _lastTriggerEvent;
      var shouldScheduleClickHide = false;
      if (!instance2.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
        return;
      }
      var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === "focus";
      lastTriggerEvent = event;
      currentTarget = event.currentTarget;
      handleAriaExpandedAttribute();
      if (!instance2.state.isVisible && isMouseEvent(event)) {
        mouseMoveListeners.forEach(function(listener) {
          return listener(event);
        });
      }
      if (event.type === "click" && (instance2.props.trigger.indexOf("mouseenter") < 0 || isVisibleFromClick) && instance2.props.hideOnClick !== false && instance2.state.isVisible) {
        shouldScheduleClickHide = true;
      } else {
        scheduleShow(event);
      }
      if (event.type === "click") {
        isVisibleFromClick = !shouldScheduleClickHide;
      }
      if (shouldScheduleClickHide && !wasFocused) {
        scheduleHide(event);
      }
    }
    function onMouseMove(event) {
      var target = event.target;
      var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper2.contains(target);
      if (event.type === "mousemove" && isCursorOverReferenceOrPopper) {
        return;
      }
      var popperTreeData = getNestedPopperTree().concat(popper2).map(function(popper3) {
        var _instance$popperInsta;
        var instance3 = popper3._tippy;
        var state2 = (_instance$popperInsta = instance3.popperInstance) == null ? void 0 : _instance$popperInsta.state;
        if (state2) {
          return {
            popperRect: popper3.getBoundingClientRect(),
            popperState: state2,
            props
          };
        }
        return null;
      }).filter(Boolean);
      if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
        cleanupInteractiveMouseListeners();
        scheduleHide(event);
      }
    }
    function onMouseLeave(event) {
      var shouldBail = isEventListenerStopped(event) || instance2.props.trigger.indexOf("click") >= 0 && isVisibleFromClick;
      if (shouldBail) {
        return;
      }
      if (instance2.props.interactive) {
        instance2.hideWithInteractivity(event);
        return;
      }
      scheduleHide(event);
    }
    function onBlurOrFocusOut(event) {
      if (instance2.props.trigger.indexOf("focusin") < 0 && event.target !== getCurrentTarget()) {
        return;
      }
      if (instance2.props.interactive && event.relatedTarget && popper2.contains(event.relatedTarget)) {
        return;
      }
      scheduleHide(event);
    }
    function isEventListenerStopped(event) {
      return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf("touch") >= 0 : false;
    }
    function createPopperInstance() {
      destroyPopperInstance();
      var _instance$props2 = instance2.props, popperOptions = _instance$props2.popperOptions, placement = _instance$props2.placement, offset4 = _instance$props2.offset, getReferenceClientRect = _instance$props2.getReferenceClientRect, moveTransition = _instance$props2.moveTransition;
      var arrow2 = getIsDefaultRenderFn() ? getChildren(popper2).arrow : null;
      var computedReference = getReferenceClientRect ? {
        getBoundingClientRect: getReferenceClientRect,
        contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
      } : reference2;
      var tippyModifier = {
        name: "$$tippy",
        enabled: true,
        phase: "beforeWrite",
        requires: ["computeStyles"],
        fn: function fn4(_ref2) {
          var state2 = _ref2.state;
          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh = getDefaultTemplateChildren(), box = _getDefaultTemplateCh.box;
            ["placement", "reference-hidden", "escaped"].forEach(function(attr) {
              if (attr === "placement") {
                box.setAttribute("data-placement", state2.placement);
              } else {
                if (state2.attributes.popper["data-popper-" + attr]) {
                  box.setAttribute("data-" + attr, "");
                } else {
                  box.removeAttribute("data-" + attr);
                }
              }
            });
            state2.attributes.popper = {};
          }
        }
      };
      var modifiers = [{
        name: "offset",
        options: {
          offset: offset4
        }
      }, {
        name: "preventOverflow",
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      }, {
        name: "flip",
        options: {
          padding: 5
        }
      }, {
        name: "computeStyles",
        options: {
          adaptive: !moveTransition
        }
      }, tippyModifier];
      if (getIsDefaultRenderFn() && arrow2) {
        modifiers.push({
          name: "arrow",
          options: {
            element: arrow2,
            padding: 3
          }
        });
      }
      modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
      instance2.popperInstance = createPopper(computedReference, popper2, Object.assign({}, popperOptions, {
        placement,
        onFirstUpdate,
        modifiers
      }));
    }
    function destroyPopperInstance() {
      if (instance2.popperInstance) {
        instance2.popperInstance.destroy();
        instance2.popperInstance = null;
      }
    }
    function mount() {
      var appendTo = instance2.props.appendTo;
      var parentNode;
      var node = getCurrentTarget();
      if (instance2.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === "parent") {
        parentNode = node.parentNode;
      } else {
        parentNode = invokeWithArgsOrReturn(appendTo, [node]);
      }
      if (!parentNode.contains(popper2)) {
        parentNode.appendChild(popper2);
      }
      instance2.state.isMounted = true;
      createPopperInstance();
      if (true) {
        warnWhen(instance2.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper2, ["Interactive tippy element may not be accessible via keyboard", "navigation because it is not directly after the reference element", "in the DOM source order.", "\n\n", "Using a wrapper <div> or <span> tag around the reference element", "solves this by creating a new parentNode context.", "\n\n", "Specifying `appendTo: document.body` silences this warning, but it", "assumes you are using a focus management solution to handle", "keyboard navigation.", "\n\n", "See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "));
      }
    }
    function getNestedPopperTree() {
      return arrayFrom(popper2.querySelectorAll("[data-tippy-root]"));
    }
    function scheduleShow(event) {
      instance2.clearDelayTimeouts();
      if (event) {
        invokeHook("onTrigger", [instance2, event]);
      }
      addDocumentPress();
      var delay = getDelay(true);
      var _getNormalizedTouchSe = getNormalizedTouchSettings(), touchValue = _getNormalizedTouchSe[0], touchDelay = _getNormalizedTouchSe[1];
      if (currentInput.isTouch && touchValue === "hold" && touchDelay) {
        delay = touchDelay;
      }
      if (delay) {
        showTimeout = setTimeout(function() {
          instance2.show();
        }, delay);
      } else {
        instance2.show();
      }
    }
    function scheduleHide(event) {
      instance2.clearDelayTimeouts();
      invokeHook("onUntrigger", [instance2, event]);
      if (!instance2.state.isVisible) {
        removeDocumentPress();
        return;
      }
      if (instance2.props.trigger.indexOf("mouseenter") >= 0 && instance2.props.trigger.indexOf("click") >= 0 && ["mouseleave", "mousemove"].indexOf(event.type) >= 0 && isVisibleFromClick) {
        return;
      }
      var delay = getDelay(false);
      if (delay) {
        hideTimeout = setTimeout(function() {
          if (instance2.state.isVisible) {
            instance2.hide();
          }
        }, delay);
      } else {
        scheduleHideAnimationFrame = requestAnimationFrame(function() {
          instance2.hide();
        });
      }
    }
    function enable() {
      instance2.state.isEnabled = true;
    }
    function disable() {
      instance2.hide();
      instance2.state.isEnabled = false;
    }
    function clearDelayTimeouts() {
      clearTimeout(showTimeout);
      clearTimeout(hideTimeout);
      cancelAnimationFrame(scheduleHideAnimationFrame);
    }
    function setProps(partialProps) {
      if (true) {
        warnWhen(instance2.state.isDestroyed, createMemoryLeakWarning("setProps"));
      }
      if (instance2.state.isDestroyed) {
        return;
      }
      invokeHook("onBeforeUpdate", [instance2, partialProps]);
      removeListeners();
      var prevProps = instance2.props;
      var nextProps = evaluateProps(reference2, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
        ignoreAttributes: true
      }));
      instance2.props = nextProps;
      addListeners();
      if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
        cleanupInteractiveMouseListeners();
        debouncedOnMouseMove = debounce2(onMouseMove, nextProps.interactiveDebounce);
      }
      if (prevProps.triggerTarget && !nextProps.triggerTarget) {
        normalizeToArray(prevProps.triggerTarget).forEach(function(node) {
          node.removeAttribute("aria-expanded");
        });
      } else if (nextProps.triggerTarget) {
        reference2.removeAttribute("aria-expanded");
      }
      handleAriaExpandedAttribute();
      handleStyles();
      if (onUpdate) {
        onUpdate(prevProps, nextProps);
      }
      if (instance2.popperInstance) {
        createPopperInstance();
        getNestedPopperTree().forEach(function(nestedPopper) {
          requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
        });
      }
      invokeHook("onAfterUpdate", [instance2, partialProps]);
    }
    function setContent2(content) {
      instance2.setProps({
        content
      });
    }
    function show() {
      if (true) {
        warnWhen(instance2.state.isDestroyed, createMemoryLeakWarning("show"));
      }
      var isAlreadyVisible = instance2.state.isVisible;
      var isDestroyed = instance2.state.isDestroyed;
      var isDisabled = !instance2.state.isEnabled;
      var isTouchAndTouchDisabled = currentInput.isTouch && !instance2.props.touch;
      var duration = getValueAtIndexOrReturn(instance2.props.duration, 0, defaultProps.duration);
      if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
        return;
      }
      if (getCurrentTarget().hasAttribute("disabled")) {
        return;
      }
      invokeHook("onShow", [instance2], false);
      if (instance2.props.onShow(instance2) === false) {
        return;
      }
      instance2.state.isVisible = true;
      if (getIsDefaultRenderFn()) {
        popper2.style.visibility = "visible";
      }
      handleStyles();
      addDocumentPress();
      if (!instance2.state.isMounted) {
        popper2.style.transition = "none";
      }
      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh2 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh2.box, content = _getDefaultTemplateCh2.content;
        setTransitionDuration([box, content], 0);
      }
      onFirstUpdate = function onFirstUpdate2() {
        var _instance$popperInsta2;
        if (!instance2.state.isVisible || ignoreOnFirstUpdate) {
          return;
        }
        ignoreOnFirstUpdate = true;
        void popper2.offsetHeight;
        popper2.style.transition = instance2.props.moveTransition;
        if (getIsDefaultRenderFn() && instance2.props.animation) {
          var _getDefaultTemplateCh3 = getDefaultTemplateChildren(), _box = _getDefaultTemplateCh3.box, _content = _getDefaultTemplateCh3.content;
          setTransitionDuration([_box, _content], duration);
          setVisibilityState([_box, _content], "visible");
        }
        handleAriaContentAttribute();
        handleAriaExpandedAttribute();
        pushIfUnique(mountedInstances, instance2);
        (_instance$popperInsta2 = instance2.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
        invokeHook("onMount", [instance2]);
        if (instance2.props.animation && getIsDefaultRenderFn()) {
          onTransitionedIn(duration, function() {
            instance2.state.isShown = true;
            invokeHook("onShown", [instance2]);
          });
        }
      };
      mount();
    }
    function hide2() {
      if (true) {
        warnWhen(instance2.state.isDestroyed, createMemoryLeakWarning("hide"));
      }
      var isAlreadyHidden = !instance2.state.isVisible;
      var isDestroyed = instance2.state.isDestroyed;
      var isDisabled = !instance2.state.isEnabled;
      var duration = getValueAtIndexOrReturn(instance2.props.duration, 1, defaultProps.duration);
      if (isAlreadyHidden || isDestroyed || isDisabled) {
        return;
      }
      invokeHook("onHide", [instance2], false);
      if (instance2.props.onHide(instance2) === false) {
        return;
      }
      instance2.state.isVisible = false;
      instance2.state.isShown = false;
      ignoreOnFirstUpdate = false;
      isVisibleFromClick = false;
      if (getIsDefaultRenderFn()) {
        popper2.style.visibility = "hidden";
      }
      cleanupInteractiveMouseListeners();
      removeDocumentPress();
      handleStyles(true);
      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh4 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh4.box, content = _getDefaultTemplateCh4.content;
        if (instance2.props.animation) {
          setTransitionDuration([box, content], duration);
          setVisibilityState([box, content], "hidden");
        }
      }
      handleAriaContentAttribute();
      handleAriaExpandedAttribute();
      if (instance2.props.animation) {
        if (getIsDefaultRenderFn()) {
          onTransitionedOut(duration, instance2.unmount);
        }
      } else {
        instance2.unmount();
      }
    }
    function hideWithInteractivity(event) {
      if (true) {
        warnWhen(instance2.state.isDestroyed, createMemoryLeakWarning("hideWithInteractivity"));
      }
      getDocument().addEventListener("mousemove", debouncedOnMouseMove);
      pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
      debouncedOnMouseMove(event);
    }
    function unmount() {
      if (true) {
        warnWhen(instance2.state.isDestroyed, createMemoryLeakWarning("unmount"));
      }
      if (instance2.state.isVisible) {
        instance2.hide();
      }
      if (!instance2.state.isMounted) {
        return;
      }
      destroyPopperInstance();
      getNestedPopperTree().forEach(function(nestedPopper) {
        nestedPopper._tippy.unmount();
      });
      if (popper2.parentNode) {
        popper2.parentNode.removeChild(popper2);
      }
      mountedInstances = mountedInstances.filter(function(i3) {
        return i3 !== instance2;
      });
      instance2.state.isMounted = false;
      invokeHook("onHidden", [instance2]);
    }
    function destroy() {
      if (true) {
        warnWhen(instance2.state.isDestroyed, createMemoryLeakWarning("destroy"));
      }
      if (instance2.state.isDestroyed) {
        return;
      }
      instance2.clearDelayTimeouts();
      instance2.unmount();
      removeListeners();
      delete reference2._tippy;
      instance2.state.isDestroyed = true;
      invokeHook("onDestroy", [instance2]);
    }
  }
  function tippy(targets, optionalProps) {
    if (optionalProps === void 0) {
      optionalProps = {};
    }
    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
    if (true) {
      validateTargets(targets);
      validateProps(optionalProps, plugins);
    }
    bindGlobalEventListeners();
    var passedProps = Object.assign({}, optionalProps, {
      plugins
    });
    var elements = getArrayOfElements(targets);
    if (true) {
      var isSingleContentElement = isElement2(passedProps.content);
      var isMoreThanOneReferenceElement = elements.length > 1;
      warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ["tippy() was passed an Element as the `content` prop, but more than", "one tippy instance was created by this invocation. This means the", "content element will only be appended to the last tippy instance.", "\n\n", "Instead, pass the .innerHTML of the element, or use a function that", "returns a cloned version of the element instead.", "\n\n", "1) content: element.innerHTML\n", "2) content: () => element.cloneNode(true)"].join(" "));
    }
    var instances = elements.reduce(function(acc, reference2) {
      var instance2 = reference2 && createTippy(reference2, passedProps);
      if (instance2) {
        acc.push(instance2);
      }
      return acc;
    }, []);
    return isElement2(targets) ? instances[0] : instances;
  }
  tippy.defaultProps = defaultProps;
  tippy.setDefaultProps = setDefaultProps;
  tippy.currentInput = currentInput;
  var applyStylesModifier = Object.assign({}, applyStyles_default, {
    effect: function effect4(_ref) {
      var state = _ref.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;
      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }
    }
  });
  tippy.setDefaultProps({
    render
  });
  var tippy_esm_default = tippy;

  // ../../node_modules/@tippyjs/react/dist/tippy-react.esm.js
  var import_react = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var isBrowser2 = typeof window !== "undefined" && typeof document !== "undefined";
  function preserveRef(ref2, node) {
    if (ref2) {
      if (typeof ref2 === "function") {
        ref2(node);
      }
      if ({}.hasOwnProperty.call(ref2, "current")) {
        ref2.current = node;
      }
    }
  }
  function ssrSafeCreateDiv() {
    return isBrowser2 && document.createElement("div");
  }
  function toDataAttributes(attrs) {
    var dataAttrs = {
      "data-placement": attrs.placement
    };
    if (attrs.referenceHidden) {
      dataAttrs["data-reference-hidden"] = "";
    }
    if (attrs.escaped) {
      dataAttrs["data-escaped"] = "";
    }
    return dataAttrs;
  }
  function deepEqual(x3, y2) {
    if (x3 === y2) {
      return true;
    } else if (typeof x3 === "object" && x3 != null && typeof y2 === "object" && y2 != null) {
      if (Object.keys(x3).length !== Object.keys(y2).length) {
        return false;
      }
      for (var prop in x3) {
        if (y2.hasOwnProperty(prop)) {
          if (!deepEqual(x3[prop], y2[prop])) {
            return false;
          }
        } else {
          return false;
        }
      }
      return true;
    } else {
      return false;
    }
  }
  function uniqueByShape(arr) {
    var output = [];
    arr.forEach(function(item) {
      if (!output.find(function(outputItem) {
        return deepEqual(item, outputItem);
      })) {
        output.push(item);
      }
    });
    return output;
  }
  function deepPreserveProps(instanceProps, componentProps) {
    var _instanceProps$popper, _componentProps$poppe;
    return Object.assign({}, componentProps, {
      popperOptions: Object.assign({}, instanceProps.popperOptions, componentProps.popperOptions, {
        modifiers: uniqueByShape([].concat(((_instanceProps$popper = instanceProps.popperOptions) == null ? void 0 : _instanceProps$popper.modifiers) || [], ((_componentProps$poppe = componentProps.popperOptions) == null ? void 0 : _componentProps$poppe.modifiers) || []))
      })
    });
  }
  var useIsomorphicLayoutEffect = isBrowser2 ? import_react.useLayoutEffect : import_react.useEffect;
  function useMutableBox(initialValue) {
    var ref2 = (0, import_react.useRef)();
    if (!ref2.current) {
      ref2.current = typeof initialValue === "function" ? initialValue() : initialValue;
    }
    return ref2.current;
  }
  function updateClassName(box, action, classNames) {
    classNames.split(/\s+/).forEach(function(name) {
      if (name) {
        box.classList[action](name);
      }
    });
  }
  var classNamePlugin = {
    name: "className",
    defaultValue: "",
    fn: function fn2(instance2) {
      var box = instance2.popper.firstElementChild;
      var isDefaultRenderFn = function isDefaultRenderFn2() {
        var _instance$props$rende;
        return !!((_instance$props$rende = instance2.props.render) == null ? void 0 : _instance$props$rende.$$tippy);
      };
      function add3() {
        if (instance2.props.className && !isDefaultRenderFn()) {
          if (true) {
            console.warn(["@tippyjs/react: Cannot use `className` prop in conjunction with", "`render` prop. Place the className on the element you are", "rendering."].join(" "));
          }
          return;
        }
        updateClassName(box, "add", instance2.props.className);
      }
      function remove() {
        if (isDefaultRenderFn()) {
          updateClassName(box, "remove", instance2.props.className);
        }
      }
      return {
        onCreate: add3,
        onBeforeUpdate: remove,
        onAfterUpdate: add3
      };
    }
  };
  function TippyGenerator(tippy2) {
    function Tippy(_ref) {
      var children = _ref.children, content = _ref.content, visible = _ref.visible, singleton = _ref.singleton, render2 = _ref.render, reference2 = _ref.reference, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$ignoreAttributes = _ref.ignoreAttributes, ignoreAttributes = _ref$ignoreAttributes === void 0 ? true : _ref$ignoreAttributes, __source = _ref.__source, __self = _ref.__self, restOfNativeProps = _objectWithoutPropertiesLoose(_ref, ["children", "content", "visible", "singleton", "render", "reference", "disabled", "ignoreAttributes", "__source", "__self"]);
      var isControlledMode = visible !== void 0;
      var isSingletonMode = singleton !== void 0;
      var _useState = (0, import_react.useState)(false), mounted = _useState[0], setMounted = _useState[1];
      var _useState2 = (0, import_react.useState)({}), attrs = _useState2[0], setAttrs = _useState2[1];
      var _useState3 = (0, import_react.useState)(), singletonContent = _useState3[0], setSingletonContent = _useState3[1];
      var mutableBox = useMutableBox(function() {
        return {
          container: ssrSafeCreateDiv(),
          renders: 1
        };
      });
      var props = Object.assign({
        ignoreAttributes
      }, restOfNativeProps, {
        content: mutableBox.container
      });
      if (isControlledMode) {
        if (true) {
          ["trigger", "hideOnClick", "showOnCreate"].forEach(function(nativeStateProp) {
            if (props[nativeStateProp] !== void 0) {
              console.warn(["@tippyjs/react: Cannot specify `" + nativeStateProp + "` prop in", "controlled mode (`visible` prop)"].join(" "));
            }
          });
        }
        props.trigger = "manual";
        props.hideOnClick = false;
      }
      if (isSingletonMode) {
        disabled = true;
      }
      var computedProps = props;
      var plugins = props.plugins || [];
      if (render2) {
        computedProps = Object.assign({}, props, {
          plugins: isSingletonMode && singleton.data != null ? [].concat(plugins, [{
            fn: function fn4() {
              return {
                onTrigger: function onTrigger2(instance2, event) {
                  var node = singleton.data.children.find(function(_ref2) {
                    var instance3 = _ref2.instance;
                    return instance3.reference === event.currentTarget;
                  });
                  instance2.state.$$activeSingletonInstance = node.instance;
                  setSingletonContent(node.content);
                }
              };
            }
          }]) : plugins,
          render: function render3() {
            return {
              popper: mutableBox.container
            };
          }
        });
      }
      var deps = [reference2].concat(children ? [children.type] : []);
      useIsomorphicLayoutEffect(function() {
        var element = reference2;
        if (reference2 && reference2.hasOwnProperty("current")) {
          element = reference2.current;
        }
        var instance2 = tippy2(element || mutableBox.ref || ssrSafeCreateDiv(), Object.assign({}, computedProps, {
          plugins: [classNamePlugin].concat(props.plugins || [])
        }));
        mutableBox.instance = instance2;
        if (disabled) {
          instance2.disable();
        }
        if (visible) {
          instance2.show();
        }
        if (isSingletonMode) {
          singleton.hook({
            instance: instance2,
            content,
            props: computedProps,
            setSingletonContent
          });
        }
        setMounted(true);
        return function() {
          instance2.destroy();
          singleton == null ? void 0 : singleton.cleanup(instance2);
        };
      }, deps);
      useIsomorphicLayoutEffect(function() {
        var _instance$popperInsta;
        if (mutableBox.renders === 1) {
          mutableBox.renders++;
          return;
        }
        var instance2 = mutableBox.instance;
        instance2.setProps(deepPreserveProps(instance2.props, computedProps));
        (_instance$popperInsta = instance2.popperInstance) == null ? void 0 : _instance$popperInsta.forceUpdate();
        if (disabled) {
          instance2.disable();
        } else {
          instance2.enable();
        }
        if (isControlledMode) {
          if (visible) {
            instance2.show();
          } else {
            instance2.hide();
          }
        }
        if (isSingletonMode) {
          singleton.hook({
            instance: instance2,
            content,
            props: computedProps,
            setSingletonContent
          });
        }
      });
      useIsomorphicLayoutEffect(function() {
        var _instance$props$poppe;
        if (!render2) {
          return;
        }
        var instance2 = mutableBox.instance;
        instance2.setProps({
          popperOptions: Object.assign({}, instance2.props.popperOptions, {
            modifiers: [].concat((((_instance$props$poppe = instance2.props.popperOptions) == null ? void 0 : _instance$props$poppe.modifiers) || []).filter(function(_ref3) {
              var name = _ref3.name;
              return name !== "$$tippyReact";
            }), [{
              name: "$$tippyReact",
              enabled: true,
              phase: "beforeWrite",
              requires: ["computeStyles"],
              fn: function fn4(_ref4) {
                var _state$modifiersData;
                var state = _ref4.state;
                var hideData = (_state$modifiersData = state.modifiersData) == null ? void 0 : _state$modifiersData.hide;
                if (attrs.placement !== state.placement || attrs.referenceHidden !== (hideData == null ? void 0 : hideData.isReferenceHidden) || attrs.escaped !== (hideData == null ? void 0 : hideData.hasPopperEscaped)) {
                  setAttrs({
                    placement: state.placement,
                    referenceHidden: hideData == null ? void 0 : hideData.isReferenceHidden,
                    escaped: hideData == null ? void 0 : hideData.hasPopperEscaped
                  });
                }
                state.attributes.popper = {};
              }
            }])
          })
        });
      }, [attrs.placement, attrs.referenceHidden, attrs.escaped].concat(deps));
      return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, children ? /* @__PURE__ */ (0, import_react.cloneElement)(children, {
        ref: function ref2(node) {
          mutableBox.ref = node;
          preserveRef(children.ref, node);
        }
      }) : null, mounted && /* @__PURE__ */ (0, import_react_dom.createPortal)(render2 ? render2(toDataAttributes(attrs), singletonContent, mutableBox.instance) : content, mutableBox.container));
    }
    return Tippy;
  }
  var forwardRef = function(Tippy, defaultProps3) {
    return /* @__PURE__ */ (0, import_react.forwardRef)(function TippyWrapper(_ref, _ref2) {
      var children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["children"]);
      return /* @__PURE__ */ import_react.default.createElement(Tippy, Object.assign({}, defaultProps3, props), children ? /* @__PURE__ */ (0, import_react.cloneElement)(children, {
        ref: function ref2(node) {
          preserveRef(_ref2, node);
          preserveRef(children.ref, node);
        }
      }) : null);
    });
  };
  var index = /* @__PURE__ */ forwardRef(/* @__PURE__ */ TippyGenerator(tippy_esm_default));
  var tippy_react_esm_default = index;

  // src/components/AddBlocks/AddBlocks.tsx
  var import_groupBy = __toESM(require_groupBy(), 1);

  // ../../node_modules/nanoid/index.browser.js
  var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63;
    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte > 62) {
      id += "-";
    } else {
      id += "_";
    }
    return id;
  }, "");

  // src/components/AddBlocks/AddBlocks.tsx
  var import_partition = __toESM(require_partition(), 1);

  // src/hooks/useBlockContext.tsx
  var import_react12 = __toESM(require_react(), 1);

  // src/providers/BlockContext.tsx
  var import_react11 = __toESM(require_react(), 1);

  // src/providers/BlockGroupContext.tsx
  var import_react10 = __toESM(require_react(), 1);

  // ../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o3, p3) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o4, p4) {
      o4.__proto__ = p4;
      return o4;
    };
    return _setPrototypeOf(o3, p3);
  }

  // ../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // ../../node_modules/react-query/es/core/subscribable.js
  var Subscribable = /* @__PURE__ */ function() {
    function Subscribable2() {
      this.listeners = [];
    }
    var _proto = Subscribable2.prototype;
    _proto.subscribe = function subscribe(listener) {
      var _this = this;
      var callback = listener || function() {
        return void 0;
      };
      this.listeners.push(callback);
      this.onSubscribe();
      return function() {
        _this.listeners = _this.listeners.filter(function(x3) {
          return x3 !== callback;
        });
        _this.onUnsubscribe();
      };
    };
    _proto.hasListeners = function hasListeners() {
      return this.listeners.length > 0;
    };
    _proto.onSubscribe = function onSubscribe() {
    };
    _proto.onUnsubscribe = function onUnsubscribe() {
    };
    return Subscribable2;
  }();

  // ../../node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // ../../node_modules/react-query/es/core/utils.js
  var isServer = typeof window === "undefined";
  function noop() {
    return void 0;
  }
  function functionalUpdate(updater, input) {
    return typeof updater === "function" ? updater(input) : updater;
  }
  function isValidTimeout(value) {
    return typeof value === "number" && value >= 0 && value !== Infinity;
  }
  function ensureQueryKeyArray(value) {
    return Array.isArray(value) ? value : [value];
  }
  function timeUntilStale(updatedAt, staleTime) {
    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
  }
  function parseQueryArgs(arg1, arg2, arg3) {
    if (!isQueryKey(arg1)) {
      return arg1;
    }
    if (typeof arg2 === "function") {
      return _extends({}, arg3, {
        queryKey: arg1,
        queryFn: arg2
      });
    }
    return _extends({}, arg2, {
      queryKey: arg1
    });
  }
  function parseMutationArgs(arg1, arg2, arg3) {
    if (isQueryKey(arg1)) {
      if (typeof arg2 === "function") {
        return _extends({}, arg3, {
          mutationKey: arg1,
          mutationFn: arg2
        });
      }
      return _extends({}, arg2, {
        mutationKey: arg1
      });
    }
    if (typeof arg1 === "function") {
      return _extends({}, arg2, {
        mutationFn: arg1
      });
    }
    return _extends({}, arg1);
  }
  function parseFilterArgs(arg1, arg2, arg3) {
    return isQueryKey(arg1) ? [_extends({}, arg2, {
      queryKey: arg1
    }), arg3] : [arg1 || {}, arg2];
  }
  function mapQueryStatusFilter(active, inactive) {
    if (active === true && inactive === true || active == null && inactive == null) {
      return "all";
    } else if (active === false && inactive === false) {
      return "none";
    } else {
      var isActive = active != null ? active : !inactive;
      return isActive ? "active" : "inactive";
    }
  }
  function matchQuery(filters, query) {
    var active = filters.active, exact = filters.exact, fetching = filters.fetching, inactive = filters.inactive, predicate = filters.predicate, queryKey = filters.queryKey, stale = filters.stale;
    if (isQueryKey(queryKey)) {
      if (exact) {
        if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
          return false;
        }
      } else if (!partialMatchKey(query.queryKey, queryKey)) {
        return false;
      }
    }
    var queryStatusFilter = mapQueryStatusFilter(active, inactive);
    if (queryStatusFilter === "none") {
      return false;
    } else if (queryStatusFilter !== "all") {
      var isActive = query.isActive();
      if (queryStatusFilter === "active" && !isActive) {
        return false;
      }
      if (queryStatusFilter === "inactive" && isActive) {
        return false;
      }
    }
    if (typeof stale === "boolean" && query.isStale() !== stale) {
      return false;
    }
    if (typeof fetching === "boolean" && query.isFetching() !== fetching) {
      return false;
    }
    if (predicate && !predicate(query)) {
      return false;
    }
    return true;
  }
  function matchMutation(filters, mutation) {
    var exact = filters.exact, fetching = filters.fetching, predicate = filters.predicate, mutationKey = filters.mutationKey;
    if (isQueryKey(mutationKey)) {
      if (!mutation.options.mutationKey) {
        return false;
      }
      if (exact) {
        if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
          return false;
        }
      } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
        return false;
      }
    }
    if (typeof fetching === "boolean" && mutation.state.status === "loading" !== fetching) {
      return false;
    }
    if (predicate && !predicate(mutation)) {
      return false;
    }
    return true;
  }
  function hashQueryKeyByOptions(queryKey, options) {
    var hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
    return hashFn(queryKey);
  }
  function hashQueryKey(queryKey) {
    var asArray = ensureQueryKeyArray(queryKey);
    return stableValueHash(asArray);
  }
  function stableValueHash(value) {
    return JSON.stringify(value, function(_3, val) {
      return isPlainObject(val) ? Object.keys(val).sort().reduce(function(result, key) {
        result[key] = val[key];
        return result;
      }, {}) : val;
    });
  }
  function partialMatchKey(a3, b3) {
    return partialDeepEqual(ensureQueryKeyArray(a3), ensureQueryKeyArray(b3));
  }
  function partialDeepEqual(a3, b3) {
    if (a3 === b3) {
      return true;
    }
    if (typeof a3 !== typeof b3) {
      return false;
    }
    if (a3 && b3 && typeof a3 === "object" && typeof b3 === "object") {
      return !Object.keys(b3).some(function(key) {
        return !partialDeepEqual(a3[key], b3[key]);
      });
    }
    return false;
  }
  function replaceEqualDeep(a3, b3) {
    if (a3 === b3) {
      return a3;
    }
    var array = Array.isArray(a3) && Array.isArray(b3);
    if (array || isPlainObject(a3) && isPlainObject(b3)) {
      var aSize = array ? a3.length : Object.keys(a3).length;
      var bItems = array ? b3 : Object.keys(b3);
      var bSize = bItems.length;
      var copy = array ? [] : {};
      var equalItems = 0;
      for (var i3 = 0; i3 < bSize; i3++) {
        var key = array ? i3 : bItems[i3];
        copy[key] = replaceEqualDeep(a3[key], b3[key]);
        if (copy[key] === a3[key]) {
          equalItems++;
        }
      }
      return aSize === bSize && equalItems === aSize ? a3 : copy;
    }
    return b3;
  }
  function shallowEqualObjects(a3, b3) {
    if (a3 && !b3 || b3 && !a3) {
      return false;
    }
    for (var key in a3) {
      if (a3[key] !== b3[key]) {
        return false;
      }
    }
    return true;
  }
  function isPlainObject(o3) {
    if (!hasObjectPrototype(o3)) {
      return false;
    }
    var ctor = o3.constructor;
    if (typeof ctor === "undefined") {
      return true;
    }
    var prot = ctor.prototype;
    if (!hasObjectPrototype(prot)) {
      return false;
    }
    if (!prot.hasOwnProperty("isPrototypeOf")) {
      return false;
    }
    return true;
  }
  function hasObjectPrototype(o3) {
    return Object.prototype.toString.call(o3) === "[object Object]";
  }
  function isQueryKey(value) {
    return typeof value === "string" || Array.isArray(value);
  }
  function sleep(timeout) {
    return new Promise(function(resolve) {
      setTimeout(resolve, timeout);
    });
  }
  function scheduleMicrotask(callback) {
    Promise.resolve().then(callback).catch(function(error2) {
      return setTimeout(function() {
        throw error2;
      });
    });
  }
  function getAbortController() {
    if (typeof AbortController === "function") {
      return new AbortController();
    }
  }

  // ../../node_modules/react-query/es/core/focusManager.js
  var FocusManager = /* @__PURE__ */ function(_Subscribable) {
    _inheritsLoose(FocusManager2, _Subscribable);
    function FocusManager2() {
      var _this;
      _this = _Subscribable.call(this) || this;
      _this.setup = function(onFocus) {
        var _window;
        if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
          var listener = function listener2() {
            return onFocus();
          };
          window.addEventListener("visibilitychange", listener, false);
          window.addEventListener("focus", listener, false);
          return function() {
            window.removeEventListener("visibilitychange", listener);
            window.removeEventListener("focus", listener);
          };
        }
      };
      return _this;
    }
    var _proto = FocusManager2.prototype;
    _proto.onSubscribe = function onSubscribe() {
      if (!this.cleanup) {
        this.setEventListener(this.setup);
      }
    };
    _proto.onUnsubscribe = function onUnsubscribe() {
      if (!this.hasListeners()) {
        var _this$cleanup;
        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
        this.cleanup = void 0;
      }
    };
    _proto.setEventListener = function setEventListener(setup) {
      var _this$cleanup2, _this2 = this;
      this.setup = setup;
      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
      this.cleanup = setup(function(focused) {
        if (typeof focused === "boolean") {
          _this2.setFocused(focused);
        } else {
          _this2.onFocus();
        }
      });
    };
    _proto.setFocused = function setFocused(focused) {
      this.focused = focused;
      if (focused) {
        this.onFocus();
      }
    };
    _proto.onFocus = function onFocus() {
      this.listeners.forEach(function(listener) {
        listener();
      });
    };
    _proto.isFocused = function isFocused() {
      if (typeof this.focused === "boolean") {
        return this.focused;
      }
      if (typeof document === "undefined") {
        return true;
      }
      return [void 0, "visible", "prerender"].includes(document.visibilityState);
    };
    return FocusManager2;
  }(Subscribable);
  var focusManager = new FocusManager();

  // ../../node_modules/react-query/es/core/onlineManager.js
  var OnlineManager = /* @__PURE__ */ function(_Subscribable) {
    _inheritsLoose(OnlineManager2, _Subscribable);
    function OnlineManager2() {
      var _this;
      _this = _Subscribable.call(this) || this;
      _this.setup = function(onOnline) {
        var _window;
        if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
          var listener = function listener2() {
            return onOnline();
          };
          window.addEventListener("online", listener, false);
          window.addEventListener("offline", listener, false);
          return function() {
            window.removeEventListener("online", listener);
            window.removeEventListener("offline", listener);
          };
        }
      };
      return _this;
    }
    var _proto = OnlineManager2.prototype;
    _proto.onSubscribe = function onSubscribe() {
      if (!this.cleanup) {
        this.setEventListener(this.setup);
      }
    };
    _proto.onUnsubscribe = function onUnsubscribe() {
      if (!this.hasListeners()) {
        var _this$cleanup;
        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
        this.cleanup = void 0;
      }
    };
    _proto.setEventListener = function setEventListener(setup) {
      var _this$cleanup2, _this2 = this;
      this.setup = setup;
      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
      this.cleanup = setup(function(online) {
        if (typeof online === "boolean") {
          _this2.setOnline(online);
        } else {
          _this2.onOnline();
        }
      });
    };
    _proto.setOnline = function setOnline(online) {
      this.online = online;
      if (online) {
        this.onOnline();
      }
    };
    _proto.onOnline = function onOnline() {
      this.listeners.forEach(function(listener) {
        listener();
      });
    };
    _proto.isOnline = function isOnline() {
      if (typeof this.online === "boolean") {
        return this.online;
      }
      if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
        return true;
      }
      return navigator.onLine;
    };
    return OnlineManager2;
  }(Subscribable);
  var onlineManager = new OnlineManager();

  // ../../node_modules/react-query/es/core/retryer.js
  function defaultRetryDelay(failureCount) {
    return Math.min(1e3 * Math.pow(2, failureCount), 3e4);
  }
  function isCancelable(value) {
    return typeof (value == null ? void 0 : value.cancel) === "function";
  }
  var CancelledError = function CancelledError2(options) {
    this.revert = options == null ? void 0 : options.revert;
    this.silent = options == null ? void 0 : options.silent;
  };
  function isCancelledError(value) {
    return value instanceof CancelledError;
  }
  var Retryer = function Retryer2(config2) {
    var _this = this;
    var cancelRetry = false;
    var cancelFn;
    var continueFn;
    var promiseResolve;
    var promiseReject;
    this.abort = config2.abort;
    this.cancel = function(cancelOptions) {
      return cancelFn == null ? void 0 : cancelFn(cancelOptions);
    };
    this.cancelRetry = function() {
      cancelRetry = true;
    };
    this.continueRetry = function() {
      cancelRetry = false;
    };
    this.continue = function() {
      return continueFn == null ? void 0 : continueFn();
    };
    this.failureCount = 0;
    this.isPaused = false;
    this.isResolved = false;
    this.isTransportCancelable = false;
    this.promise = new Promise(function(outerResolve, outerReject) {
      promiseResolve = outerResolve;
      promiseReject = outerReject;
    });
    var resolve = function resolve2(value) {
      if (!_this.isResolved) {
        _this.isResolved = true;
        config2.onSuccess == null ? void 0 : config2.onSuccess(value);
        continueFn == null ? void 0 : continueFn();
        promiseResolve(value);
      }
    };
    var reject = function reject2(value) {
      if (!_this.isResolved) {
        _this.isResolved = true;
        config2.onError == null ? void 0 : config2.onError(value);
        continueFn == null ? void 0 : continueFn();
        promiseReject(value);
      }
    };
    var pause = function pause2() {
      return new Promise(function(continueResolve) {
        continueFn = continueResolve;
        _this.isPaused = true;
        config2.onPause == null ? void 0 : config2.onPause();
      }).then(function() {
        continueFn = void 0;
        _this.isPaused = false;
        config2.onContinue == null ? void 0 : config2.onContinue();
      });
    };
    var run = function run2() {
      if (_this.isResolved) {
        return;
      }
      var promiseOrValue;
      try {
        promiseOrValue = config2.fn();
      } catch (error2) {
        promiseOrValue = Promise.reject(error2);
      }
      cancelFn = function cancelFn2(cancelOptions) {
        if (!_this.isResolved) {
          reject(new CancelledError(cancelOptions));
          _this.abort == null ? void 0 : _this.abort();
          if (isCancelable(promiseOrValue)) {
            try {
              promiseOrValue.cancel();
            } catch (_unused) {
            }
          }
        }
      };
      _this.isTransportCancelable = isCancelable(promiseOrValue);
      Promise.resolve(promiseOrValue).then(resolve).catch(function(error2) {
        var _config$retry, _config$retryDelay;
        if (_this.isResolved) {
          return;
        }
        var retry = (_config$retry = config2.retry) != null ? _config$retry : 3;
        var retryDelay = (_config$retryDelay = config2.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
        var delay = typeof retryDelay === "function" ? retryDelay(_this.failureCount, error2) : retryDelay;
        var shouldRetry = retry === true || typeof retry === "number" && _this.failureCount < retry || typeof retry === "function" && retry(_this.failureCount, error2);
        if (cancelRetry || !shouldRetry) {
          reject(error2);
          return;
        }
        _this.failureCount++;
        config2.onFail == null ? void 0 : config2.onFail(_this.failureCount, error2);
        sleep(delay).then(function() {
          if (!focusManager.isFocused() || !onlineManager.isOnline()) {
            return pause();
          }
        }).then(function() {
          if (cancelRetry) {
            reject(error2);
          } else {
            run2();
          }
        });
      });
    };
    run();
  };

  // ../../node_modules/react-query/es/core/notifyManager.js
  var NotifyManager = /* @__PURE__ */ function() {
    function NotifyManager2() {
      this.queue = [];
      this.transactions = 0;
      this.notifyFn = function(callback) {
        callback();
      };
      this.batchNotifyFn = function(callback) {
        callback();
      };
    }
    var _proto = NotifyManager2.prototype;
    _proto.batch = function batch2(callback) {
      var result;
      this.transactions++;
      try {
        result = callback();
      } finally {
        this.transactions--;
        if (!this.transactions) {
          this.flush();
        }
      }
      return result;
    };
    _proto.schedule = function schedule(callback) {
      var _this = this;
      if (this.transactions) {
        this.queue.push(callback);
      } else {
        scheduleMicrotask(function() {
          _this.notifyFn(callback);
        });
      }
    };
    _proto.batchCalls = function batchCalls(callback) {
      var _this2 = this;
      return function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2.schedule(function() {
          callback.apply(void 0, args);
        });
      };
    };
    _proto.flush = function flush3() {
      var _this3 = this;
      var queue = this.queue;
      this.queue = [];
      if (queue.length) {
        scheduleMicrotask(function() {
          _this3.batchNotifyFn(function() {
            queue.forEach(function(callback) {
              _this3.notifyFn(callback);
            });
          });
        });
      }
    };
    _proto.setNotifyFunction = function setNotifyFunction(fn4) {
      this.notifyFn = fn4;
    };
    _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn4) {
      this.batchNotifyFn = fn4;
    };
    return NotifyManager2;
  }();
  var notifyManager = new NotifyManager();

  // ../../node_modules/react-query/es/core/logger.js
  var logger = console;
  function getLogger() {
    return logger;
  }
  function setLogger(newLogger) {
    logger = newLogger;
  }

  // ../../node_modules/react-query/es/core/query.js
  var Query = /* @__PURE__ */ function() {
    function Query2(config2) {
      this.abortSignalConsumed = false;
      this.hadObservers = false;
      this.defaultOptions = config2.defaultOptions;
      this.setOptions(config2.options);
      this.observers = [];
      this.cache = config2.cache;
      this.queryKey = config2.queryKey;
      this.queryHash = config2.queryHash;
      this.initialState = config2.state || this.getDefaultState(this.options);
      this.state = this.initialState;
      this.meta = config2.meta;
      this.scheduleGc();
    }
    var _proto = Query2.prototype;
    _proto.setOptions = function setOptions(options) {
      var _this$options$cacheTi;
      this.options = _extends({}, this.defaultOptions, options);
      this.meta = options == null ? void 0 : options.meta;
      this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1e3);
    };
    _proto.setDefaultOptions = function setDefaultOptions(options) {
      this.defaultOptions = options;
    };
    _proto.scheduleGc = function scheduleGc() {
      var _this = this;
      this.clearGcTimeout();
      if (isValidTimeout(this.cacheTime)) {
        this.gcTimeout = setTimeout(function() {
          _this.optionalRemove();
        }, this.cacheTime);
      }
    };
    _proto.clearGcTimeout = function clearGcTimeout() {
      if (this.gcTimeout) {
        clearTimeout(this.gcTimeout);
        this.gcTimeout = void 0;
      }
    };
    _proto.optionalRemove = function optionalRemove() {
      if (!this.observers.length) {
        if (this.state.isFetching) {
          if (this.hadObservers) {
            this.scheduleGc();
          }
        } else {
          this.cache.remove(this);
        }
      }
    };
    _proto.setData = function setData(updater, options) {
      var _this$options$isDataE, _this$options;
      var prevData = this.state.data;
      var data = functionalUpdate(updater, prevData);
      if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {
        data = prevData;
      } else if (this.options.structuralSharing !== false) {
        data = replaceEqualDeep(prevData, data);
      }
      this.dispatch({
        data,
        type: "success",
        dataUpdatedAt: options == null ? void 0 : options.updatedAt
      });
      return data;
    };
    _proto.setState = function setState(state, setStateOptions) {
      this.dispatch({
        type: "setState",
        state,
        setStateOptions
      });
    };
    _proto.cancel = function cancel(options) {
      var _this$retryer;
      var promise = this.promise;
      (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
      return promise ? promise.then(noop).catch(noop) : Promise.resolve();
    };
    _proto.destroy = function destroy() {
      this.clearGcTimeout();
      this.cancel({
        silent: true
      });
    };
    _proto.reset = function reset() {
      this.destroy();
      this.setState(this.initialState);
    };
    _proto.isActive = function isActive() {
      return this.observers.some(function(observer) {
        return observer.options.enabled !== false;
      });
    };
    _proto.isFetching = function isFetching() {
      return this.state.isFetching;
    };
    _proto.isStale = function isStale2() {
      return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function(observer) {
        return observer.getCurrentResult().isStale;
      });
    };
    _proto.isStaleByTime = function isStaleByTime(staleTime) {
      if (staleTime === void 0) {
        staleTime = 0;
      }
      return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
    };
    _proto.onFocus = function onFocus() {
      var _this$retryer2;
      var observer = this.observers.find(function(x3) {
        return x3.shouldFetchOnWindowFocus();
      });
      if (observer) {
        observer.refetch();
      }
      (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
    };
    _proto.onOnline = function onOnline() {
      var _this$retryer3;
      var observer = this.observers.find(function(x3) {
        return x3.shouldFetchOnReconnect();
      });
      if (observer) {
        observer.refetch();
      }
      (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
    };
    _proto.addObserver = function addObserver(observer) {
      if (this.observers.indexOf(observer) === -1) {
        this.observers.push(observer);
        this.hadObservers = true;
        this.clearGcTimeout();
        this.cache.notify({
          type: "observerAdded",
          query: this,
          observer
        });
      }
    };
    _proto.removeObserver = function removeObserver(observer) {
      if (this.observers.indexOf(observer) !== -1) {
        this.observers = this.observers.filter(function(x3) {
          return x3 !== observer;
        });
        if (!this.observers.length) {
          if (this.retryer) {
            if (this.retryer.isTransportCancelable || this.abortSignalConsumed) {
              this.retryer.cancel({
                revert: true
              });
            } else {
              this.retryer.cancelRetry();
            }
          }
          if (this.cacheTime) {
            this.scheduleGc();
          } else {
            this.cache.remove(this);
          }
        }
        this.cache.notify({
          type: "observerRemoved",
          query: this,
          observer
        });
      }
    };
    _proto.getObserversCount = function getObserversCount() {
      return this.observers.length;
    };
    _proto.invalidate = function invalidate() {
      if (!this.state.isInvalidated) {
        this.dispatch({
          type: "invalidate"
        });
      }
    };
    _proto.fetch = function fetch(options, fetchOptions) {
      var _this2 = this, _this$options$behavio, _context$fetchOptions, _abortController$abor;
      if (this.state.isFetching) {
        if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {
          this.cancel({
            silent: true
          });
        } else if (this.promise) {
          var _this$retryer4;
          (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry();
          return this.promise;
        }
      }
      if (options) {
        this.setOptions(options);
      }
      if (!this.options.queryFn) {
        var observer = this.observers.find(function(x3) {
          return x3.options.queryFn;
        });
        if (observer) {
          this.setOptions(observer.options);
        }
      }
      var queryKey = ensureQueryKeyArray(this.queryKey);
      var abortController = getAbortController();
      var queryFnContext = {
        queryKey,
        pageParam: void 0,
        meta: this.meta
      };
      Object.defineProperty(queryFnContext, "signal", {
        enumerable: true,
        get: function get2() {
          if (abortController) {
            _this2.abortSignalConsumed = true;
            return abortController.signal;
          }
          return void 0;
        }
      });
      var fetchFn = function fetchFn2() {
        if (!_this2.options.queryFn) {
          return Promise.reject("Missing queryFn");
        }
        _this2.abortSignalConsumed = false;
        return _this2.options.queryFn(queryFnContext);
      };
      var context = {
        fetchOptions,
        options: this.options,
        queryKey,
        state: this.state,
        fetchFn,
        meta: this.meta
      };
      if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {
        var _this$options$behavio2;
        (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);
      }
      this.revertState = this.state;
      if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
        var _context$fetchOptions2;
        this.dispatch({
          type: "fetch",
          meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
        });
      }
      this.retryer = new Retryer({
        fn: context.fetchFn,
        abort: abortController == null ? void 0 : (_abortController$abor = abortController.abort) == null ? void 0 : _abortController$abor.bind(abortController),
        onSuccess: function onSuccess(data) {
          _this2.setData(data);
          _this2.cache.config.onSuccess == null ? void 0 : _this2.cache.config.onSuccess(data, _this2);
          if (_this2.cacheTime === 0) {
            _this2.optionalRemove();
          }
        },
        onError: function onError(error2) {
          if (!(isCancelledError(error2) && error2.silent)) {
            _this2.dispatch({
              type: "error",
              error: error2
            });
          }
          if (!isCancelledError(error2)) {
            _this2.cache.config.onError == null ? void 0 : _this2.cache.config.onError(error2, _this2);
            getLogger().error(error2);
          }
          if (_this2.cacheTime === 0) {
            _this2.optionalRemove();
          }
        },
        onFail: function onFail() {
          _this2.dispatch({
            type: "failed"
          });
        },
        onPause: function onPause() {
          _this2.dispatch({
            type: "pause"
          });
        },
        onContinue: function onContinue() {
          _this2.dispatch({
            type: "continue"
          });
        },
        retry: context.options.retry,
        retryDelay: context.options.retryDelay
      });
      this.promise = this.retryer.promise;
      return this.promise;
    };
    _proto.dispatch = function dispatch(action) {
      var _this3 = this;
      this.state = this.reducer(this.state, action);
      notifyManager.batch(function() {
        _this3.observers.forEach(function(observer) {
          observer.onQueryUpdate(action);
        });
        _this3.cache.notify({
          query: _this3,
          type: "queryUpdated",
          action
        });
      });
    };
    _proto.getDefaultState = function getDefaultState2(options) {
      var data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
      var hasInitialData = typeof options.initialData !== "undefined";
      var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
      var hasData = typeof data !== "undefined";
      return {
        data,
        dataUpdateCount: 0,
        dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
        error: null,
        errorUpdateCount: 0,
        errorUpdatedAt: 0,
        fetchFailureCount: 0,
        fetchMeta: null,
        isFetching: false,
        isInvalidated: false,
        isPaused: false,
        status: hasData ? "success" : "idle"
      };
    };
    _proto.reducer = function reducer3(state, action) {
      var _action$meta, _action$dataUpdatedAt;
      switch (action.type) {
        case "failed":
          return _extends({}, state, {
            fetchFailureCount: state.fetchFailureCount + 1
          });
        case "pause":
          return _extends({}, state, {
            isPaused: true
          });
        case "continue":
          return _extends({}, state, {
            isPaused: false
          });
        case "fetch":
          return _extends({}, state, {
            fetchFailureCount: 0,
            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
            isFetching: true,
            isPaused: false
          }, !state.dataUpdatedAt && {
            error: null,
            status: "loading"
          });
        case "success":
          return _extends({}, state, {
            data: action.data,
            dataUpdateCount: state.dataUpdateCount + 1,
            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
            error: null,
            fetchFailureCount: 0,
            isFetching: false,
            isInvalidated: false,
            isPaused: false,
            status: "success"
          });
        case "error":
          var error2 = action.error;
          if (isCancelledError(error2) && error2.revert && this.revertState) {
            return _extends({}, this.revertState);
          }
          return _extends({}, state, {
            error: error2,
            errorUpdateCount: state.errorUpdateCount + 1,
            errorUpdatedAt: Date.now(),
            fetchFailureCount: state.fetchFailureCount + 1,
            isFetching: false,
            isPaused: false,
            status: "error"
          });
        case "invalidate":
          return _extends({}, state, {
            isInvalidated: true
          });
        case "setState":
          return _extends({}, state, action.state);
        default:
          return state;
      }
    };
    return Query2;
  }();

  // ../../node_modules/react-query/es/core/queryCache.js
  var QueryCache = /* @__PURE__ */ function(_Subscribable) {
    _inheritsLoose(QueryCache2, _Subscribable);
    function QueryCache2(config2) {
      var _this;
      _this = _Subscribable.call(this) || this;
      _this.config = config2 || {};
      _this.queries = [];
      _this.queriesMap = {};
      return _this;
    }
    var _proto = QueryCache2.prototype;
    _proto.build = function build(client, options, state) {
      var _options$queryHash;
      var queryKey = options.queryKey;
      var queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
      var query = this.get(queryHash);
      if (!query) {
        query = new Query({
          cache: this,
          queryKey,
          queryHash,
          options: client.defaultQueryOptions(options),
          state,
          defaultOptions: client.getQueryDefaults(queryKey),
          meta: options.meta
        });
        this.add(query);
      }
      return query;
    };
    _proto.add = function add3(query) {
      if (!this.queriesMap[query.queryHash]) {
        this.queriesMap[query.queryHash] = query;
        this.queries.push(query);
        this.notify({
          type: "queryAdded",
          query
        });
      }
    };
    _proto.remove = function remove(query) {
      var queryInMap = this.queriesMap[query.queryHash];
      if (queryInMap) {
        query.destroy();
        this.queries = this.queries.filter(function(x3) {
          return x3 !== query;
        });
        if (queryInMap === query) {
          delete this.queriesMap[query.queryHash];
        }
        this.notify({
          type: "queryRemoved",
          query
        });
      }
    };
    _proto.clear = function clear() {
      var _this2 = this;
      notifyManager.batch(function() {
        _this2.queries.forEach(function(query) {
          _this2.remove(query);
        });
      });
    };
    _proto.get = function get2(queryHash) {
      return this.queriesMap[queryHash];
    };
    _proto.getAll = function getAll() {
      return this.queries;
    };
    _proto.find = function find2(arg1, arg2) {
      var _parseFilterArgs = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs[0];
      if (typeof filters.exact === "undefined") {
        filters.exact = true;
      }
      return this.queries.find(function(query) {
        return matchQuery(filters, query);
      });
    };
    _proto.findAll = function findAll(arg1, arg2) {
      var _parseFilterArgs2 = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs2[0];
      return Object.keys(filters).length > 0 ? this.queries.filter(function(query) {
        return matchQuery(filters, query);
      }) : this.queries;
    };
    _proto.notify = function notify2(event) {
      var _this3 = this;
      notifyManager.batch(function() {
        _this3.listeners.forEach(function(listener) {
          listener(event);
        });
      });
    };
    _proto.onFocus = function onFocus() {
      var _this4 = this;
      notifyManager.batch(function() {
        _this4.queries.forEach(function(query) {
          query.onFocus();
        });
      });
    };
    _proto.onOnline = function onOnline() {
      var _this5 = this;
      notifyManager.batch(function() {
        _this5.queries.forEach(function(query) {
          query.onOnline();
        });
      });
    };
    return QueryCache2;
  }(Subscribable);

  // ../../node_modules/react-query/es/core/mutation.js
  var Mutation = /* @__PURE__ */ function() {
    function Mutation2(config2) {
      this.options = _extends({}, config2.defaultOptions, config2.options);
      this.mutationId = config2.mutationId;
      this.mutationCache = config2.mutationCache;
      this.observers = [];
      this.state = config2.state || getDefaultState();
      this.meta = config2.meta;
    }
    var _proto = Mutation2.prototype;
    _proto.setState = function setState(state) {
      this.dispatch({
        type: "setState",
        state
      });
    };
    _proto.addObserver = function addObserver(observer) {
      if (this.observers.indexOf(observer) === -1) {
        this.observers.push(observer);
      }
    };
    _proto.removeObserver = function removeObserver(observer) {
      this.observers = this.observers.filter(function(x3) {
        return x3 !== observer;
      });
    };
    _proto.cancel = function cancel() {
      if (this.retryer) {
        this.retryer.cancel();
        return this.retryer.promise.then(noop).catch(noop);
      }
      return Promise.resolve();
    };
    _proto.continue = function _continue() {
      if (this.retryer) {
        this.retryer.continue();
        return this.retryer.promise;
      }
      return this.execute();
    };
    _proto.execute = function execute3() {
      var _this = this;
      var data;
      var restored = this.state.status === "loading";
      var promise = Promise.resolve();
      if (!restored) {
        this.dispatch({
          type: "loading",
          variables: this.options.variables
        });
        promise = promise.then(function() {
          _this.mutationCache.config.onMutate == null ? void 0 : _this.mutationCache.config.onMutate(_this.state.variables, _this);
        }).then(function() {
          return _this.options.onMutate == null ? void 0 : _this.options.onMutate(_this.state.variables);
        }).then(function(context) {
          if (context !== _this.state.context) {
            _this.dispatch({
              type: "loading",
              context,
              variables: _this.state.variables
            });
          }
        });
      }
      return promise.then(function() {
        return _this.executeMutation();
      }).then(function(result) {
        data = result;
        _this.mutationCache.config.onSuccess == null ? void 0 : _this.mutationCache.config.onSuccess(data, _this.state.variables, _this.state.context, _this);
      }).then(function() {
        return _this.options.onSuccess == null ? void 0 : _this.options.onSuccess(data, _this.state.variables, _this.state.context);
      }).then(function() {
        return _this.options.onSettled == null ? void 0 : _this.options.onSettled(data, null, _this.state.variables, _this.state.context);
      }).then(function() {
        _this.dispatch({
          type: "success",
          data
        });
        return data;
      }).catch(function(error2) {
        _this.mutationCache.config.onError == null ? void 0 : _this.mutationCache.config.onError(error2, _this.state.variables, _this.state.context, _this);
        getLogger().error(error2);
        return Promise.resolve().then(function() {
          return _this.options.onError == null ? void 0 : _this.options.onError(error2, _this.state.variables, _this.state.context);
        }).then(function() {
          return _this.options.onSettled == null ? void 0 : _this.options.onSettled(void 0, error2, _this.state.variables, _this.state.context);
        }).then(function() {
          _this.dispatch({
            type: "error",
            error: error2
          });
          throw error2;
        });
      });
    };
    _proto.executeMutation = function executeMutation() {
      var _this2 = this, _this$options$retry;
      this.retryer = new Retryer({
        fn: function fn4() {
          if (!_this2.options.mutationFn) {
            return Promise.reject("No mutationFn found");
          }
          return _this2.options.mutationFn(_this2.state.variables);
        },
        onFail: function onFail() {
          _this2.dispatch({
            type: "failed"
          });
        },
        onPause: function onPause() {
          _this2.dispatch({
            type: "pause"
          });
        },
        onContinue: function onContinue() {
          _this2.dispatch({
            type: "continue"
          });
        },
        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
        retryDelay: this.options.retryDelay
      });
      return this.retryer.promise;
    };
    _proto.dispatch = function dispatch(action) {
      var _this3 = this;
      this.state = reducer(this.state, action);
      notifyManager.batch(function() {
        _this3.observers.forEach(function(observer) {
          observer.onMutationUpdate(action);
        });
        _this3.mutationCache.notify(_this3);
      });
    };
    return Mutation2;
  }();
  function getDefaultState() {
    return {
      context: void 0,
      data: void 0,
      error: null,
      failureCount: 0,
      isPaused: false,
      status: "idle",
      variables: void 0
    };
  }
  function reducer(state, action) {
    switch (action.type) {
      case "failed":
        return _extends({}, state, {
          failureCount: state.failureCount + 1
        });
      case "pause":
        return _extends({}, state, {
          isPaused: true
        });
      case "continue":
        return _extends({}, state, {
          isPaused: false
        });
      case "loading":
        return _extends({}, state, {
          context: action.context,
          data: void 0,
          error: null,
          isPaused: false,
          status: "loading",
          variables: action.variables
        });
      case "success":
        return _extends({}, state, {
          data: action.data,
          error: null,
          status: "success",
          isPaused: false
        });
      case "error":
        return _extends({}, state, {
          data: void 0,
          error: action.error,
          failureCount: state.failureCount + 1,
          isPaused: false,
          status: "error"
        });
      case "setState":
        return _extends({}, state, action.state);
      default:
        return state;
    }
  }

  // ../../node_modules/react-query/es/core/mutationCache.js
  var MutationCache = /* @__PURE__ */ function(_Subscribable) {
    _inheritsLoose(MutationCache2, _Subscribable);
    function MutationCache2(config2) {
      var _this;
      _this = _Subscribable.call(this) || this;
      _this.config = config2 || {};
      _this.mutations = [];
      _this.mutationId = 0;
      return _this;
    }
    var _proto = MutationCache2.prototype;
    _proto.build = function build(client, options, state) {
      var mutation = new Mutation({
        mutationCache: this,
        mutationId: ++this.mutationId,
        options: client.defaultMutationOptions(options),
        state,
        defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : void 0,
        meta: options.meta
      });
      this.add(mutation);
      return mutation;
    };
    _proto.add = function add3(mutation) {
      this.mutations.push(mutation);
      this.notify(mutation);
    };
    _proto.remove = function remove(mutation) {
      this.mutations = this.mutations.filter(function(x3) {
        return x3 !== mutation;
      });
      mutation.cancel();
      this.notify(mutation);
    };
    _proto.clear = function clear() {
      var _this2 = this;
      notifyManager.batch(function() {
        _this2.mutations.forEach(function(mutation) {
          _this2.remove(mutation);
        });
      });
    };
    _proto.getAll = function getAll() {
      return this.mutations;
    };
    _proto.find = function find2(filters) {
      if (typeof filters.exact === "undefined") {
        filters.exact = true;
      }
      return this.mutations.find(function(mutation) {
        return matchMutation(filters, mutation);
      });
    };
    _proto.findAll = function findAll(filters) {
      return this.mutations.filter(function(mutation) {
        return matchMutation(filters, mutation);
      });
    };
    _proto.notify = function notify2(mutation) {
      var _this3 = this;
      notifyManager.batch(function() {
        _this3.listeners.forEach(function(listener) {
          listener(mutation);
        });
      });
    };
    _proto.onFocus = function onFocus() {
      this.resumePausedMutations();
    };
    _proto.onOnline = function onOnline() {
      this.resumePausedMutations();
    };
    _proto.resumePausedMutations = function resumePausedMutations() {
      var pausedMutations = this.mutations.filter(function(x3) {
        return x3.state.isPaused;
      });
      return notifyManager.batch(function() {
        return pausedMutations.reduce(function(promise, mutation) {
          return promise.then(function() {
            return mutation.continue().catch(noop);
          });
        }, Promise.resolve());
      });
    };
    return MutationCache2;
  }(Subscribable);

  // ../../node_modules/react-query/es/core/infiniteQueryBehavior.js
  function infiniteQueryBehavior() {
    return {
      onFetch: function onFetch(context) {
        context.fetchFn = function() {
          var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;
          var refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
          var fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
          var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
          var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
          var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
          var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
          var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
          var abortController = getAbortController();
          var abortSignal = abortController == null ? void 0 : abortController.signal;
          var newPageParams = oldPageParams;
          var cancelled = false;
          var queryFn = context.options.queryFn || function() {
            return Promise.reject("Missing queryFn");
          };
          var buildNewPages = function buildNewPages2(pages, param2, page, previous) {
            newPageParams = previous ? [param2].concat(newPageParams) : [].concat(newPageParams, [param2]);
            return previous ? [page].concat(pages) : [].concat(pages, [page]);
          };
          var fetchPage = function fetchPage2(pages, manual2, param2, previous) {
            if (cancelled) {
              return Promise.reject("Cancelled");
            }
            if (typeof param2 === "undefined" && !manual2 && pages.length) {
              return Promise.resolve(pages);
            }
            var queryFnContext = {
              queryKey: context.queryKey,
              signal: abortSignal,
              pageParam: param2,
              meta: context.meta
            };
            var queryFnResult = queryFn(queryFnContext);
            var promise2 = Promise.resolve(queryFnResult).then(function(page) {
              return buildNewPages(pages, param2, page, previous);
            });
            if (isCancelable(queryFnResult)) {
              var promiseAsAny = promise2;
              promiseAsAny.cancel = queryFnResult.cancel;
            }
            return promise2;
          };
          var promise;
          if (!oldPages.length) {
            promise = fetchPage([]);
          } else if (isFetchingNextPage) {
            var manual = typeof pageParam !== "undefined";
            var param = manual ? pageParam : getNextPageParam(context.options, oldPages);
            promise = fetchPage(oldPages, manual, param);
          } else if (isFetchingPreviousPage) {
            var _manual = typeof pageParam !== "undefined";
            var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);
            promise = fetchPage(oldPages, _manual, _param, true);
          } else {
            (function() {
              newPageParams = [];
              var manual2 = typeof context.options.getNextPageParam === "undefined";
              var shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true;
              promise = shouldFetchFirstPage ? fetchPage([], manual2, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]));
              var _loop = function _loop2(i4) {
                promise = promise.then(function(pages) {
                  var shouldFetchNextPage = refetchPage && oldPages[i4] ? refetchPage(oldPages[i4], i4, oldPages) : true;
                  if (shouldFetchNextPage) {
                    var _param2 = manual2 ? oldPageParams[i4] : getNextPageParam(context.options, pages);
                    return fetchPage(pages, manual2, _param2);
                  }
                  return Promise.resolve(buildNewPages(pages, oldPageParams[i4], oldPages[i4]));
                });
              };
              for (var i3 = 1; i3 < oldPages.length; i3++) {
                _loop(i3);
              }
            })();
          }
          var finalPromise = promise.then(function(pages) {
            return {
              pages,
              pageParams: newPageParams
            };
          });
          var finalPromiseAsAny = finalPromise;
          finalPromiseAsAny.cancel = function() {
            cancelled = true;
            abortController == null ? void 0 : abortController.abort();
            if (isCancelable(promise)) {
              promise.cancel();
            }
          };
          return finalPromise;
        };
      }
    };
  }
  function getNextPageParam(options, pages) {
    return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
  }
  function getPreviousPageParam(options, pages) {
    return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
  }

  // ../../node_modules/react-query/es/core/queryClient.js
  var QueryClient = /* @__PURE__ */ function() {
    function QueryClient2(config2) {
      if (config2 === void 0) {
        config2 = {};
      }
      this.queryCache = config2.queryCache || new QueryCache();
      this.mutationCache = config2.mutationCache || new MutationCache();
      this.defaultOptions = config2.defaultOptions || {};
      this.queryDefaults = [];
      this.mutationDefaults = [];
    }
    var _proto = QueryClient2.prototype;
    _proto.mount = function mount() {
      var _this = this;
      this.unsubscribeFocus = focusManager.subscribe(function() {
        if (focusManager.isFocused() && onlineManager.isOnline()) {
          _this.mutationCache.onFocus();
          _this.queryCache.onFocus();
        }
      });
      this.unsubscribeOnline = onlineManager.subscribe(function() {
        if (focusManager.isFocused() && onlineManager.isOnline()) {
          _this.mutationCache.onOnline();
          _this.queryCache.onOnline();
        }
      });
    };
    _proto.unmount = function unmount() {
      var _this$unsubscribeFocu, _this$unsubscribeOnli;
      (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
      (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
    };
    _proto.isFetching = function isFetching(arg1, arg2) {
      var _parseFilterArgs = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs[0];
      filters.fetching = true;
      return this.queryCache.findAll(filters).length;
    };
    _proto.isMutating = function isMutating(filters) {
      return this.mutationCache.findAll(_extends({}, filters, {
        fetching: true
      })).length;
    };
    _proto.getQueryData = function getQueryData(queryKey, filters) {
      var _this$queryCache$find;
      return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
    };
    _proto.getQueriesData = function getQueriesData(queryKeyOrFilters) {
      return this.getQueryCache().findAll(queryKeyOrFilters).map(function(_ref) {
        var queryKey = _ref.queryKey, state = _ref.state;
        var data = state.data;
        return [queryKey, data];
      });
    };
    _proto.setQueryData = function setQueryData(queryKey, updater, options) {
      var parsedOptions = parseQueryArgs(queryKey);
      var defaultedOptions = this.defaultQueryOptions(parsedOptions);
      return this.queryCache.build(this, defaultedOptions).setData(updater, options);
    };
    _proto.setQueriesData = function setQueriesData(queryKeyOrFilters, updater, options) {
      var _this2 = this;
      return notifyManager.batch(function() {
        return _this2.getQueryCache().findAll(queryKeyOrFilters).map(function(_ref2) {
          var queryKey = _ref2.queryKey;
          return [queryKey, _this2.setQueryData(queryKey, updater, options)];
        });
      });
    };
    _proto.getQueryState = function getQueryState(queryKey, filters) {
      var _this$queryCache$find2;
      return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
    };
    _proto.removeQueries = function removeQueries(arg1, arg2) {
      var _parseFilterArgs2 = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs2[0];
      var queryCache = this.queryCache;
      notifyManager.batch(function() {
        queryCache.findAll(filters).forEach(function(query) {
          queryCache.remove(query);
        });
      });
    };
    _proto.resetQueries = function resetQueries(arg1, arg2, arg3) {
      var _this3 = this;
      var _parseFilterArgs3 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs3[0], options = _parseFilterArgs3[1];
      var queryCache = this.queryCache;
      var refetchFilters = _extends({}, filters, {
        active: true
      });
      return notifyManager.batch(function() {
        queryCache.findAll(filters).forEach(function(query) {
          query.reset();
        });
        return _this3.refetchQueries(refetchFilters, options);
      });
    };
    _proto.cancelQueries = function cancelQueries(arg1, arg2, arg3) {
      var _this4 = this;
      var _parseFilterArgs4 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs4[0], _parseFilterArgs4$ = _parseFilterArgs4[1], cancelOptions = _parseFilterArgs4$ === void 0 ? {} : _parseFilterArgs4$;
      if (typeof cancelOptions.revert === "undefined") {
        cancelOptions.revert = true;
      }
      var promises = notifyManager.batch(function() {
        return _this4.queryCache.findAll(filters).map(function(query) {
          return query.cancel(cancelOptions);
        });
      });
      return Promise.all(promises).then(noop).catch(noop);
    };
    _proto.invalidateQueries = function invalidateQueries(arg1, arg2, arg3) {
      var _ref3, _filters$refetchActiv, _filters$refetchInact, _this5 = this;
      var _parseFilterArgs5 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs5[0], options = _parseFilterArgs5[1];
      var refetchFilters = _extends({}, filters, {
        active: (_ref3 = (_filters$refetchActiv = filters.refetchActive) != null ? _filters$refetchActiv : filters.active) != null ? _ref3 : true,
        inactive: (_filters$refetchInact = filters.refetchInactive) != null ? _filters$refetchInact : false
      });
      return notifyManager.batch(function() {
        _this5.queryCache.findAll(filters).forEach(function(query) {
          query.invalidate();
        });
        return _this5.refetchQueries(refetchFilters, options);
      });
    };
    _proto.refetchQueries = function refetchQueries(arg1, arg2, arg3) {
      var _this6 = this;
      var _parseFilterArgs6 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs6[0], options = _parseFilterArgs6[1];
      var promises = notifyManager.batch(function() {
        return _this6.queryCache.findAll(filters).map(function(query) {
          return query.fetch(void 0, _extends({}, options, {
            meta: {
              refetchPage: filters == null ? void 0 : filters.refetchPage
            }
          }));
        });
      });
      var promise = Promise.all(promises).then(noop);
      if (!(options == null ? void 0 : options.throwOnError)) {
        promise = promise.catch(noop);
      }
      return promise;
    };
    _proto.fetchQuery = function fetchQuery(arg1, arg2, arg3) {
      var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
      var defaultedOptions = this.defaultQueryOptions(parsedOptions);
      if (typeof defaultedOptions.retry === "undefined") {
        defaultedOptions.retry = false;
      }
      var query = this.queryCache.build(this, defaultedOptions);
      return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
    };
    _proto.prefetchQuery = function prefetchQuery(arg1, arg2, arg3) {
      return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);
    };
    _proto.fetchInfiniteQuery = function fetchInfiniteQuery(arg1, arg2, arg3) {
      var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
      parsedOptions.behavior = infiniteQueryBehavior();
      return this.fetchQuery(parsedOptions);
    };
    _proto.prefetchInfiniteQuery = function prefetchInfiniteQuery(arg1, arg2, arg3) {
      return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);
    };
    _proto.cancelMutations = function cancelMutations() {
      var _this7 = this;
      var promises = notifyManager.batch(function() {
        return _this7.mutationCache.getAll().map(function(mutation) {
          return mutation.cancel();
        });
      });
      return Promise.all(promises).then(noop).catch(noop);
    };
    _proto.resumePausedMutations = function resumePausedMutations() {
      return this.getMutationCache().resumePausedMutations();
    };
    _proto.executeMutation = function executeMutation(options) {
      return this.mutationCache.build(this, options).execute();
    };
    _proto.getQueryCache = function getQueryCache() {
      return this.queryCache;
    };
    _proto.getMutationCache = function getMutationCache() {
      return this.mutationCache;
    };
    _proto.getDefaultOptions = function getDefaultOptions() {
      return this.defaultOptions;
    };
    _proto.setDefaultOptions = function setDefaultOptions(options) {
      this.defaultOptions = options;
    };
    _proto.setQueryDefaults = function setQueryDefaults(queryKey, options) {
      var result = this.queryDefaults.find(function(x3) {
        return hashQueryKey(queryKey) === hashQueryKey(x3.queryKey);
      });
      if (result) {
        result.defaultOptions = options;
      } else {
        this.queryDefaults.push({
          queryKey,
          defaultOptions: options
        });
      }
    };
    _proto.getQueryDefaults = function getQueryDefaults(queryKey) {
      var _this$queryDefaults$f;
      return queryKey ? (_this$queryDefaults$f = this.queryDefaults.find(function(x3) {
        return partialMatchKey(queryKey, x3.queryKey);
      })) == null ? void 0 : _this$queryDefaults$f.defaultOptions : void 0;
    };
    _proto.setMutationDefaults = function setMutationDefaults(mutationKey, options) {
      var result = this.mutationDefaults.find(function(x3) {
        return hashQueryKey(mutationKey) === hashQueryKey(x3.mutationKey);
      });
      if (result) {
        result.defaultOptions = options;
      } else {
        this.mutationDefaults.push({
          mutationKey,
          defaultOptions: options
        });
      }
    };
    _proto.getMutationDefaults = function getMutationDefaults(mutationKey) {
      var _this$mutationDefault;
      return mutationKey ? (_this$mutationDefault = this.mutationDefaults.find(function(x3) {
        return partialMatchKey(mutationKey, x3.mutationKey);
      })) == null ? void 0 : _this$mutationDefault.defaultOptions : void 0;
    };
    _proto.defaultQueryOptions = function defaultQueryOptions(options) {
      if (options == null ? void 0 : options._defaulted) {
        return options;
      }
      var defaultedOptions = _extends({}, this.defaultOptions.queries, this.getQueryDefaults(options == null ? void 0 : options.queryKey), options, {
        _defaulted: true
      });
      if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
        defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
      }
      return defaultedOptions;
    };
    _proto.defaultQueryObserverOptions = function defaultQueryObserverOptions(options) {
      return this.defaultQueryOptions(options);
    };
    _proto.defaultMutationOptions = function defaultMutationOptions(options) {
      if (options == null ? void 0 : options._defaulted) {
        return options;
      }
      return _extends({}, this.defaultOptions.mutations, this.getMutationDefaults(options == null ? void 0 : options.mutationKey), options, {
        _defaulted: true
      });
    };
    _proto.clear = function clear() {
      this.queryCache.clear();
      this.mutationCache.clear();
    };
    return QueryClient2;
  }();

  // ../../node_modules/react-query/es/core/queryObserver.js
  var QueryObserver = /* @__PURE__ */ function(_Subscribable) {
    _inheritsLoose(QueryObserver2, _Subscribable);
    function QueryObserver2(client, options) {
      var _this;
      _this = _Subscribable.call(this) || this;
      _this.client = client;
      _this.options = options;
      _this.trackedProps = [];
      _this.selectError = null;
      _this.bindMethods();
      _this.setOptions(options);
      return _this;
    }
    var _proto = QueryObserver2.prototype;
    _proto.bindMethods = function bindMethods() {
      this.remove = this.remove.bind(this);
      this.refetch = this.refetch.bind(this);
    };
    _proto.onSubscribe = function onSubscribe() {
      if (this.listeners.length === 1) {
        this.currentQuery.addObserver(this);
        if (shouldFetchOnMount(this.currentQuery, this.options)) {
          this.executeFetch();
        }
        this.updateTimers();
      }
    };
    _proto.onUnsubscribe = function onUnsubscribe() {
      if (!this.listeners.length) {
        this.destroy();
      }
    };
    _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {
      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);
    };
    _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {
      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);
    };
    _proto.destroy = function destroy() {
      this.listeners = [];
      this.clearTimers();
      this.currentQuery.removeObserver(this);
    };
    _proto.setOptions = function setOptions(options, notifyOptions) {
      var prevOptions = this.options;
      var prevQuery = this.currentQuery;
      this.options = this.client.defaultQueryObserverOptions(options);
      if (typeof this.options.enabled !== "undefined" && typeof this.options.enabled !== "boolean") {
        throw new Error("Expected enabled to be a boolean");
      }
      if (!this.options.queryKey) {
        this.options.queryKey = prevOptions.queryKey;
      }
      this.updateQuery();
      var mounted = this.hasListeners();
      if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {
        this.executeFetch();
      }
      this.updateResult(notifyOptions);
      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {
        this.updateStaleTimeout();
      }
      var nextRefetchInterval = this.computeRefetchInterval();
      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {
        this.updateRefetchInterval(nextRefetchInterval);
      }
    };
    _proto.getOptimisticResult = function getOptimisticResult(options) {
      var defaultedOptions = this.client.defaultQueryObserverOptions(options);
      var query = this.client.getQueryCache().build(this.client, defaultedOptions);
      return this.createResult(query, defaultedOptions);
    };
    _proto.getCurrentResult = function getCurrentResult() {
      return this.currentResult;
    };
    _proto.trackResult = function trackResult(result, defaultedOptions) {
      var _this2 = this;
      var trackedResult = {};
      var trackProp = function trackProp2(key) {
        if (!_this2.trackedProps.includes(key)) {
          _this2.trackedProps.push(key);
        }
      };
      Object.keys(result).forEach(function(key) {
        Object.defineProperty(trackedResult, key, {
          configurable: false,
          enumerable: true,
          get: function get2() {
            trackProp(key);
            return result[key];
          }
        });
      });
      if (defaultedOptions.useErrorBoundary || defaultedOptions.suspense) {
        trackProp("error");
      }
      return trackedResult;
    };
    _proto.getNextResult = function getNextResult(options) {
      var _this3 = this;
      return new Promise(function(resolve, reject) {
        var unsubscribe = _this3.subscribe(function(result) {
          if (!result.isFetching) {
            unsubscribe();
            if (result.isError && (options == null ? void 0 : options.throwOnError)) {
              reject(result.error);
            } else {
              resolve(result);
            }
          }
        });
      });
    };
    _proto.getCurrentQuery = function getCurrentQuery() {
      return this.currentQuery;
    };
    _proto.remove = function remove() {
      this.client.getQueryCache().remove(this.currentQuery);
    };
    _proto.refetch = function refetch(options) {
      return this.fetch(_extends({}, options, {
        meta: {
          refetchPage: options == null ? void 0 : options.refetchPage
        }
      }));
    };
    _proto.fetchOptimistic = function fetchOptimistic(options) {
      var _this4 = this;
      var defaultedOptions = this.client.defaultQueryObserverOptions(options);
      var query = this.client.getQueryCache().build(this.client, defaultedOptions);
      return query.fetch().then(function() {
        return _this4.createResult(query, defaultedOptions);
      });
    };
    _proto.fetch = function fetch(fetchOptions) {
      var _this5 = this;
      return this.executeFetch(fetchOptions).then(function() {
        _this5.updateResult();
        return _this5.currentResult;
      });
    };
    _proto.executeFetch = function executeFetch(fetchOptions) {
      this.updateQuery();
      var promise = this.currentQuery.fetch(this.options, fetchOptions);
      if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {
        promise = promise.catch(noop);
      }
      return promise;
    };
    _proto.updateStaleTimeout = function updateStaleTimeout() {
      var _this6 = this;
      this.clearStaleTimeout();
      if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {
        return;
      }
      var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime);
      var timeout = time + 1;
      this.staleTimeoutId = setTimeout(function() {
        if (!_this6.currentResult.isStale) {
          _this6.updateResult();
        }
      }, timeout);
    };
    _proto.computeRefetchInterval = function computeRefetchInterval() {
      var _this$options$refetch;
      return typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;
    };
    _proto.updateRefetchInterval = function updateRefetchInterval(nextInterval) {
      var _this7 = this;
      this.clearRefetchInterval();
      this.currentRefetchInterval = nextInterval;
      if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {
        return;
      }
      this.refetchIntervalId = setInterval(function() {
        if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {
          _this7.executeFetch();
        }
      }, this.currentRefetchInterval);
    };
    _proto.updateTimers = function updateTimers() {
      this.updateStaleTimeout();
      this.updateRefetchInterval(this.computeRefetchInterval());
    };
    _proto.clearTimers = function clearTimers() {
      this.clearStaleTimeout();
      this.clearRefetchInterval();
    };
    _proto.clearStaleTimeout = function clearStaleTimeout() {
      if (this.staleTimeoutId) {
        clearTimeout(this.staleTimeoutId);
        this.staleTimeoutId = void 0;
      }
    };
    _proto.clearRefetchInterval = function clearRefetchInterval() {
      if (this.refetchIntervalId) {
        clearInterval(this.refetchIntervalId);
        this.refetchIntervalId = void 0;
      }
    };
    _proto.createResult = function createResult(query, options) {
      var prevQuery = this.currentQuery;
      var prevOptions = this.options;
      var prevResult = this.currentResult;
      var prevResultState = this.currentResultState;
      var prevResultOptions = this.currentResultOptions;
      var queryChange = query !== prevQuery;
      var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;
      var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;
      var state = query.state;
      var dataUpdatedAt = state.dataUpdatedAt, error2 = state.error, errorUpdatedAt = state.errorUpdatedAt, isFetching = state.isFetching, status = state.status;
      var isPreviousData = false;
      var isPlaceholderData = false;
      var data;
      if (options.optimisticResults) {
        var mounted = this.hasListeners();
        var fetchOnMount = !mounted && shouldFetchOnMount(query, options);
        var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
        if (fetchOnMount || fetchOptionally) {
          isFetching = true;
          if (!dataUpdatedAt) {
            status = "loading";
          }
        }
      }
      if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== "error") {
        data = prevQueryResult.data;
        dataUpdatedAt = prevQueryResult.dataUpdatedAt;
        status = prevQueryResult.status;
        isPreviousData = true;
      } else if (options.select && typeof state.data !== "undefined") {
        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {
          data = this.selectResult;
        } else {
          try {
            this.selectFn = options.select;
            data = options.select(state.data);
            if (options.structuralSharing !== false) {
              data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);
            }
            this.selectResult = data;
            this.selectError = null;
          } catch (selectError) {
            getLogger().error(selectError);
            this.selectError = selectError;
          }
        }
      } else {
        data = state.data;
      }
      if (typeof options.placeholderData !== "undefined" && typeof data === "undefined" && (status === "loading" || status === "idle")) {
        var placeholderData;
        if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
          placeholderData = prevResult.data;
        } else {
          placeholderData = typeof options.placeholderData === "function" ? options.placeholderData() : options.placeholderData;
          if (options.select && typeof placeholderData !== "undefined") {
            try {
              placeholderData = options.select(placeholderData);
              if (options.structuralSharing !== false) {
                placeholderData = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, placeholderData);
              }
              this.selectError = null;
            } catch (selectError) {
              getLogger().error(selectError);
              this.selectError = selectError;
            }
          }
        }
        if (typeof placeholderData !== "undefined") {
          status = "success";
          data = placeholderData;
          isPlaceholderData = true;
        }
      }
      if (this.selectError) {
        error2 = this.selectError;
        data = this.selectResult;
        errorUpdatedAt = Date.now();
        status = "error";
      }
      var result = {
        status,
        isLoading: status === "loading",
        isSuccess: status === "success",
        isError: status === "error",
        isIdle: status === "idle",
        data,
        dataUpdatedAt,
        error: error2,
        errorUpdatedAt,
        failureCount: state.fetchFailureCount,
        errorUpdateCount: state.errorUpdateCount,
        isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,
        isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,
        isFetching,
        isRefetching: isFetching && status !== "loading",
        isLoadingError: status === "error" && state.dataUpdatedAt === 0,
        isPlaceholderData,
        isPreviousData,
        isRefetchError: status === "error" && state.dataUpdatedAt !== 0,
        isStale: isStale(query, options),
        refetch: this.refetch,
        remove: this.remove
      };
      return result;
    };
    _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {
      if (!prevResult) {
        return true;
      }
      var _this$options = this.options, notifyOnChangeProps = _this$options.notifyOnChangeProps, notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;
      if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {
        return true;
      }
      if (notifyOnChangeProps === "tracked" && !this.trackedProps.length) {
        return true;
      }
      var includedProps = notifyOnChangeProps === "tracked" ? this.trackedProps : notifyOnChangeProps;
      return Object.keys(result).some(function(key) {
        var typedKey = key;
        var changed = result[typedKey] !== prevResult[typedKey];
        var isIncluded = includedProps == null ? void 0 : includedProps.some(function(x3) {
          return x3 === key;
        });
        var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function(x3) {
          return x3 === key;
        });
        return changed && !isExcluded && (!includedProps || isIncluded);
      });
    };
    _proto.updateResult = function updateResult(notifyOptions) {
      var prevResult = this.currentResult;
      this.currentResult = this.createResult(this.currentQuery, this.options);
      this.currentResultState = this.currentQuery.state;
      this.currentResultOptions = this.options;
      if (shallowEqualObjects(this.currentResult, prevResult)) {
        return;
      }
      var defaultNotifyOptions = {
        cache: true
      };
      if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {
        defaultNotifyOptions.listeners = true;
      }
      this.notify(_extends({}, defaultNotifyOptions, notifyOptions));
    };
    _proto.updateQuery = function updateQuery() {
      var query = this.client.getQueryCache().build(this.client, this.options);
      if (query === this.currentQuery) {
        return;
      }
      var prevQuery = this.currentQuery;
      this.currentQuery = query;
      this.currentQueryInitialState = query.state;
      this.previousQueryResult = this.currentResult;
      if (this.hasListeners()) {
        prevQuery == null ? void 0 : prevQuery.removeObserver(this);
        query.addObserver(this);
      }
    };
    _proto.onQueryUpdate = function onQueryUpdate(action) {
      var notifyOptions = {};
      if (action.type === "success") {
        notifyOptions.onSuccess = true;
      } else if (action.type === "error" && !isCancelledError(action.error)) {
        notifyOptions.onError = true;
      }
      this.updateResult(notifyOptions);
      if (this.hasListeners()) {
        this.updateTimers();
      }
    };
    _proto.notify = function notify2(notifyOptions) {
      var _this8 = this;
      notifyManager.batch(function() {
        if (notifyOptions.onSuccess) {
          _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);
          _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);
        } else if (notifyOptions.onError) {
          _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);
          _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(void 0, _this8.currentResult.error);
        }
        if (notifyOptions.listeners) {
          _this8.listeners.forEach(function(listener) {
            listener(_this8.currentResult);
          });
        }
        if (notifyOptions.cache) {
          _this8.client.getQueryCache().notify({
            query: _this8.currentQuery,
            type: "observerResultsUpdated"
          });
        }
      });
    };
    return QueryObserver2;
  }(Subscribable);
  function shouldLoadOnMount(query, options) {
    return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === "error" && options.retryOnMount === false);
  }
  function shouldFetchOnMount(query, options) {
    return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);
  }
  function shouldFetchOn(query, options, field) {
    if (options.enabled !== false) {
      var value = typeof field === "function" ? field(query) : field;
      return value === "always" || value !== false && isStale(query, options);
    }
    return false;
  }
  function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
    return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== "error") && isStale(query, options);
  }
  function isStale(query, options) {
    return query.isStaleByTime(options.staleTime);
  }

  // ../../node_modules/react-query/es/core/mutationObserver.js
  var MutationObserver2 = /* @__PURE__ */ function(_Subscribable) {
    _inheritsLoose(MutationObserver3, _Subscribable);
    function MutationObserver3(client, options) {
      var _this;
      _this = _Subscribable.call(this) || this;
      _this.client = client;
      _this.setOptions(options);
      _this.bindMethods();
      _this.updateResult();
      return _this;
    }
    var _proto = MutationObserver3.prototype;
    _proto.bindMethods = function bindMethods() {
      this.mutate = this.mutate.bind(this);
      this.reset = this.reset.bind(this);
    };
    _proto.setOptions = function setOptions(options) {
      this.options = this.client.defaultMutationOptions(options);
    };
    _proto.onUnsubscribe = function onUnsubscribe() {
      if (!this.listeners.length) {
        var _this$currentMutation;
        (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);
      }
    };
    _proto.onMutationUpdate = function onMutationUpdate(action) {
      this.updateResult();
      var notifyOptions = {
        listeners: true
      };
      if (action.type === "success") {
        notifyOptions.onSuccess = true;
      } else if (action.type === "error") {
        notifyOptions.onError = true;
      }
      this.notify(notifyOptions);
    };
    _proto.getCurrentResult = function getCurrentResult() {
      return this.currentResult;
    };
    _proto.reset = function reset() {
      this.currentMutation = void 0;
      this.updateResult();
      this.notify({
        listeners: true
      });
    };
    _proto.mutate = function mutate(variables, options) {
      this.mutateOptions = options;
      if (this.currentMutation) {
        this.currentMutation.removeObserver(this);
      }
      this.currentMutation = this.client.getMutationCache().build(this.client, _extends({}, this.options, {
        variables: typeof variables !== "undefined" ? variables : this.options.variables
      }));
      this.currentMutation.addObserver(this);
      return this.currentMutation.execute();
    };
    _proto.updateResult = function updateResult() {
      var state = this.currentMutation ? this.currentMutation.state : getDefaultState();
      var result = _extends({}, state, {
        isLoading: state.status === "loading",
        isSuccess: state.status === "success",
        isError: state.status === "error",
        isIdle: state.status === "idle",
        mutate: this.mutate,
        reset: this.reset
      });
      this.currentResult = result;
    };
    _proto.notify = function notify2(options) {
      var _this2 = this;
      notifyManager.batch(function() {
        if (_this2.mutateOptions) {
          if (options.onSuccess) {
            _this2.mutateOptions.onSuccess == null ? void 0 : _this2.mutateOptions.onSuccess(_this2.currentResult.data, _this2.currentResult.variables, _this2.currentResult.context);
            _this2.mutateOptions.onSettled == null ? void 0 : _this2.mutateOptions.onSettled(_this2.currentResult.data, null, _this2.currentResult.variables, _this2.currentResult.context);
          } else if (options.onError) {
            _this2.mutateOptions.onError == null ? void 0 : _this2.mutateOptions.onError(_this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);
            _this2.mutateOptions.onSettled == null ? void 0 : _this2.mutateOptions.onSettled(void 0, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);
          }
        }
        if (options.listeners) {
          _this2.listeners.forEach(function(listener) {
            listener(_this2.currentResult);
          });
        }
      });
    };
    return MutationObserver3;
  }(Subscribable);

  // ../../node_modules/react-query/es/react/reactBatchedUpdates.js
  var import_react_dom2 = __toESM(require_react_dom());
  var unstable_batchedUpdates = import_react_dom2.default.unstable_batchedUpdates;

  // ../../node_modules/react-query/es/react/setBatchUpdatesFn.js
  notifyManager.setBatchNotifyFunction(unstable_batchedUpdates);

  // ../../node_modules/react-query/es/react/logger.js
  var logger2 = console;

  // ../../node_modules/react-query/es/react/setLogger.js
  setLogger(logger2);

  // ../../node_modules/react-query/es/react/QueryClientProvider.js
  var import_react2 = __toESM(require_react());
  var defaultContext = /* @__PURE__ */ import_react2.default.createContext(void 0);
  var QueryClientSharingContext = /* @__PURE__ */ import_react2.default.createContext(false);
  function getQueryClientContext(contextSharing) {
    if (contextSharing && typeof window !== "undefined") {
      if (!window.ReactQueryClientContext) {
        window.ReactQueryClientContext = defaultContext;
      }
      return window.ReactQueryClientContext;
    }
    return defaultContext;
  }
  var useQueryClient = function useQueryClient2() {
    var queryClient2 = import_react2.default.useContext(getQueryClientContext(import_react2.default.useContext(QueryClientSharingContext)));
    if (!queryClient2) {
      throw new Error("No QueryClient set, use QueryClientProvider to set one");
    }
    return queryClient2;
  };
  var QueryClientProvider = function QueryClientProvider2(_ref) {
    var client = _ref.client, _ref$contextSharing = _ref.contextSharing, contextSharing = _ref$contextSharing === void 0 ? false : _ref$contextSharing, children = _ref.children;
    import_react2.default.useEffect(function() {
      client.mount();
      return function() {
        client.unmount();
      };
    }, [client]);
    var Context2 = getQueryClientContext(contextSharing);
    return /* @__PURE__ */ import_react2.default.createElement(QueryClientSharingContext.Provider, {
      value: contextSharing
    }, /* @__PURE__ */ import_react2.default.createElement(Context2.Provider, {
      value: client
    }, children));
  };

  // ../../node_modules/react-query/es/react/QueryErrorResetBoundary.js
  var import_react3 = __toESM(require_react());
  function createValue() {
    var _isReset = false;
    return {
      clearReset: function clearReset() {
        _isReset = false;
      },
      reset: function reset() {
        _isReset = true;
      },
      isReset: function isReset() {
        return _isReset;
      }
    };
  }
  var QueryErrorResetBoundaryContext = /* @__PURE__ */ import_react3.default.createContext(createValue());
  var useQueryErrorResetBoundary = function useQueryErrorResetBoundary2() {
    return import_react3.default.useContext(QueryErrorResetBoundaryContext);
  };

  // ../../node_modules/react-query/es/react/useMutation.js
  var import_react4 = __toESM(require_react());

  // ../../node_modules/react-query/es/react/utils.js
  function shouldThrowError(suspense, _useErrorBoundary, params) {
    if (typeof _useErrorBoundary === "function") {
      return _useErrorBoundary.apply(void 0, params);
    }
    if (typeof _useErrorBoundary === "boolean")
      return _useErrorBoundary;
    return !!suspense;
  }

  // ../../node_modules/react-query/es/react/useMutation.js
  function useMutation(arg1, arg2, arg3) {
    var mountedRef = import_react4.default.useRef(false);
    var _React$useState = import_react4.default.useState(0), forceUpdate = _React$useState[1];
    var options = parseMutationArgs(arg1, arg2, arg3);
    var queryClient2 = useQueryClient();
    var obsRef = import_react4.default.useRef();
    if (!obsRef.current) {
      obsRef.current = new MutationObserver2(queryClient2, options);
    } else {
      obsRef.current.setOptions(options);
    }
    var currentResult = obsRef.current.getCurrentResult();
    import_react4.default.useEffect(function() {
      mountedRef.current = true;
      var unsubscribe = obsRef.current.subscribe(notifyManager.batchCalls(function() {
        if (mountedRef.current) {
          forceUpdate(function(x3) {
            return x3 + 1;
          });
        }
      }));
      return function() {
        mountedRef.current = false;
        unsubscribe();
      };
    }, []);
    var mutate = import_react4.default.useCallback(function(variables, mutateOptions) {
      obsRef.current.mutate(variables, mutateOptions).catch(noop);
    }, []);
    if (currentResult.error && shouldThrowError(void 0, obsRef.current.options.useErrorBoundary, [currentResult.error])) {
      throw currentResult.error;
    }
    return _extends({}, currentResult, {
      mutate,
      mutateAsync: currentResult.mutate
    });
  }

  // ../../node_modules/react-query/es/react/useBaseQuery.js
  var import_react5 = __toESM(require_react());
  function useBaseQuery(options, Observer) {
    var mountedRef = import_react5.default.useRef(false);
    var _React$useState = import_react5.default.useState(0), forceUpdate = _React$useState[1];
    var queryClient2 = useQueryClient();
    var errorResetBoundary = useQueryErrorResetBoundary();
    var defaultedOptions = queryClient2.defaultQueryObserverOptions(options);
    defaultedOptions.optimisticResults = true;
    if (defaultedOptions.onError) {
      defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);
    }
    if (defaultedOptions.onSuccess) {
      defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);
    }
    if (defaultedOptions.onSettled) {
      defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);
    }
    if (defaultedOptions.suspense) {
      if (typeof defaultedOptions.staleTime !== "number") {
        defaultedOptions.staleTime = 1e3;
      }
      if (defaultedOptions.cacheTime === 0) {
        defaultedOptions.cacheTime = 1;
      }
    }
    if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {
      if (!errorResetBoundary.isReset()) {
        defaultedOptions.retryOnMount = false;
      }
    }
    var _React$useState2 = import_react5.default.useState(function() {
      return new Observer(queryClient2, defaultedOptions);
    }), observer = _React$useState2[0];
    var result = observer.getOptimisticResult(defaultedOptions);
    import_react5.default.useEffect(function() {
      mountedRef.current = true;
      errorResetBoundary.clearReset();
      var unsubscribe = observer.subscribe(notifyManager.batchCalls(function() {
        if (mountedRef.current) {
          forceUpdate(function(x3) {
            return x3 + 1;
          });
        }
      }));
      observer.updateResult();
      return function() {
        mountedRef.current = false;
        unsubscribe();
      };
    }, [errorResetBoundary, observer]);
    import_react5.default.useEffect(function() {
      observer.setOptions(defaultedOptions, {
        listeners: false
      });
    }, [defaultedOptions, observer]);
    if (defaultedOptions.suspense && result.isLoading) {
      throw observer.fetchOptimistic(defaultedOptions).then(function(_ref) {
        var data = _ref.data;
        defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);
        defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);
      }).catch(function(error2) {
        errorResetBoundary.clearReset();
        defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error2);
        defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(void 0, error2);
      });
    }
    if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.suspense, defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {
      throw result.error;
    }
    if (defaultedOptions.notifyOnChangeProps === "tracked") {
      result = observer.trackResult(result, defaultedOptions);
    }
    return result;
  }

  // ../../node_modules/react-query/es/react/useQuery.js
  function useQuery(arg1, arg2, arg3) {
    var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    return useBaseQuery(parsedOptions, QueryObserver);
  }

  // src/utils/queries.tsx
  var import_react9 = __toESM(require_react(), 1);

  // src/providers/LocaleContext.tsx
  var import_react6 = __toESM(require_react(), 1);
  var LocaleContext = (0, import_react6.createContext)({
    currentLocale: "",
    locales: [],
    setCurrentLocale: () => {
    }
  });
  function LocaleProvider({
    locales,
    children
  }) {
    const [currentLocale, setCurrentLocale] = (0, import_react6.useState)("");
    (0, import_react6.useEffect)(() => {
      if (Array.isArray(locales)) {
        const current = locales.find((locale2) => locale2.active);
        if (current) {
          setCurrentLocale(current.code);
        }
      }
    }, [locales]);
    return /* @__PURE__ */ React.createElement(LocaleContext.Provider, {
      value: { locales, currentLocale, setCurrentLocale }
    }, children);
  }

  // ../../node_modules/react-hot-toast/dist/index.mjs
  var import_react7 = __toESM(require_react(), 1);
  var import_react8 = __toESM(require_react(), 1);
  var d2 = __toESM(require_react(), 1);

  // ../../node_modules/goober/dist/goober.modern.js
  var e = { data: "" };
  var t = (t3) => "object" == typeof window ? ((t3 ? t3.querySelector("#_goober") : window._goober) || Object.assign((t3 || document.head).appendChild(document.createElement("style")), { innerHTML: " ", id: "_goober" })).firstChild : t3 || e;
  var l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g;
  var a = /\/\*[^]*?\*\/|  +/g;
  var n = /\n+/g;
  var o = (e2, t3) => {
    let r2 = "", l3 = "", a3 = "";
    for (let n4 in e2) {
      let c3 = e2[n4];
      "@" == n4[0] ? "i" == n4[1] ? r2 = n4 + " " + c3 + ";" : l3 += "f" == n4[1] ? o(c3, n4) : n4 + "{" + o(c3, "k" == n4[1] ? "" : t3) + "}" : "object" == typeof c3 ? l3 += o(c3, t3 ? t3.replace(/([^,])+/g, (e3) => n4.replace(/(^:.*)|([^,])+/g, (t4) => /&/.test(t4) ? t4.replace(/&/g, e3) : e3 ? e3 + " " + t4 : t4)) : n4) : null != c3 && (n4 = /^--/.test(n4) ? n4 : n4.replace(/[A-Z]/g, "-$&").toLowerCase(), a3 += o.p ? o.p(n4, c3) : n4 + ":" + c3 + ";");
    }
    return r2 + (t3 && a3 ? t3 + "{" + a3 + "}" : a3) + l3;
  };
  var c = {};
  var s = (e2) => {
    if ("object" == typeof e2) {
      let t3 = "";
      for (let r2 in e2)
        t3 += r2 + s(e2[r2]);
      return t3;
    }
    return e2;
  };
  var i = (e2, t3, r2, i3, p3) => {
    let u4 = s(e2), d4 = c[u4] || (c[u4] = ((e3) => {
      let t4 = 0, r3 = 11;
      for (; t4 < e3.length; )
        r3 = 101 * r3 + e3.charCodeAt(t4++) >>> 0;
      return "go" + r3;
    })(u4));
    if (!c[d4]) {
      let t4 = u4 !== e2 ? e2 : ((e3) => {
        let t5, r3, o3 = [{}];
        for (; t5 = l.exec(e3.replace(a, "")); )
          t5[4] ? o3.shift() : t5[3] ? (r3 = t5[3].replace(n, " ").trim(), o3.unshift(o3[0][r3] = o3[0][r3] || {})) : o3[0][t5[1]] = t5[2].replace(n, " ").trim();
        return o3[0];
      })(e2);
      c[d4] = o(p3 ? { ["@keyframes " + d4]: t4 } : t4, r2 ? "" : "." + d4);
    }
    return ((e3, t4, r3) => {
      -1 == t4.data.indexOf(e3) && (t4.data = r3 ? e3 + t4.data : t4.data + e3);
    })(c[d4], t3, i3), d4;
  };
  var p = (e2, t3, r2) => e2.reduce((e3, l3, a3) => {
    let n4 = t3[a3];
    if (n4 && n4.call) {
      let e4 = n4(r2), t4 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;
      n4 = t4 ? "." + t4 : e4 && "object" == typeof e4 ? e4.props ? "" : o(e4, "") : false === e4 ? "" : e4;
    }
    return e3 + l3 + (null == n4 ? "" : n4);
  }, "");
  function u(e2) {
    let r2 = this || {}, l3 = e2.call ? e2(r2.p) : e2;
    return i(l3.unshift ? l3.raw ? p(l3, [].slice.call(arguments, 1), r2.p) : l3.reduce((e3, t3) => Object.assign(e3, t3 && t3.call ? t3(r2.p) : t3), {}) : l3, t(r2.target), r2.g, r2.o, r2.k);
  }
  var d;
  var f;
  var g;
  var b = u.bind({ g: 1 });
  var h = u.bind({ k: 1 });
  function m(e2, t3, r2, l3) {
    o.p = t3, d = e2, f = r2, g = l3;
  }
  function j(e2, t3) {
    let r2 = this || {};
    return function() {
      let l3 = arguments;
      function a3(n4, o3) {
        let c3 = Object.assign({}, n4), s3 = c3.className || a3.className;
        r2.p = Object.assign({ theme: f && f() }, c3), r2.o = / *go\d+/.test(s3), c3.className = u.apply(r2, l3) + (s3 ? " " + s3 : ""), t3 && (c3.ref = o3);
        let i3 = e2;
        return e2[0] && (i3 = c3.as || e2, delete c3.as), g && i3[0] && g(c3), d(i3, c3);
      }
      return t3 ? t3(a3) : a3;
    };
  }

  // ../../node_modules/react-hot-toast/dist/index.mjs
  var f2 = __toESM(require_react(), 1);
  var x = __toESM(require_react(), 1);
  var H = (e2) => typeof e2 == "function";
  var u2 = (e2, t3) => H(e2) ? e2(t3) : e2;
  var U = (() => {
    let e2 = 0;
    return () => (++e2).toString();
  })();
  var $ = (e2) => (t3) => {
    t3 && setTimeout(() => {
      let o3 = t3.getBoundingClientRect();
      e2(o3);
    });
  };
  var S = (() => {
    let e2;
    return () => {
      if (e2 === void 0 && typeof window < "u") {
        let t3 = matchMedia("(prefers-reduced-motion: reduce)");
        e2 = !t3 || t3.matches;
      }
      return e2;
    };
  })();
  var Q = 20;
  var A = /* @__PURE__ */ new Map();
  var L = (e2) => {
    if (A.has(e2))
      return;
    let t3 = setTimeout(() => {
      A.delete(e2), m2({ type: 4, toastId: e2 });
    }, 1e3);
    A.set(e2, t3);
  };
  var J = (e2) => {
    let t3 = A.get(e2);
    t3 && clearTimeout(t3);
  };
  var E = (e2, t3) => {
    switch (t3.type) {
      case 0:
        return { ...e2, toasts: [t3.toast, ...e2.toasts].slice(0, Q) };
      case 1:
        return t3.toast.id && J(t3.toast.id), { ...e2, toasts: e2.toasts.map((a3) => a3.id === t3.toast.id ? { ...a3, ...t3.toast } : a3) };
      case 2:
        let { toast: o3 } = t3;
        return e2.toasts.find((a3) => a3.id === o3.id) ? E(e2, { type: 1, toast: o3 }) : E(e2, { type: 0, toast: o3 });
      case 3:
        let { toastId: s3 } = t3;
        return s3 ? L(s3) : e2.toasts.forEach((a3) => {
          L(a3.id);
        }), { ...e2, toasts: e2.toasts.map((a3) => a3.id === s3 || s3 === void 0 ? { ...a3, visible: false } : a3) };
      case 4:
        return t3.toastId === void 0 ? { ...e2, toasts: [] } : { ...e2, toasts: e2.toasts.filter((a3) => a3.id !== t3.toastId) };
      case 5:
        return { ...e2, pausedAt: t3.time };
      case 6:
        let r2 = t3.time - (e2.pausedAt || 0);
        return { ...e2, pausedAt: void 0, toasts: e2.toasts.map((a3) => ({ ...a3, pauseDuration: a3.pauseDuration + r2 })) };
    }
  };
  var P = [];
  var R = { toasts: [], pausedAt: void 0 };
  var m2 = (e2) => {
    R = E(R, e2), P.forEach((t3) => {
      t3(R);
    });
  };
  var X = { blank: 4e3, error: 4e3, success: 2e3, loading: 1 / 0, custom: 4e3 };
  var v = (e2 = {}) => {
    let [t3, o3] = (0, import_react7.useState)(R);
    (0, import_react7.useEffect)(() => (P.push(o3), () => {
      let r2 = P.indexOf(o3);
      r2 > -1 && P.splice(r2, 1);
    }), [t3]);
    let s3 = t3.toasts.map((r2) => {
      var a3, i3;
      return { ...e2, ...e2[r2.type], ...r2, duration: r2.duration || ((a3 = e2[r2.type]) == null ? void 0 : a3.duration) || (e2 == null ? void 0 : e2.duration) || X[r2.type], style: { ...e2.style, ...(i3 = e2[r2.type]) == null ? void 0 : i3.style, ...r2.style } };
    });
    return { ...t3, toasts: s3 };
  };
  var q = (e2, t3 = "blank", o3) => ({ createdAt: Date.now(), visible: true, type: t3, ariaProps: { role: "status", "aria-live": "polite" }, message: e2, pauseDuration: 0, ...o3, id: (o3 == null ? void 0 : o3.id) || U() });
  var g2 = (e2) => (t3, o3) => {
    let s3 = q(t3, e2, o3);
    return m2({ type: 2, toast: s3 }), s3.id;
  };
  var n2 = (e2, t3) => g2("blank")(e2, t3);
  n2.error = g2("error");
  n2.success = g2("success");
  n2.loading = g2("loading");
  n2.custom = g2("custom");
  n2.dismiss = (e2) => {
    m2({ type: 3, toastId: e2 });
  };
  n2.remove = (e2) => m2({ type: 4, toastId: e2 });
  n2.promise = (e2, t3, o3) => {
    let s3 = n2.loading(t3.loading, { ...o3, ...o3 == null ? void 0 : o3.loading });
    return e2.then((r2) => (n2.success(u2(t3.success, r2), { id: s3, ...o3, ...o3 == null ? void 0 : o3.success }), r2)).catch((r2) => {
      n2.error(u2(t3.error, r2), { id: s3, ...o3, ...o3 == null ? void 0 : o3.error });
    }), e2;
  };
  var D = (e2) => {
    let { toasts: t3, pausedAt: o3 } = v(e2);
    (0, import_react8.useEffect)(() => {
      if (o3)
        return;
      let r2 = Date.now(), a3 = t3.map((i3) => {
        if (i3.duration === 1 / 0)
          return;
        let T = (i3.duration || 0) + i3.pauseDuration - (r2 - i3.createdAt);
        if (T < 0) {
          i3.visible && n2.dismiss(i3.id);
          return;
        }
        return setTimeout(() => n2.dismiss(i3.id), T);
      });
      return () => {
        a3.forEach((i3) => i3 && clearTimeout(i3));
      };
    }, [t3, o3]);
    let s3 = (0, import_react8.useMemo)(() => ({ startPause: () => {
      m2({ type: 5, time: Date.now() });
    }, endPause: () => {
      o3 && m2({ type: 6, time: Date.now() });
    }, updateHeight: (r2, a3) => m2({ type: 1, toast: { id: r2, height: a3 } }), calculateOffset: (r2, a3) => {
      let { reverseOrder: i3 = false, gutter: T = 8, defaultPosition: l3 } = a3 || {}, c3 = t3.filter((p3) => (p3.position || l3) === (r2.position || l3) && p3.height), h3 = c3.findIndex((p3) => p3.id === r2.id), b3 = c3.filter((p3, y2) => y2 < h3 && p3.visible).length;
      return c3.filter((p3) => p3.visible).slice(...i3 ? [b3 + 1] : [0, b3]).reduce((p3, y2) => p3 + (y2.height || 0) + T, 0);
    } }), [t3, o3]);
    return { toasts: t3, handlers: s3 };
  };
  var ee = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`;
  var te = h`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var oe = h`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`;
  var k = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e2) => e2.primary || "#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${ee} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${te} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${(e2) => e2.secondary || "#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${oe} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`;
  var se = h`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;
  var V = j("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${(e2) => e2.secondary || "#e0e0e0"};
  border-right-color: ${(e2) => e2.primary || "#616161"};
  animation: ${se} 1s linear infinite;
`;
  var ne = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`;
  var ce = h`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`;
  var _ = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e2) => e2.primary || "#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${ne} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${ce} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${(e2) => e2.secondary || "#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`;
  var de = j("div")`
  position: absolute;
`;
  var me = j("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`;
  var ue = h`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var le = j("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${ue} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`;
  var M = ({ toast: e2 }) => {
    let { icon: t3, type: o3, iconTheme: s3 } = e2;
    return t3 !== void 0 ? typeof t3 == "string" ? f2.createElement(le, null, t3) : t3 : o3 === "blank" ? null : f2.createElement(me, null, f2.createElement(V, { ...s3 }), o3 !== "loading" && f2.createElement(de, null, o3 === "error" ? f2.createElement(k, { ...s3 }) : f2.createElement(_, { ...s3 })));
  };
  var fe = (e2) => `
0% {transform: translate3d(0,${e2 * -200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`;
  var Te = (e2) => `
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${e2 * -150}%,-1px) scale(.6); opacity:0;}
`;
  var ye = "0%{opacity:0;} 100%{opacity:1;}";
  var ge = "0%{opacity:1;} 100%{opacity:0;}";
  var xe = j("div", d2.forwardRef)`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`;
  var he = j("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`;
  var be = (e2, t3) => {
    let s3 = e2.includes("top") ? 1 : -1, [r2, a3] = S() ? [ye, ge] : [fe(s3), Te(s3)];
    return { animation: t3 ? `${h(r2)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards` : `${h(a3)} 0.4s forwards cubic-bezier(.06,.71,.55,1)` };
  };
  var C = d2.memo(({ toast: e2, position: t3, style: o3, children: s3 }) => {
    let r2 = e2 != null && e2.height ? be(e2.position || t3 || "top-center", e2.visible) : { opacity: 0 }, a3 = d2.createElement(M, { toast: e2 }), i3 = d2.createElement(he, { ...e2.ariaProps }, u2(e2.message, e2));
    return d2.createElement(xe, { className: e2.className, style: { ...r2, ...o3, ...e2.style } }, typeof s3 == "function" ? s3({ icon: a3, message: i3 }) : d2.createElement(d2.Fragment, null, a3, i3));
  });
  m(x.createElement);
  var Pe = (e2, t3) => {
    let o3 = e2.includes("top"), s3 = o3 ? { top: 0 } : { bottom: 0 }, r2 = e2.includes("center") ? { justifyContent: "center" } : e2.includes("right") ? { justifyContent: "flex-end" } : {};
    return { left: 0, right: 0, display: "flex", position: "absolute", transition: S() ? void 0 : "all 230ms cubic-bezier(.21,1.02,.73,1)", transform: `translateY(${t3 * (o3 ? 1 : -1)}px)`, ...s3, ...r2 };
  };
  var Re = u`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`;
  var O = 16;
  var Oe = ({ reverseOrder: e2, position: t3 = "top-center", toastOptions: o3, gutter: s3, children: r2, containerStyle: a3, containerClassName: i3 }) => {
    let { toasts: T, handlers: l3 } = D(o3);
    return x.createElement("div", { style: { position: "fixed", zIndex: 9999, top: O, left: O, right: O, bottom: O, pointerEvents: "none", ...a3 }, className: i3, onMouseEnter: l3.startPause, onMouseLeave: l3.endPause }, T.map((c3) => {
      let h3 = c3.position || t3, b3 = l3.calculateOffset(c3, { reverseOrder: e2, gutter: s3, defaultPosition: t3 }), F2 = Pe(h3, b3), p3 = c3.height ? void 0 : $((y2) => {
        l3.updateHeight(c3.id, y2.height);
      });
      return x.createElement("div", { ref: p3, className: c3.visible ? Re : "", key: c3.id, style: F2 }, c3.type === "custom" ? u2(c3.message, c3) : r2 ? r2(c3) : x.createElement(C, { toast: c3, position: h3 }));
    }));
  };
  var Et = n2;

  // ../../node_modules/tslib/modules/index.js
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn
  } = import_tslib.default;

  // ../../node_modules/react-intl/lib/src/components/createFormattedComponent.js
  var React10 = __toESM(require_react());

  // ../../node_modules/react-intl/lib/src/components/useIntl.js
  var React9 = __toESM(require_react());

  // ../../node_modules/react-intl/lib/src/components/injectIntl.js
  var React8 = __toESM(require_react());
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());

  // ../../node_modules/react-intl/lib/src/utils.js
  var React7 = __toESM(require_react());

  // ../../node_modules/@formatjs/ecma402-abstract/lib/utils.js
  function invariant(condition, message, Err) {
    if (Err === void 0) {
      Err = Error;
    }
    if (!condition) {
      throw new Err(message);
    }
  }

  // ../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js
  var ErrorKind;
  (function(ErrorKind2) {
    ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
    ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
    ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
    ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
    ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
    ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
    ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
    ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
    ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
    ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
    ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
    ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
    ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
    ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
    ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
    ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
    ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
    ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
    ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
    ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
    ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
  })(ErrorKind || (ErrorKind = {}));

  // ../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js
  var TYPE;
  (function(TYPE2) {
    TYPE2[TYPE2["literal"] = 0] = "literal";
    TYPE2[TYPE2["argument"] = 1] = "argument";
    TYPE2[TYPE2["number"] = 2] = "number";
    TYPE2[TYPE2["date"] = 3] = "date";
    TYPE2[TYPE2["time"] = 4] = "time";
    TYPE2[TYPE2["select"] = 5] = "select";
    TYPE2[TYPE2["plural"] = 6] = "plural";
    TYPE2[TYPE2["pound"] = 7] = "pound";
    TYPE2[TYPE2["tag"] = 8] = "tag";
  })(TYPE || (TYPE = {}));
  var SKELETON_TYPE;
  (function(SKELETON_TYPE2) {
    SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
    SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
  })(SKELETON_TYPE || (SKELETON_TYPE = {}));
  function isLiteralElement(el) {
    return el.type === TYPE.literal;
  }
  function isArgumentElement(el) {
    return el.type === TYPE.argument;
  }
  function isNumberElement(el) {
    return el.type === TYPE.number;
  }
  function isDateElement(el) {
    return el.type === TYPE.date;
  }
  function isTimeElement(el) {
    return el.type === TYPE.time;
  }
  function isSelectElement(el) {
    return el.type === TYPE.select;
  }
  function isPluralElement(el) {
    return el.type === TYPE.plural;
  }
  function isPoundElement(el) {
    return el.type === TYPE.pound;
  }
  function isTagElement(el) {
    return el.type === TYPE.tag;
  }
  function isNumberSkeleton(el) {
    return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.number);
  }
  function isDateTimeSkeleton(el) {
    return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.dateTime);
  }

  // ../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
  var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

  // ../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
  var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
  function parseDateTimeSkeleton(skeleton) {
    var result = {};
    skeleton.replace(DATE_TIME_REGEX, function(match2) {
      var len = match2.length;
      switch (match2[0]) {
        case "G":
          result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
          break;
        case "y":
          result.year = len === 2 ? "2-digit" : "numeric";
          break;
        case "Y":
        case "u":
        case "U":
        case "r":
          throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
        case "q":
        case "Q":
          throw new RangeError("`q/Q` (quarter) patterns are not supported");
        case "M":
        case "L":
          result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
          break;
        case "w":
        case "W":
          throw new RangeError("`w/W` (week) patterns are not supported");
        case "d":
          result.day = ["numeric", "2-digit"][len - 1];
          break;
        case "D":
        case "F":
        case "g":
          throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
        case "E":
          result.weekday = len === 4 ? "short" : len === 5 ? "narrow" : "short";
          break;
        case "e":
          if (len < 4) {
            throw new RangeError("`e..eee` (weekday) patterns are not supported");
          }
          result.weekday = ["short", "long", "narrow", "short"][len - 4];
          break;
        case "c":
          if (len < 4) {
            throw new RangeError("`c..ccc` (weekday) patterns are not supported");
          }
          result.weekday = ["short", "long", "narrow", "short"][len - 4];
          break;
        case "a":
          result.hour12 = true;
          break;
        case "b":
        case "B":
          throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
        case "h":
          result.hourCycle = "h12";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "H":
          result.hourCycle = "h23";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "K":
          result.hourCycle = "h11";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "k":
          result.hourCycle = "h24";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "j":
        case "J":
        case "C":
          throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
        case "m":
          result.minute = ["numeric", "2-digit"][len - 1];
          break;
        case "s":
          result.second = ["numeric", "2-digit"][len - 1];
          break;
        case "S":
        case "A":
          throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
        case "z":
          result.timeZoneName = len < 4 ? "short" : "long";
          break;
        case "Z":
        case "O":
        case "v":
        case "V":
        case "X":
        case "x":
          throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
      }
      return "";
    });
    return result;
  }

  // ../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
  var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

  // ../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js
  function parseNumberSkeletonFromString(skeleton) {
    if (skeleton.length === 0) {
      throw new Error("Number skeleton cannot be empty");
    }
    var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function(x3) {
      return x3.length > 0;
    });
    var tokens = [];
    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
      var stringToken = stringTokens_1[_i];
      var stemAndOptions = stringToken.split("/");
      if (stemAndOptions.length === 0) {
        throw new Error("Invalid number skeleton");
      }
      var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
      for (var _a2 = 0, options_1 = options; _a2 < options_1.length; _a2++) {
        var option = options_1[_a2];
        if (option.length === 0) {
          throw new Error("Invalid number skeleton");
        }
      }
      tokens.push({ stem, options });
    }
    return tokens;
  }
  function icuUnitToEcma(unit) {
    return unit.replace(/^(.*?)-/, "");
  }
  var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
  var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
  var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
  var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
  function parseSignificantPrecision(str) {
    var result = {};
    if (str[str.length - 1] === "r") {
      result.roundingPriority = "morePrecision";
    } else if (str[str.length - 1] === "s") {
      result.roundingPriority = "lessPrecision";
    }
    str.replace(SIGNIFICANT_PRECISION_REGEX, function(_3, g1, g22) {
      if (typeof g22 !== "string") {
        result.minimumSignificantDigits = g1.length;
        result.maximumSignificantDigits = g1.length;
      } else if (g22 === "+") {
        result.minimumSignificantDigits = g1.length;
      } else if (g1[0] === "#") {
        result.maximumSignificantDigits = g1.length;
      } else {
        result.minimumSignificantDigits = g1.length;
        result.maximumSignificantDigits = g1.length + (typeof g22 === "string" ? g22.length : 0);
      }
      return "";
    });
    return result;
  }
  function parseSign(str) {
    switch (str) {
      case "sign-auto":
        return {
          signDisplay: "auto"
        };
      case "sign-accounting":
      case "()":
        return {
          currencySign: "accounting"
        };
      case "sign-always":
      case "+!":
        return {
          signDisplay: "always"
        };
      case "sign-accounting-always":
      case "()!":
        return {
          signDisplay: "always",
          currencySign: "accounting"
        };
      case "sign-except-zero":
      case "+?":
        return {
          signDisplay: "exceptZero"
        };
      case "sign-accounting-except-zero":
      case "()?":
        return {
          signDisplay: "exceptZero",
          currencySign: "accounting"
        };
      case "sign-never":
      case "+_":
        return {
          signDisplay: "never"
        };
    }
  }
  function parseConciseScientificAndEngineeringStem(stem) {
    var result;
    if (stem[0] === "E" && stem[1] === "E") {
      result = {
        notation: "engineering"
      };
      stem = stem.slice(2);
    } else if (stem[0] === "E") {
      result = {
        notation: "scientific"
      };
      stem = stem.slice(1);
    }
    if (result) {
      var signDisplay = stem.slice(0, 2);
      if (signDisplay === "+!") {
        result.signDisplay = "always";
        stem = stem.slice(2);
      } else if (signDisplay === "+?") {
        result.signDisplay = "exceptZero";
        stem = stem.slice(2);
      }
      if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
        throw new Error("Malformed concise eng/scientific notation");
      }
      result.minimumIntegerDigits = stem.length;
    }
    return result;
  }
  function parseNotationOptions(opt) {
    var result = {};
    var signOpts = parseSign(opt);
    if (signOpts) {
      return signOpts;
    }
    return result;
  }
  function parseNumberSkeleton(tokens) {
    var result = {};
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
      var token = tokens_1[_i];
      switch (token.stem) {
        case "percent":
        case "%":
          result.style = "percent";
          continue;
        case "%x100":
          result.style = "percent";
          result.scale = 100;
          continue;
        case "currency":
          result.style = "currency";
          result.currency = token.options[0];
          continue;
        case "group-off":
        case ",_":
          result.useGrouping = false;
          continue;
        case "precision-integer":
        case ".":
          result.maximumFractionDigits = 0;
          continue;
        case "measure-unit":
        case "unit":
          result.style = "unit";
          result.unit = icuUnitToEcma(token.options[0]);
          continue;
        case "compact-short":
        case "K":
          result.notation = "compact";
          result.compactDisplay = "short";
          continue;
        case "compact-long":
        case "KK":
          result.notation = "compact";
          result.compactDisplay = "long";
          continue;
        case "scientific":
          result = __assign(__assign(__assign({}, result), { notation: "scientific" }), token.options.reduce(function(all, opt2) {
            return __assign(__assign({}, all), parseNotationOptions(opt2));
          }, {}));
          continue;
        case "engineering":
          result = __assign(__assign(__assign({}, result), { notation: "engineering" }), token.options.reduce(function(all, opt2) {
            return __assign(__assign({}, all), parseNotationOptions(opt2));
          }, {}));
          continue;
        case "notation-simple":
          result.notation = "standard";
          continue;
        case "unit-width-narrow":
          result.currencyDisplay = "narrowSymbol";
          result.unitDisplay = "narrow";
          continue;
        case "unit-width-short":
          result.currencyDisplay = "code";
          result.unitDisplay = "short";
          continue;
        case "unit-width-full-name":
          result.currencyDisplay = "name";
          result.unitDisplay = "long";
          continue;
        case "unit-width-iso-code":
          result.currencyDisplay = "symbol";
          continue;
        case "scale":
          result.scale = parseFloat(token.options[0]);
          continue;
        case "integer-width":
          if (token.options.length > 1) {
            throw new RangeError("integer-width stems only accept a single optional option");
          }
          token.options[0].replace(INTEGER_WIDTH_REGEX, function(_3, g1, g22, g32, g4, g5) {
            if (g1) {
              result.minimumIntegerDigits = g22.length;
            } else if (g32 && g4) {
              throw new Error("We currently do not support maximum integer digits");
            } else if (g5) {
              throw new Error("We currently do not support exact integer digits");
            }
            return "";
          });
          continue;
      }
      if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
        result.minimumIntegerDigits = token.stem.length;
        continue;
      }
      if (FRACTION_PRECISION_REGEX.test(token.stem)) {
        if (token.options.length > 1) {
          throw new RangeError("Fraction-precision stems only accept a single optional option");
        }
        token.stem.replace(FRACTION_PRECISION_REGEX, function(_3, g1, g22, g32, g4, g5) {
          if (g22 === "*") {
            result.minimumFractionDigits = g1.length;
          } else if (g32 && g32[0] === "#") {
            result.maximumFractionDigits = g32.length;
          } else if (g4 && g5) {
            result.minimumFractionDigits = g4.length;
            result.maximumFractionDigits = g4.length + g5.length;
          } else {
            result.minimumFractionDigits = g1.length;
            result.maximumFractionDigits = g1.length;
          }
          return "";
        });
        var opt = token.options[0];
        if (opt === "w") {
          result = __assign(__assign({}, result), { trailingZeroDisplay: "stripIfInteger" });
        } else if (opt) {
          result = __assign(__assign({}, result), parseSignificantPrecision(opt));
        }
        continue;
      }
      if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
        result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));
        continue;
      }
      var signOpts = parseSign(token.stem);
      if (signOpts) {
        result = __assign(__assign({}, result), signOpts);
      }
      var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
      if (conciseScientificAndEngineeringOpts) {
        result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
      }
    }
    return result;
  }

  // ../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js
  var timeData = {
    "AX": [
      "H"
    ],
    "BQ": [
      "H"
    ],
    "CP": [
      "H"
    ],
    "CZ": [
      "H"
    ],
    "DK": [
      "H"
    ],
    "FI": [
      "H"
    ],
    "ID": [
      "H"
    ],
    "IS": [
      "H"
    ],
    "ML": [
      "H"
    ],
    "NE": [
      "H"
    ],
    "RU": [
      "H"
    ],
    "SE": [
      "H"
    ],
    "SJ": [
      "H"
    ],
    "SK": [
      "H"
    ],
    "AS": [
      "h",
      "H"
    ],
    "BT": [
      "h",
      "H"
    ],
    "DJ": [
      "h",
      "H"
    ],
    "ER": [
      "h",
      "H"
    ],
    "GH": [
      "h",
      "H"
    ],
    "IN": [
      "h",
      "H"
    ],
    "LS": [
      "h",
      "H"
    ],
    "PG": [
      "h",
      "H"
    ],
    "PW": [
      "h",
      "H"
    ],
    "SO": [
      "h",
      "H"
    ],
    "TO": [
      "h",
      "H"
    ],
    "VU": [
      "h",
      "H"
    ],
    "WS": [
      "h",
      "H"
    ],
    "001": [
      "H",
      "h"
    ],
    "AL": [
      "h",
      "H",
      "hB"
    ],
    "TD": [
      "h",
      "H",
      "hB"
    ],
    "ca-ES": [
      "H",
      "h",
      "hB"
    ],
    "CF": [
      "H",
      "h",
      "hB"
    ],
    "CM": [
      "H",
      "h",
      "hB"
    ],
    "fr-CA": [
      "H",
      "h",
      "hB"
    ],
    "gl-ES": [
      "H",
      "h",
      "hB"
    ],
    "it-CH": [
      "H",
      "h",
      "hB"
    ],
    "it-IT": [
      "H",
      "h",
      "hB"
    ],
    "LU": [
      "H",
      "h",
      "hB"
    ],
    "NP": [
      "H",
      "h",
      "hB"
    ],
    "PF": [
      "H",
      "h",
      "hB"
    ],
    "SC": [
      "H",
      "h",
      "hB"
    ],
    "SM": [
      "H",
      "h",
      "hB"
    ],
    "SN": [
      "H",
      "h",
      "hB"
    ],
    "TF": [
      "H",
      "h",
      "hB"
    ],
    "VA": [
      "H",
      "h",
      "hB"
    ],
    "CY": [
      "h",
      "H",
      "hb",
      "hB"
    ],
    "GR": [
      "h",
      "H",
      "hb",
      "hB"
    ],
    "CO": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "DO": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "KP": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "KR": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "NA": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "PA": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "PR": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "VE": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "AC": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "AI": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "BW": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "BZ": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "CC": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "CK": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "CX": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "DG": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "FK": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "GB": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "GG": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "GI": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "IE": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "IM": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "IO": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "JE": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "LT": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "MK": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "MN": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "MS": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "NF": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "NG": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "NR": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "NU": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "PN": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "SH": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "SX": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "TA": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "ZA": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "af-ZA": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "AR": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "CL": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "CR": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "CU": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "EA": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-BO": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-BR": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-EC": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-ES": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-GQ": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-PE": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "GT": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "HN": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "IC": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "KG": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "KM": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "LK": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "MA": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "MX": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "NI": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "PY": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "SV": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "UY": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "JP": [
      "H",
      "h",
      "K"
    ],
    "AD": [
      "H",
      "hB"
    ],
    "AM": [
      "H",
      "hB"
    ],
    "AO": [
      "H",
      "hB"
    ],
    "AT": [
      "H",
      "hB"
    ],
    "AW": [
      "H",
      "hB"
    ],
    "BE": [
      "H",
      "hB"
    ],
    "BF": [
      "H",
      "hB"
    ],
    "BJ": [
      "H",
      "hB"
    ],
    "BL": [
      "H",
      "hB"
    ],
    "BR": [
      "H",
      "hB"
    ],
    "CG": [
      "H",
      "hB"
    ],
    "CI": [
      "H",
      "hB"
    ],
    "CV": [
      "H",
      "hB"
    ],
    "DE": [
      "H",
      "hB"
    ],
    "EE": [
      "H",
      "hB"
    ],
    "FR": [
      "H",
      "hB"
    ],
    "GA": [
      "H",
      "hB"
    ],
    "GF": [
      "H",
      "hB"
    ],
    "GN": [
      "H",
      "hB"
    ],
    "GP": [
      "H",
      "hB"
    ],
    "GW": [
      "H",
      "hB"
    ],
    "HR": [
      "H",
      "hB"
    ],
    "IL": [
      "H",
      "hB"
    ],
    "IT": [
      "H",
      "hB"
    ],
    "KZ": [
      "H",
      "hB"
    ],
    "MC": [
      "H",
      "hB"
    ],
    "MD": [
      "H",
      "hB"
    ],
    "MF": [
      "H",
      "hB"
    ],
    "MQ": [
      "H",
      "hB"
    ],
    "MZ": [
      "H",
      "hB"
    ],
    "NC": [
      "H",
      "hB"
    ],
    "NL": [
      "H",
      "hB"
    ],
    "PM": [
      "H",
      "hB"
    ],
    "PT": [
      "H",
      "hB"
    ],
    "RE": [
      "H",
      "hB"
    ],
    "RO": [
      "H",
      "hB"
    ],
    "SI": [
      "H",
      "hB"
    ],
    "SR": [
      "H",
      "hB"
    ],
    "ST": [
      "H",
      "hB"
    ],
    "TG": [
      "H",
      "hB"
    ],
    "TR": [
      "H",
      "hB"
    ],
    "WF": [
      "H",
      "hB"
    ],
    "YT": [
      "H",
      "hB"
    ],
    "BD": [
      "h",
      "hB",
      "H"
    ],
    "PK": [
      "h",
      "hB",
      "H"
    ],
    "AZ": [
      "H",
      "hB",
      "h"
    ],
    "BA": [
      "H",
      "hB",
      "h"
    ],
    "BG": [
      "H",
      "hB",
      "h"
    ],
    "CH": [
      "H",
      "hB",
      "h"
    ],
    "GE": [
      "H",
      "hB",
      "h"
    ],
    "LI": [
      "H",
      "hB",
      "h"
    ],
    "ME": [
      "H",
      "hB",
      "h"
    ],
    "RS": [
      "H",
      "hB",
      "h"
    ],
    "UA": [
      "H",
      "hB",
      "h"
    ],
    "UZ": [
      "H",
      "hB",
      "h"
    ],
    "XK": [
      "H",
      "hB",
      "h"
    ],
    "AG": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "AU": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "BB": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "BM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "BS": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "CA": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "DM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "en-001": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "FJ": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "FM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "GD": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "GM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "GU": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "GY": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "JM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "KI": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "KN": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "KY": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "LC": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "LR": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "MH": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "MP": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "MW": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "NZ": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SB": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SG": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SL": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SS": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SZ": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "TC": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "TT": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "UM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "US": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "VC": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "VG": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "VI": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "ZM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "BO": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "EC": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "ES": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "GQ": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "PE": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "AE": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "ar-001": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "BH": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "DZ": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "EG": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "EH": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "HK": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "IQ": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "JO": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "KW": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "LB": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "LY": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "MO": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "MR": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "OM": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "PH": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "PS": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "QA": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "SA": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "SD": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "SY": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "TN": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "YE": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "AF": [
      "H",
      "hb",
      "hB",
      "h"
    ],
    "LA": [
      "H",
      "hb",
      "hB",
      "h"
    ],
    "CN": [
      "H",
      "hB",
      "hb",
      "h"
    ],
    "LV": [
      "H",
      "hB",
      "hb",
      "h"
    ],
    "TL": [
      "H",
      "hB",
      "hb",
      "h"
    ],
    "zu-ZA": [
      "H",
      "hB",
      "hb",
      "h"
    ],
    "CD": [
      "hB",
      "H"
    ],
    "IR": [
      "hB",
      "H"
    ],
    "hi-IN": [
      "hB",
      "h",
      "H"
    ],
    "kn-IN": [
      "hB",
      "h",
      "H"
    ],
    "ml-IN": [
      "hB",
      "h",
      "H"
    ],
    "te-IN": [
      "hB",
      "h",
      "H"
    ],
    "KH": [
      "hB",
      "h",
      "H",
      "hb"
    ],
    "ta-IN": [
      "hB",
      "h",
      "hb",
      "H"
    ],
    "BN": [
      "hb",
      "hB",
      "h",
      "H"
    ],
    "MY": [
      "hb",
      "hB",
      "h",
      "H"
    ],
    "ET": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "gu-IN": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "mr-IN": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "pa-IN": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "TW": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "KE": [
      "hB",
      "hb",
      "H",
      "h"
    ],
    "MM": [
      "hB",
      "hb",
      "H",
      "h"
    ],
    "TZ": [
      "hB",
      "hb",
      "H",
      "h"
    ],
    "UG": [
      "hB",
      "hb",
      "H",
      "h"
    ]
  };

  // ../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js
  function getBestPattern(skeleton, locale2) {
    var skeletonCopy = "";
    for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
      var patternChar = skeleton.charAt(patternPos);
      if (patternChar === "j") {
        var extraLength = 0;
        while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
          extraLength++;
          patternPos++;
        }
        var hourLen = 1 + (extraLength & 1);
        var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
        var dayPeriodChar = "a";
        var hourChar = getDefaultHourSymbolFromLocale(locale2);
        if (hourChar == "H" || hourChar == "k") {
          dayPeriodLen = 0;
        }
        while (dayPeriodLen-- > 0) {
          skeletonCopy += dayPeriodChar;
        }
        while (hourLen-- > 0) {
          skeletonCopy = hourChar + skeletonCopy;
        }
      } else if (patternChar === "J") {
        skeletonCopy += "H";
      } else {
        skeletonCopy += patternChar;
      }
    }
    return skeletonCopy;
  }
  function getDefaultHourSymbolFromLocale(locale2) {
    var hourCycle = locale2.hourCycle;
    if (hourCycle === void 0 && locale2.hourCycles && locale2.hourCycles.length) {
      hourCycle = locale2.hourCycles[0];
    }
    if (hourCycle) {
      switch (hourCycle) {
        case "h24":
          return "k";
        case "h23":
          return "H";
        case "h12":
          return "h";
        case "h11":
          return "K";
        default:
          throw new Error("Invalid hourCycle");
      }
    }
    var languageTag = locale2.language;
    var regionTag;
    if (languageTag !== "root") {
      regionTag = locale2.maximize().region;
    }
    var hourCycles = timeData[regionTag || ""] || timeData[languageTag || ""] || timeData["".concat(languageTag, "-001")] || timeData["001"];
    return hourCycles[0];
  }

  // ../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
  var _a;
  var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
  var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
  function createLocation(start4, end3) {
    return { start: start4, end: end3 };
  }
  var hasNativeStartsWith = !!String.prototype.startsWith;
  var hasNativeFromCodePoint = !!String.fromCodePoint;
  var hasNativeFromEntries = !!Object.fromEntries;
  var hasNativeCodePointAt = !!String.prototype.codePointAt;
  var hasTrimStart = !!String.prototype.trimStart;
  var hasTrimEnd = !!String.prototype.trimEnd;
  var hasNativeIsSafeInteger = !!Number.isSafeInteger;
  var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n4) {
    return typeof n4 === "number" && isFinite(n4) && Math.floor(n4) === n4 && Math.abs(n4) <= 9007199254740991;
  };
  var REGEX_SUPPORTS_U_AND_Y = true;
  try {
    re = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
    REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec("a")) === null || _a === void 0 ? void 0 : _a[0]) === "a";
  } catch (_3) {
    REGEX_SUPPORTS_U_AND_Y = false;
  }
  var re;
  var startsWith = hasNativeStartsWith ? function startsWith2(s3, search, position3) {
    return s3.startsWith(search, position3);
  } : function startsWith3(s3, search, position3) {
    return s3.slice(position3, position3 + search.length) === search;
  };
  var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint2() {
    var codePoints = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      codePoints[_i] = arguments[_i];
    }
    var elements = "";
    var length = codePoints.length;
    var i3 = 0;
    var code;
    while (length > i3) {
      code = codePoints[i3++];
      if (code > 1114111)
        throw RangeError(code + " is not a valid code point");
      elements += code < 65536 ? String.fromCharCode(code) : String.fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320);
    }
    return elements;
  };
  var fromEntries = hasNativeFromEntries ? Object.fromEntries : function fromEntries2(entries) {
    var obj = {};
    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
      var _a2 = entries_1[_i], k3 = _a2[0], v3 = _a2[1];
      obj[k3] = v3;
    }
    return obj;
  };
  var codePointAt = hasNativeCodePointAt ? function codePointAt2(s3, index2) {
    return s3.codePointAt(index2);
  } : function codePointAt3(s3, index2) {
    var size = s3.length;
    if (index2 < 0 || index2 >= size) {
      return void 0;
    }
    var first = s3.charCodeAt(index2);
    var second;
    return first < 55296 || first > 56319 || index2 + 1 === size || (second = s3.charCodeAt(index2 + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
  };
  var trimStart = hasTrimStart ? function trimStart2(s3) {
    return s3.trimStart();
  } : function trimStart3(s3) {
    return s3.replace(SPACE_SEPARATOR_START_REGEX, "");
  };
  var trimEnd = hasTrimEnd ? function trimEnd2(s3) {
    return s3.trimEnd();
  } : function trimEnd3(s3) {
    return s3.replace(SPACE_SEPARATOR_END_REGEX, "");
  };
  function RE(s3, flag) {
    return new RegExp(s3, flag);
  }
  var matchIdentifierAtIndex;
  if (REGEX_SUPPORTS_U_AND_Y) {
    IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
    matchIdentifierAtIndex = function matchIdentifierAtIndex2(s3, index2) {
      var _a2;
      IDENTIFIER_PREFIX_RE_1.lastIndex = index2;
      var match2 = IDENTIFIER_PREFIX_RE_1.exec(s3);
      return (_a2 = match2[1]) !== null && _a2 !== void 0 ? _a2 : "";
    };
  } else {
    matchIdentifierAtIndex = function matchIdentifierAtIndex2(s3, index2) {
      var match2 = [];
      while (true) {
        var c3 = codePointAt(s3, index2);
        if (c3 === void 0 || _isWhiteSpace(c3) || _isPatternSyntax(c3)) {
          break;
        }
        match2.push(c3);
        index2 += c3 >= 65536 ? 2 : 1;
      }
      return fromCodePoint.apply(void 0, match2);
    };
  }
  var IDENTIFIER_PREFIX_RE_1;
  var Parser = function() {
    function Parser2(message, options) {
      if (options === void 0) {
        options = {};
      }
      this.message = message;
      this.position = { offset: 0, line: 1, column: 1 };
      this.ignoreTag = !!options.ignoreTag;
      this.locale = options.locale;
      this.requiresOtherClause = !!options.requiresOtherClause;
      this.shouldParseSkeletons = !!options.shouldParseSkeletons;
    }
    Parser2.prototype.parse = function() {
      if (this.offset() !== 0) {
        throw Error("parser can only be used once");
      }
      return this.parseMessage(0, "", false);
    };
    Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
      var elements = [];
      while (!this.isEOF()) {
        var char = this.char();
        if (char === 123) {
          var result = this.parseArgument(nestingLevel, expectingCloseTag);
          if (result.err) {
            return result;
          }
          elements.push(result.val);
        } else if (char === 125 && nestingLevel > 0) {
          break;
        } else if (char === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
          var position3 = this.clonePosition();
          this.bump();
          elements.push({
            type: TYPE.pound,
            location: createLocation(position3, this.clonePosition())
          });
        } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
          if (expectingCloseTag) {
            break;
          } else {
            return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
          }
        } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
          var result = this.parseTag(nestingLevel, parentArgType);
          if (result.err) {
            return result;
          }
          elements.push(result.val);
        } else {
          var result = this.parseLiteral(nestingLevel, parentArgType);
          if (result.err) {
            return result;
          }
          elements.push(result.val);
        }
      }
      return { val: elements, err: null };
    };
    Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
      var startPosition = this.clonePosition();
      this.bump();
      var tagName = this.parseTagName();
      this.bumpSpace();
      if (this.bumpIf("/>")) {
        return {
          val: {
            type: TYPE.literal,
            value: "<".concat(tagName, "/>"),
            location: createLocation(startPosition, this.clonePosition())
          },
          err: null
        };
      } else if (this.bumpIf(">")) {
        var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
        if (childrenResult.err) {
          return childrenResult;
        }
        var children = childrenResult.val;
        var endTagStartPosition = this.clonePosition();
        if (this.bumpIf("</")) {
          if (this.isEOF() || !_isAlpha(this.char())) {
            return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
          }
          var closingTagNameStartPosition = this.clonePosition();
          var closingTagName = this.parseTagName();
          if (tagName !== closingTagName) {
            return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
          }
          this.bumpSpace();
          if (!this.bumpIf(">")) {
            return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
          }
          return {
            val: {
              type: TYPE.tag,
              value: tagName,
              children,
              location: createLocation(startPosition, this.clonePosition())
            },
            err: null
          };
        } else {
          return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
        }
      } else {
        return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
      }
    };
    Parser2.prototype.parseTagName = function() {
      var startOffset = this.offset();
      this.bump();
      while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
        this.bump();
      }
      return this.message.slice(startOffset, this.offset());
    };
    Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
      var start4 = this.clonePosition();
      var value = "";
      while (true) {
        var parseQuoteResult = this.tryParseQuote(parentArgType);
        if (parseQuoteResult) {
          value += parseQuoteResult;
          continue;
        }
        var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
        if (parseUnquotedResult) {
          value += parseUnquotedResult;
          continue;
        }
        var parseLeftAngleResult = this.tryParseLeftAngleBracket();
        if (parseLeftAngleResult) {
          value += parseLeftAngleResult;
          continue;
        }
        break;
      }
      var location = createLocation(start4, this.clonePosition());
      return {
        val: { type: TYPE.literal, value, location },
        err: null
      };
    };
    Parser2.prototype.tryParseLeftAngleBracket = function() {
      if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || !_isAlphaOrSlash(this.peek() || 0))) {
        this.bump();
        return "<";
      }
      return null;
    };
    Parser2.prototype.tryParseQuote = function(parentArgType) {
      if (this.isEOF() || this.char() !== 39) {
        return null;
      }
      switch (this.peek()) {
        case 39:
          this.bump();
          this.bump();
          return "'";
        case 123:
        case 60:
        case 62:
        case 125:
          break;
        case 35:
          if (parentArgType === "plural" || parentArgType === "selectordinal") {
            break;
          }
          return null;
        default:
          return null;
      }
      this.bump();
      var codePoints = [this.char()];
      this.bump();
      while (!this.isEOF()) {
        var ch = this.char();
        if (ch === 39) {
          if (this.peek() === 39) {
            codePoints.push(39);
            this.bump();
          } else {
            this.bump();
            break;
          }
        } else {
          codePoints.push(ch);
        }
        this.bump();
      }
      return fromCodePoint.apply(void 0, codePoints);
    };
    Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
      if (this.isEOF()) {
        return null;
      }
      var ch = this.char();
      if (ch === 60 || ch === 123 || ch === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch === 125 && nestingLevel > 0) {
        return null;
      } else {
        this.bump();
        return fromCodePoint(ch);
      }
    };
    Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
      var openingBracePosition = this.clonePosition();
      this.bump();
      this.bumpSpace();
      if (this.isEOF()) {
        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
      }
      if (this.char() === 125) {
        this.bump();
        return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
      }
      var value = this.parseIdentifierIfPossible().value;
      if (!value) {
        return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
      }
      this.bumpSpace();
      if (this.isEOF()) {
        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
      }
      switch (this.char()) {
        case 125: {
          this.bump();
          return {
            val: {
              type: TYPE.argument,
              value,
              location: createLocation(openingBracePosition, this.clonePosition())
            },
            err: null
          };
        }
        case 44: {
          this.bump();
          this.bumpSpace();
          if (this.isEOF()) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }
          return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
        }
        default:
          return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
      }
    };
    Parser2.prototype.parseIdentifierIfPossible = function() {
      var startingPosition = this.clonePosition();
      var startOffset = this.offset();
      var value = matchIdentifierAtIndex(this.message, startOffset);
      var endOffset = startOffset + value.length;
      this.bumpTo(endOffset);
      var endPosition = this.clonePosition();
      var location = createLocation(startingPosition, endPosition);
      return { value, location };
    };
    Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
      var _a2;
      var typeStartPosition = this.clonePosition();
      var argType = this.parseIdentifierIfPossible().value;
      var typeEndPosition = this.clonePosition();
      switch (argType) {
        case "":
          return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
        case "number":
        case "date":
        case "time": {
          this.bumpSpace();
          var styleAndLocation = null;
          if (this.bumpIf(",")) {
            this.bumpSpace();
            var styleStartPosition = this.clonePosition();
            var result = this.parseSimpleArgStyleIfPossible();
            if (result.err) {
              return result;
            }
            var style2 = trimEnd(result.val);
            if (style2.length === 0) {
              return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
            }
            var styleLocation = createLocation(styleStartPosition, this.clonePosition());
            styleAndLocation = { style: style2, styleLocation };
          }
          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
          if (argCloseResult.err) {
            return argCloseResult;
          }
          var location_1 = createLocation(openingBracePosition, this.clonePosition());
          if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
            var skeleton = trimStart(styleAndLocation.style.slice(2));
            if (argType === "number") {
              var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
              if (result.err) {
                return result;
              }
              return {
                val: { type: TYPE.number, value, location: location_1, style: result.val },
                err: null
              };
            } else {
              if (skeleton.length === 0) {
                return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
              }
              var dateTimePattern = skeleton;
              if (this.locale) {
                dateTimePattern = getBestPattern(skeleton, this.locale);
              }
              var style2 = {
                type: SKELETON_TYPE.dateTime,
                pattern: dateTimePattern,
                location: styleAndLocation.styleLocation,
                parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(dateTimePattern) : {}
              };
              var type = argType === "date" ? TYPE.date : TYPE.time;
              return {
                val: { type, value, location: location_1, style: style2 },
                err: null
              };
            }
          }
          return {
            val: {
              type: argType === "number" ? TYPE.number : argType === "date" ? TYPE.date : TYPE.time,
              value,
              location: location_1,
              style: (_a2 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a2 !== void 0 ? _a2 : null
            },
            err: null
          };
        }
        case "plural":
        case "selectordinal":
        case "select": {
          var typeEndPosition_1 = this.clonePosition();
          this.bumpSpace();
          if (!this.bumpIf(",")) {
            return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
          }
          this.bumpSpace();
          var identifierAndLocation = this.parseIdentifierIfPossible();
          var pluralOffset = 0;
          if (argType !== "select" && identifierAndLocation.value === "offset") {
            if (!this.bumpIf(":")) {
              return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
            }
            this.bumpSpace();
            var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
            if (result.err) {
              return result;
            }
            this.bumpSpace();
            identifierAndLocation = this.parseIdentifierIfPossible();
            pluralOffset = result.val;
          }
          var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
          if (optionsResult.err) {
            return optionsResult;
          }
          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
          if (argCloseResult.err) {
            return argCloseResult;
          }
          var location_2 = createLocation(openingBracePosition, this.clonePosition());
          if (argType === "select") {
            return {
              val: {
                type: TYPE.select,
                value,
                options: fromEntries(optionsResult.val),
                location: location_2
              },
              err: null
            };
          } else {
            return {
              val: {
                type: TYPE.plural,
                value,
                options: fromEntries(optionsResult.val),
                offset: pluralOffset,
                pluralType: argType === "plural" ? "cardinal" : "ordinal",
                location: location_2
              },
              err: null
            };
          }
        }
        default:
          return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
      }
    };
    Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
      if (this.isEOF() || this.char() !== 125) {
        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
      }
      this.bump();
      return { val: true, err: null };
    };
    Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
      var nestedBraces = 0;
      var startPosition = this.clonePosition();
      while (!this.isEOF()) {
        var ch = this.char();
        switch (ch) {
          case 39: {
            this.bump();
            var apostrophePosition = this.clonePosition();
            if (!this.bumpUntil("'")) {
              return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
            }
            this.bump();
            break;
          }
          case 123: {
            nestedBraces += 1;
            this.bump();
            break;
          }
          case 125: {
            if (nestedBraces > 0) {
              nestedBraces -= 1;
            } else {
              return {
                val: this.message.slice(startPosition.offset, this.offset()),
                err: null
              };
            }
            break;
          }
          default:
            this.bump();
            break;
        }
      }
      return {
        val: this.message.slice(startPosition.offset, this.offset()),
        err: null
      };
    };
    Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location) {
      var tokens = [];
      try {
        tokens = parseNumberSkeletonFromString(skeleton);
      } catch (e2) {
        return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);
      }
      return {
        val: {
          type: SKELETON_TYPE.number,
          tokens,
          location,
          parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {}
        },
        err: null
      };
    };
    Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
      var _a2;
      var hasOtherClause = false;
      var options = [];
      var parsedSelectors = /* @__PURE__ */ new Set();
      var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
      while (true) {
        if (selector.length === 0) {
          var startPosition = this.clonePosition();
          if (parentArgType !== "select" && this.bumpIf("=")) {
            var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
            if (result.err) {
              return result;
            }
            selectorLocation = createLocation(startPosition, this.clonePosition());
            selector = this.message.slice(startPosition.offset, this.offset());
          } else {
            break;
          }
        }
        if (parsedSelectors.has(selector)) {
          return this.error(parentArgType === "select" ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
        }
        if (selector === "other") {
          hasOtherClause = true;
        }
        this.bumpSpace();
        var openingBracePosition = this.clonePosition();
        if (!this.bumpIf("{")) {
          return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
        }
        var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
        if (fragmentResult.err) {
          return fragmentResult;
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        options.push([
          selector,
          {
            value: fragmentResult.val,
            location: createLocation(openingBracePosition, this.clonePosition())
          }
        ]);
        parsedSelectors.add(selector);
        this.bumpSpace();
        _a2 = this.parseIdentifierIfPossible(), selector = _a2.value, selectorLocation = _a2.location;
      }
      if (options.length === 0) {
        return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
      }
      if (this.requiresOtherClause && !hasOtherClause) {
        return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
      }
      return { val: options, err: null };
    };
    Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
      var sign = 1;
      var startingPosition = this.clonePosition();
      if (this.bumpIf("+")) {
      } else if (this.bumpIf("-")) {
        sign = -1;
      }
      var hasDigits = false;
      var decimal = 0;
      while (!this.isEOF()) {
        var ch = this.char();
        if (ch >= 48 && ch <= 57) {
          hasDigits = true;
          decimal = decimal * 10 + (ch - 48);
          this.bump();
        } else {
          break;
        }
      }
      var location = createLocation(startingPosition, this.clonePosition());
      if (!hasDigits) {
        return this.error(expectNumberError, location);
      }
      decimal *= sign;
      if (!isSafeInteger(decimal)) {
        return this.error(invalidNumberError, location);
      }
      return { val: decimal, err: null };
    };
    Parser2.prototype.offset = function() {
      return this.position.offset;
    };
    Parser2.prototype.isEOF = function() {
      return this.offset() === this.message.length;
    };
    Parser2.prototype.clonePosition = function() {
      return {
        offset: this.position.offset,
        line: this.position.line,
        column: this.position.column
      };
    };
    Parser2.prototype.char = function() {
      var offset4 = this.position.offset;
      if (offset4 >= this.message.length) {
        throw Error("out of bound");
      }
      var code = codePointAt(this.message, offset4);
      if (code === void 0) {
        throw Error("Offset ".concat(offset4, " is at invalid UTF-16 code unit boundary"));
      }
      return code;
    };
    Parser2.prototype.error = function(kind, location) {
      return {
        val: null,
        err: {
          kind,
          message: this.message,
          location
        }
      };
    };
    Parser2.prototype.bump = function() {
      if (this.isEOF()) {
        return;
      }
      var code = this.char();
      if (code === 10) {
        this.position.line += 1;
        this.position.column = 1;
        this.position.offset += 1;
      } else {
        this.position.column += 1;
        this.position.offset += code < 65536 ? 1 : 2;
      }
    };
    Parser2.prototype.bumpIf = function(prefix3) {
      if (startsWith(this.message, prefix3, this.offset())) {
        for (var i3 = 0; i3 < prefix3.length; i3++) {
          this.bump();
        }
        return true;
      }
      return false;
    };
    Parser2.prototype.bumpUntil = function(pattern) {
      var currentOffset = this.offset();
      var index2 = this.message.indexOf(pattern, currentOffset);
      if (index2 >= 0) {
        this.bumpTo(index2);
        return true;
      } else {
        this.bumpTo(this.message.length);
        return false;
      }
    };
    Parser2.prototype.bumpTo = function(targetOffset) {
      if (this.offset() > targetOffset) {
        throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
      }
      targetOffset = Math.min(targetOffset, this.message.length);
      while (true) {
        var offset4 = this.offset();
        if (offset4 === targetOffset) {
          break;
        }
        if (offset4 > targetOffset) {
          throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
        }
        this.bump();
        if (this.isEOF()) {
          break;
        }
      }
    };
    Parser2.prototype.bumpSpace = function() {
      while (!this.isEOF() && _isWhiteSpace(this.char())) {
        this.bump();
      }
    };
    Parser2.prototype.peek = function() {
      if (this.isEOF()) {
        return null;
      }
      var code = this.char();
      var offset4 = this.offset();
      var nextCode = this.message.charCodeAt(offset4 + (code >= 65536 ? 2 : 1));
      return nextCode !== null && nextCode !== void 0 ? nextCode : null;
    };
    return Parser2;
  }();
  function _isAlpha(codepoint) {
    return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
  }
  function _isAlphaOrSlash(codepoint) {
    return _isAlpha(codepoint) || codepoint === 47;
  }
  function _isPotentialElementNameChar(c3) {
    return c3 === 45 || c3 === 46 || c3 >= 48 && c3 <= 57 || c3 === 95 || c3 >= 97 && c3 <= 122 || c3 >= 65 && c3 <= 90 || c3 == 183 || c3 >= 192 && c3 <= 214 || c3 >= 216 && c3 <= 246 || c3 >= 248 && c3 <= 893 || c3 >= 895 && c3 <= 8191 || c3 >= 8204 && c3 <= 8205 || c3 >= 8255 && c3 <= 8256 || c3 >= 8304 && c3 <= 8591 || c3 >= 11264 && c3 <= 12271 || c3 >= 12289 && c3 <= 55295 || c3 >= 63744 && c3 <= 64975 || c3 >= 65008 && c3 <= 65533 || c3 >= 65536 && c3 <= 983039;
  }
  function _isWhiteSpace(c3) {
    return c3 >= 9 && c3 <= 13 || c3 === 32 || c3 === 133 || c3 >= 8206 && c3 <= 8207 || c3 === 8232 || c3 === 8233;
  }
  function _isPatternSyntax(c3) {
    return c3 >= 33 && c3 <= 35 || c3 === 36 || c3 >= 37 && c3 <= 39 || c3 === 40 || c3 === 41 || c3 === 42 || c3 === 43 || c3 === 44 || c3 === 45 || c3 >= 46 && c3 <= 47 || c3 >= 58 && c3 <= 59 || c3 >= 60 && c3 <= 62 || c3 >= 63 && c3 <= 64 || c3 === 91 || c3 === 92 || c3 === 93 || c3 === 94 || c3 === 96 || c3 === 123 || c3 === 124 || c3 === 125 || c3 === 126 || c3 === 161 || c3 >= 162 && c3 <= 165 || c3 === 166 || c3 === 167 || c3 === 169 || c3 === 171 || c3 === 172 || c3 === 174 || c3 === 176 || c3 === 177 || c3 === 182 || c3 === 187 || c3 === 191 || c3 === 215 || c3 === 247 || c3 >= 8208 && c3 <= 8213 || c3 >= 8214 && c3 <= 8215 || c3 === 8216 || c3 === 8217 || c3 === 8218 || c3 >= 8219 && c3 <= 8220 || c3 === 8221 || c3 === 8222 || c3 === 8223 || c3 >= 8224 && c3 <= 8231 || c3 >= 8240 && c3 <= 8248 || c3 === 8249 || c3 === 8250 || c3 >= 8251 && c3 <= 8254 || c3 >= 8257 && c3 <= 8259 || c3 === 8260 || c3 === 8261 || c3 === 8262 || c3 >= 8263 && c3 <= 8273 || c3 === 8274 || c3 === 8275 || c3 >= 8277 && c3 <= 8286 || c3 >= 8592 && c3 <= 8596 || c3 >= 8597 && c3 <= 8601 || c3 >= 8602 && c3 <= 8603 || c3 >= 8604 && c3 <= 8607 || c3 === 8608 || c3 >= 8609 && c3 <= 8610 || c3 === 8611 || c3 >= 8612 && c3 <= 8613 || c3 === 8614 || c3 >= 8615 && c3 <= 8621 || c3 === 8622 || c3 >= 8623 && c3 <= 8653 || c3 >= 8654 && c3 <= 8655 || c3 >= 8656 && c3 <= 8657 || c3 === 8658 || c3 === 8659 || c3 === 8660 || c3 >= 8661 && c3 <= 8691 || c3 >= 8692 && c3 <= 8959 || c3 >= 8960 && c3 <= 8967 || c3 === 8968 || c3 === 8969 || c3 === 8970 || c3 === 8971 || c3 >= 8972 && c3 <= 8991 || c3 >= 8992 && c3 <= 8993 || c3 >= 8994 && c3 <= 9e3 || c3 === 9001 || c3 === 9002 || c3 >= 9003 && c3 <= 9083 || c3 === 9084 || c3 >= 9085 && c3 <= 9114 || c3 >= 9115 && c3 <= 9139 || c3 >= 9140 && c3 <= 9179 || c3 >= 9180 && c3 <= 9185 || c3 >= 9186 && c3 <= 9254 || c3 >= 9255 && c3 <= 9279 || c3 >= 9280 && c3 <= 9290 || c3 >= 9291 && c3 <= 9311 || c3 >= 9472 && c3 <= 9654 || c3 === 9655 || c3 >= 9656 && c3 <= 9664 || c3 === 9665 || c3 >= 9666 && c3 <= 9719 || c3 >= 9720 && c3 <= 9727 || c3 >= 9728 && c3 <= 9838 || c3 === 9839 || c3 >= 9840 && c3 <= 10087 || c3 === 10088 || c3 === 10089 || c3 === 10090 || c3 === 10091 || c3 === 10092 || c3 === 10093 || c3 === 10094 || c3 === 10095 || c3 === 10096 || c3 === 10097 || c3 === 10098 || c3 === 10099 || c3 === 10100 || c3 === 10101 || c3 >= 10132 && c3 <= 10175 || c3 >= 10176 && c3 <= 10180 || c3 === 10181 || c3 === 10182 || c3 >= 10183 && c3 <= 10213 || c3 === 10214 || c3 === 10215 || c3 === 10216 || c3 === 10217 || c3 === 10218 || c3 === 10219 || c3 === 10220 || c3 === 10221 || c3 === 10222 || c3 === 10223 || c3 >= 10224 && c3 <= 10239 || c3 >= 10240 && c3 <= 10495 || c3 >= 10496 && c3 <= 10626 || c3 === 10627 || c3 === 10628 || c3 === 10629 || c3 === 10630 || c3 === 10631 || c3 === 10632 || c3 === 10633 || c3 === 10634 || c3 === 10635 || c3 === 10636 || c3 === 10637 || c3 === 10638 || c3 === 10639 || c3 === 10640 || c3 === 10641 || c3 === 10642 || c3 === 10643 || c3 === 10644 || c3 === 10645 || c3 === 10646 || c3 === 10647 || c3 === 10648 || c3 >= 10649 && c3 <= 10711 || c3 === 10712 || c3 === 10713 || c3 === 10714 || c3 === 10715 || c3 >= 10716 && c3 <= 10747 || c3 === 10748 || c3 === 10749 || c3 >= 10750 && c3 <= 11007 || c3 >= 11008 && c3 <= 11055 || c3 >= 11056 && c3 <= 11076 || c3 >= 11077 && c3 <= 11078 || c3 >= 11079 && c3 <= 11084 || c3 >= 11085 && c3 <= 11123 || c3 >= 11124 && c3 <= 11125 || c3 >= 11126 && c3 <= 11157 || c3 === 11158 || c3 >= 11159 && c3 <= 11263 || c3 >= 11776 && c3 <= 11777 || c3 === 11778 || c3 === 11779 || c3 === 11780 || c3 === 11781 || c3 >= 11782 && c3 <= 11784 || c3 === 11785 || c3 === 11786 || c3 === 11787 || c3 === 11788 || c3 === 11789 || c3 >= 11790 && c3 <= 11798 || c3 === 11799 || c3 >= 11800 && c3 <= 11801 || c3 === 11802 || c3 === 11803 || c3 === 11804 || c3 === 11805 || c3 >= 11806 && c3 <= 11807 || c3 === 11808 || c3 === 11809 || c3 === 11810 || c3 === 11811 || c3 === 11812 || c3 === 11813 || c3 === 11814 || c3 === 11815 || c3 === 11816 || c3 === 11817 || c3 >= 11818 && c3 <= 11822 || c3 === 11823 || c3 >= 11824 && c3 <= 11833 || c3 >= 11834 && c3 <= 11835 || c3 >= 11836 && c3 <= 11839 || c3 === 11840 || c3 === 11841 || c3 === 11842 || c3 >= 11843 && c3 <= 11855 || c3 >= 11856 && c3 <= 11857 || c3 === 11858 || c3 >= 11859 && c3 <= 11903 || c3 >= 12289 && c3 <= 12291 || c3 === 12296 || c3 === 12297 || c3 === 12298 || c3 === 12299 || c3 === 12300 || c3 === 12301 || c3 === 12302 || c3 === 12303 || c3 === 12304 || c3 === 12305 || c3 >= 12306 && c3 <= 12307 || c3 === 12308 || c3 === 12309 || c3 === 12310 || c3 === 12311 || c3 === 12312 || c3 === 12313 || c3 === 12314 || c3 === 12315 || c3 === 12316 || c3 === 12317 || c3 >= 12318 && c3 <= 12319 || c3 === 12320 || c3 === 12336 || c3 === 64830 || c3 === 64831 || c3 >= 65093 && c3 <= 65094;
  }

  // ../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js
  function pruneLocation(els) {
    els.forEach(function(el) {
      delete el.location;
      if (isSelectElement(el) || isPluralElement(el)) {
        for (var k3 in el.options) {
          delete el.options[k3].location;
          pruneLocation(el.options[k3].value);
        }
      } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
        delete el.style.location;
      } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {
        delete el.style.location;
      } else if (isTagElement(el)) {
        pruneLocation(el.children);
      }
    });
  }
  function parse(message, opts) {
    if (opts === void 0) {
      opts = {};
    }
    opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
    var result = new Parser(message, opts).parse();
    if (result.err) {
      var error2 = SyntaxError(ErrorKind[result.err.kind]);
      error2.location = result.err.location;
      error2.originalMessage = result.err.message;
      throw error2;
    }
    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
      pruneLocation(result.val);
    }
    return result.val;
  }

  // ../../node_modules/@formatjs/fast-memoize/lib/index.js
  function memoize(fn4, options) {
    var cache = options && options.cache ? options.cache : cacheDefault;
    var serializer = options && options.serializer ? options.serializer : serializerDefault;
    var strategy = options && options.strategy ? options.strategy : strategyDefault;
    return strategy(fn4, {
      cache,
      serializer
    });
  }
  function isPrimitive(value) {
    return value == null || typeof value === "number" || typeof value === "boolean";
  }
  function monadic(fn4, cache, serializer, arg) {
    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === "undefined") {
      computedValue = fn4.call(this, arg);
      cache.set(cacheKey, computedValue);
    }
    return computedValue;
  }
  function variadic(fn4, cache, serializer) {
    var args = Array.prototype.slice.call(arguments, 3);
    var cacheKey = serializer(args);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === "undefined") {
      computedValue = fn4.apply(this, args);
      cache.set(cacheKey, computedValue);
    }
    return computedValue;
  }
  function assemble(fn4, context, strategy, cache, serialize) {
    return strategy.bind(context, fn4, cache, serialize);
  }
  function strategyDefault(fn4, options) {
    var strategy = fn4.length === 1 ? monadic : variadic;
    return assemble(fn4, this, strategy, options.cache.create(), options.serializer);
  }
  function strategyVariadic(fn4, options) {
    return assemble(fn4, this, variadic, options.cache.create(), options.serializer);
  }
  function strategyMonadic(fn4, options) {
    return assemble(fn4, this, monadic, options.cache.create(), options.serializer);
  }
  var serializerDefault = function() {
    return JSON.stringify(arguments);
  };
  function ObjectWithoutPrototypeCache() {
    this.cache = /* @__PURE__ */ Object.create(null);
  }
  ObjectWithoutPrototypeCache.prototype.get = function(key) {
    return this.cache[key];
  };
  ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
    this.cache[key] = value;
  };
  var cacheDefault = {
    create: function create() {
      return new ObjectWithoutPrototypeCache();
    }
  };
  var strategies = {
    variadic: strategyVariadic,
    monadic: strategyMonadic
  };

  // ../../node_modules/intl-messageformat/lib/src/error.js
  var ErrorCode;
  (function(ErrorCode2) {
    ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
    ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
    ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
  })(ErrorCode || (ErrorCode = {}));
  var FormatError = function(_super) {
    __extends(FormatError2, _super);
    function FormatError2(msg, code, originalMessage) {
      var _this = _super.call(this, msg) || this;
      _this.code = code;
      _this.originalMessage = originalMessage;
      return _this;
    }
    FormatError2.prototype.toString = function() {
      return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
    };
    return FormatError2;
  }(Error);
  var InvalidValueError = function(_super) {
    __extends(InvalidValueError2, _super);
    function InvalidValueError2(variableId, value, options, originalMessage) {
      return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueError2;
  }(FormatError);
  var InvalidValueTypeError = function(_super) {
    __extends(InvalidValueTypeError2, _super);
    function InvalidValueTypeError2(value, type, originalMessage) {
      return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueTypeError2;
  }(FormatError);
  var MissingValueError = function(_super) {
    __extends(MissingValueError2, _super);
    function MissingValueError2(variableId, originalMessage) {
      return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
    }
    return MissingValueError2;
  }(FormatError);

  // ../../node_modules/intl-messageformat/lib/src/formatters.js
  var PART_TYPE;
  (function(PART_TYPE2) {
    PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
    PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
  })(PART_TYPE || (PART_TYPE = {}));
  function mergeLiteral(parts) {
    if (parts.length < 2) {
      return parts;
    }
    return parts.reduce(function(all, part) {
      var lastPart = all[all.length - 1];
      if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
        all.push(part);
      } else {
        lastPart.value += part.value;
      }
      return all;
    }, []);
  }
  function isFormatXMLElementFn(el) {
    return typeof el === "function";
  }
  function formatToParts(els, locales, formatters, formats, values2, currentPluralValue, originalMessage) {
    if (els.length === 1 && isLiteralElement(els[0])) {
      return [
        {
          type: PART_TYPE.literal,
          value: els[0].value
        }
      ];
    }
    var result = [];
    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
      var el = els_1[_i];
      if (isLiteralElement(el)) {
        result.push({
          type: PART_TYPE.literal,
          value: el.value
        });
        continue;
      }
      if (isPoundElement(el)) {
        if (typeof currentPluralValue === "number") {
          result.push({
            type: PART_TYPE.literal,
            value: formatters.getNumberFormat(locales).format(currentPluralValue)
          });
        }
        continue;
      }
      var varName = el.value;
      if (!(values2 && varName in values2)) {
        throw new MissingValueError(varName, originalMessage);
      }
      var value = values2[varName];
      if (isArgumentElement(el)) {
        if (!value || typeof value === "string" || typeof value === "number") {
          value = typeof value === "string" || typeof value === "number" ? String(value) : "";
        }
        result.push({
          type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
          value
        });
        continue;
      }
      if (isDateElement(el)) {
        var style2 = typeof el.style === "string" ? formats.date[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : void 0;
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getDateTimeFormat(locales, style2).format(value)
        });
        continue;
      }
      if (isTimeElement(el)) {
        var style2 = typeof el.style === "string" ? formats.time[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : formats.time.medium;
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getDateTimeFormat(locales, style2).format(value)
        });
        continue;
      }
      if (isNumberElement(el)) {
        var style2 = typeof el.style === "string" ? formats.number[el.style] : isNumberSkeleton(el.style) ? el.style.parsedOptions : void 0;
        if (style2 && style2.scale) {
          value = value * (style2.scale || 1);
        }
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getNumberFormat(locales, style2).format(value)
        });
        continue;
      }
      if (isTagElement(el)) {
        var children = el.children, value_1 = el.value;
        var formatFn = values2[value_1];
        if (!isFormatXMLElementFn(formatFn)) {
          throw new InvalidValueTypeError(value_1, "function", originalMessage);
        }
        var parts = formatToParts(children, locales, formatters, formats, values2, currentPluralValue);
        var chunks = formatFn(parts.map(function(p3) {
          return p3.value;
        }));
        if (!Array.isArray(chunks)) {
          chunks = [chunks];
        }
        result.push.apply(result, chunks.map(function(c3) {
          return {
            type: typeof c3 === "string" ? PART_TYPE.literal : PART_TYPE.object,
            value: c3
          };
        }));
      }
      if (isSelectElement(el)) {
        var opt = el.options[value] || el.options.other;
        if (!opt) {
          throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
        }
        result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values2));
        continue;
      }
      if (isPluralElement(el)) {
        var opt = el.options["=".concat(value)];
        if (!opt) {
          if (!Intl.PluralRules) {
            throw new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API, originalMessage);
          }
          var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
          opt = el.options[rule] || el.options.other;
        }
        if (!opt) {
          throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
        }
        result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values2, value - (el.offset || 0)));
        continue;
      }
    }
    return mergeLiteral(result);
  }

  // ../../node_modules/intl-messageformat/lib/src/core.js
  function mergeConfig(c1, c22) {
    if (!c22) {
      return c1;
    }
    return __assign(__assign(__assign({}, c1 || {}), c22 || {}), Object.keys(c1).reduce(function(all, k3) {
      all[k3] = __assign(__assign({}, c1[k3]), c22[k3] || {});
      return all;
    }, {}));
  }
  function mergeConfigs(defaultConfig, configs) {
    if (!configs) {
      return defaultConfig;
    }
    return Object.keys(defaultConfig).reduce(function(all, k3) {
      all[k3] = mergeConfig(defaultConfig[k3], configs[k3]);
      return all;
    }, __assign({}, defaultConfig));
  }
  function createFastMemoizeCache(store) {
    return {
      create: function() {
        return {
          get: function(key) {
            return store[key];
          },
          set: function(key, value) {
            store[key] = value;
          }
        };
      }
    };
  }
  function createDefaultFormatters(cache) {
    if (cache === void 0) {
      cache = {
        number: {},
        dateTime: {},
        pluralRules: {}
      };
    }
    return {
      getNumberFormat: memoize(function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new ((_a2 = Intl.NumberFormat).bind.apply(_a2, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache(cache.number),
        strategy: strategies.variadic
      }),
      getDateTimeFormat: memoize(function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new ((_a2 = Intl.DateTimeFormat).bind.apply(_a2, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache(cache.dateTime),
        strategy: strategies.variadic
      }),
      getPluralRules: memoize(function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new ((_a2 = Intl.PluralRules).bind.apply(_a2, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache(cache.pluralRules),
        strategy: strategies.variadic
      })
    };
  }
  var IntlMessageFormat = function() {
    function IntlMessageFormat2(message, locales, overrideFormats, opts) {
      var _this = this;
      if (locales === void 0) {
        locales = IntlMessageFormat2.defaultLocale;
      }
      this.formatterCache = {
        number: {},
        dateTime: {},
        pluralRules: {}
      };
      this.format = function(values2) {
        var parts = _this.formatToParts(values2);
        if (parts.length === 1) {
          return parts[0].value;
        }
        var result = parts.reduce(function(all, part) {
          if (!all.length || part.type !== PART_TYPE.literal || typeof all[all.length - 1] !== "string") {
            all.push(part.value);
          } else {
            all[all.length - 1] += part.value;
          }
          return all;
        }, []);
        if (result.length <= 1) {
          return result[0] || "";
        }
        return result;
      };
      this.formatToParts = function(values2) {
        return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values2, void 0, _this.message);
      };
      this.resolvedOptions = function() {
        var _a2;
        return {
          locale: ((_a2 = _this.resolvedLocale) === null || _a2 === void 0 ? void 0 : _a2.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
        };
      };
      this.getAst = function() {
        return _this.ast;
      };
      this.locales = locales;
      this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
      if (typeof message === "string") {
        this.message = message;
        if (!IntlMessageFormat2.__parse) {
          throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
        }
        this.ast = IntlMessageFormat2.__parse(message, {
          ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
          locale: this.resolvedLocale
        });
      } else {
        this.ast = message;
      }
      if (!Array.isArray(this.ast)) {
        throw new TypeError("A message must be provided as a String or AST.");
      }
      this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
      this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
    }
    Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
      get: function() {
        if (!IntlMessageFormat2.memoizedDefaultLocale) {
          IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
        }
        return IntlMessageFormat2.memoizedDefaultLocale;
      },
      enumerable: false,
      configurable: true
    });
    IntlMessageFormat2.memoizedDefaultLocale = null;
    IntlMessageFormat2.resolveLocale = function(locales) {
      if (typeof Intl.Locale === "undefined") {
        return;
      }
      var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
      if (supportedLocales.length > 0) {
        return new Intl.Locale(supportedLocales[0]);
      }
      return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
    };
    IntlMessageFormat2.__parse = parse;
    IntlMessageFormat2.formats = {
      number: {
        integer: {
          maximumFractionDigits: 0
        },
        currency: {
          style: "currency"
        },
        percent: {
          style: "percent"
        }
      },
      date: {
        short: {
          month: "numeric",
          day: "numeric",
          year: "2-digit"
        },
        medium: {
          month: "short",
          day: "numeric",
          year: "numeric"
        },
        long: {
          month: "long",
          day: "numeric",
          year: "numeric"
        },
        full: {
          weekday: "long",
          month: "long",
          day: "numeric",
          year: "numeric"
        }
      },
      time: {
        short: {
          hour: "numeric",
          minute: "numeric"
        },
        medium: {
          hour: "numeric",
          minute: "numeric",
          second: "numeric"
        },
        long: {
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          timeZoneName: "short"
        },
        full: {
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          timeZoneName: "short"
        }
      }
    };
    return IntlMessageFormat2;
  }();

  // ../../node_modules/@formatjs/intl/lib/src/error.js
  var IntlErrorCode;
  (function(IntlErrorCode2) {
    IntlErrorCode2["FORMAT_ERROR"] = "FORMAT_ERROR";
    IntlErrorCode2["UNSUPPORTED_FORMATTER"] = "UNSUPPORTED_FORMATTER";
    IntlErrorCode2["INVALID_CONFIG"] = "INVALID_CONFIG";
    IntlErrorCode2["MISSING_DATA"] = "MISSING_DATA";
    IntlErrorCode2["MISSING_TRANSLATION"] = "MISSING_TRANSLATION";
  })(IntlErrorCode || (IntlErrorCode = {}));
  var IntlError = function(_super) {
    __extends(IntlError2, _super);
    function IntlError2(code, message, exception) {
      var _this = this;
      var err = exception ? exception instanceof Error ? exception : new Error(String(exception)) : void 0;
      _this = _super.call(this, "[@formatjs/intl Error ".concat(code, "] ").concat(message, "\n").concat(err ? "\n".concat(err.message, "\n").concat(err.stack) : "")) || this;
      _this.code = code;
      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(_this, IntlError2);
      }
      return _this;
    }
    return IntlError2;
  }(Error);
  var UnsupportedFormatterError = function(_super) {
    __extends(UnsupportedFormatterError2, _super);
    function UnsupportedFormatterError2(message, exception) {
      return _super.call(this, IntlErrorCode.UNSUPPORTED_FORMATTER, message, exception) || this;
    }
    return UnsupportedFormatterError2;
  }(IntlError);
  var InvalidConfigError = function(_super) {
    __extends(InvalidConfigError2, _super);
    function InvalidConfigError2(message, exception) {
      return _super.call(this, IntlErrorCode.INVALID_CONFIG, message, exception) || this;
    }
    return InvalidConfigError2;
  }(IntlError);
  var MissingDataError = function(_super) {
    __extends(MissingDataError2, _super);
    function MissingDataError2(message, exception) {
      return _super.call(this, IntlErrorCode.MISSING_DATA, message, exception) || this;
    }
    return MissingDataError2;
  }(IntlError);
  var IntlFormatError = function(_super) {
    __extends(IntlFormatError2, _super);
    function IntlFormatError2(message, locale2, exception) {
      return _super.call(this, IntlErrorCode.FORMAT_ERROR, "".concat(message, "\nLocale: ").concat(locale2, "\n"), exception) || this;
    }
    return IntlFormatError2;
  }(IntlError);
  var MessageFormatError = function(_super) {
    __extends(MessageFormatError2, _super);
    function MessageFormatError2(message, locale2, descriptor, exception) {
      var _this = _super.call(this, "".concat(message, "\nMessageID: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.id, "\nDefault Message: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.defaultMessage, "\nDescription: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.description, "\n"), locale2, exception) || this;
      _this.descriptor = descriptor;
      return _this;
    }
    return MessageFormatError2;
  }(IntlFormatError);
  var MissingTranslationError = function(_super) {
    __extends(MissingTranslationError2, _super);
    function MissingTranslationError2(descriptor, locale2) {
      var _this = _super.call(this, IntlErrorCode.MISSING_TRANSLATION, 'Missing message: "'.concat(descriptor.id, '" for locale "').concat(locale2, '", using ').concat(descriptor.defaultMessage ? "default message (".concat(typeof descriptor.defaultMessage === "string" ? descriptor.defaultMessage : descriptor.defaultMessage.map(function(e2) {
        var _a2;
        return (_a2 = e2.value) !== null && _a2 !== void 0 ? _a2 : JSON.stringify(e2);
      }).join(), ")") : "id", " as fallback.")) || this;
      _this.descriptor = descriptor;
      return _this;
    }
    return MissingTranslationError2;
  }(IntlError);

  // ../../node_modules/@formatjs/intl/lib/src/utils.js
  function filterProps(props, allowlist, defaults2) {
    if (defaults2 === void 0) {
      defaults2 = {};
    }
    return allowlist.reduce(function(filtered, name) {
      if (name in props) {
        filtered[name] = props[name];
      } else if (name in defaults2) {
        filtered[name] = defaults2[name];
      }
      return filtered;
    }, {});
  }
  var defaultErrorHandler = function(error2) {
    if (true) {
      console.error(error2);
    }
  };
  var defaultWarnHandler = function(warning4) {
    if (true) {
      console.warn(warning4);
    }
  };
  var DEFAULT_INTL_CONFIG = {
    formats: {},
    messages: {},
    timeZone: void 0,
    defaultLocale: "en",
    defaultFormats: {},
    fallbackOnEmptyString: true,
    onError: defaultErrorHandler,
    onWarn: defaultWarnHandler
  };
  function createIntlCache() {
    return {
      dateTime: {},
      number: {},
      message: {},
      relativeTime: {},
      pluralRules: {},
      list: {},
      displayNames: {}
    };
  }
  function createFastMemoizeCache2(store) {
    return {
      create: function() {
        return {
          get: function(key) {
            return store[key];
          },
          set: function(key, value) {
            store[key] = value;
          }
        };
      }
    };
  }
  function createFormatters(cache) {
    if (cache === void 0) {
      cache = createIntlCache();
    }
    var RelativeTimeFormat = Intl.RelativeTimeFormat;
    var ListFormat = Intl.ListFormat;
    var DisplayNames = Intl.DisplayNames;
    var getDateTimeFormat = memoize(function() {
      var _a2;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a2 = Intl.DateTimeFormat).bind.apply(_a2, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.dateTime),
      strategy: strategies.variadic
    });
    var getNumberFormat = memoize(function() {
      var _a2;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a2 = Intl.NumberFormat).bind.apply(_a2, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.number),
      strategy: strategies.variadic
    });
    var getPluralRules = memoize(function() {
      var _a2;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a2 = Intl.PluralRules).bind.apply(_a2, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.pluralRules),
      strategy: strategies.variadic
    });
    return {
      getDateTimeFormat,
      getNumberFormat,
      getMessageFormat: memoize(function(message, locales, overrideFormats, opts) {
        return new IntlMessageFormat(message, locales, overrideFormats, __assign({ formatters: {
          getNumberFormat,
          getDateTimeFormat,
          getPluralRules
        } }, opts || {}));
      }, {
        cache: createFastMemoizeCache2(cache.message),
        strategy: strategies.variadic
      }),
      getRelativeTimeFormat: memoize(function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new (RelativeTimeFormat.bind.apply(RelativeTimeFormat, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache2(cache.relativeTime),
        strategy: strategies.variadic
      }),
      getPluralRules,
      getListFormat: memoize(function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new (ListFormat.bind.apply(ListFormat, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache2(cache.list),
        strategy: strategies.variadic
      }),
      getDisplayNames: memoize(function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new (DisplayNames.bind.apply(DisplayNames, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache2(cache.displayNames),
        strategy: strategies.variadic
      })
    };
  }
  function getNamedFormat(formats, type, name, onError) {
    var formatType = formats && formats[type];
    var format2;
    if (formatType) {
      format2 = formatType[name];
    }
    if (format2) {
      return format2;
    }
    onError(new UnsupportedFormatterError("No ".concat(type, " format named: ").concat(name)));
  }

  // ../../node_modules/@formatjs/intl/lib/src/message.js
  function setTimeZoneInOptions(opts, timeZone) {
    return Object.keys(opts).reduce(function(all, k3) {
      all[k3] = __assign({ timeZone }, opts[k3]);
      return all;
    }, {});
  }
  function deepMergeOptions(opts1, opts2) {
    var keys = Object.keys(__assign(__assign({}, opts1), opts2));
    return keys.reduce(function(all, k3) {
      all[k3] = __assign(__assign({}, opts1[k3] || {}), opts2[k3] || {});
      return all;
    }, {});
  }
  function deepMergeFormatsAndSetTimeZone(f1, timeZone) {
    if (!timeZone) {
      return f1;
    }
    var mfFormats = IntlMessageFormat.formats;
    return __assign(__assign(__assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });
  }
  var formatMessage = function(_a2, state, messageDescriptor, values2, opts) {
    var locale2 = _a2.locale, formats = _a2.formats, messages2 = _a2.messages, defaultLocale = _a2.defaultLocale, defaultFormats = _a2.defaultFormats, fallbackOnEmptyString = _a2.fallbackOnEmptyString, onError = _a2.onError, timeZone = _a2.timeZone, defaultRichTextElements = _a2.defaultRichTextElements;
    if (messageDescriptor === void 0) {
      messageDescriptor = { id: "" };
    }
    var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;
    invariant(!!msgId, "[@formatjs/intl] An `id` must be provided to format a message. You can either:\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\nto autofix this issue");
    var id = String(msgId);
    var message = messages2 && Object.prototype.hasOwnProperty.call(messages2, id) && messages2[id];
    if (Array.isArray(message) && message.length === 1 && message[0].type === TYPE.literal) {
      return message[0].value;
    }
    if (!values2 && message && typeof message === "string" && !defaultRichTextElements) {
      return message.replace(/'\{(.*?)\}'/gi, "{$1}");
    }
    values2 = __assign(__assign({}, defaultRichTextElements), values2 || {});
    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);
    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);
    if (!message) {
      if (fallbackOnEmptyString === false && message === "") {
        return message;
      }
      if (!defaultMessage || locale2 && locale2.toLowerCase() !== defaultLocale.toLowerCase()) {
        onError(new MissingTranslationError(messageDescriptor, locale2));
      }
      if (defaultMessage) {
        try {
          var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
          return formatter.format(values2);
        } catch (e2) {
          onError(new MessageFormatError('Error formatting default message for: "'.concat(id, '", rendering default message verbatim'), locale2, messageDescriptor, e2));
          return typeof defaultMessage === "string" ? defaultMessage : id;
        }
      }
      return id;
    }
    try {
      var formatter = state.getMessageFormat(message, locale2, formats, __assign({ formatters: state }, opts || {}));
      return formatter.format(values2);
    } catch (e2) {
      onError(new MessageFormatError('Error formatting message: "'.concat(id, '", using ').concat(defaultMessage ? "default message" : "id", " as fallback."), locale2, messageDescriptor, e2));
    }
    if (defaultMessage) {
      try {
        var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
        return formatter.format(values2);
      } catch (e2) {
        onError(new MessageFormatError('Error formatting the default message for: "'.concat(id, '", rendering message verbatim'), locale2, messageDescriptor, e2));
      }
    }
    if (typeof message === "string") {
      return message;
    }
    if (typeof defaultMessage === "string") {
      return defaultMessage;
    }
    return id;
  };

  // ../../node_modules/@formatjs/intl/lib/src/dateTime.js
  var DATE_TIME_FORMAT_OPTIONS = [
    "formatMatcher",
    "timeZone",
    "hour12",
    "weekday",
    "era",
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "timeZoneName",
    "hourCycle",
    "dateStyle",
    "timeStyle",
    "calendar",
    "numberingSystem",
    "fractionalSecondDigits"
  ];
  function getFormatter(_a2, type, getDateTimeFormat, options) {
    var locale2 = _a2.locale, formats = _a2.formats, onError = _a2.onError, timeZone = _a2.timeZone;
    if (options === void 0) {
      options = {};
    }
    var format2 = options.format;
    var defaults2 = __assign(__assign({}, timeZone && { timeZone }), format2 && getNamedFormat(formats, type, format2, onError));
    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults2);
    if (type === "time" && !filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second && !filteredOptions.timeStyle && !filteredOptions.dateStyle) {
      filteredOptions = __assign(__assign({}, filteredOptions), { hour: "numeric", minute: "numeric" });
    }
    return getDateTimeFormat(locale2, filteredOptions);
  }
  function formatDate(config2, getDateTimeFormat) {
    var _a2 = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      _a2[_i - 2] = arguments[_i];
    }
    var value = _a2[0], _b = _a2[1], options = _b === void 0 ? {} : _b;
    var date = typeof value === "string" ? new Date(value || 0) : value;
    try {
      return getFormatter(config2, "date", getDateTimeFormat, options).format(date);
    } catch (e2) {
      config2.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting date.", e2));
    }
    return String(date);
  }
  function formatTime(config2, getDateTimeFormat) {
    var _a2 = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      _a2[_i - 2] = arguments[_i];
    }
    var value = _a2[0], _b = _a2[1], options = _b === void 0 ? {} : _b;
    var date = typeof value === "string" ? new Date(value || 0) : value;
    try {
      return getFormatter(config2, "time", getDateTimeFormat, options).format(date);
    } catch (e2) {
      config2.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting time.", e2));
    }
    return String(date);
  }
  function formatDateTimeRange(config2, getDateTimeFormat) {
    var _a2 = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      _a2[_i - 2] = arguments[_i];
    }
    var from = _a2[0], to = _a2[1], _b = _a2[2], options = _b === void 0 ? {} : _b;
    var timeZone = config2.timeZone, locale2 = config2.locale, onError = config2.onError;
    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, timeZone ? { timeZone } : {});
    try {
      return getDateTimeFormat(locale2, filteredOptions).formatRange(from, to);
    } catch (e2) {
      onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting date time range.", e2));
    }
    return String(from);
  }
  function formatDateToParts(config2, getDateTimeFormat) {
    var _a2 = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      _a2[_i - 2] = arguments[_i];
    }
    var value = _a2[0], _b = _a2[1], options = _b === void 0 ? {} : _b;
    var date = typeof value === "string" ? new Date(value || 0) : value;
    try {
      return getFormatter(config2, "date", getDateTimeFormat, options).formatToParts(date);
    } catch (e2) {
      config2.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting date.", e2));
    }
    return [];
  }
  function formatTimeToParts(config2, getDateTimeFormat) {
    var _a2 = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      _a2[_i - 2] = arguments[_i];
    }
    var value = _a2[0], _b = _a2[1], options = _b === void 0 ? {} : _b;
    var date = typeof value === "string" ? new Date(value || 0) : value;
    try {
      return getFormatter(config2, "time", getDateTimeFormat, options).formatToParts(date);
    } catch (e2) {
      config2.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting time.", e2));
    }
    return [];
  }

  // ../../node_modules/@formatjs/intl/lib/src/displayName.js
  var DISPLAY_NAMES_OPTONS = [
    "style",
    "type",
    "fallback"
  ];
  function formatDisplayName(_a2, getDisplayNames, value, options) {
    var locale2 = _a2.locale, onError = _a2.onError;
    var DisplayNames = Intl.DisplayNames;
    if (!DisplayNames) {
      onError(new FormatError('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n', ErrorCode.MISSING_INTL_API));
    }
    var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);
    try {
      return getDisplayNames(locale2, filteredOptions).of(value);
    } catch (e2) {
      onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting display name.", e2));
    }
  }

  // ../../node_modules/@formatjs/intl/lib/src/list.js
  var LIST_FORMAT_OPTIONS = [
    "type",
    "style"
  ];
  var now = Date.now();
  function generateToken(i3) {
    return "".concat(now, "_").concat(i3, "_").concat(now);
  }
  function formatList(opts, getListFormat, values2, options) {
    if (options === void 0) {
      options = {};
    }
    var results = formatListToParts(opts, getListFormat, values2, options).reduce(function(all, el) {
      var val = el.value;
      if (typeof val !== "string") {
        all.push(val);
      } else if (typeof all[all.length - 1] === "string") {
        all[all.length - 1] += val;
      } else {
        all.push(val);
      }
      return all;
    }, []);
    return results.length === 1 ? results[0] : results;
  }
  function formatListToParts(_a2, getListFormat, values2, options) {
    var locale2 = _a2.locale, onError = _a2.onError;
    if (options === void 0) {
      options = {};
    }
    var ListFormat = Intl.ListFormat;
    if (!ListFormat) {
      onError(new FormatError('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n', ErrorCode.MISSING_INTL_API));
    }
    var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);
    try {
      var richValues_1 = {};
      var serializedValues = values2.map(function(v3, i3) {
        if (typeof v3 === "object") {
          var id = generateToken(i3);
          richValues_1[id] = v3;
          return id;
        }
        return String(v3);
      });
      return getListFormat(locale2, filteredOptions).formatToParts(serializedValues).map(function(part) {
        return part.type === "literal" ? part : __assign(__assign({}, part), { value: richValues_1[part.value] || part.value });
      });
    } catch (e2) {
      onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting list.", e2));
    }
    return values2;
  }

  // ../../node_modules/@formatjs/intl/lib/src/plural.js
  var PLURAL_FORMAT_OPTIONS = ["type"];
  function formatPlural(_a2, getPluralRules, value, options) {
    var locale2 = _a2.locale, onError = _a2.onError;
    if (options === void 0) {
      options = {};
    }
    if (!Intl.PluralRules) {
      onError(new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API));
    }
    var filteredOptions = filterProps(options, PLURAL_FORMAT_OPTIONS);
    try {
      return getPluralRules(locale2, filteredOptions).select(value);
    } catch (e2) {
      onError(new IntlFormatError("Error formatting plural.", locale2, e2));
    }
    return "other";
  }

  // ../../node_modules/@formatjs/intl/lib/src/relativeTime.js
  var RELATIVE_TIME_FORMAT_OPTIONS = ["numeric", "style"];
  function getFormatter2(_a2, getRelativeTimeFormat, options) {
    var locale2 = _a2.locale, formats = _a2.formats, onError = _a2.onError;
    if (options === void 0) {
      options = {};
    }
    var format2 = options.format;
    var defaults2 = !!format2 && getNamedFormat(formats, "relative", format2, onError) || {};
    var filteredOptions = filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults2);
    return getRelativeTimeFormat(locale2, filteredOptions);
  }
  function formatRelativeTime(config2, getRelativeTimeFormat, value, unit, options) {
    if (options === void 0) {
      options = {};
    }
    if (!unit) {
      unit = "second";
    }
    var RelativeTimeFormat = Intl.RelativeTimeFormat;
    if (!RelativeTimeFormat) {
      config2.onError(new FormatError('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n', ErrorCode.MISSING_INTL_API));
    }
    try {
      return getFormatter2(config2, getRelativeTimeFormat, options).format(value, unit);
    } catch (e2) {
      config2.onError(new IntlFormatError("Error formatting relative time.", config2.locale, e2));
    }
    return String(value);
  }

  // ../../node_modules/@formatjs/intl/lib/src/number.js
  var NUMBER_FORMAT_OPTIONS = [
    "style",
    "currency",
    "currencyDisplay",
    "unit",
    "unitDisplay",
    "useGrouping",
    "minimumIntegerDigits",
    "minimumFractionDigits",
    "maximumFractionDigits",
    "minimumSignificantDigits",
    "maximumSignificantDigits",
    "compactDisplay",
    "currencyDisplay",
    "currencySign",
    "notation",
    "signDisplay",
    "unit",
    "unitDisplay",
    "numberingSystem"
  ];
  function getFormatter3(_a2, getNumberFormat, options) {
    var locale2 = _a2.locale, formats = _a2.formats, onError = _a2.onError;
    if (options === void 0) {
      options = {};
    }
    var format2 = options.format;
    var defaults2 = format2 && getNamedFormat(formats, "number", format2, onError) || {};
    var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults2);
    return getNumberFormat(locale2, filteredOptions);
  }
  function formatNumber(config2, getNumberFormat, value, options) {
    if (options === void 0) {
      options = {};
    }
    try {
      return getFormatter3(config2, getNumberFormat, options).format(value);
    } catch (e2) {
      config2.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting number.", e2));
    }
    return String(value);
  }
  function formatNumberToParts(config2, getNumberFormat, value, options) {
    if (options === void 0) {
      options = {};
    }
    try {
      return getFormatter3(config2, getNumberFormat, options).formatToParts(value);
    } catch (e2) {
      config2.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting number.", e2));
    }
    return [];
  }

  // ../../node_modules/@formatjs/intl/lib/src/create-intl.js
  function messagesContainString(messages2) {
    var firstMessage = messages2 ? messages2[Object.keys(messages2)[0]] : void 0;
    return typeof firstMessage === "string";
  }
  function verifyConfigMessages(config2) {
    if (config2.onWarn && config2.defaultRichTextElements && messagesContainString(config2.messages || {})) {
      config2.onWarn('[@formatjs/intl] "defaultRichTextElements" was specified but "message" was not pre-compiled. \nPlease consider using "@formatjs/cli" to pre-compile your messages for performance.\nFor more details see https://formatjs.io/docs/getting-started/message-distribution');
    }
  }
  function createIntl(config2, cache) {
    var formatters = createFormatters(cache);
    var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config2);
    var locale2 = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;
    if (!locale2) {
      if (onError) {
        onError(new InvalidConfigError('"locale" was not configured, using "'.concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details')));
      }
      resolvedConfig.locale = resolvedConfig.defaultLocale || "en";
    } else if (!Intl.NumberFormat.supportedLocalesOf(locale2).length && onError) {
      onError(new MissingDataError('Missing locale data for locale: "'.concat(locale2, '" in Intl.NumberFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
    } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale2).length && onError) {
      onError(new MissingDataError('Missing locale data for locale: "'.concat(locale2, '" in Intl.DateTimeFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
    }
    verifyConfigMessages(resolvedConfig);
    return __assign(__assign({}, resolvedConfig), { formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: formatMessage.bind(null, resolvedConfig, formatters), $t: formatMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat), formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });
  }

  // ../../node_modules/react-intl/lib/src/utils.js
  function invariantIntlContext(intl) {
    invariant(intl, "[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry.");
  }
  var DEFAULT_INTL_CONFIG2 = __assign(__assign({}, DEFAULT_INTL_CONFIG), { textComponent: React7.Fragment });
  function assignUniqueKeysToParts(formatXMLElementFn) {
    return function(parts) {
      return formatXMLElementFn(React7.Children.toArray(parts));
    };
  }
  function shallowEqual(objA, objB) {
    if (objA === objB) {
      return true;
    }
    if (!objA || !objB) {
      return false;
    }
    var aKeys = Object.keys(objA);
    var bKeys = Object.keys(objB);
    var len = aKeys.length;
    if (bKeys.length !== len) {
      return false;
    }
    for (var i3 = 0; i3 < len; i3++) {
      var key = aKeys[i3];
      if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
        return false;
      }
    }
    return true;
  }

  // ../../node_modules/react-intl/lib/src/components/injectIntl.js
  var IntlContext = React8.createContext(null);
  var IntlConsumer = IntlContext.Consumer;
  var IntlProvider = IntlContext.Provider;
  var Provider = IntlProvider;
  var Context = IntlContext;

  // ../../node_modules/react-intl/lib/src/components/useIntl.js
  function useIntl() {
    var intl = React9.useContext(Context);
    invariantIntlContext(intl);
    return intl;
  }

  // ../../node_modules/react-intl/lib/src/components/createFormattedComponent.js
  var DisplayName;
  (function(DisplayName2) {
    DisplayName2["formatDate"] = "FormattedDate";
    DisplayName2["formatTime"] = "FormattedTime";
    DisplayName2["formatNumber"] = "FormattedNumber";
    DisplayName2["formatList"] = "FormattedList";
    DisplayName2["formatDisplayName"] = "FormattedDisplayName";
  })(DisplayName || (DisplayName = {}));
  var DisplayNameParts;
  (function(DisplayNameParts2) {
    DisplayNameParts2["formatDate"] = "FormattedDateParts";
    DisplayNameParts2["formatTime"] = "FormattedTimeParts";
    DisplayNameParts2["formatNumber"] = "FormattedNumberParts";
    DisplayNameParts2["formatList"] = "FormattedListParts";
  })(DisplayNameParts || (DisplayNameParts = {}));
  var FormattedNumberParts = function(props) {
    var intl = useIntl();
    var value = props.value, children = props.children, formatProps = __rest(props, ["value", "children"]);
    return children(intl.formatNumberToParts(value, formatProps));
  };
  FormattedNumberParts.displayName = "FormattedNumberParts";
  FormattedNumberParts.displayName = "FormattedNumberParts";
  function createFormattedDateTimePartsComponent(name) {
    var ComponentParts = function(props) {
      var intl = useIntl();
      var value = props.value, children = props.children, formatProps = __rest(props, ["value", "children"]);
      var date = typeof value === "string" ? new Date(value || 0) : value;
      var formattedParts = name === "formatDate" ? intl.formatDateToParts(date, formatProps) : intl.formatTimeToParts(date, formatProps);
      return children(formattedParts);
    };
    ComponentParts.displayName = DisplayNameParts[name];
    return ComponentParts;
  }
  function createFormattedComponent(name) {
    var Component2 = function(props) {
      var intl = useIntl();
      var value = props.value, children = props.children, formatProps = __rest(
        props,
        ["value", "children"]
      );
      var formattedValue = intl[name](value, formatProps);
      if (typeof children === "function") {
        return children(formattedValue);
      }
      var Text2 = intl.textComponent || React10.Fragment;
      return React10.createElement(Text2, null, formattedValue);
    };
    Component2.displayName = DisplayName[name];
    return Component2;
  }

  // ../../node_modules/react-intl/lib/src/components/provider.js
  var React11 = __toESM(require_react());
  function processIntlConfig(config2) {
    return {
      locale: config2.locale,
      timeZone: config2.timeZone,
      fallbackOnEmptyString: config2.fallbackOnEmptyString,
      formats: config2.formats,
      textComponent: config2.textComponent,
      messages: config2.messages,
      defaultLocale: config2.defaultLocale,
      defaultFormats: config2.defaultFormats,
      onError: config2.onError,
      onWarn: config2.onWarn,
      wrapRichTextChunksInFragment: config2.wrapRichTextChunksInFragment,
      defaultRichTextElements: config2.defaultRichTextElements
    };
  }
  function assignUniqueKeysToFormatXMLElementFnArgument(values2) {
    if (!values2) {
      return values2;
    }
    return Object.keys(values2).reduce(function(acc, k3) {
      var v3 = values2[k3];
      acc[k3] = isFormatXMLElementFn(v3) ? assignUniqueKeysToParts(v3) : v3;
      return acc;
    }, {});
  }
  var formatMessage2 = function(config2, formatters, descriptor, rawValues) {
    var rest = [];
    for (var _i = 4; _i < arguments.length; _i++) {
      rest[_i - 4] = arguments[_i];
    }
    var values2 = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);
    var chunks = formatMessage.apply(void 0, __spreadArray([
      config2,
      formatters,
      descriptor,
      values2
    ], rest, false));
    if (Array.isArray(chunks)) {
      return React11.Children.toArray(chunks);
    }
    return chunks;
  };
  var createIntl2 = function(_a2, cache) {
    var rawDefaultRichTextElements = _a2.defaultRichTextElements, config2 = __rest(_a2, ["defaultRichTextElements"]);
    var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);
    var coreIntl = createIntl(__assign(__assign(__assign({}, DEFAULT_INTL_CONFIG2), config2), { defaultRichTextElements }), cache);
    var resolvedConfig = {
      locale: coreIntl.locale,
      timeZone: coreIntl.timeZone,
      fallbackOnEmptyString: coreIntl.fallbackOnEmptyString,
      formats: coreIntl.formats,
      defaultLocale: coreIntl.defaultLocale,
      defaultFormats: coreIntl.defaultFormats,
      messages: coreIntl.messages,
      onError: coreIntl.onError,
      defaultRichTextElements
    };
    return __assign(__assign({}, coreIntl), { formatMessage: formatMessage2.bind(null, resolvedConfig, coreIntl.formatters), $t: formatMessage2.bind(null, resolvedConfig, coreIntl.formatters) });
  };
  var IntlProvider2 = function(_super) {
    __extends(IntlProvider3, _super);
    function IntlProvider3() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.cache = createIntlCache();
      _this.state = {
        cache: _this.cache,
        intl: createIntl2(processIntlConfig(_this.props), _this.cache),
        prevConfig: processIntlConfig(_this.props)
      };
      return _this;
    }
    IntlProvider3.getDerivedStateFromProps = function(props, _a2) {
      var prevConfig = _a2.prevConfig, cache = _a2.cache;
      var config2 = processIntlConfig(props);
      if (!shallowEqual(prevConfig, config2)) {
        return {
          intl: createIntl2(config2, cache),
          prevConfig: config2
        };
      }
      return null;
    };
    IntlProvider3.prototype.render = function() {
      invariantIntlContext(this.state.intl);
      return React11.createElement(Provider, { value: this.state.intl }, this.props.children);
    };
    IntlProvider3.displayName = "IntlProvider";
    IntlProvider3.defaultProps = DEFAULT_INTL_CONFIG2;
    return IntlProvider3;
  }(React11.PureComponent);
  var provider_default = IntlProvider2;

  // ../../node_modules/react-intl/lib/index.js
  var FormattedDate = createFormattedComponent("formatDate");
  var FormattedTime = createFormattedComponent("formatTime");
  var FormattedNumber = createFormattedComponent("formatNumber");
  var FormattedList = createFormattedComponent("formatList");
  var FormattedDisplayName = createFormattedComponent("formatDisplayName");
  var FormattedDateParts = createFormattedDateTimePartsComponent("formatDate");
  var FormattedTimeParts = createFormattedDateTimePartsComponent("formatTime");

  // ../fetcher/dist/index.mjs
  var import_axios = __toESM(require_axios2(), 1);
  var instance = import_axios.default.create();
  var queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        suspense: true,
        refetchOnWindowFocus: false,
        cacheTime: Infinity
      }
    }
  });
  async function fetcher(url, config2 = {}) {
    try {
      const response = await instance({
        url,
        withCredentials: true,
        ...config2
      });
      return response.data;
    } catch (error2) {
      throw Error(error2);
    }
  }

  // src/utils/queries.tsx
  function BlocksProvider({ children, api }) {
    const [initialized, setInitialized] = (0, import_react9.useState)(false);
    (0, import_react9.useEffect)(() => {
      instance.defaults.baseURL = api;
      setInitialized(true);
    }, [api]);
    if (!initialized) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(QueryClientProvider, {
      client: queryClient
    }, children);
  }
  function useGroups(options) {
    const { currentLocale } = (0, import_react9.useContext)(LocaleContext);
    return useQuery(
      ["block_group", options],
      () => fetcher(`/block_group/list`, {
        method: "GET",
        params: {
          limit: options?.limit || 10,
          offset: options?.offset || 0,
          locale: currentLocale
        }
      }),
      {
        keepPreviousData: true
      }
    );
  }
  function useGroup(id) {
    const { groupId: contextGroupId } = (0, import_react9.useContext)(BlocksGroupContext);
    const { currentLocale } = (0, import_react9.useContext)(LocaleContext);
    const groupId = id || contextGroupId;
    const key = ["block_group", groupId, currentLocale];
    const queryClient2 = useQueryClient();
    const query = useQuery(
      key,
      async () => {
        const data = await fetcher(`/block_group`, {
          method: "GET",
          params: {
            id: groupId,
            locale: currentLocale,
            disable_shortcode: 1
          }
        });
        return data;
      },
      {
        enabled: !!groupId,
        staleTime: 0,
        cacheTime: Infinity,
        initialData: void 0
      }
    );
    return {
      ...query,
      editGroup: (data) => {
        queryClient2.setQueryData(key, () => {
          return data;
        });
      }
    };
  }
  function useCreateOrUpdateGroup() {
    const {
      groupId: contextGroupId,
      itemId: contextItemId,
      itemType: contextItemType,
      noRedirect = false
    } = (0, import_react9.useContext)(BlocksGroupContext);
    const intl = useIntl();
    const { currentLocale } = (0, import_react9.useContext)(LocaleContext);
    const { group: contextGroup } = (0, import_react9.useContext)(BlocksGroupContext);
    return useMutation(
      ({
        groupId = contextGroupId,
        itemId = contextItemId,
        itemType = contextItemType,
        group = contextGroup,
        blocks
      }) => {
        const { itemBlockGroups = {}, ...groupOmitItemBlockGroups } = group;
        const data = {
          blockGroup: {
            ...groupOmitItemBlockGroups,
            visible: true,
            jsonContent: JSON.stringify(blocks)
          },
          locale: currentLocale
        };
        if (itemId || itemType) {
          data.itemBlockGroup = {
            itemType,
            itemId,
            blockGroupId: group.id
          };
        }
        if (!data.blockGroup.slug) {
          data.blockGroup.slug = null;
        }
        return fetcher(`/block_group`, {
          method: groupId ? "PATCH" : "POST",
          data
        });
      },
      {
        onSuccess: (data) => {
          Et.success(intl.formatMessage({ id: "Toast__BLOCK_SAVED" }));
          if (noRedirect) {
            window.location.reload();
            return;
          }
          window.location.replace(`/admin/TheliaBlocks/${data.id}`);
        },
        onError: () => {
          Et.error(intl.formatMessage({ id: "Toast__BLOCK_NOT_SAVED" }));
        }
      }
    );
  }
  function useDeleteGroup() {
    const queryClient2 = useQueryClient();
    const { groupId: contextGroupId } = (0, import_react9.useContext)(BlocksGroupContext);
    const intl = useIntl();
    return useMutation(
      (id) => {
        if (!id && !contextGroupId) {
          throw new Error(
            "id is mandatory, and no fallback groupId was found in current context"
          );
        }
        return fetcher(`/block_group/${id || contextGroupId}`, {
          method: "DELETE"
        });
      },
      {
        onSuccess: () => {
          queryClient2.invalidateQueries(["block_group"]);
          Et.success(intl.formatMessage({ id: "Toast__BLOCK_DELETED" }));
        },
        onError: () => {
          Et.error(intl.formatMessage({ id: "Toast__BLOCK_NOT_DELETED" }));
        }
      }
    );
  }
  function useDuplicateGroup() {
    const { groupId } = (0, import_react9.useContext)(BlocksGroupContext);
    return useMutation(
      (id) => {
        if (!id && !groupId) {
          throw new Error(
            "id is mandatory, and no fallback groupId was found in current context"
          );
        }
        return fetcher(`/block_group/duplicate/${id}`, {
          method: "POST"
        });
      },
      {
        onSuccess: (newGroupId) => {
          window.location.replace(`/admin/TheliaBlocks/${newGroupId}`);
        }
      }
    );
  }
  function useLinkContentToGroup() {
    const {
      groupId,
      setGroupId,
      itemId: contextItemId,
      itemType: contextItemType
    } = (0, import_react9.useContext)(BlocksGroupContext);
    const { currentLocale } = (0, import_react9.useContext)(LocaleContext);
    const intl = useIntl();
    const queryClient2 = useQueryClient();
    return useMutation(
      ({ id, itemId, itemType }) => fetcher(`/item_block_group`, {
        method: "POST",
        data: {
          itemBlockGroup: {
            blockGroupId: id || groupId,
            itemId: itemId || contextItemId,
            itemType: itemType || contextItemType
          }
        }
      }),
      {
        onSuccess: (data) => {
          Et.success(intl.formatMessage({ id: "Toast__ITEM_BLOCK_GROUP_LINKED" }));
          setGroupId(data.id);
          queryClient2.setQueryData(["block_group", data.id, currentLocale], data);
        }
      }
    );
  }
  function useUnlinkContentFromGroup() {
    const { resetContext } = (0, import_react9.useContext)(BlocksGroupContext);
    const { resetBlocks } = useBlocksContext();
    const intl = useIntl();
    return useMutation(
      ({ id }) => fetcher(`/item_block_group/${id}`, {
        method: "DELETE"
      }),
      {
        onSuccess: () => {
          Et.success(intl.formatMessage({ id: "Toast__ITEM_BLOCK_GROUP_UNLINKED" }));
          resetBlocks();
          resetContext();
        }
      }
    );
  }
  function usePreviewGroup(timestamp, data) {
    const { currentLocale } = (0, import_react9.useContext)(LocaleContext);
    const intl = useIntl();
    const key = ["preview_block_group", currentLocale, timestamp];
    const query = useQuery(
      key,
      async () => {
        return fetcher(`/preview`, {
          baseURL: window.location.origin + "/TheliaBlocks",
          method: "POST",
          data: {
            json: data
          }
        });
      },
      {
        enabled: !!timestamp && !!currentLocale,
        cacheTime: Infinity,
        refetchOnMount: false,
        refetchOnReconnect: false,
        retry: false,
        suspense: false,
        onError: (error2) => {
          Et.error(intl.formatMessage({ id: "Toast__TOOLBAR_PREVIEW_ERROR" }));
        }
      }
    );
    return query;
  }
  function useProductsBy({ type, value = null }) {
    let params = {
      id: null,
      ids: null,
      reference: null,
      title: null
    };
    params[type] = value;
    return useQuery(
      ["Products", type, value],
      () => fetcher(`/product/search`, {
        method: "GET",
        params
      }),
      {
        enabled: !!value
      }
    );
  }
  function useSearchBy({ searchIn, type = "title", value = null }) {
    let params = {
      id: null,
      ids: null,
      reference: null,
      title: null
    };
    params[type] = value;
    return useQuery(
      ["Search", value],
      () => fetcher(`/${searchIn}/search`, {
        method: "GET",
        params
      }),
      {
        enabled: !!value
      }
    );
  }

  // src/providers/BlockGroupContext.tsx
  var BlocksGroupContext = (0, import_react10.createContext)({
    group: void 0,
    editGroup: () => {
    },
    noRedirect: false,
    setGroupId: () => {
    },
    resetContext: () => {
    }
  });
  var BlocksGroupProvider = ({
    groupId: propsGroupId,
    itemType,
    itemId,
    children,
    noRedirect
  }) => {
    const [groupId, setGroupId] = (0, import_react10.useState)(propsGroupId);
    const { data: group, editGroup } = useGroup(groupId);
    const queryClient2 = useQueryClient();
    const resetContext = () => {
      setGroupId(void 0);
      queryClient2.resetQueries("block_group");
    };
    return /* @__PURE__ */ React.createElement(BlocksGroupContext.Provider, {
      value: {
        group,
        editGroup,
        groupId,
        setGroupId,
        itemType,
        itemId,
        noRedirect,
        resetContext
      }
    }, children);
  };

  // src/providers/BlockContext.tsx
  var BlockContext = (0, import_react11.createContext)({ blocks: [], setBlocks: () => [] });
  var BlockContextProvider = ({
    children,
    defaultBlocks,
    root = false
  }) => {
    const [blocks, setBlocks] = (0, import_react11.useState)(defaultBlocks || []);
    const { group } = (0, import_react11.useContext)(BlocksGroupContext);
    (0, import_react11.useEffect)(() => {
      if (root && group?.jsonContent) {
        setBlocks(JSON.parse(group?.jsonContent));
      }
    }, [group?.jsonContent, root]);
    return /* @__PURE__ */ React.createElement(BlockContext.Provider, {
      value: { blocks, setBlocks }
    }, children);
  };

  // src/utils/array.ts
  var reorder = (list, startIndex, endIndex) => {
    const result = Array.from(list);
    const [removed] = result.splice(startIndex, 1);
    result.splice(endIndex, 0, removed);
    return result;
  };

  // src/hooks/useBlockContext.tsx
  var useBlocksContext = () => {
    const { blocks, setBlocks } = (0, import_react12.useContext)(BlockContext);
    const findBlockIndex = (0, import_react12.useCallback)(
      (blockId) => blocks.findIndex((block) => block.id === blockId),
      []
    );
    const addBlock = (0, import_react12.useCallback)((newBlock) => {
      setBlocks((blocks2) => [...blocks2, newBlock]);
    }, []);
    const removeBlock = (0, import_react12.useCallback)((blockId) => {
      setBlocks((blocks2) => blocks2.filter((block) => block.id !== blockId));
    }, []);
    const updateBlock = (0, import_react12.useCallback)((blockId, data) => {
      setBlocks(
        (blocks2) => blocks2.map((block) => block.id === blockId ? { ...block, data } : block)
      );
    }, []);
    const moveBlockUp = (0, import_react12.useCallback)((blockIndex) => {
      if (blockIndex !== -1 && blockIndex !== 0) {
        setBlocks((blocks2) => [...reorder(blocks2, blockIndex, blockIndex - 1)]);
      }
    }, []);
    const moveBlockDown = (0, import_react12.useCallback)((blockIndex) => {
      if (blockIndex !== -1 && blockIndex < blocks.length) {
        setBlocks((blocks2) => [...reorder(blocks2, blockIndex, blockIndex + 1)]);
      }
    }, []);
    const moveBlockTo = (0, import_react12.useCallback)((blockIndex, to) => {
      if (typeof to === "number" && to <= blocks.length) {
        setBlocks((blocks2) => [...reorder(blocks2, blockIndex, to)]);
      }
    }, []);
    const resetBlocks = (0, import_react12.useCallback)(() => {
      setBlocks([]);
    }, []);
    return {
      addBlock,
      removeBlock,
      updateBlock,
      moveBlockUp,
      moveBlockDown,
      moveBlockTo,
      findBlockIndex,
      blockList: blocks,
      resetBlocks
    };
  };

  // src/hooks/usePlugins.tsx
  var import_react46 = __toESM(require_react(), 1);

  // src/blocks/index.ts
  var blocks_exports = {};
  __export(blocks_exports, {
    Accordion: () => Accordion_default,
    Button: () => Button_default,
    Columns: () => Columns,
    Group: () => Group_default,
    Highlight: () => Highlight_default,
    List: () => List_default,
    Product: () => Product_default,
    Raw: () => Raw_default,
    Separator: () => Separator_default,
    Text: () => Text_default,
    Title: () => Title_default,
    Video: () => Video_default
  });

  // src/blocks/MultiColumns/MultiColumns.tsx
  var import_react27 = __toESM(require_react(), 1);

  // src/hooks/useWindowSize.tsx
  var import_react13 = __toESM(require_react(), 1);
  var useWindowSize = () => {
    const [size, setSize] = (0, import_react13.useState)({
      width: window.innerWidth,
      height: window.innerHeight
    });
    const handleResize = () => {
      setSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };
    (0, import_react13.useEffect)(() => {
      window.addEventListener("resize", handleResize);
      return () => window.removeEventListener("resize", handleResize);
    }, []);
    return size;
  };
  var useWindowSize_default = useWindowSize;

  // src/components/BlockControls/BlockControls.tsx
  var BlockControls = ({
    blockId,
    blockIndex,
    inLayout = false,
    DndDragHandle: DndDragHandle2
  }) => {
    const { blockList, removeBlock, moveBlockUp, moveBlockDown } = useBlocksContext();
    const intl = useIntl();
    const { width } = useWindowSize_default();
    return /* @__PURE__ */ React.createElement("div", {
      className: `${inLayout ? "NestedBlockControls" : "BlockControls"}`
    }, DndDragHandle2 && /* @__PURE__ */ React.createElement("div", {
      className: `${!inLayout && width > 1024 ? "BlockControl BlockControl--drag" : "NestedBlockControl"}`
    }, /* @__PURE__ */ React.createElement(DndDragHandle2, null)), /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [700, 0],
      disabled: !inLayout && width > 1024,
      content: "Monter l'\xE9l\xE9ment"
    }, /* @__PURE__ */ React.createElement("button", {
      className: `${!inLayout && width > 1024 ? "BlockControl BlockControl--left" : "NestedBlockControl"}`,
      disabled: blockIndex === 0,
      onClick: () => moveBlockUp(blockIndex)
    }, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-arrow-up"
    }), !inLayout && width > 1024 && /* @__PURE__ */ React.createElement("span", {
      className: "BlockControl__Label"
    }, intl.formatMessage({ id: "UP" })))), /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [700, 0],
      disabled: !inLayout && width > 1024,
      content: "Descendre l'\xE9l\xE9ment",
      placement: "bottom"
    }, /* @__PURE__ */ React.createElement("button", {
      className: `${!inLayout && width > 1024 ? "BlockControl BlockControl--center" : "NestedBlockControl"}`,
      disabled: blockIndex === blockList.length - 1,
      onClick: () => moveBlockDown(blockIndex)
    }, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-arrow-down"
    }), !inLayout && width > 1024 && /* @__PURE__ */ React.createElement("span", {
      className: "BlockControl__Label"
    }, intl.formatMessage({ id: "DOWN" })))), /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [700, 0],
      disabled: !inLayout && width > 1024,
      content: "Supprimer l'\xE9l\xE9ment",
      placement: "bottom"
    }, /* @__PURE__ */ React.createElement("button", {
      className: `${!inLayout && width > 1024 ? "BlockControl BlockControl--right BlockControl--danger" : "NestedBlockControl NestedBlockControl--danger"}`,
      onClick: () => removeBlock(blockId)
    }, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-trash-alt"
    }), !inLayout && width > 1024 && /* @__PURE__ */ React.createElement("span", {
      className: "BlockControl__Label"
    }, intl.formatMessage({ id: "DELETE" })))));
  };
  var BlockControls_default = BlockControls;

  // src/components/ErrorBoundary.tsx
  var import_react15 = __toESM(require_react(), 1);
  var ErrorBoundary = class extends import_react15.Component {
    constructor() {
      super(...arguments);
      __publicField(this, "state", {
        hasError: false
      });
    }
    static getDerivedStateFromError(_3) {
      return { hasError: true };
    }
    componentDidCatch(error2, errorInfo) {
    }
    render() {
      if (this.state.hasError) {
        console.log(this.state);
        return /* @__PURE__ */ React.createElement("span", {
          className: "block p-8 text-2xl text-center text-red"
        }, "Une erreur est survenue");
      }
      return this.props.children;
    }
  };
  var ErrorBoundary_default = ErrorBoundary;

  // src/components/Block/Block.tsx
  var Block = ({
    block,
    inLayout = false,
    className = "",
    DndDragHandle: DndDragHandle2
  }) => {
    const { findBlockIndex, updateBlock } = useBlocksContext();
    const intl = useIntl();
    const blockIndex = findBlockIndex(block.id);
    const plugins = usePlugins();
    const currentPlugin = plugins.find((plugin) => {
      if (plugin.layout) {
        return plugin?.title?.default === block?.title?.default;
      }
      return plugin.type.id === block.type.id;
    });
    if (!currentPlugin) {
      return /* @__PURE__ */ React.createElement("div", {
        style: {
          backgroundColor: "red",
          color: "white",
          padding: "1rem",
          margin: "1rem 0"
        }
      }, /* @__PURE__ */ React.createElement("div", null, intl.formatMessage({ id: "UNSUPPORTED_BLOCK" }), " : ", block.type.id), /* @__PURE__ */ React.createElement(BlockControls_default, {
        blockIndex,
        blockId: block.id,
        DndDragHandle: DndDragHandle2
      }));
    }
    const { component: Component2, icon: Icon } = currentPlugin;
    return /* @__PURE__ */ React.createElement("div", {
      className: `${inLayout ? "NestedBlock" : "Block"}`
    }, /* @__PURE__ */ React.createElement("div", {
      className: `${inLayout ? "NestedBlock__Header" : "Block__Header"}`
    }, /* @__PURE__ */ React.createElement("div", {
      className: "Block__Header__Infos"
    }, !inLayout ? typeof Icon === "function" ? /* @__PURE__ */ React.createElement(Icon, null) : /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      content: "Icone introuvable"
    }, /* @__PURE__ */ React.createElement("i", {
      className: "far fa-question-circle",
      style: { fontSize: "24px", color: "#333333" }
    })) : null, /* @__PURE__ */ React.createElement("div", {
      className: `${inLayout ? "NestedBlock__Header__Infos__Title" : "Block__Header__Infos__Title"}`
    }, currentPlugin.title[intl.locale || "default"])), /* @__PURE__ */ React.createElement(BlockControls_default, {
      blockIndex,
      inLayout,
      blockId: block.id,
      DndDragHandle: DndDragHandle2
    })), /* @__PURE__ */ React.createElement(ErrorBoundary_default, null, /* @__PURE__ */ React.createElement(Component2, {
      data: block.data,
      onUpdate: (data) => updateBlock(block.id, data)
    })));
  };
  var Block_default = Block;

  // src/blocks/MultiColumns/assets/column.svg
  var React12 = __toESM(require_react(), 1);
  var SvgColumn = (props) => /* @__PURE__ */ React12.createElement("svg", {
    width: 27,
    height: 7,
    viewBox: "0 0 27 7",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React12.createElement("path", {
    d: "M24.0482 0.551392H3.58632C2.80345 0.551392 2.05265 0.862384 1.49908 1.41595C0.945514 1.96952 0.634521 2.72032 0.634521 3.50319C0.634521 4.28606 0.945514 5.03686 1.49908 5.59043C2.05265 6.144 2.80345 6.45499 3.58632 6.45499H24.0482C24.4359 6.45499 24.8197 6.37864 25.1778 6.2303C25.536 6.08195 25.8614 5.86453 26.1355 5.59043C26.4096 5.31633 26.627 4.99092 26.7753 4.63279C26.9237 4.27467 27 3.89083 27 3.50319C27 3.11555 26.9237 2.73171 26.7753 2.37359C26.627 2.01546 26.4096 1.69005 26.1355 1.41595C25.8614 1.14185 25.536 0.924426 25.1778 0.776084C24.8197 0.627742 24.4359 0.551392 24.0482 0.551392ZM3.58632 5.61878C3.02523 5.61878 2.48712 5.39589 2.09037 4.99914C1.69362 4.60239 1.47073 4.06428 1.47073 3.50319C1.47073 2.9421 1.69362 2.40399 2.09037 2.00724C2.48712 1.61049 3.02523 1.3876 3.58632 1.3876H9.14708V5.61878H3.58632ZM9.98328 5.61878V1.3876H17.6596V5.61878H9.98328ZM24.0482 5.61878H18.4958V1.3876H24.0482C24.6093 1.3876 25.1474 1.61049 25.5442 2.00724C25.9409 2.40399 26.1638 2.9421 26.1638 3.50319C26.1638 4.06428 25.9409 4.60239 25.5442 4.99914C25.1474 5.39589 24.6093 5.61878 24.0482 5.61878Z",
    fill: "#444444"
  }));

  // ../../node_modules/immer/dist/immer.esm.mjs
  function n3(n4) {
    for (var r2 = arguments.length, t3 = Array(r2 > 1 ? r2 - 1 : 0), e2 = 1; e2 < r2; e2++)
      t3[e2 - 1] = arguments[e2];
    if (true) {
      var i3 = Y[n4], o3 = i3 ? "function" == typeof i3 ? i3.apply(null, t3) : i3 : "unknown error nr: " + n4;
      throw Error("[Immer] " + o3);
    }
    throw Error("[Immer] minified error nr: " + n4 + (t3.length ? " " + t3.map(function(n5) {
      return "'" + n5 + "'";
    }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
  }
  function r(n4) {
    return !!n4 && !!n4[Q2];
  }
  function t2(n4) {
    return !!n4 && (function(n5) {
      if (!n5 || "object" != typeof n5)
        return false;
      var r2 = Object.getPrototypeOf(n5);
      if (null === r2)
        return true;
      var t3 = Object.hasOwnProperty.call(r2, "constructor") && r2.constructor;
      return t3 === Object || "function" == typeof t3 && Function.toString.call(t3) === Z;
    }(n4) || Array.isArray(n4) || !!n4[L2] || !!n4.constructor[L2] || s2(n4) || v2(n4));
  }
  function i2(n4, r2, t3) {
    void 0 === t3 && (t3 = false), 0 === o2(n4) ? (t3 ? Object.keys : nn)(n4).forEach(function(e2) {
      t3 && "symbol" == typeof e2 || r2(e2, n4[e2], n4);
    }) : n4.forEach(function(t4, e2) {
      return r2(e2, t4, n4);
    });
  }
  function o2(n4) {
    var r2 = n4[Q2];
    return r2 ? r2.i > 3 ? r2.i - 4 : r2.i : Array.isArray(n4) ? 1 : s2(n4) ? 2 : v2(n4) ? 3 : 0;
  }
  function u3(n4, r2) {
    return 2 === o2(n4) ? n4.has(r2) : Object.prototype.hasOwnProperty.call(n4, r2);
  }
  function a2(n4, r2) {
    return 2 === o2(n4) ? n4.get(r2) : n4[r2];
  }
  function f3(n4, r2, t3) {
    var e2 = o2(n4);
    2 === e2 ? n4.set(r2, t3) : 3 === e2 ? (n4.delete(r2), n4.add(t3)) : n4[r2] = t3;
  }
  function c2(n4, r2) {
    return n4 === r2 ? 0 !== n4 || 1 / n4 == 1 / r2 : n4 != n4 && r2 != r2;
  }
  function s2(n4) {
    return X2 && n4 instanceof Map;
  }
  function v2(n4) {
    return q2 && n4 instanceof Set;
  }
  function p2(n4) {
    return n4.o || n4.t;
  }
  function l2(n4) {
    if (Array.isArray(n4))
      return Array.prototype.slice.call(n4);
    var r2 = rn(n4);
    delete r2[Q2];
    for (var t3 = nn(r2), e2 = 0; e2 < t3.length; e2++) {
      var i3 = t3[e2], o3 = r2[i3];
      false === o3.writable && (o3.writable = true, o3.configurable = true), (o3.get || o3.set) && (r2[i3] = { configurable: true, writable: true, enumerable: o3.enumerable, value: n4[i3] });
    }
    return Object.create(Object.getPrototypeOf(n4), r2);
  }
  function d3(n4, e2) {
    return void 0 === e2 && (e2 = false), y(n4) || r(n4) || !t2(n4) ? n4 : (o2(n4) > 1 && (n4.set = n4.add = n4.clear = n4.delete = h2), Object.freeze(n4), e2 && i2(n4, function(n5, r2) {
      return d3(r2, true);
    }, true), n4);
  }
  function h2() {
    n3(2);
  }
  function y(n4) {
    return null == n4 || "object" != typeof n4 || Object.isFrozen(n4);
  }
  function b2(r2) {
    var t3 = tn[r2];
    return t3 || n3(18, r2), t3;
  }
  function _2() {
    return U2 || n3(0), U2;
  }
  function j3(n4, r2) {
    r2 && (b2("Patches"), n4.u = [], n4.s = [], n4.v = r2);
  }
  function O2(n4) {
    g3(n4), n4.p.forEach(S2), n4.p = null;
  }
  function g3(n4) {
    n4 === U2 && (U2 = n4.l);
  }
  function w(n4) {
    return U2 = { p: [], l: U2, h: n4, m: true, _: 0 };
  }
  function S2(n4) {
    var r2 = n4[Q2];
    0 === r2.i || 1 === r2.i ? r2.j() : r2.O = true;
  }
  function P2(r2, e2) {
    e2._ = e2.p.length;
    var i3 = e2.p[0], o3 = void 0 !== r2 && r2 !== i3;
    return e2.h.g || b2("ES5").S(e2, r2, o3), o3 ? (i3[Q2].P && (O2(e2), n3(4)), t2(r2) && (r2 = M2(e2, r2), e2.l || x2(e2, r2)), e2.u && b2("Patches").M(i3[Q2].t, r2, e2.u, e2.s)) : r2 = M2(e2, i3, []), O2(e2), e2.u && e2.v(e2.u, e2.s), r2 !== H2 ? r2 : void 0;
  }
  function M2(n4, r2, t3) {
    if (y(r2))
      return r2;
    var e2 = r2[Q2];
    if (!e2)
      return i2(r2, function(i3, o4) {
        return A2(n4, e2, r2, i3, o4, t3);
      }, true), r2;
    if (e2.A !== n4)
      return r2;
    if (!e2.P)
      return x2(n4, e2.t, true), e2.t;
    if (!e2.I) {
      e2.I = true, e2.A._--;
      var o3 = 4 === e2.i || 5 === e2.i ? e2.o = l2(e2.k) : e2.o;
      i2(3 === e2.i ? new Set(o3) : o3, function(r3, i3) {
        return A2(n4, e2, o3, r3, i3, t3);
      }), x2(n4, o3, false), t3 && n4.u && b2("Patches").R(e2, t3, n4.u, n4.s);
    }
    return e2.o;
  }
  function A2(e2, i3, o3, a3, c3, s3) {
    if (c3 === o3 && n3(5), r(c3)) {
      var v3 = M2(e2, c3, s3 && i3 && 3 !== i3.i && !u3(i3.D, a3) ? s3.concat(a3) : void 0);
      if (f3(o3, a3, v3), !r(v3))
        return;
      e2.m = false;
    }
    if (t2(c3) && !y(c3)) {
      if (!e2.h.F && e2._ < 1)
        return;
      M2(e2, c3), i3 && i3.A.l || x2(e2, c3);
    }
  }
  function x2(n4, r2, t3) {
    void 0 === t3 && (t3 = false), n4.h.F && n4.m && d3(r2, t3);
  }
  function z(n4, r2) {
    var t3 = n4[Q2];
    return (t3 ? p2(t3) : n4)[r2];
  }
  function I(n4, r2) {
    if (r2 in n4)
      for (var t3 = Object.getPrototypeOf(n4); t3; ) {
        var e2 = Object.getOwnPropertyDescriptor(t3, r2);
        if (e2)
          return e2;
        t3 = Object.getPrototypeOf(t3);
      }
  }
  function k2(n4) {
    n4.P || (n4.P = true, n4.l && k2(n4.l));
  }
  function E2(n4) {
    n4.o || (n4.o = l2(n4.t));
  }
  function R2(n4, r2, t3) {
    var e2 = s2(r2) ? b2("MapSet").N(r2, t3) : v2(r2) ? b2("MapSet").T(r2, t3) : n4.g ? function(n5, r3) {
      var t4 = Array.isArray(n5), e3 = { i: t4 ? 1 : 0, A: r3 ? r3.A : _2(), P: false, I: false, D: {}, l: r3, t: n5, k: null, o: null, j: null, C: false }, i3 = e3, o3 = en;
      t4 && (i3 = [e3], o3 = on);
      var u4 = Proxy.revocable(i3, o3), a3 = u4.revoke, f4 = u4.proxy;
      return e3.k = f4, e3.j = a3, f4;
    }(r2, t3) : b2("ES5").J(r2, t3);
    return (t3 ? t3.A : _2()).p.push(e2), e2;
  }
  function D2(e2) {
    return r(e2) || n3(22, e2), function n4(r2) {
      if (!t2(r2))
        return r2;
      var e3, u4 = r2[Q2], c3 = o2(r2);
      if (u4) {
        if (!u4.P && (u4.i < 4 || !b2("ES5").K(u4)))
          return u4.t;
        u4.I = true, e3 = F(r2, c3), u4.I = false;
      } else
        e3 = F(r2, c3);
      return i2(e3, function(r3, t3) {
        u4 && a2(u4.t, r3) === t3 || f3(e3, r3, n4(t3));
      }), 3 === c3 ? new Set(e3) : e3;
    }(e2);
  }
  function F(n4, r2) {
    switch (r2) {
      case 2:
        return new Map(n4);
      case 3:
        return Array.from(n4);
    }
    return l2(n4);
  }
  var G2;
  var U2;
  var W2 = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x");
  var X2 = "undefined" != typeof Map;
  var q2 = "undefined" != typeof Set;
  var B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect;
  var H2 = W2 ? Symbol.for("immer-nothing") : ((G2 = {})["immer-nothing"] = true, G2);
  var L2 = W2 ? Symbol.for("immer-draftable") : "__$immer_draftable";
  var Q2 = W2 ? Symbol.for("immer-state") : "__$immer_state";
  var Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n4) {
    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n4;
  }, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n4) {
    return "Cannot apply patch, path doesn't resolve: " + n4;
  }, 16: 'Sets cannot have "replace" patches.', 17: function(n4) {
    return "Unsupported patch operation: " + n4;
  }, 18: function(n4) {
    return "The plugin for '" + n4 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n4 + "()` when initializing your application.";
  }, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n4) {
    return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n4 + "'";
  }, 22: function(n4) {
    return "'current' expects a draft, got: " + n4;
  }, 23: function(n4) {
    return "'original' expects a draft, got: " + n4;
  }, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
  var Z = "" + Object.prototype.constructor;
  var nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n4) {
    return Object.getOwnPropertyNames(n4).concat(Object.getOwnPropertySymbols(n4));
  } : Object.getOwnPropertyNames;
  var rn = Object.getOwnPropertyDescriptors || function(n4) {
    var r2 = {};
    return nn(n4).forEach(function(t3) {
      r2[t3] = Object.getOwnPropertyDescriptor(n4, t3);
    }), r2;
  };
  var tn = {};
  var en = { get: function(n4, r2) {
    if (r2 === Q2)
      return n4;
    var e2 = p2(n4);
    if (!u3(e2, r2))
      return function(n5, r3, t3) {
        var e3, i4 = I(r3, t3);
        return i4 ? "value" in i4 ? i4.value : null === (e3 = i4.get) || void 0 === e3 ? void 0 : e3.call(n5.k) : void 0;
      }(n4, e2, r2);
    var i3 = e2[r2];
    return n4.I || !t2(i3) ? i3 : i3 === z(n4.t, r2) ? (E2(n4), n4.o[r2] = R2(n4.A.h, i3, n4)) : i3;
  }, has: function(n4, r2) {
    return r2 in p2(n4);
  }, ownKeys: function(n4) {
    return Reflect.ownKeys(p2(n4));
  }, set: function(n4, r2, t3) {
    var e2 = I(p2(n4), r2);
    if (null == e2 ? void 0 : e2.set)
      return e2.set.call(n4.k, t3), true;
    if (!n4.P) {
      var i3 = z(p2(n4), r2), o3 = null == i3 ? void 0 : i3[Q2];
      if (o3 && o3.t === t3)
        return n4.o[r2] = t3, n4.D[r2] = false, true;
      if (c2(t3, i3) && (void 0 !== t3 || u3(n4.t, r2)))
        return true;
      E2(n4), k2(n4);
    }
    return n4.o[r2] === t3 && "number" != typeof t3 && (void 0 !== t3 || r2 in n4.o) || (n4.o[r2] = t3, n4.D[r2] = true, true);
  }, deleteProperty: function(n4, r2) {
    return void 0 !== z(n4.t, r2) || r2 in n4.t ? (n4.D[r2] = false, E2(n4), k2(n4)) : delete n4.D[r2], n4.o && delete n4.o[r2], true;
  }, getOwnPropertyDescriptor: function(n4, r2) {
    var t3 = p2(n4), e2 = Reflect.getOwnPropertyDescriptor(t3, r2);
    return e2 ? { writable: true, configurable: 1 !== n4.i || "length" !== r2, enumerable: e2.enumerable, value: t3[r2] } : e2;
  }, defineProperty: function() {
    n3(11);
  }, getPrototypeOf: function(n4) {
    return Object.getPrototypeOf(n4.t);
  }, setPrototypeOf: function() {
    n3(12);
  } };
  var on = {};
  i2(en, function(n4, r2) {
    on[n4] = function() {
      return arguments[0] = arguments[0][0], r2.apply(this, arguments);
    };
  }), on.deleteProperty = function(r2, t3) {
    return isNaN(parseInt(t3)) && n3(13), on.set.call(this, r2, t3, void 0);
  }, on.set = function(r2, t3, e2) {
    return "length" !== t3 && isNaN(parseInt(t3)) && n3(14), en.set.call(this, r2[0], t3, e2, r2[0]);
  };
  var un = function() {
    function e2(r2) {
      var e3 = this;
      this.g = B, this.F = true, this.produce = function(r3, i4, o3) {
        if ("function" == typeof r3 && "function" != typeof i4) {
          var u4 = i4;
          i4 = r3;
          var a3 = e3;
          return function(n4) {
            var r4 = this;
            void 0 === n4 && (n4 = u4);
            for (var t3 = arguments.length, e4 = Array(t3 > 1 ? t3 - 1 : 0), o4 = 1; o4 < t3; o4++)
              e4[o4 - 1] = arguments[o4];
            return a3.produce(n4, function(n5) {
              var t4;
              return (t4 = i4).call.apply(t4, [r4, n5].concat(e4));
            });
          };
        }
        var f4;
        if ("function" != typeof i4 && n3(6), void 0 !== o3 && "function" != typeof o3 && n3(7), t2(r3)) {
          var c3 = w(e3), s3 = R2(e3, r3, void 0), v3 = true;
          try {
            f4 = i4(s3), v3 = false;
          } finally {
            v3 ? O2(c3) : g3(c3);
          }
          return "undefined" != typeof Promise && f4 instanceof Promise ? f4.then(function(n4) {
            return j3(c3, o3), P2(n4, c3);
          }, function(n4) {
            throw O2(c3), n4;
          }) : (j3(c3, o3), P2(f4, c3));
        }
        if (!r3 || "object" != typeof r3) {
          if (void 0 === (f4 = i4(r3)) && (f4 = r3), f4 === H2 && (f4 = void 0), e3.F && d3(f4, true), o3) {
            var p3 = [], l3 = [];
            b2("Patches").M(r3, f4, p3, l3), o3(p3, l3);
          }
          return f4;
        }
        n3(21, r3);
      }, this.produceWithPatches = function(n4, r3) {
        if ("function" == typeof n4)
          return function(r4) {
            for (var t4 = arguments.length, i5 = Array(t4 > 1 ? t4 - 1 : 0), o4 = 1; o4 < t4; o4++)
              i5[o4 - 1] = arguments[o4];
            return e3.produceWithPatches(r4, function(r5) {
              return n4.apply(void 0, [r5].concat(i5));
            });
          };
        var t3, i4, o3 = e3.produce(n4, r3, function(n5, r4) {
          t3 = n5, i4 = r4;
        });
        return "undefined" != typeof Promise && o3 instanceof Promise ? o3.then(function(n5) {
          return [n5, t3, i4];
        }) : [o3, t3, i4];
      }, "boolean" == typeof (null == r2 ? void 0 : r2.useProxies) && this.setUseProxies(r2.useProxies), "boolean" == typeof (null == r2 ? void 0 : r2.autoFreeze) && this.setAutoFreeze(r2.autoFreeze);
    }
    var i3 = e2.prototype;
    return i3.createDraft = function(e3) {
      t2(e3) || n3(8), r(e3) && (e3 = D2(e3));
      var i4 = w(this), o3 = R2(this, e3, void 0);
      return o3[Q2].C = true, g3(i4), o3;
    }, i3.finishDraft = function(r2, t3) {
      var e3 = r2 && r2[Q2];
      e3 && e3.C || n3(9), e3.I && n3(10);
      var i4 = e3.A;
      return j3(i4, t3), P2(void 0, i4);
    }, i3.setAutoFreeze = function(n4) {
      this.F = n4;
    }, i3.setUseProxies = function(r2) {
      r2 && !B && n3(20), this.g = r2;
    }, i3.applyPatches = function(n4, t3) {
      var e3;
      for (e3 = t3.length - 1; e3 >= 0; e3--) {
        var i4 = t3[e3];
        if (0 === i4.path.length && "replace" === i4.op) {
          n4 = i4.value;
          break;
        }
      }
      e3 > -1 && (t3 = t3.slice(e3 + 1));
      var o3 = b2("Patches").$;
      return r(n4) ? o3(n4, t3) : this.produce(n4, function(n5) {
        return o3(n5, t3);
      });
    }, e2;
  }();
  var an = new un();
  var fn3 = an.produce;
  var cn = an.produceWithPatches.bind(an);
  var sn = an.setAutoFreeze.bind(an);
  var vn = an.setUseProxies.bind(an);
  var pn = an.applyPatches.bind(an);
  var ln = an.createDraft.bind(an);
  var dn = an.finishDraft.bind(an);
  var immer_esm_default = fn3;

  // ../../node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js
  var import_react25 = __toESM(require_react());

  // ../../node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // ../../node_modules/@babel/runtime/helpers/esm/objectSpread2.js
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = null != arguments[i3] ? arguments[i3] : {};
      i3 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }

  // ../../node_modules/redux/es/redux.js
  var $$observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();
  var randomString = function randomString2() {
    return Math.random().toString(36).substring(7).split("").join(".");
  };
  var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
      return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
  };
  function isPlainObject2(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    var proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto;
  }
  function miniKindOf(val) {
    if (val === void 0)
      return "undefined";
    if (val === null)
      return "null";
    var type = typeof val;
    switch (type) {
      case "boolean":
      case "string":
      case "number":
      case "symbol":
      case "function": {
        return type;
      }
    }
    if (Array.isArray(val))
      return "array";
    if (isDate(val))
      return "date";
    if (isError(val))
      return "error";
    var constructorName = ctorName(val);
    switch (constructorName) {
      case "Symbol":
      case "Promise":
      case "WeakMap":
      case "WeakSet":
      case "Map":
      case "Set":
        return constructorName;
    }
    return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
  }
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate(val) {
    if (val instanceof Date)
      return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function kindOf(val) {
    var typeOfVal = typeof val;
    if (true) {
      typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
  }
  function createStore(reducer3, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
      }
      return enhancer(createStore)(reducer3, preloadedState);
    }
    if (typeof reducer3 !== "function") {
      throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer3) + "'");
    }
    var currentReducer = reducer3;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe(listener) {
      if (typeof listener !== "function") {
        throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index2 = nextListeners.indexOf(listener);
        nextListeners.splice(index2, 1);
        currentListeners = null;
      };
    }
    function dispatch(action) {
      if (!isPlainObject2(action)) {
        throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
      }
      if (typeof action.type === "undefined") {
        throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      var listeners = currentListeners = nextListeners;
      for (var i3 = 0; i3 < listeners.length; i3++) {
        var listener = listeners[i3];
        listener();
      }
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
      }
      currentReducer = nextReducer;
      dispatch({
        type: ActionTypes.REPLACE
      });
    }
    function observable() {
      var _ref;
      var outerSubscribe = subscribe;
      return _ref = {
        subscribe: function subscribe2(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
          }
          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }
          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe
          };
        }
      }, _ref[$$observable] = function() {
        return this;
      }, _ref;
    }
    dispatch({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch,
      subscribe,
      getState,
      replaceReducer
    }, _ref2[$$observable] = observable, _ref2;
  }
  function warning(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e2) {
    }
  }
  function bindActionCreator(actionCreator, dispatch) {
    return function() {
      return dispatch(actionCreator.apply(this, arguments));
    };
  }
  function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
      return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
      throw new Error(false ? formatProdErrorMessage(16) : "bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + `'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    var boundActionCreators = {};
    for (var key in actionCreators) {
      var actionCreator = actionCreators[key];
      if (typeof actionCreator === "function") {
        boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
      }
    }
    return boundActionCreators;
  }
  function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) {
      return function(arg) {
        return arg;
      };
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce(function(a3, b3) {
      return function() {
        return a3(b3.apply(void 0, arguments));
      };
    });
  }
  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }
    return function(createStore3) {
      return function() {
        var store = createStore3.apply(void 0, arguments);
        var _dispatch = function dispatch() {
          throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
        };
        var middlewareAPI = {
          getState: store.getState,
          dispatch: function dispatch() {
            return _dispatch.apply(void 0, arguments);
          }
        };
        var chain = middlewares.map(function(middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = compose.apply(void 0, chain)(store.dispatch);
        return _objectSpread2(_objectSpread2({}, store), {}, {
          dispatch: _dispatch
        });
      };
    };
  }
  function isCrushed() {
  }
  if (typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
    warning('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
  }

  // ../../node_modules/react-redux/es/components/Provider.js
  var import_react19 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());

  // ../../node_modules/react-redux/es/components/Context.js
  var import_react17 = __toESM(require_react());
  var ReactReduxContext = /* @__PURE__ */ import_react17.default.createContext(null);
  if (true) {
    ReactReduxContext.displayName = "ReactRedux";
  }

  // ../../node_modules/react-redux/es/utils/batch.js
  function defaultNoopBatch(callback) {
    callback();
  }
  var batch = defaultNoopBatch;
  var setBatch = function setBatch2(newBatch) {
    return batch = newBatch;
  };
  var getBatch = function getBatch2() {
    return batch;
  };

  // ../../node_modules/react-redux/es/utils/Subscription.js
  function createListenerCollection() {
    var batch2 = getBatch();
    var first = null;
    var last = null;
    return {
      clear: function clear() {
        first = null;
        last = null;
      },
      notify: function notify2() {
        batch2(function() {
          var listener = first;
          while (listener) {
            listener.callback();
            listener = listener.next;
          }
        });
      },
      get: function get2() {
        var listeners = [];
        var listener = first;
        while (listener) {
          listeners.push(listener);
          listener = listener.next;
        }
        return listeners;
      },
      subscribe: function subscribe(callback) {
        var isSubscribed = true;
        var listener = last = {
          callback,
          next: null,
          prev: last
        };
        if (listener.prev) {
          listener.prev.next = listener;
        } else {
          first = listener;
        }
        return function unsubscribe() {
          if (!isSubscribed || first === null)
            return;
          isSubscribed = false;
          if (listener.next) {
            listener.next.prev = listener.prev;
          } else {
            last = listener.prev;
          }
          if (listener.prev) {
            listener.prev.next = listener.next;
          } else {
            first = listener.next;
          }
        };
      }
    };
  }
  var nullListeners = {
    notify: function notify() {
    },
    get: function get() {
      return [];
    }
  };
  function createSubscription(store, parentSub) {
    var unsubscribe;
    var listeners = nullListeners;
    function addNestedSub(listener) {
      trySubscribe();
      return listeners.subscribe(listener);
    }
    function notifyNestedSubs() {
      listeners.notify();
    }
    function handleChangeWrapper() {
      if (subscription.onStateChange) {
        subscription.onStateChange();
      }
    }
    function isSubscribed() {
      return Boolean(unsubscribe);
    }
    function trySubscribe() {
      if (!unsubscribe) {
        unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
        listeners = createListenerCollection();
      }
    }
    function tryUnsubscribe() {
      if (unsubscribe) {
        unsubscribe();
        unsubscribe = void 0;
        listeners.clear();
        listeners = nullListeners;
      }
    }
    var subscription = {
      addNestedSub,
      notifyNestedSubs,
      handleChangeWrapper,
      isSubscribed,
      trySubscribe,
      tryUnsubscribe,
      getListeners: function getListeners() {
        return listeners;
      }
    };
    return subscription;
  }

  // ../../node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
  var import_react18 = __toESM(require_react());
  var useIsomorphicLayoutEffect2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react18.useLayoutEffect : import_react18.useEffect;

  // ../../node_modules/react-redux/es/components/Provider.js
  function Provider2(_ref) {
    var store = _ref.store, context = _ref.context, children = _ref.children;
    var contextValue = (0, import_react19.useMemo)(function() {
      var subscription = createSubscription(store);
      return {
        store,
        subscription
      };
    }, [store]);
    var previousState = (0, import_react19.useMemo)(function() {
      return store.getState();
    }, [store]);
    useIsomorphicLayoutEffect2(function() {
      var subscription = contextValue.subscription;
      subscription.onStateChange = subscription.notifyNestedSubs;
      subscription.trySubscribe();
      if (previousState !== store.getState()) {
        subscription.notifyNestedSubs();
      }
      return function() {
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;
      };
    }, [contextValue, previousState]);
    var Context2 = context || ReactReduxContext;
    return /* @__PURE__ */ import_react19.default.createElement(Context2.Provider, {
      value: contextValue
    }, children);
  }
  if (true) {
    Provider2.propTypes = {
      store: import_prop_types.default.shape({
        subscribe: import_prop_types.default.func.isRequired,
        dispatch: import_prop_types.default.func.isRequired,
        getState: import_prop_types.default.func.isRequired
      }),
      context: import_prop_types.default.object,
      children: import_prop_types.default.any
    };
  }
  var Provider_default = Provider2;

  // ../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // ../../node_modules/react-redux/es/components/connectAdvanced.js
  var import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
  var import_react20 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is2());
  var _excluded = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"];
  var _excluded2 = ["reactReduxForwardedRef"];
  var EMPTY_ARRAY = [];
  var NO_SUBSCRIPTION_ARRAY = [null, null];
  var stringifyComponent = function stringifyComponent2(Comp) {
    try {
      return JSON.stringify(Comp);
    } catch (err) {
      return String(Comp);
    }
  };
  function storeStateUpdatesReducer(state, action) {
    var updateCount = state[1];
    return [action.payload, updateCount + 1];
  }
  function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
    useIsomorphicLayoutEffect2(function() {
      return effectFunc.apply(void 0, effectArgs);
    }, dependencies);
  }
  function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
    lastWrapperProps.current = wrapperProps;
    lastChildProps.current = actualChildProps;
    renderIsScheduled.current = false;
    if (childPropsFromStoreUpdate.current) {
      childPropsFromStoreUpdate.current = null;
      notifyNestedSubs();
    }
  }
  function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
    if (!shouldHandleStateChanges)
      return;
    var didUnsubscribe = false;
    var lastThrownError = null;
    var checkForUpdates = function checkForUpdates2() {
      if (didUnsubscribe) {
        return;
      }
      var latestStoreState = store.getState();
      var newChildProps, error2;
      try {
        newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
      } catch (e2) {
        error2 = e2;
        lastThrownError = e2;
      }
      if (!error2) {
        lastThrownError = null;
      }
      if (newChildProps === lastChildProps.current) {
        if (!renderIsScheduled.current) {
          notifyNestedSubs();
        }
      } else {
        lastChildProps.current = newChildProps;
        childPropsFromStoreUpdate.current = newChildProps;
        renderIsScheduled.current = true;
        forceComponentUpdateDispatch({
          type: "STORE_UPDATED",
          payload: {
            error: error2
          }
        });
      }
    };
    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    var unsubscribeWrapper = function unsubscribeWrapper2() {
      didUnsubscribe = true;
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
      if (lastThrownError) {
        throw lastThrownError;
      }
    };
    return unsubscribeWrapper;
  }
  var initStateUpdates = function initStateUpdates2() {
    return [null, 0];
  };
  function connectAdvanced(selectorFactory, _ref) {
    if (_ref === void 0) {
      _ref = {};
    }
    var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name) {
      return "ConnectAdvanced(" + name + ")";
    } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? "connectAdvanced" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? void 0 : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? "store" : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef10 = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context = _ref2$context === void 0 ? ReactReduxContext : _ref2$context, connectOptions = _objectWithoutPropertiesLoose2(_ref2, _excluded);
    if (true) {
      if (renderCountProp !== void 0) {
        throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
      }
      if (withRef) {
        throw new Error("withRef is removed. To access the wrapped instance, use a ref on the connected component");
      }
      var customStoreWarningMessage = "To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
      if (storeKey !== "store") {
        throw new Error("storeKey has been removed and does not do anything. " + customStoreWarningMessage);
      }
    }
    var Context2 = context;
    return function wrapWithConnect(WrappedComponent) {
      if (!(0, import_react_is.isValidElementType)(WrappedComponent)) {
        throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
      }
      var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
      var displayName = getDisplayName(wrappedComponentName);
      var selectorFactoryOptions = _extends({}, connectOptions, {
        getDisplayName,
        methodName,
        renderCountProp,
        shouldHandleStateChanges,
        storeKey,
        displayName,
        wrappedComponentName,
        WrappedComponent
      });
      var pure = connectOptions.pure;
      function createChildSelector(store) {
        return selectorFactory(store.dispatch, selectorFactoryOptions);
      }
      var usePureOnlyMemo = pure ? import_react20.useMemo : function(callback) {
        return callback();
      };
      function ConnectFunction(props) {
        var _useMemo = (0, import_react20.useMemo)(function() {
          var reactReduxForwardedRef2 = props.reactReduxForwardedRef, wrapperProps2 = _objectWithoutPropertiesLoose2(props, _excluded2);
          return [props.context, reactReduxForwardedRef2, wrapperProps2];
        }, [props]), propsContext = _useMemo[0], reactReduxForwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
        var ContextToUse = (0, import_react20.useMemo)(function() {
          return propsContext && propsContext.Consumer && (0, import_react_is.isContextConsumer)(/* @__PURE__ */ import_react20.default.createElement(propsContext.Consumer, null)) ? propsContext : Context2;
        }, [propsContext, Context2]);
        var contextValue = (0, import_react20.useContext)(ContextToUse);
        var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
        var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
        if (!didStoreComeFromProps && !didStoreComeFromContext) {
          throw new Error('Could not find "store" in the context of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
        }
        var store = didStoreComeFromProps ? props.store : contextValue.store;
        var childPropsSelector = (0, import_react20.useMemo)(function() {
          return createChildSelector(store);
        }, [store]);
        var _useMemo2 = (0, import_react20.useMemo)(function() {
          if (!shouldHandleStateChanges)
            return NO_SUBSCRIPTION_ARRAY;
          var subscription2 = createSubscription(store, didStoreComeFromProps ? null : contextValue.subscription);
          var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
          return [subscription2, notifyNestedSubs2];
        }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
        var overriddenContextValue = (0, import_react20.useMemo)(function() {
          if (didStoreComeFromProps) {
            return contextValue;
          }
          return _extends({}, contextValue, {
            subscription
          });
        }, [didStoreComeFromProps, contextValue, subscription]);
        var _useReducer = (0, import_react20.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
        if (previousStateUpdateResult && previousStateUpdateResult.error) {
          throw previousStateUpdateResult.error;
        }
        var lastChildProps = (0, import_react20.useRef)();
        var lastWrapperProps = (0, import_react20.useRef)(wrapperProps);
        var childPropsFromStoreUpdate = (0, import_react20.useRef)();
        var renderIsScheduled = (0, import_react20.useRef)(false);
        var actualChildProps = usePureOnlyMemo(function() {
          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
            return childPropsFromStoreUpdate.current;
          }
          return childPropsSelector(store.getState(), wrapperProps);
        }, [store, previousStateUpdateResult, wrapperProps]);
        useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
        useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
        var renderedWrappedComponent = (0, import_react20.useMemo)(function() {
          return /* @__PURE__ */ import_react20.default.createElement(WrappedComponent, _extends({}, actualChildProps, {
            ref: reactReduxForwardedRef
          }));
        }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
        var renderedChild = (0, import_react20.useMemo)(function() {
          if (shouldHandleStateChanges) {
            return /* @__PURE__ */ import_react20.default.createElement(ContextToUse.Provider, {
              value: overriddenContextValue
            }, renderedWrappedComponent);
          }
          return renderedWrappedComponent;
        }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
        return renderedChild;
      }
      var Connect = pure ? import_react20.default.memo(ConnectFunction) : ConnectFunction;
      Connect.WrappedComponent = WrappedComponent;
      Connect.displayName = ConnectFunction.displayName = displayName;
      if (forwardRef10) {
        var forwarded = import_react20.default.forwardRef(function forwardConnectRef(props, ref2) {
          return /* @__PURE__ */ import_react20.default.createElement(Connect, _extends({}, props, {
            reactReduxForwardedRef: ref2
          }));
        });
        forwarded.displayName = displayName;
        forwarded.WrappedComponent = WrappedComponent;
        return (0, import_hoist_non_react_statics2.default)(forwarded, WrappedComponent);
      }
      return (0, import_hoist_non_react_statics2.default)(Connect, WrappedComponent);
    };
  }

  // ../../node_modules/react-redux/es/utils/shallowEqual.js
  function is(x3, y2) {
    if (x3 === y2) {
      return x3 !== 0 || y2 !== 0 || 1 / x3 === 1 / y2;
    } else {
      return x3 !== x3 && y2 !== y2;
    }
  }
  function shallowEqual2(objA, objB) {
    if (is(objA, objB))
      return true;
    if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
      return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length)
      return false;
    for (var i3 = 0; i3 < keysA.length; i3++) {
      if (!Object.prototype.hasOwnProperty.call(objB, keysA[i3]) || !is(objA[keysA[i3]], objB[keysA[i3]])) {
        return false;
      }
    }
    return true;
  }

  // ../../node_modules/react-redux/es/utils/bindActionCreators.js
  function bindActionCreators2(actionCreators, dispatch) {
    var boundActionCreators = {};
    var _loop = function _loop2(key2) {
      var actionCreator = actionCreators[key2];
      if (typeof actionCreator === "function") {
        boundActionCreators[key2] = function() {
          return dispatch(actionCreator.apply(void 0, arguments));
        };
      }
    };
    for (var key in actionCreators) {
      _loop(key);
    }
    return boundActionCreators;
  }

  // ../../node_modules/react-redux/es/utils/isPlainObject.js
  function isPlainObject3(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    var proto = Object.getPrototypeOf(obj);
    if (proto === null)
      return true;
    var baseProto = proto;
    while (Object.getPrototypeOf(baseProto) !== null) {
      baseProto = Object.getPrototypeOf(baseProto);
    }
    return proto === baseProto;
  }

  // ../../node_modules/react-redux/es/utils/warning.js
  function warning2(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e2) {
    }
  }

  // ../../node_modules/react-redux/es/utils/verifyPlainObject.js
  function verifyPlainObject(value, displayName, methodName) {
    if (!isPlainObject3(value)) {
      warning2(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
    }
  }

  // ../../node_modules/react-redux/es/connect/wrapMapToProps.js
  function wrapMapToPropsConstant(getConstant) {
    return function initConstantSelector(dispatch, options) {
      var constant = getConstant(dispatch, options);
      function constantSelector() {
        return constant;
      }
      constantSelector.dependsOnOwnProps = false;
      return constantSelector;
    };
  }
  function getDependsOnOwnProps(mapToProps) {
    return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== void 0 ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
  }
  function wrapMapToPropsFunc(mapToProps, methodName) {
    return function initProxySelector(dispatch, _ref) {
      var displayName = _ref.displayName;
      var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
        return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
      };
      proxy.dependsOnOwnProps = true;
      proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
        proxy.mapToProps = mapToProps;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
        var props = proxy(stateOrDispatch, ownProps);
        if (typeof props === "function") {
          proxy.mapToProps = props;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
          props = proxy(stateOrDispatch, ownProps);
        }
        if (true)
          verifyPlainObject(props, displayName, methodName);
        return props;
      };
      return proxy;
    };
  }

  // ../../node_modules/react-redux/es/connect/mapDispatchToProps.js
  function whenMapDispatchToPropsIsFunction(mapDispatchToProps2) {
    return typeof mapDispatchToProps2 === "function" ? wrapMapToPropsFunc(mapDispatchToProps2, "mapDispatchToProps") : void 0;
  }
  function whenMapDispatchToPropsIsMissing(mapDispatchToProps2) {
    return !mapDispatchToProps2 ? wrapMapToPropsConstant(function(dispatch) {
      return {
        dispatch
      };
    }) : void 0;
  }
  function whenMapDispatchToPropsIsObject(mapDispatchToProps2) {
    return mapDispatchToProps2 && typeof mapDispatchToProps2 === "object" ? wrapMapToPropsConstant(function(dispatch) {
      return bindActionCreators2(mapDispatchToProps2, dispatch);
    }) : void 0;
  }
  var mapDispatchToProps_default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

  // ../../node_modules/react-redux/es/connect/mapStateToProps.js
  function whenMapStateToPropsIsFunction(mapStateToProps) {
    return typeof mapStateToProps === "function" ? wrapMapToPropsFunc(mapStateToProps, "mapStateToProps") : void 0;
  }
  function whenMapStateToPropsIsMissing(mapStateToProps) {
    return !mapStateToProps ? wrapMapToPropsConstant(function() {
      return {};
    }) : void 0;
  }
  var mapStateToProps_default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

  // ../../node_modules/react-redux/es/connect/mergeProps.js
  function defaultMergeProps(stateProps, dispatchProps, ownProps) {
    return _extends({}, ownProps, stateProps, dispatchProps);
  }
  function wrapMergePropsFunc(mergeProps) {
    return function initMergePropsProxy(dispatch, _ref) {
      var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
      var hasRunOnce = false;
      var mergedProps;
      return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
        var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        if (hasRunOnce) {
          if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps))
            mergedProps = nextMergedProps;
        } else {
          hasRunOnce = true;
          mergedProps = nextMergedProps;
          if (true)
            verifyPlainObject(mergedProps, displayName, "mergeProps");
        }
        return mergedProps;
      };
    };
  }
  function whenMergePropsIsFunction(mergeProps) {
    return typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : void 0;
  }
  function whenMergePropsIsOmitted(mergeProps) {
    return !mergeProps ? function() {
      return defaultMergeProps;
    } : void 0;
  }
  var mergeProps_default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

  // ../../node_modules/react-redux/es/connect/verifySubselectors.js
  function verify(selector, methodName, displayName) {
    if (!selector) {
      throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
    } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
      if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
        warning2("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
      }
    }
  }
  function verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps, displayName) {
    verify(mapStateToProps, "mapStateToProps", displayName);
    verify(mapDispatchToProps2, "mapDispatchToProps", displayName);
    verify(mergeProps, "mergeProps", displayName);
  }

  // ../../node_modules/react-redux/es/connect/selectorFactory.js
  var _excluded3 = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
  function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch) {
    return function impureFinalPropsSelector(state, ownProps) {
      return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps2(dispatch, ownProps), ownProps);
    };
  }
  function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch, _ref) {
    var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
    var hasRunAtLeastOnce = false;
    var state;
    var ownProps;
    var stateProps;
    var dispatchProps;
    var mergedProps;
    function handleFirstCall(firstState, firstOwnProps) {
      state = firstState;
      ownProps = firstOwnProps;
      stateProps = mapStateToProps(state, ownProps);
      dispatchProps = mapDispatchToProps2(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      hasRunAtLeastOnce = true;
      return mergedProps;
    }
    function handleNewPropsAndNewState() {
      stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps2.dependsOnOwnProps)
        dispatchProps = mapDispatchToProps2(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }
    function handleNewProps() {
      if (mapStateToProps.dependsOnOwnProps)
        stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps2.dependsOnOwnProps)
        dispatchProps = mapDispatchToProps2(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }
    function handleNewState() {
      var nextStateProps = mapStateToProps(state, ownProps);
      var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
      stateProps = nextStateProps;
      if (statePropsChanged)
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }
    function handleSubsequentCalls(nextState, nextOwnProps) {
      var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
      var stateChanged = !areStatesEqual(nextState, state);
      state = nextState;
      ownProps = nextOwnProps;
      if (propsChanged && stateChanged)
        return handleNewPropsAndNewState();
      if (propsChanged)
        return handleNewProps();
      if (stateChanged)
        return handleNewState();
      return mergedProps;
    }
    return function pureFinalPropsSelector(nextState, nextOwnProps) {
      return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
    };
  }
  function finalPropsSelectorFactory(dispatch, _ref2) {
    var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = _objectWithoutPropertiesLoose2(_ref2, _excluded3);
    var mapStateToProps = initMapStateToProps(dispatch, options);
    var mapDispatchToProps2 = initMapDispatchToProps(dispatch, options);
    var mergeProps = initMergeProps(dispatch, options);
    if (true) {
      verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps, options.displayName);
    }
    var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
    return selectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch, options);
  }

  // ../../node_modules/react-redux/es/connect/connect.js
  var _excluded4 = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];
  function match(arg, factories, name) {
    for (var i3 = factories.length - 1; i3 >= 0; i3--) {
      var result = factories[i3](arg);
      if (result)
        return result;
    }
    return function(dispatch, options) {
      throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
    };
  }
  function strictEqual(a3, b3) {
    return a3 === b3;
  }
  function createConnect(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? mapStateToProps_default : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? mapDispatchToProps_default : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? mergeProps_default : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;
    return function connect(mapStateToProps, mapDispatchToProps2, mergeProps, _ref2) {
      if (_ref2 === void 0) {
        _ref2 = {};
      }
      var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual2 : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual2 : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual2 : _ref3$areMergedPropsE, extraOptions = _objectWithoutPropertiesLoose2(_ref3, _excluded4);
      var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
      var initMapDispatchToProps = match(mapDispatchToProps2, mapDispatchToPropsFactories, "mapDispatchToProps");
      var initMergeProps = match(mergeProps, mergePropsFactories, "mergeProps");
      return connectHOC(selectorFactory, _extends({
        methodName: "connect",
        getDisplayName: function getDisplayName(name) {
          return "Connect(" + name + ")";
        },
        shouldHandleStateChanges: Boolean(mapStateToProps),
        initMapStateToProps,
        initMapDispatchToProps,
        initMergeProps,
        pure,
        areStatesEqual,
        areOwnPropsEqual,
        areStatePropsEqual,
        areMergedPropsEqual
      }, extraOptions));
    };
  }
  var connect_default = /* @__PURE__ */ createConnect();

  // ../../node_modules/react-redux/es/hooks/useStore.js
  var import_react22 = __toESM(require_react());

  // ../../node_modules/react-redux/es/hooks/useReduxContext.js
  var import_react21 = __toESM(require_react());

  // ../../node_modules/react-redux/es/hooks/useSelector.js
  var import_react23 = __toESM(require_react());

  // ../../node_modules/react-redux/es/utils/reactBatchedUpdates.js
  var import_react_dom3 = __toESM(require_react_dom());

  // ../../node_modules/react-redux/es/index.js
  setBatch(import_react_dom3.unstable_batchedUpdates);

  // ../../node_modules/use-memo-one/dist/use-memo-one.esm.js
  var import_react24 = __toESM(require_react());
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i3 = 0; i3 < newInputs.length; i3++) {
      if (newInputs[i3] !== lastInputs[i3]) {
        return false;
      }
    }
    return true;
  }
  function useMemoOne(getResult, inputs) {
    var initial = (0, import_react24.useState)(function() {
      return {
        inputs,
        result: getResult()
      };
    })[0];
    var isFirstRun = (0, import_react24.useRef)(true);
    var committed = (0, import_react24.useRef)(initial);
    var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
    var cache = useCache ? committed.current : {
      inputs,
      result: getResult()
    };
    (0, import_react24.useEffect)(function() {
      isFirstRun.current = false;
      committed.current = cache;
    }, [cache]);
    return cache.result;
  }
  function useCallbackOne(callback, inputs) {
    return useMemoOne(function() {
      return callback;
    }, inputs);
  }
  var useMemo5 = useMemoOne;
  var useCallback2 = useCallbackOne;

  // ../../node_modules/tiny-invariant/dist/tiny-invariant.esm.js
  var isProduction = false;
  var prefix = "Invariant failed";
  function invariant2(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix);
    }
    var provided = typeof message === "function" ? message() : message;
    var value = provided ? prefix + ": " + provided : prefix;
    throw new Error(value);
  }

  // ../../node_modules/css-box-model/dist/css-box-model.esm.js
  var getRect = function getRect2(_ref) {
    var top2 = _ref.top, right2 = _ref.right, bottom2 = _ref.bottom, left2 = _ref.left;
    var width = right2 - left2;
    var height = bottom2 - top2;
    var rect = {
      top: top2,
      right: right2,
      bottom: bottom2,
      left: left2,
      width,
      height,
      x: left2,
      y: top2,
      center: {
        x: (right2 + left2) / 2,
        y: (bottom2 + top2) / 2
      }
    };
    return rect;
  };
  var expand = function expand2(target, expandBy) {
    return {
      top: target.top - expandBy.top,
      left: target.left - expandBy.left,
      bottom: target.bottom + expandBy.bottom,
      right: target.right + expandBy.right
    };
  };
  var shrink = function shrink2(target, shrinkBy) {
    return {
      top: target.top + shrinkBy.top,
      left: target.left + shrinkBy.left,
      bottom: target.bottom - shrinkBy.bottom,
      right: target.right - shrinkBy.right
    };
  };
  var shift = function shift2(target, shiftBy) {
    return {
      top: target.top + shiftBy.y,
      left: target.left + shiftBy.x,
      bottom: target.bottom + shiftBy.y,
      right: target.right + shiftBy.x
    };
  };
  var noSpacing = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
  var createBox = function createBox2(_ref2) {
    var borderBox = _ref2.borderBox, _ref2$margin = _ref2.margin, margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? noSpacing : _ref2$border, _ref2$padding = _ref2.padding, padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
    var marginBox = getRect(expand(borderBox, margin));
    var paddingBox = getRect(shrink(borderBox, border));
    var contentBox = getRect(shrink(paddingBox, padding));
    return {
      marginBox,
      borderBox: getRect(borderBox),
      paddingBox,
      contentBox,
      margin,
      border,
      padding
    };
  };
  var parse2 = function parse3(raw) {
    var value = raw.slice(0, -2);
    var suffix2 = raw.slice(-2);
    if (suffix2 !== "px") {
      return 0;
    }
    var result = Number(value);
    !!isNaN(result) ? true ? invariant2(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]") : invariant2(false) : void 0;
    return result;
  };
  var getWindowScroll2 = function getWindowScroll3() {
    return {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  };
  var offset2 = function offset3(original, change) {
    var borderBox = original.borderBox, border = original.border, margin = original.margin, padding = original.padding;
    var shifted = shift(borderBox, change);
    return createBox({
      borderBox: shifted,
      border,
      margin,
      padding
    });
  };
  var withScroll = function withScroll2(original, scroll3) {
    if (scroll3 === void 0) {
      scroll3 = getWindowScroll2();
    }
    return offset2(original, scroll3);
  };
  var calculateBox = function calculateBox2(borderBox, styles) {
    var margin = {
      top: parse2(styles.marginTop),
      right: parse2(styles.marginRight),
      bottom: parse2(styles.marginBottom),
      left: parse2(styles.marginLeft)
    };
    var padding = {
      top: parse2(styles.paddingTop),
      right: parse2(styles.paddingRight),
      bottom: parse2(styles.paddingBottom),
      left: parse2(styles.paddingLeft)
    };
    var border = {
      top: parse2(styles.borderTopWidth),
      right: parse2(styles.borderRightWidth),
      bottom: parse2(styles.borderBottomWidth),
      left: parse2(styles.borderLeftWidth)
    };
    return createBox({
      borderBox,
      margin,
      padding,
      border
    });
  };
  var getBox = function getBox2(el) {
    var borderBox = el.getBoundingClientRect();
    var styles = window.getComputedStyle(el);
    return calculateBox(borderBox, styles);
  };

  // ../../node_modules/memoize-one/dist/memoize-one.esm.js
  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === "number" && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual2(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i3 = 0; i3 < newInputs.length; i3++) {
      if (!isEqual(newInputs[i3], lastInputs[i3])) {
        return false;
      }
    }
    return true;
  }
  function memoizeOne(resultFn, isEqual5) {
    if (isEqual5 === void 0) {
      isEqual5 = areInputsEqual2;
    }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
      var newArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (calledOnce && lastThis === this && isEqual5(newArgs, lastArgs)) {
        return lastResult;
      }
      lastResult = resultFn.apply(this, newArgs);
      calledOnce = true;
      lastThis = this;
      lastArgs = newArgs;
      return lastResult;
    }
    return memoized;
  }
  var memoize_one_esm_default = memoizeOne;

  // ../../node_modules/raf-schd/dist/raf-schd.esm.js
  var rafSchd = function rafSchd2(fn4) {
    var lastArgs = [];
    var frameId = null;
    var wrapperFn = function wrapperFn2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      lastArgs = args;
      if (frameId) {
        return;
      }
      frameId = requestAnimationFrame(function() {
        frameId = null;
        fn4.apply(void 0, lastArgs);
      });
    };
    wrapperFn.cancel = function() {
      if (!frameId) {
        return;
      }
      cancelAnimationFrame(frameId);
      frameId = null;
    };
    return wrapperFn;
  };
  var raf_schd_esm_default = rafSchd;

  // ../../node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js
  var import_react_dom4 = __toESM(require_react_dom());
  var isProduction2 = false;
  var spacesAndTabs = /[ \t]{2,}/g;
  var lineStartWithSpaces = /^[ \t]*/gm;
  var clean2 = function clean3(value) {
    return value.replace(spacesAndTabs, " ").replace(lineStartWithSpaces, "").trim();
  };
  var getDevMessage2 = function getDevMessage3(message) {
    return clean2("\n  %creact-beautiful-dnd\n\n  %c" + clean2(message) + "\n\n  %c\u{1F477}\u200D This is a development only message. It will be removed in production builds.\n");
  };
  var getFormattedMessage2 = function getFormattedMessage3(message) {
    return [getDevMessage2(message), "color: #00C584; font-size: 1.2em; font-weight: bold;", "line-height: 1.5", "color: #723874;"];
  };
  var isDisabledFlag = "__react-beautiful-dnd-disable-dev-warnings";
  function log(type, message) {
    var _console;
    if (isProduction2) {
      return;
    }
    if (typeof window !== "undefined" && window[isDisabledFlag]) {
      return;
    }
    (_console = console)[type].apply(_console, getFormattedMessage2(message));
  }
  var warning3 = log.bind(null, "warn");
  var error = log.bind(null, "error");
  function noop2() {
  }
  function getOptions(shared2, fromBinding) {
    return _extends({}, shared2, {}, fromBinding);
  }
  function bindEvents(el, bindings, sharedOptions) {
    var unbindings = bindings.map(function(binding) {
      var options = getOptions(sharedOptions, binding.options);
      el.addEventListener(binding.eventName, binding.fn, options);
      return function unbind() {
        el.removeEventListener(binding.eventName, binding.fn, options);
      };
    });
    return function unbindAll() {
      unbindings.forEach(function(unbind) {
        unbind();
      });
    };
  }
  var isProduction$1 = false;
  var prefix2 = "Invariant failed";
  function RbdInvariant(message) {
    this.message = message;
  }
  RbdInvariant.prototype.toString = function toString() {
    return this.message;
  };
  function invariant3(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction$1) {
      throw new RbdInvariant(prefix2);
    } else {
      throw new RbdInvariant(prefix2 + ": " + (message || ""));
    }
  }
  var ErrorBoundary2 = function(_React$Component) {
    _inheritsLoose(ErrorBoundary3, _React$Component);
    function ErrorBoundary3() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.callbacks = null;
      _this.unbind = noop2;
      _this.onWindowError = function(event) {
        var callbacks = _this.getCallbacks();
        if (callbacks.isDragging()) {
          callbacks.tryAbort();
          true ? warning3("\n        An error was caught by our window 'error' event listener while a drag was occurring.\n        The active drag has been aborted.\n      ") : void 0;
        }
        var err = event.error;
        if (err instanceof RbdInvariant) {
          event.preventDefault();
          if (true) {
            error(err.message);
          }
        }
      };
      _this.getCallbacks = function() {
        if (!_this.callbacks) {
          throw new Error("Unable to find AppCallbacks in <ErrorBoundary/>");
        }
        return _this.callbacks;
      };
      _this.setCallbacks = function(callbacks) {
        _this.callbacks = callbacks;
      };
      return _this;
    }
    var _proto = ErrorBoundary3.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.unbind = bindEvents(window, [{
        eventName: "error",
        fn: this.onWindowError
      }]);
    };
    _proto.componentDidCatch = function componentDidCatch(err) {
      if (err instanceof RbdInvariant) {
        if (true) {
          error(err.message);
        }
        this.setState({});
        return;
      }
      throw err;
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.unbind();
    };
    _proto.render = function render2() {
      return this.props.children(this.setCallbacks);
    };
    return ErrorBoundary3;
  }(import_react25.default.Component);
  var dragHandleUsageInstructions = "\n  Press space bar to start a drag.\n  When dragging you can use the arrow keys to move the item around and escape to cancel.\n  Some screen readers may require you to be in focus mode or to use your pass through key\n";
  var position = function position2(index2) {
    return index2 + 1;
  };
  var onDragStart = function onDragStart2(start4) {
    return "\n  You have lifted an item in position " + position(start4.source.index) + "\n";
  };
  var withLocation = function withLocation2(source, destination) {
    var isInHomeList = source.droppableId === destination.droppableId;
    var startPosition = position(source.index);
    var endPosition = position(destination.index);
    if (isInHomeList) {
      return "\n      You have moved the item from position " + startPosition + "\n      to position " + endPosition + "\n    ";
    }
    return "\n    You have moved the item from position " + startPosition + "\n    in list " + source.droppableId + "\n    to list " + destination.droppableId + "\n    in position " + endPosition + "\n  ";
  };
  var withCombine = function withCombine2(id, source, combine2) {
    var inHomeList = source.droppableId === combine2.droppableId;
    if (inHomeList) {
      return "\n      The item " + id + "\n      has been combined with " + combine2.draggableId;
    }
    return "\n      The item " + id + "\n      in list " + source.droppableId + "\n      has been combined with " + combine2.draggableId + "\n      in list " + combine2.droppableId + "\n    ";
  };
  var onDragUpdate = function onDragUpdate2(update2) {
    var location = update2.destination;
    if (location) {
      return withLocation(update2.source, location);
    }
    var combine2 = update2.combine;
    if (combine2) {
      return withCombine(update2.draggableId, update2.source, combine2);
    }
    return "You are over an area that cannot be dropped on";
  };
  var returnedToStart = function returnedToStart2(source) {
    return "\n  The item has returned to its starting position\n  of " + position(source.index) + "\n";
  };
  var onDragEnd = function onDragEnd2(result) {
    if (result.reason === "CANCEL") {
      return "\n      Movement cancelled.\n      " + returnedToStart(result.source) + "\n    ";
    }
    var location = result.destination;
    var combine2 = result.combine;
    if (location) {
      return "\n      You have dropped the item.\n      " + withLocation(result.source, location) + "\n    ";
    }
    if (combine2) {
      return "\n      You have dropped the item.\n      " + withCombine(result.draggableId, result.source, combine2) + "\n    ";
    }
    return "\n    The item has been dropped while not over a drop area.\n    " + returnedToStart(result.source) + "\n  ";
  };
  var preset = {
    dragHandleUsageInstructions,
    onDragStart,
    onDragUpdate,
    onDragEnd
  };
  var origin = {
    x: 0,
    y: 0
  };
  var add = function add2(point1, point2) {
    return {
      x: point1.x + point2.x,
      y: point1.y + point2.y
    };
  };
  var subtract = function subtract2(point1, point2) {
    return {
      x: point1.x - point2.x,
      y: point1.y - point2.y
    };
  };
  var isEqual2 = function isEqual3(point1, point2) {
    return point1.x === point2.x && point1.y === point2.y;
  };
  var negate = function negate2(point) {
    return {
      x: point.x !== 0 ? -point.x : 0,
      y: point.y !== 0 ? -point.y : 0
    };
  };
  var patch = function patch2(line, value, otherValue) {
    var _ref;
    if (otherValue === void 0) {
      otherValue = 0;
    }
    return _ref = {}, _ref[line] = value, _ref[line === "x" ? "y" : "x"] = otherValue, _ref;
  };
  var distance = function distance2(point1, point2) {
    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
  };
  var closest = function closest2(target, points) {
    return Math.min.apply(Math, points.map(function(point) {
      return distance(target, point);
    }));
  };
  var apply = function apply2(fn4) {
    return function(point) {
      return {
        x: fn4(point.x),
        y: fn4(point.y)
      };
    };
  };
  var executeClip = function(frame, subject) {
    var result = getRect({
      top: Math.max(subject.top, frame.top),
      right: Math.min(subject.right, frame.right),
      bottom: Math.min(subject.bottom, frame.bottom),
      left: Math.max(subject.left, frame.left)
    });
    if (result.width <= 0 || result.height <= 0) {
      return null;
    }
    return result;
  };
  var offsetByPosition = function offsetByPosition2(spacing, point) {
    return {
      top: spacing.top + point.y,
      left: spacing.left + point.x,
      bottom: spacing.bottom + point.y,
      right: spacing.right + point.x
    };
  };
  var getCorners = function getCorners2(spacing) {
    return [{
      x: spacing.left,
      y: spacing.top
    }, {
      x: spacing.right,
      y: spacing.top
    }, {
      x: spacing.left,
      y: spacing.bottom
    }, {
      x: spacing.right,
      y: spacing.bottom
    }];
  };
  var noSpacing2 = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
  var scroll = function scroll2(target, frame) {
    if (!frame) {
      return target;
    }
    return offsetByPosition(target, frame.scroll.diff.displacement);
  };
  var increase = function increase2(target, axis, withPlaceholder) {
    if (withPlaceholder && withPlaceholder.increasedBy) {
      var _extends2;
      return _extends({}, target, (_extends2 = {}, _extends2[axis.end] = target[axis.end] + withPlaceholder.increasedBy[axis.line], _extends2));
    }
    return target;
  };
  var clip = function clip2(target, frame) {
    if (frame && frame.shouldClipSubject) {
      return executeClip(frame.pageMarginBox, target);
    }
    return getRect(target);
  };
  var getSubject = function(_ref) {
    var page = _ref.page, withPlaceholder = _ref.withPlaceholder, axis = _ref.axis, frame = _ref.frame;
    var scrolled = scroll(page.marginBox, frame);
    var increased = increase(scrolled, axis, withPlaceholder);
    var clipped = clip(increased, frame);
    return {
      page,
      withPlaceholder,
      active: clipped
    };
  };
  var scrollDroppable = function(droppable2, newScroll) {
    !droppable2.frame ? true ? invariant3(false) : invariant3(false) : void 0;
    var scrollable = droppable2.frame;
    var scrollDiff = subtract(newScroll, scrollable.scroll.initial);
    var scrollDisplacement = negate(scrollDiff);
    var frame = _extends({}, scrollable, {
      scroll: {
        initial: scrollable.scroll.initial,
        current: newScroll,
        diff: {
          value: scrollDiff,
          displacement: scrollDisplacement
        },
        max: scrollable.scroll.max
      }
    });
    var subject = getSubject({
      page: droppable2.subject.page,
      withPlaceholder: droppable2.subject.withPlaceholder,
      axis: droppable2.axis,
      frame
    });
    var result = _extends({}, droppable2, {
      frame,
      subject
    });
    return result;
  };
  function isInteger(value) {
    if (Number.isInteger) {
      return Number.isInteger(value);
    }
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
  }
  function values(map) {
    if (Object.values) {
      return Object.values(map);
    }
    return Object.keys(map).map(function(key) {
      return map[key];
    });
  }
  function findIndex(list, predicate) {
    if (list.findIndex) {
      return list.findIndex(predicate);
    }
    for (var i3 = 0; i3 < list.length; i3++) {
      if (predicate(list[i3])) {
        return i3;
      }
    }
    return -1;
  }
  function find(list, predicate) {
    if (list.find) {
      return list.find(predicate);
    }
    var index2 = findIndex(list, predicate);
    if (index2 !== -1) {
      return list[index2];
    }
    return void 0;
  }
  function toArray(list) {
    return Array.prototype.slice.call(list);
  }
  var toDroppableMap = memoize_one_esm_default(function(droppables) {
    return droppables.reduce(function(previous, current) {
      previous[current.descriptor.id] = current;
      return previous;
    }, {});
  });
  var toDraggableMap = memoize_one_esm_default(function(draggables) {
    return draggables.reduce(function(previous, current) {
      previous[current.descriptor.id] = current;
      return previous;
    }, {});
  });
  var toDroppableList = memoize_one_esm_default(function(droppables) {
    return values(droppables);
  });
  var toDraggableList = memoize_one_esm_default(function(draggables) {
    return values(draggables);
  });
  var getDraggablesInsideDroppable = memoize_one_esm_default(function(droppableId, draggables) {
    var result = toDraggableList(draggables).filter(function(draggable2) {
      return droppableId === draggable2.descriptor.droppableId;
    }).sort(function(a3, b3) {
      return a3.descriptor.index - b3.descriptor.index;
    });
    return result;
  });
  function tryGetDestination(impact) {
    if (impact.at && impact.at.type === "REORDER") {
      return impact.at.destination;
    }
    return null;
  }
  function tryGetCombine(impact) {
    if (impact.at && impact.at.type === "COMBINE") {
      return impact.at.combine;
    }
    return null;
  }
  var removeDraggableFromList = memoize_one_esm_default(function(remove, list) {
    return list.filter(function(item) {
      return item.descriptor.id !== remove.descriptor.id;
    });
  });
  var moveToNextCombine = function(_ref) {
    var isMovingForward = _ref.isMovingForward, draggable2 = _ref.draggable, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact;
    if (!destination.isCombineEnabled) {
      return null;
    }
    var location = tryGetDestination(previousImpact);
    if (!location) {
      return null;
    }
    function getImpact(target) {
      var at = {
        type: "COMBINE",
        combine: {
          draggableId: target,
          droppableId: destination.descriptor.id
        }
      };
      return _extends({}, previousImpact, {
        at
      });
    }
    var all = previousImpact.displaced.all;
    var closestId = all.length ? all[0] : null;
    if (isMovingForward) {
      return closestId ? getImpact(closestId) : null;
    }
    var withoutDraggable = removeDraggableFromList(draggable2, insideDestination);
    if (!closestId) {
      if (!withoutDraggable.length) {
        return null;
      }
      var last = withoutDraggable[withoutDraggable.length - 1];
      return getImpact(last.descriptor.id);
    }
    var indexOfClosest = findIndex(withoutDraggable, function(d4) {
      return d4.descriptor.id === closestId;
    });
    !(indexOfClosest !== -1) ? true ? invariant3(false, "Could not find displaced item in set") : invariant3(false) : void 0;
    var proposedIndex = indexOfClosest - 1;
    if (proposedIndex < 0) {
      return null;
    }
    var before = withoutDraggable[proposedIndex];
    return getImpact(before.descriptor.id);
  };
  var isHomeOf = function(draggable2, destination) {
    return draggable2.descriptor.droppableId === destination.descriptor.id;
  };
  var noDisplacedBy = {
    point: origin,
    value: 0
  };
  var emptyGroups = {
    invisible: {},
    visible: {},
    all: []
  };
  var noImpact = {
    displaced: emptyGroups,
    displacedBy: noDisplacedBy,
    at: null
  };
  var isWithin = function(lowerBound, upperBound) {
    return function(value) {
      return lowerBound <= value && value <= upperBound;
    };
  };
  var isPartiallyVisibleThroughFrame = function(frame) {
    var isWithinVertical = isWithin(frame.top, frame.bottom);
    var isWithinHorizontal = isWithin(frame.left, frame.right);
    return function(subject) {
      var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
      if (isContained) {
        return true;
      }
      var isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
      var isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);
      var isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;
      if (isPartiallyContained) {
        return true;
      }
      var isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;
      var isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;
      var isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;
      if (isTargetBiggerThanFrame) {
        return true;
      }
      var isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
      return isTargetBiggerOnOneAxis;
    };
  };
  var isTotallyVisibleThroughFrame = function(frame) {
    var isWithinVertical = isWithin(frame.top, frame.bottom);
    var isWithinHorizontal = isWithin(frame.left, frame.right);
    return function(subject) {
      var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
      return isContained;
    };
  };
  var vertical = {
    direction: "vertical",
    line: "y",
    crossAxisLine: "x",
    start: "top",
    end: "bottom",
    size: "height",
    crossAxisStart: "left",
    crossAxisEnd: "right",
    crossAxisSize: "width"
  };
  var horizontal = {
    direction: "horizontal",
    line: "x",
    crossAxisLine: "y",
    start: "left",
    end: "right",
    size: "width",
    crossAxisStart: "top",
    crossAxisEnd: "bottom",
    crossAxisSize: "height"
  };
  var isTotallyVisibleThroughFrameOnAxis = function(axis) {
    return function(frame) {
      var isWithinVertical = isWithin(frame.top, frame.bottom);
      var isWithinHorizontal = isWithin(frame.left, frame.right);
      return function(subject) {
        if (axis === vertical) {
          return isWithinVertical(subject.top) && isWithinVertical(subject.bottom);
        }
        return isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
      };
    };
  };
  var getDroppableDisplaced = function getDroppableDisplaced2(target, destination) {
    var displacement = destination.frame ? destination.frame.scroll.diff.displacement : origin;
    return offsetByPosition(target, displacement);
  };
  var isVisibleInDroppable = function isVisibleInDroppable2(target, destination, isVisibleThroughFrameFn) {
    if (!destination.subject.active) {
      return false;
    }
    return isVisibleThroughFrameFn(destination.subject.active)(target);
  };
  var isVisibleInViewport = function isVisibleInViewport2(target, viewport2, isVisibleThroughFrameFn) {
    return isVisibleThroughFrameFn(viewport2)(target);
  };
  var isVisible = function isVisible2(_ref) {
    var toBeDisplaced = _ref.target, destination = _ref.destination, viewport2 = _ref.viewport, withDroppableDisplacement2 = _ref.withDroppableDisplacement, isVisibleThroughFrameFn = _ref.isVisibleThroughFrameFn;
    var displacedTarget = withDroppableDisplacement2 ? getDroppableDisplaced(toBeDisplaced, destination) : toBeDisplaced;
    return isVisibleInDroppable(displacedTarget, destination, isVisibleThroughFrameFn) && isVisibleInViewport(displacedTarget, viewport2, isVisibleThroughFrameFn);
  };
  var isPartiallyVisible = function isPartiallyVisible2(args) {
    return isVisible(_extends({}, args, {
      isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
    }));
  };
  var isTotallyVisible = function isTotallyVisible2(args) {
    return isVisible(_extends({}, args, {
      isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
    }));
  };
  var isTotallyVisibleOnAxis = function isTotallyVisibleOnAxis2(args) {
    return isVisible(_extends({}, args, {
      isVisibleThroughFrameFn: isTotallyVisibleThroughFrameOnAxis(args.destination.axis)
    }));
  };
  var getShouldAnimate = function getShouldAnimate2(id, last, forceShouldAnimate) {
    if (typeof forceShouldAnimate === "boolean") {
      return forceShouldAnimate;
    }
    if (!last) {
      return true;
    }
    var invisible = last.invisible, visible = last.visible;
    if (invisible[id]) {
      return false;
    }
    var previous = visible[id];
    return previous ? previous.shouldAnimate : true;
  };
  function getTarget(draggable2, displacedBy) {
    var marginBox = draggable2.page.marginBox;
    var expandBy = {
      top: displacedBy.point.y,
      right: 0,
      bottom: 0,
      left: displacedBy.point.x
    };
    return getRect(expand(marginBox, expandBy));
  }
  function getDisplacementGroups(_ref) {
    var afterDragging = _ref.afterDragging, destination = _ref.destination, displacedBy = _ref.displacedBy, viewport2 = _ref.viewport, forceShouldAnimate = _ref.forceShouldAnimate, last = _ref.last;
    return afterDragging.reduce(function process2(groups, draggable2) {
      var target = getTarget(draggable2, displacedBy);
      var id = draggable2.descriptor.id;
      groups.all.push(id);
      var isVisible3 = isPartiallyVisible({
        target,
        destination,
        viewport: viewport2,
        withDroppableDisplacement: true
      });
      if (!isVisible3) {
        groups.invisible[draggable2.descriptor.id] = true;
        return groups;
      }
      var shouldAnimate = getShouldAnimate(id, last, forceShouldAnimate);
      var displacement = {
        draggableId: id,
        shouldAnimate
      };
      groups.visible[id] = displacement;
      return groups;
    }, {
      all: [],
      visible: {},
      invisible: {}
    });
  }
  function getIndexOfLastItem(draggables, options) {
    if (!draggables.length) {
      return 0;
    }
    var indexOfLastItem = draggables[draggables.length - 1].descriptor.index;
    return options.inHomeList ? indexOfLastItem : indexOfLastItem + 1;
  }
  function goAtEnd(_ref) {
    var insideDestination = _ref.insideDestination, inHomeList = _ref.inHomeList, displacedBy = _ref.displacedBy, destination = _ref.destination;
    var newIndex = getIndexOfLastItem(insideDestination, {
      inHomeList
    });
    return {
      displaced: emptyGroups,
      displacedBy,
      at: {
        type: "REORDER",
        destination: {
          droppableId: destination.descriptor.id,
          index: newIndex
        }
      }
    };
  }
  function calculateReorderImpact(_ref2) {
    var draggable2 = _ref2.draggable, insideDestination = _ref2.insideDestination, destination = _ref2.destination, viewport2 = _ref2.viewport, displacedBy = _ref2.displacedBy, last = _ref2.last, index2 = _ref2.index, forceShouldAnimate = _ref2.forceShouldAnimate;
    var inHomeList = isHomeOf(draggable2, destination);
    if (index2 == null) {
      return goAtEnd({
        insideDestination,
        inHomeList,
        displacedBy,
        destination
      });
    }
    var match2 = find(insideDestination, function(item) {
      return item.descriptor.index === index2;
    });
    if (!match2) {
      return goAtEnd({
        insideDestination,
        inHomeList,
        displacedBy,
        destination
      });
    }
    var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
    var sliceFrom = insideDestination.indexOf(match2);
    var impacted = withoutDragging.slice(sliceFrom);
    var displaced = getDisplacementGroups({
      afterDragging: impacted,
      destination,
      displacedBy,
      last,
      viewport: viewport2.frame,
      forceShouldAnimate
    });
    return {
      displaced,
      displacedBy,
      at: {
        type: "REORDER",
        destination: {
          droppableId: destination.descriptor.id,
          index: index2
        }
      }
    };
  }
  function didStartAfterCritical(draggableId, afterCritical) {
    return Boolean(afterCritical.effected[draggableId]);
  }
  var fromCombine = function(_ref) {
    var isMovingForward = _ref.isMovingForward, destination = _ref.destination, draggables = _ref.draggables, combine2 = _ref.combine, afterCritical = _ref.afterCritical;
    if (!destination.isCombineEnabled) {
      return null;
    }
    var combineId = combine2.draggableId;
    var combineWith = draggables[combineId];
    var combineWithIndex = combineWith.descriptor.index;
    var didCombineWithStartAfterCritical = didStartAfterCritical(combineId, afterCritical);
    if (didCombineWithStartAfterCritical) {
      if (isMovingForward) {
        return combineWithIndex;
      }
      return combineWithIndex - 1;
    }
    if (isMovingForward) {
      return combineWithIndex + 1;
    }
    return combineWithIndex;
  };
  var fromReorder = function(_ref) {
    var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, insideDestination = _ref.insideDestination, location = _ref.location;
    if (!insideDestination.length) {
      return null;
    }
    var currentIndex = location.index;
    var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
    var firstIndex = insideDestination[0].descriptor.index;
    var lastIndex = insideDestination[insideDestination.length - 1].descriptor.index;
    var upperBound = isInHomeList ? lastIndex : lastIndex + 1;
    if (proposedIndex < firstIndex) {
      return null;
    }
    if (proposedIndex > upperBound) {
      return null;
    }
    return proposedIndex;
  };
  var moveToNextIndex = function(_ref) {
    var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, draggable2 = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
    var wasAt = previousImpact.at;
    !wasAt ? true ? invariant3(false, "Cannot move in direction without previous impact location") : invariant3(false) : void 0;
    if (wasAt.type === "REORDER") {
      var _newIndex = fromReorder({
        isMovingForward,
        isInHomeList,
        location: wasAt.destination,
        insideDestination
      });
      if (_newIndex == null) {
        return null;
      }
      return calculateReorderImpact({
        draggable: draggable2,
        insideDestination,
        destination,
        viewport: viewport2,
        last: previousImpact.displaced,
        displacedBy: previousImpact.displacedBy,
        index: _newIndex
      });
    }
    var newIndex = fromCombine({
      isMovingForward,
      destination,
      displaced: previousImpact.displaced,
      draggables,
      combine: wasAt.combine,
      afterCritical
    });
    if (newIndex == null) {
      return null;
    }
    return calculateReorderImpact({
      draggable: draggable2,
      insideDestination,
      destination,
      viewport: viewport2,
      last: previousImpact.displaced,
      displacedBy: previousImpact.displacedBy,
      index: newIndex
    });
  };
  var getCombinedItemDisplacement = function(_ref) {
    var displaced = _ref.displaced, afterCritical = _ref.afterCritical, combineWith = _ref.combineWith, displacedBy = _ref.displacedBy;
    var isDisplaced = Boolean(displaced.visible[combineWith] || displaced.invisible[combineWith]);
    if (didStartAfterCritical(combineWith, afterCritical)) {
      return isDisplaced ? origin : negate(displacedBy.point);
    }
    return isDisplaced ? displacedBy.point : origin;
  };
  var whenCombining = function(_ref) {
    var afterCritical = _ref.afterCritical, impact = _ref.impact, draggables = _ref.draggables;
    var combine2 = tryGetCombine(impact);
    !combine2 ? true ? invariant3(false) : invariant3(false) : void 0;
    var combineWith = combine2.draggableId;
    var center = draggables[combineWith].page.borderBox.center;
    var displaceBy = getCombinedItemDisplacement({
      displaced: impact.displaced,
      afterCritical,
      combineWith,
      displacedBy: impact.displacedBy
    });
    return add(center, displaceBy);
  };
  var distanceFromStartToBorderBoxCenter = function distanceFromStartToBorderBoxCenter2(axis, box) {
    return box.margin[axis.start] + box.borderBox[axis.size] / 2;
  };
  var distanceFromEndToBorderBoxCenter = function distanceFromEndToBorderBoxCenter2(axis, box) {
    return box.margin[axis.end] + box.borderBox[axis.size] / 2;
  };
  var getCrossAxisBorderBoxCenter = function getCrossAxisBorderBoxCenter2(axis, target, isMoving) {
    return target[axis.crossAxisStart] + isMoving.margin[axis.crossAxisStart] + isMoving.borderBox[axis.crossAxisSize] / 2;
  };
  var goAfter = function goAfter2(_ref) {
    var axis = _ref.axis, moveRelativeTo = _ref.moveRelativeTo, isMoving = _ref.isMoving;
    return patch(axis.line, moveRelativeTo.marginBox[axis.end] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
  };
  var goBefore = function goBefore2(_ref2) {
    var axis = _ref2.axis, moveRelativeTo = _ref2.moveRelativeTo, isMoving = _ref2.isMoving;
    return patch(axis.line, moveRelativeTo.marginBox[axis.start] - distanceFromEndToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
  };
  var goIntoStart = function goIntoStart2(_ref3) {
    var axis = _ref3.axis, moveInto = _ref3.moveInto, isMoving = _ref3.isMoving;
    return patch(axis.line, moveInto.contentBox[axis.start] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveInto.contentBox, isMoving));
  };
  var whenReordering = function(_ref) {
    var impact = _ref.impact, draggable2 = _ref.draggable, draggables = _ref.draggables, droppable2 = _ref.droppable, afterCritical = _ref.afterCritical;
    var insideDestination = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
    var draggablePage = draggable2.page;
    var axis = droppable2.axis;
    if (!insideDestination.length) {
      return goIntoStart({
        axis,
        moveInto: droppable2.page,
        isMoving: draggablePage
      });
    }
    var displaced = impact.displaced, displacedBy = impact.displacedBy;
    var closestAfter = displaced.all[0];
    if (closestAfter) {
      var closest3 = draggables[closestAfter];
      if (didStartAfterCritical(closestAfter, afterCritical)) {
        return goBefore({
          axis,
          moveRelativeTo: closest3.page,
          isMoving: draggablePage
        });
      }
      var withDisplacement = offset2(closest3.page, displacedBy.point);
      return goBefore({
        axis,
        moveRelativeTo: withDisplacement,
        isMoving: draggablePage
      });
    }
    var last = insideDestination[insideDestination.length - 1];
    if (last.descriptor.id === draggable2.descriptor.id) {
      return draggablePage.borderBox.center;
    }
    if (didStartAfterCritical(last.descriptor.id, afterCritical)) {
      var page = offset2(last.page, negate(afterCritical.displacedBy.point));
      return goAfter({
        axis,
        moveRelativeTo: page,
        isMoving: draggablePage
      });
    }
    return goAfter({
      axis,
      moveRelativeTo: last.page,
      isMoving: draggablePage
    });
  };
  var withDroppableDisplacement = function(droppable2, point) {
    var frame = droppable2.frame;
    if (!frame) {
      return point;
    }
    return add(point, frame.scroll.diff.displacement);
  };
  var getResultWithoutDroppableDisplacement = function getResultWithoutDroppableDisplacement2(_ref) {
    var impact = _ref.impact, draggable2 = _ref.draggable, droppable2 = _ref.droppable, draggables = _ref.draggables, afterCritical = _ref.afterCritical;
    var original = draggable2.page.borderBox.center;
    var at = impact.at;
    if (!droppable2) {
      return original;
    }
    if (!at) {
      return original;
    }
    if (at.type === "REORDER") {
      return whenReordering({
        impact,
        draggable: draggable2,
        draggables,
        droppable: droppable2,
        afterCritical
      });
    }
    return whenCombining({
      impact,
      draggables,
      afterCritical
    });
  };
  var getPageBorderBoxCenterFromImpact = function(args) {
    var withoutDisplacement = getResultWithoutDroppableDisplacement(args);
    var droppable2 = args.droppable;
    var withDisplacement = droppable2 ? withDroppableDisplacement(droppable2, withoutDisplacement) : withoutDisplacement;
    return withDisplacement;
  };
  var scrollViewport = function(viewport2, newScroll) {
    var diff = subtract(newScroll, viewport2.scroll.initial);
    var displacement = negate(diff);
    var frame = getRect({
      top: newScroll.y,
      bottom: newScroll.y + viewport2.frame.height,
      left: newScroll.x,
      right: newScroll.x + viewport2.frame.width
    });
    var updated = {
      frame,
      scroll: {
        initial: viewport2.scroll.initial,
        max: viewport2.scroll.max,
        current: newScroll,
        diff: {
          value: diff,
          displacement
        }
      }
    };
    return updated;
  };
  function getDraggables(ids, draggables) {
    return ids.map(function(id) {
      return draggables[id];
    });
  }
  function tryGetVisible(id, groups) {
    for (var i3 = 0; i3 < groups.length; i3++) {
      var displacement = groups[i3].visible[id];
      if (displacement) {
        return displacement;
      }
    }
    return null;
  }
  var speculativelyIncrease = function(_ref) {
    var impact = _ref.impact, viewport2 = _ref.viewport, destination = _ref.destination, draggables = _ref.draggables, maxScrollChange = _ref.maxScrollChange;
    var scrolledViewport = scrollViewport(viewport2, add(viewport2.scroll.current, maxScrollChange));
    var scrolledDroppable = destination.frame ? scrollDroppable(destination, add(destination.frame.scroll.current, maxScrollChange)) : destination;
    var last = impact.displaced;
    var withViewportScroll = getDisplacementGroups({
      afterDragging: getDraggables(last.all, draggables),
      destination,
      displacedBy: impact.displacedBy,
      viewport: scrolledViewport.frame,
      last,
      forceShouldAnimate: false
    });
    var withDroppableScroll2 = getDisplacementGroups({
      afterDragging: getDraggables(last.all, draggables),
      destination: scrolledDroppable,
      displacedBy: impact.displacedBy,
      viewport: viewport2.frame,
      last,
      forceShouldAnimate: false
    });
    var invisible = {};
    var visible = {};
    var groups = [last, withViewportScroll, withDroppableScroll2];
    last.all.forEach(function(id) {
      var displacement = tryGetVisible(id, groups);
      if (displacement) {
        visible[id] = displacement;
        return;
      }
      invisible[id] = true;
    });
    var newImpact = _extends({}, impact, {
      displaced: {
        all: last.all,
        invisible,
        visible
      }
    });
    return newImpact;
  };
  var withViewportDisplacement = function(viewport2, point) {
    return add(viewport2.scroll.diff.displacement, point);
  };
  var getClientFromPageBorderBoxCenter = function(_ref) {
    var pageBorderBoxCenter = _ref.pageBorderBoxCenter, draggable2 = _ref.draggable, viewport2 = _ref.viewport;
    var withoutPageScrollChange = withViewportDisplacement(viewport2, pageBorderBoxCenter);
    var offset4 = subtract(withoutPageScrollChange, draggable2.page.borderBox.center);
    return add(draggable2.client.borderBox.center, offset4);
  };
  var isTotallyVisibleInNewLocation = function(_ref) {
    var draggable2 = _ref.draggable, destination = _ref.destination, newPageBorderBoxCenter = _ref.newPageBorderBoxCenter, viewport2 = _ref.viewport, withDroppableDisplacement2 = _ref.withDroppableDisplacement, _ref$onlyOnMainAxis = _ref.onlyOnMainAxis, onlyOnMainAxis = _ref$onlyOnMainAxis === void 0 ? false : _ref$onlyOnMainAxis;
    var changeNeeded = subtract(newPageBorderBoxCenter, draggable2.page.borderBox.center);
    var shifted = offsetByPosition(draggable2.page.borderBox, changeNeeded);
    var args = {
      target: shifted,
      destination,
      withDroppableDisplacement: withDroppableDisplacement2,
      viewport: viewport2
    };
    return onlyOnMainAxis ? isTotallyVisibleOnAxis(args) : isTotallyVisible(args);
  };
  var moveToNextPlace = function(_ref) {
    var isMovingForward = _ref.isMovingForward, draggable2 = _ref.draggable, destination = _ref.destination, draggables = _ref.draggables, previousImpact = _ref.previousImpact, viewport2 = _ref.viewport, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, previousClientSelection = _ref.previousClientSelection, afterCritical = _ref.afterCritical;
    if (!destination.isEnabled) {
      return null;
    }
    var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
    var isInHomeList = isHomeOf(draggable2, destination);
    var impact = moveToNextCombine({
      isMovingForward,
      draggable: draggable2,
      destination,
      insideDestination,
      previousImpact
    }) || moveToNextIndex({
      isMovingForward,
      isInHomeList,
      draggable: draggable2,
      draggables,
      destination,
      insideDestination,
      previousImpact,
      viewport: viewport2,
      afterCritical
    });
    if (!impact) {
      return null;
    }
    var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact,
      draggable: draggable2,
      droppable: destination,
      draggables,
      afterCritical
    });
    var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
      draggable: draggable2,
      destination,
      newPageBorderBoxCenter: pageBorderBoxCenter,
      viewport: viewport2.frame,
      withDroppableDisplacement: false,
      onlyOnMainAxis: true
    });
    if (isVisibleInNewLocation) {
      var clientSelection = getClientFromPageBorderBoxCenter({
        pageBorderBoxCenter,
        draggable: draggable2,
        viewport: viewport2
      });
      return {
        clientSelection,
        impact,
        scrollJumpRequest: null
      };
    }
    var distance3 = subtract(pageBorderBoxCenter, previousPageBorderBoxCenter);
    var cautious = speculativelyIncrease({
      impact,
      viewport: viewport2,
      destination,
      draggables,
      maxScrollChange: distance3
    });
    return {
      clientSelection: previousClientSelection,
      impact: cautious,
      scrollJumpRequest: distance3
    };
  };
  var getKnownActive = function getKnownActive2(droppable2) {
    var rect = droppable2.subject.active;
    !rect ? true ? invariant3(false, "Cannot get clipped area from droppable") : invariant3(false) : void 0;
    return rect;
  };
  var getBestCrossAxisDroppable = function(_ref) {
    var isMovingForward = _ref.isMovingForward, pageBorderBoxCenter = _ref.pageBorderBoxCenter, source = _ref.source, droppables = _ref.droppables, viewport2 = _ref.viewport;
    var active = source.subject.active;
    if (!active) {
      return null;
    }
    var axis = source.axis;
    var isBetweenSourceClipped = isWithin(active[axis.start], active[axis.end]);
    var candidates = toDroppableList(droppables).filter(function(droppable2) {
      return droppable2 !== source;
    }).filter(function(droppable2) {
      return droppable2.isEnabled;
    }).filter(function(droppable2) {
      return Boolean(droppable2.subject.active);
    }).filter(function(droppable2) {
      return isPartiallyVisibleThroughFrame(viewport2.frame)(getKnownActive(droppable2));
    }).filter(function(droppable2) {
      var activeOfTarget = getKnownActive(droppable2);
      if (isMovingForward) {
        return active[axis.crossAxisEnd] < activeOfTarget[axis.crossAxisEnd];
      }
      return activeOfTarget[axis.crossAxisStart] < active[axis.crossAxisStart];
    }).filter(function(droppable2) {
      var activeOfTarget = getKnownActive(droppable2);
      var isBetweenDestinationClipped = isWithin(activeOfTarget[axis.start], activeOfTarget[axis.end]);
      return isBetweenSourceClipped(activeOfTarget[axis.start]) || isBetweenSourceClipped(activeOfTarget[axis.end]) || isBetweenDestinationClipped(active[axis.start]) || isBetweenDestinationClipped(active[axis.end]);
    }).sort(function(a3, b3) {
      var first = getKnownActive(a3)[axis.crossAxisStart];
      var second = getKnownActive(b3)[axis.crossAxisStart];
      if (isMovingForward) {
        return first - second;
      }
      return second - first;
    }).filter(function(droppable2, index2, array) {
      return getKnownActive(droppable2)[axis.crossAxisStart] === getKnownActive(array[0])[axis.crossAxisStart];
    });
    if (!candidates.length) {
      return null;
    }
    if (candidates.length === 1) {
      return candidates[0];
    }
    var contains2 = candidates.filter(function(droppable2) {
      var isWithinDroppable = isWithin(getKnownActive(droppable2)[axis.start], getKnownActive(droppable2)[axis.end]);
      return isWithinDroppable(pageBorderBoxCenter[axis.line]);
    });
    if (contains2.length === 1) {
      return contains2[0];
    }
    if (contains2.length > 1) {
      return contains2.sort(function(a3, b3) {
        return getKnownActive(a3)[axis.start] - getKnownActive(b3)[axis.start];
      })[0];
    }
    return candidates.sort(function(a3, b3) {
      var first = closest(pageBorderBoxCenter, getCorners(getKnownActive(a3)));
      var second = closest(pageBorderBoxCenter, getCorners(getKnownActive(b3)));
      if (first !== second) {
        return first - second;
      }
      return getKnownActive(a3)[axis.start] - getKnownActive(b3)[axis.start];
    })[0];
  };
  var getCurrentPageBorderBoxCenter = function getCurrentPageBorderBoxCenter2(draggable2, afterCritical) {
    var original = draggable2.page.borderBox.center;
    return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? subtract(original, afterCritical.displacedBy.point) : original;
  };
  var getCurrentPageBorderBox = function getCurrentPageBorderBox2(draggable2, afterCritical) {
    var original = draggable2.page.borderBox;
    return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? offsetByPosition(original, negate(afterCritical.displacedBy.point)) : original;
  };
  var getClosestDraggable = function(_ref) {
    var pageBorderBoxCenter = _ref.pageBorderBoxCenter, viewport2 = _ref.viewport, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;
    var sorted = insideDestination.filter(function(draggable2) {
      return isTotallyVisible({
        target: getCurrentPageBorderBox(draggable2, afterCritical),
        destination,
        viewport: viewport2.frame,
        withDroppableDisplacement: true
      });
    }).sort(function(a3, b3) {
      var distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(a3, afterCritical)));
      var distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(b3, afterCritical)));
      if (distanceToA < distanceToB) {
        return -1;
      }
      if (distanceToB < distanceToA) {
        return 1;
      }
      return a3.descriptor.index - b3.descriptor.index;
    });
    return sorted[0] || null;
  };
  var getDisplacedBy = memoize_one_esm_default(function getDisplacedBy2(axis, displaceBy) {
    var displacement = displaceBy[axis.line];
    return {
      value: displacement,
      point: patch(axis.line, displacement)
    };
  });
  var getRequiredGrowthForPlaceholder = function getRequiredGrowthForPlaceholder2(droppable2, placeholderSize, draggables) {
    var axis = droppable2.axis;
    if (droppable2.descriptor.mode === "virtual") {
      return patch(axis.line, placeholderSize[axis.line]);
    }
    var availableSpace = droppable2.subject.page.contentBox[axis.size];
    var insideDroppable = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
    var spaceUsed = insideDroppable.reduce(function(sum, dimension) {
      return sum + dimension.client.marginBox[axis.size];
    }, 0);
    var requiredSpace = spaceUsed + placeholderSize[axis.line];
    var needsToGrowBy = requiredSpace - availableSpace;
    if (needsToGrowBy <= 0) {
      return null;
    }
    return patch(axis.line, needsToGrowBy);
  };
  var withMaxScroll = function withMaxScroll2(frame, max2) {
    return _extends({}, frame, {
      scroll: _extends({}, frame.scroll, {
        max: max2
      })
    });
  };
  var addPlaceholder = function addPlaceholder2(droppable2, draggable2, draggables) {
    var frame = droppable2.frame;
    !!isHomeOf(draggable2, droppable2) ? true ? invariant3(false, "Should not add placeholder space to home list") : invariant3(false) : void 0;
    !!droppable2.subject.withPlaceholder ? true ? invariant3(false, "Cannot add placeholder size to a subject when it already has one") : invariant3(false) : void 0;
    var placeholderSize = getDisplacedBy(droppable2.axis, draggable2.displaceBy).point;
    var requiredGrowth = getRequiredGrowthForPlaceholder(droppable2, placeholderSize, draggables);
    var added = {
      placeholderSize,
      increasedBy: requiredGrowth,
      oldFrameMaxScroll: droppable2.frame ? droppable2.frame.scroll.max : null
    };
    if (!frame) {
      var _subject = getSubject({
        page: droppable2.subject.page,
        withPlaceholder: added,
        axis: droppable2.axis,
        frame: droppable2.frame
      });
      return _extends({}, droppable2, {
        subject: _subject
      });
    }
    var maxScroll = requiredGrowth ? add(frame.scroll.max, requiredGrowth) : frame.scroll.max;
    var newFrame = withMaxScroll(frame, maxScroll);
    var subject = getSubject({
      page: droppable2.subject.page,
      withPlaceholder: added,
      axis: droppable2.axis,
      frame: newFrame
    });
    return _extends({}, droppable2, {
      subject,
      frame: newFrame
    });
  };
  var removePlaceholder = function removePlaceholder2(droppable2) {
    var added = droppable2.subject.withPlaceholder;
    !added ? true ? invariant3(false, "Cannot remove placeholder form subject when there was none") : invariant3(false) : void 0;
    var frame = droppable2.frame;
    if (!frame) {
      var _subject2 = getSubject({
        page: droppable2.subject.page,
        axis: droppable2.axis,
        frame: null,
        withPlaceholder: null
      });
      return _extends({}, droppable2, {
        subject: _subject2
      });
    }
    var oldMaxScroll = added.oldFrameMaxScroll;
    !oldMaxScroll ? true ? invariant3(false, "Expected droppable with frame to have old max frame scroll when removing placeholder") : invariant3(false) : void 0;
    var newFrame = withMaxScroll(frame, oldMaxScroll);
    var subject = getSubject({
      page: droppable2.subject.page,
      axis: droppable2.axis,
      frame: newFrame,
      withPlaceholder: null
    });
    return _extends({}, droppable2, {
      subject,
      frame: newFrame
    });
  };
  var moveToNewDroppable = function(_ref) {
    var previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, moveRelativeTo = _ref.moveRelativeTo, insideDestination = _ref.insideDestination, draggable2 = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
    if (!moveRelativeTo) {
      if (insideDestination.length) {
        return null;
      }
      var proposed = {
        displaced: emptyGroups,
        displacedBy: noDisplacedBy,
        at: {
          type: "REORDER",
          destination: {
            droppableId: destination.descriptor.id,
            index: 0
          }
        }
      };
      var proposedPageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
        impact: proposed,
        draggable: draggable2,
        droppable: destination,
        draggables,
        afterCritical
      });
      var withPlaceholder = isHomeOf(draggable2, destination) ? destination : addPlaceholder(destination, draggable2, draggables);
      var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
        draggable: draggable2,
        destination: withPlaceholder,
        newPageBorderBoxCenter: proposedPageBorderBoxCenter,
        viewport: viewport2.frame,
        withDroppableDisplacement: false,
        onlyOnMainAxis: true
      });
      return isVisibleInNewLocation ? proposed : null;
    }
    var isGoingBeforeTarget = Boolean(previousPageBorderBoxCenter[destination.axis.line] <= moveRelativeTo.page.borderBox.center[destination.axis.line]);
    var proposedIndex = function() {
      var relativeTo = moveRelativeTo.descriptor.index;
      if (moveRelativeTo.descriptor.id === draggable2.descriptor.id) {
        return relativeTo;
      }
      if (isGoingBeforeTarget) {
        return relativeTo;
      }
      return relativeTo + 1;
    }();
    var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
    return calculateReorderImpact({
      draggable: draggable2,
      insideDestination,
      destination,
      viewport: viewport2,
      displacedBy,
      last: emptyGroups,
      index: proposedIndex
    });
  };
  var moveCrossAxis = function(_ref) {
    var isMovingForward = _ref.isMovingForward, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, draggable2 = _ref.draggable, isOver = _ref.isOver, draggables = _ref.draggables, droppables = _ref.droppables, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
    var destination = getBestCrossAxisDroppable({
      isMovingForward,
      pageBorderBoxCenter: previousPageBorderBoxCenter,
      source: isOver,
      droppables,
      viewport: viewport2
    });
    if (!destination) {
      return null;
    }
    var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
    var moveRelativeTo = getClosestDraggable({
      pageBorderBoxCenter: previousPageBorderBoxCenter,
      viewport: viewport2,
      destination,
      insideDestination,
      afterCritical
    });
    var impact = moveToNewDroppable({
      previousPageBorderBoxCenter,
      destination,
      draggable: draggable2,
      draggables,
      moveRelativeTo,
      insideDestination,
      viewport: viewport2,
      afterCritical
    });
    if (!impact) {
      return null;
    }
    var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact,
      draggable: draggable2,
      droppable: destination,
      draggables,
      afterCritical
    });
    var clientSelection = getClientFromPageBorderBoxCenter({
      pageBorderBoxCenter,
      draggable: draggable2,
      viewport: viewport2
    });
    return {
      clientSelection,
      impact,
      scrollJumpRequest: null
    };
  };
  var whatIsDraggedOver = function(impact) {
    var at = impact.at;
    if (!at) {
      return null;
    }
    if (at.type === "REORDER") {
      return at.destination.droppableId;
    }
    return at.combine.droppableId;
  };
  var getDroppableOver = function getDroppableOver2(impact, droppables) {
    var id = whatIsDraggedOver(impact);
    return id ? droppables[id] : null;
  };
  var moveInDirection = function(_ref) {
    var state = _ref.state, type = _ref.type;
    var isActuallyOver = getDroppableOver(state.impact, state.dimensions.droppables);
    var isMainAxisMovementAllowed = Boolean(isActuallyOver);
    var home2 = state.dimensions.droppables[state.critical.droppable.id];
    var isOver = isActuallyOver || home2;
    var direction = isOver.axis.direction;
    var isMovingOnMainAxis = direction === "vertical" && (type === "MOVE_UP" || type === "MOVE_DOWN") || direction === "horizontal" && (type === "MOVE_LEFT" || type === "MOVE_RIGHT");
    if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
      return null;
    }
    var isMovingForward = type === "MOVE_DOWN" || type === "MOVE_RIGHT";
    var draggable2 = state.dimensions.draggables[state.critical.draggable.id];
    var previousPageBorderBoxCenter = state.current.page.borderBoxCenter;
    var _state$dimensions = state.dimensions, draggables = _state$dimensions.draggables, droppables = _state$dimensions.droppables;
    return isMovingOnMainAxis ? moveToNextPlace({
      isMovingForward,
      previousPageBorderBoxCenter,
      draggable: draggable2,
      destination: isOver,
      draggables,
      viewport: state.viewport,
      previousClientSelection: state.current.client.selection,
      previousImpact: state.impact,
      afterCritical: state.afterCritical
    }) : moveCrossAxis({
      isMovingForward,
      previousPageBorderBoxCenter,
      draggable: draggable2,
      isOver,
      draggables,
      droppables,
      viewport: state.viewport,
      afterCritical: state.afterCritical
    });
  };
  function isMovementAllowed(state) {
    return state.phase === "DRAGGING" || state.phase === "COLLECTING";
  }
  function isPositionInFrame(frame) {
    var isWithinVertical = isWithin(frame.top, frame.bottom);
    var isWithinHorizontal = isWithin(frame.left, frame.right);
    return function run(point) {
      return isWithinVertical(point.y) && isWithinHorizontal(point.x);
    };
  }
  function getHasOverlap(first, second) {
    return first.left < second.right && first.right > second.left && first.top < second.bottom && first.bottom > second.top;
  }
  function getFurthestAway(_ref) {
    var pageBorderBox = _ref.pageBorderBox, draggable2 = _ref.draggable, candidates = _ref.candidates;
    var startCenter = draggable2.page.borderBox.center;
    var sorted = candidates.map(function(candidate) {
      var axis = candidate.axis;
      var target = patch(candidate.axis.line, pageBorderBox.center[axis.line], candidate.page.borderBox.center[axis.crossAxisLine]);
      return {
        id: candidate.descriptor.id,
        distance: distance(startCenter, target)
      };
    }).sort(function(a3, b3) {
      return b3.distance - a3.distance;
    });
    return sorted[0] ? sorted[0].id : null;
  }
  function getDroppableOver$1(_ref2) {
    var pageBorderBox = _ref2.pageBorderBox, draggable2 = _ref2.draggable, droppables = _ref2.droppables;
    var candidates = toDroppableList(droppables).filter(function(item) {
      if (!item.isEnabled) {
        return false;
      }
      var active = item.subject.active;
      if (!active) {
        return false;
      }
      if (!getHasOverlap(pageBorderBox, active)) {
        return false;
      }
      if (isPositionInFrame(active)(pageBorderBox.center)) {
        return true;
      }
      var axis = item.axis;
      var childCenter = active.center[axis.crossAxisLine];
      var crossAxisStart = pageBorderBox[axis.crossAxisStart];
      var crossAxisEnd = pageBorderBox[axis.crossAxisEnd];
      var isContained = isWithin(active[axis.crossAxisStart], active[axis.crossAxisEnd]);
      var isStartContained = isContained(crossAxisStart);
      var isEndContained = isContained(crossAxisEnd);
      if (!isStartContained && !isEndContained) {
        return true;
      }
      if (isStartContained) {
        return crossAxisStart < childCenter;
      }
      return crossAxisEnd > childCenter;
    });
    if (!candidates.length) {
      return null;
    }
    if (candidates.length === 1) {
      return candidates[0].descriptor.id;
    }
    return getFurthestAway({
      pageBorderBox,
      draggable: draggable2,
      candidates
    });
  }
  var offsetRectByPosition = function offsetRectByPosition2(rect, point) {
    return getRect(offsetByPosition(rect, point));
  };
  var withDroppableScroll = function(droppable2, area) {
    var frame = droppable2.frame;
    if (!frame) {
      return area;
    }
    return offsetRectByPosition(area, frame.scroll.diff.value);
  };
  function getIsDisplaced(_ref) {
    var displaced = _ref.displaced, id = _ref.id;
    return Boolean(displaced.visible[id] || displaced.invisible[id]);
  }
  function atIndex(_ref) {
    var draggable2 = _ref.draggable, closest3 = _ref.closest, inHomeList = _ref.inHomeList;
    if (!closest3) {
      return null;
    }
    if (!inHomeList) {
      return closest3.descriptor.index;
    }
    if (closest3.descriptor.index > draggable2.descriptor.index) {
      return closest3.descriptor.index - 1;
    }
    return closest3.descriptor.index;
  }
  var getReorderImpact = function(_ref2) {
    var targetRect = _ref2.pageBorderBoxWithDroppableScroll, draggable2 = _ref2.draggable, destination = _ref2.destination, insideDestination = _ref2.insideDestination, last = _ref2.last, viewport2 = _ref2.viewport, afterCritical = _ref2.afterCritical;
    var axis = destination.axis;
    var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
    var displacement = displacedBy.value;
    var targetStart = targetRect[axis.start];
    var targetEnd = targetRect[axis.end];
    var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
    var closest3 = find(withoutDragging, function(child) {
      var id = child.descriptor.id;
      var childCenter = child.page.borderBox.center[axis.line];
      var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
      var isDisplaced = getIsDisplaced({
        displaced: last,
        id
      });
      if (didStartAfterCritical$1) {
        if (isDisplaced) {
          return targetEnd <= childCenter;
        }
        return targetStart < childCenter - displacement;
      }
      if (isDisplaced) {
        return targetEnd <= childCenter + displacement;
      }
      return targetStart < childCenter;
    });
    var newIndex = atIndex({
      draggable: draggable2,
      closest: closest3,
      inHomeList: isHomeOf(draggable2, destination)
    });
    return calculateReorderImpact({
      draggable: draggable2,
      insideDestination,
      destination,
      viewport: viewport2,
      last,
      displacedBy,
      index: newIndex
    });
  };
  var combineThresholdDivisor = 4;
  var getCombineImpact = function(_ref) {
    var draggable2 = _ref.draggable, targetRect = _ref.pageBorderBoxWithDroppableScroll, previousImpact = _ref.previousImpact, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;
    if (!destination.isCombineEnabled) {
      return null;
    }
    var axis = destination.axis;
    var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
    var displacement = displacedBy.value;
    var targetStart = targetRect[axis.start];
    var targetEnd = targetRect[axis.end];
    var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
    var combineWith = find(withoutDragging, function(child) {
      var id = child.descriptor.id;
      var childRect = child.page.borderBox;
      var childSize = childRect[axis.size];
      var threshold = childSize / combineThresholdDivisor;
      var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
      var isDisplaced = getIsDisplaced({
        displaced: previousImpact.displaced,
        id
      });
      if (didStartAfterCritical$1) {
        if (isDisplaced) {
          return targetEnd > childRect[axis.start] + threshold && targetEnd < childRect[axis.end] - threshold;
        }
        return targetStart > childRect[axis.start] - displacement + threshold && targetStart < childRect[axis.end] - displacement - threshold;
      }
      if (isDisplaced) {
        return targetEnd > childRect[axis.start] + displacement + threshold && targetEnd < childRect[axis.end] + displacement - threshold;
      }
      return targetStart > childRect[axis.start] + threshold && targetStart < childRect[axis.end] - threshold;
    });
    if (!combineWith) {
      return null;
    }
    var impact = {
      displacedBy,
      displaced: previousImpact.displaced,
      at: {
        type: "COMBINE",
        combine: {
          draggableId: combineWith.descriptor.id,
          droppableId: destination.descriptor.id
        }
      }
    };
    return impact;
  };
  var getDragImpact = function(_ref) {
    var pageOffset = _ref.pageOffset, draggable2 = _ref.draggable, draggables = _ref.draggables, droppables = _ref.droppables, previousImpact = _ref.previousImpact, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
    var pageBorderBox = offsetRectByPosition(draggable2.page.borderBox, pageOffset);
    var destinationId = getDroppableOver$1({
      pageBorderBox,
      draggable: draggable2,
      droppables
    });
    if (!destinationId) {
      return noImpact;
    }
    var destination = droppables[destinationId];
    var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
    var pageBorderBoxWithDroppableScroll = withDroppableScroll(destination, pageBorderBox);
    return getCombineImpact({
      pageBorderBoxWithDroppableScroll,
      draggable: draggable2,
      previousImpact,
      destination,
      insideDestination,
      afterCritical
    }) || getReorderImpact({
      pageBorderBoxWithDroppableScroll,
      draggable: draggable2,
      destination,
      insideDestination,
      last: previousImpact.displaced,
      viewport: viewport2,
      afterCritical
    });
  };
  var patchDroppableMap = function(droppables, updated) {
    var _extends2;
    return _extends({}, droppables, (_extends2 = {}, _extends2[updated.descriptor.id] = updated, _extends2));
  };
  var clearUnusedPlaceholder = function clearUnusedPlaceholder2(_ref) {
    var previousImpact = _ref.previousImpact, impact = _ref.impact, droppables = _ref.droppables;
    var last = whatIsDraggedOver(previousImpact);
    var now2 = whatIsDraggedOver(impact);
    if (!last) {
      return droppables;
    }
    if (last === now2) {
      return droppables;
    }
    var lastDroppable = droppables[last];
    if (!lastDroppable.subject.withPlaceholder) {
      return droppables;
    }
    var updated = removePlaceholder(lastDroppable);
    return patchDroppableMap(droppables, updated);
  };
  var recomputePlaceholders = function(_ref2) {
    var draggable2 = _ref2.draggable, draggables = _ref2.draggables, droppables = _ref2.droppables, previousImpact = _ref2.previousImpact, impact = _ref2.impact;
    var cleaned = clearUnusedPlaceholder({
      previousImpact,
      impact,
      droppables
    });
    var isOver = whatIsDraggedOver(impact);
    if (!isOver) {
      return cleaned;
    }
    var droppable2 = droppables[isOver];
    if (isHomeOf(draggable2, droppable2)) {
      return cleaned;
    }
    if (droppable2.subject.withPlaceholder) {
      return cleaned;
    }
    var patched = addPlaceholder(droppable2, draggable2, draggables);
    return patchDroppableMap(cleaned, patched);
  };
  var update = function(_ref) {
    var state = _ref.state, forcedClientSelection = _ref.clientSelection, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport, forcedImpact = _ref.impact, scrollJumpRequest = _ref.scrollJumpRequest;
    var viewport2 = forcedViewport || state.viewport;
    var dimensions = forcedDimensions || state.dimensions;
    var clientSelection = forcedClientSelection || state.current.client.selection;
    var offset4 = subtract(clientSelection, state.initial.client.selection);
    var client = {
      offset: offset4,
      selection: clientSelection,
      borderBoxCenter: add(state.initial.client.borderBoxCenter, offset4)
    };
    var page = {
      selection: add(client.selection, viewport2.scroll.current),
      borderBoxCenter: add(client.borderBoxCenter, viewport2.scroll.current),
      offset: add(client.offset, viewport2.scroll.diff.value)
    };
    var current = {
      client,
      page
    };
    if (state.phase === "COLLECTING") {
      return _extends({
        phase: "COLLECTING"
      }, state, {
        dimensions,
        viewport: viewport2,
        current
      });
    }
    var draggable2 = dimensions.draggables[state.critical.draggable.id];
    var newImpact = forcedImpact || getDragImpact({
      pageOffset: page.offset,
      draggable: draggable2,
      draggables: dimensions.draggables,
      droppables: dimensions.droppables,
      previousImpact: state.impact,
      viewport: viewport2,
      afterCritical: state.afterCritical
    });
    var withUpdatedPlaceholders = recomputePlaceholders({
      draggable: draggable2,
      impact: newImpact,
      previousImpact: state.impact,
      draggables: dimensions.draggables,
      droppables: dimensions.droppables
    });
    var result = _extends({}, state, {
      current,
      dimensions: {
        draggables: dimensions.draggables,
        droppables: withUpdatedPlaceholders
      },
      impact: newImpact,
      viewport: viewport2,
      scrollJumpRequest: scrollJumpRequest || null,
      forceShouldAnimate: scrollJumpRequest ? false : null
    });
    return result;
  };
  function getDraggables$1(ids, draggables) {
    return ids.map(function(id) {
      return draggables[id];
    });
  }
  var recompute = function(_ref) {
    var impact = _ref.impact, viewport2 = _ref.viewport, draggables = _ref.draggables, destination = _ref.destination, forceShouldAnimate = _ref.forceShouldAnimate;
    var last = impact.displaced;
    var afterDragging = getDraggables$1(last.all, draggables);
    var displaced = getDisplacementGroups({
      afterDragging,
      destination,
      displacedBy: impact.displacedBy,
      viewport: viewport2.frame,
      forceShouldAnimate,
      last
    });
    return _extends({}, impact, {
      displaced
    });
  };
  var getClientBorderBoxCenter = function(_ref) {
    var impact = _ref.impact, draggable2 = _ref.draggable, droppable2 = _ref.droppable, draggables = _ref.draggables, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
    var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact,
      draggable: draggable2,
      draggables,
      droppable: droppable2,
      afterCritical
    });
    return getClientFromPageBorderBoxCenter({
      pageBorderBoxCenter,
      draggable: draggable2,
      viewport: viewport2
    });
  };
  var refreshSnap = function(_ref) {
    var state = _ref.state, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport;
    !(state.movementMode === "SNAP") ? true ? invariant3(false) : invariant3(false) : void 0;
    var needsVisibilityCheck = state.impact;
    var viewport2 = forcedViewport || state.viewport;
    var dimensions = forcedDimensions || state.dimensions;
    var draggables = dimensions.draggables, droppables = dimensions.droppables;
    var draggable2 = draggables[state.critical.draggable.id];
    var isOver = whatIsDraggedOver(needsVisibilityCheck);
    !isOver ? true ? invariant3(false, "Must be over a destination in SNAP movement mode") : invariant3(false) : void 0;
    var destination = droppables[isOver];
    var impact = recompute({
      impact: needsVisibilityCheck,
      viewport: viewport2,
      destination,
      draggables
    });
    var clientSelection = getClientBorderBoxCenter({
      impact,
      draggable: draggable2,
      droppable: destination,
      draggables,
      viewport: viewport2,
      afterCritical: state.afterCritical
    });
    return update({
      impact,
      clientSelection,
      state,
      dimensions,
      viewport: viewport2
    });
  };
  var getHomeLocation = function(descriptor) {
    return {
      index: descriptor.index,
      droppableId: descriptor.droppableId
    };
  };
  var getLiftEffect = function(_ref) {
    var draggable2 = _ref.draggable, home2 = _ref.home, draggables = _ref.draggables, viewport2 = _ref.viewport;
    var displacedBy = getDisplacedBy(home2.axis, draggable2.displaceBy);
    var insideHome = getDraggablesInsideDroppable(home2.descriptor.id, draggables);
    var rawIndex = insideHome.indexOf(draggable2);
    !(rawIndex !== -1) ? true ? invariant3(false, "Expected draggable to be inside home list") : invariant3(false) : void 0;
    var afterDragging = insideHome.slice(rawIndex + 1);
    var effected = afterDragging.reduce(function(previous, item) {
      previous[item.descriptor.id] = true;
      return previous;
    }, {});
    var afterCritical = {
      inVirtualList: home2.descriptor.mode === "virtual",
      displacedBy,
      effected
    };
    var displaced = getDisplacementGroups({
      afterDragging,
      destination: home2,
      displacedBy,
      last: null,
      viewport: viewport2.frame,
      forceShouldAnimate: false
    });
    var impact = {
      displaced,
      displacedBy,
      at: {
        type: "REORDER",
        destination: getHomeLocation(draggable2.descriptor)
      }
    };
    return {
      impact,
      afterCritical
    };
  };
  var patchDimensionMap = function(dimensions, updated) {
    return {
      draggables: dimensions.draggables,
      droppables: patchDroppableMap(dimensions.droppables, updated)
    };
  };
  var start2 = function start3(key) {
    if (true) {
      {
        return;
      }
    }
  };
  var finish = function finish2(key) {
    if (true) {
      {
        return;
      }
    }
  };
  var offsetDraggable = function(_ref) {
    var draggable2 = _ref.draggable, offset$1 = _ref.offset, initialWindowScroll = _ref.initialWindowScroll;
    var client = offset2(draggable2.client, offset$1);
    var page = withScroll(client, initialWindowScroll);
    var moved = _extends({}, draggable2, {
      placeholder: _extends({}, draggable2.placeholder, {
        client
      }),
      client,
      page
    });
    return moved;
  };
  var getFrame = function(droppable2) {
    var frame = droppable2.frame;
    !frame ? true ? invariant3(false, "Expected Droppable to have a frame") : invariant3(false) : void 0;
    return frame;
  };
  var adjustAdditionsForScrollChanges = function(_ref) {
    var additions = _ref.additions, updatedDroppables = _ref.updatedDroppables, viewport2 = _ref.viewport;
    var windowScrollChange = viewport2.scroll.diff.value;
    return additions.map(function(draggable2) {
      var droppableId = draggable2.descriptor.droppableId;
      var modified = updatedDroppables[droppableId];
      var frame = getFrame(modified);
      var droppableScrollChange = frame.scroll.diff.value;
      var totalChange = add(windowScrollChange, droppableScrollChange);
      var moved = offsetDraggable({
        draggable: draggable2,
        offset: totalChange,
        initialWindowScroll: viewport2.scroll.initial
      });
      return moved;
    });
  };
  var publishWhileDraggingInVirtual = function(_ref) {
    var state = _ref.state, published = _ref.published;
    start2();
    var withScrollChange = published.modified.map(function(update2) {
      var existing = state.dimensions.droppables[update2.droppableId];
      var scrolled = scrollDroppable(existing, update2.scroll);
      return scrolled;
    });
    var droppables = _extends({}, state.dimensions.droppables, {}, toDroppableMap(withScrollChange));
    var updatedAdditions = toDraggableMap(adjustAdditionsForScrollChanges({
      additions: published.additions,
      updatedDroppables: droppables,
      viewport: state.viewport
    }));
    var draggables = _extends({}, state.dimensions.draggables, {}, updatedAdditions);
    published.removals.forEach(function(id) {
      delete draggables[id];
    });
    var dimensions = {
      droppables,
      draggables
    };
    var wasOverId = whatIsDraggedOver(state.impact);
    var wasOver = wasOverId ? dimensions.droppables[wasOverId] : null;
    var draggable2 = dimensions.draggables[state.critical.draggable.id];
    var home2 = dimensions.droppables[state.critical.droppable.id];
    var _getLiftEffect = getLiftEffect({
      draggable: draggable2,
      home: home2,
      draggables,
      viewport: state.viewport
    }), onLiftImpact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;
    var previousImpact = wasOver && wasOver.isCombineEnabled ? state.impact : onLiftImpact;
    var impact = getDragImpact({
      pageOffset: state.current.page.offset,
      draggable: dimensions.draggables[state.critical.draggable.id],
      draggables: dimensions.draggables,
      droppables: dimensions.droppables,
      previousImpact,
      viewport: state.viewport,
      afterCritical
    });
    finish();
    var draggingState = _extends({
      phase: "DRAGGING"
    }, state, {
      phase: "DRAGGING",
      impact,
      onLiftImpact,
      dimensions,
      afterCritical,
      forceShouldAnimate: false
    });
    if (state.phase === "COLLECTING") {
      return draggingState;
    }
    var dropPending3 = _extends({
      phase: "DROP_PENDING"
    }, draggingState, {
      phase: "DROP_PENDING",
      reason: state.reason,
      isWaiting: false
    });
    return dropPending3;
  };
  var isSnapping = function isSnapping2(state) {
    return state.movementMode === "SNAP";
  };
  var postDroppableChange = function postDroppableChange2(state, updated, isEnabledChanging) {
    var dimensions = patchDimensionMap(state.dimensions, updated);
    if (!isSnapping(state) || isEnabledChanging) {
      return update({
        state,
        dimensions
      });
    }
    return refreshSnap({
      state,
      dimensions
    });
  };
  function removeScrollJumpRequest(state) {
    if (state.isDragging && state.movementMode === "SNAP") {
      return _extends({
        phase: "DRAGGING"
      }, state, {
        scrollJumpRequest: null
      });
    }
    return state;
  }
  var idle = {
    phase: "IDLE",
    completed: null,
    shouldFlush: false
  };
  var reducer2 = function(state, action) {
    if (state === void 0) {
      state = idle;
    }
    if (action.type === "FLUSH") {
      return _extends({}, idle, {
        shouldFlush: true
      });
    }
    if (action.type === "INITIAL_PUBLISH") {
      !(state.phase === "IDLE") ? true ? invariant3(false, "INITIAL_PUBLISH must come after a IDLE phase") : invariant3(false) : void 0;
      var _action$payload = action.payload, critical = _action$payload.critical, clientSelection = _action$payload.clientSelection, viewport2 = _action$payload.viewport, dimensions = _action$payload.dimensions, movementMode = _action$payload.movementMode;
      var draggable2 = dimensions.draggables[critical.draggable.id];
      var home2 = dimensions.droppables[critical.droppable.id];
      var client = {
        selection: clientSelection,
        borderBoxCenter: draggable2.client.borderBox.center,
        offset: origin
      };
      var initial = {
        client,
        page: {
          selection: add(client.selection, viewport2.scroll.initial),
          borderBoxCenter: add(client.selection, viewport2.scroll.initial),
          offset: add(client.selection, viewport2.scroll.diff.value)
        }
      };
      var isWindowScrollAllowed = toDroppableList(dimensions.droppables).every(function(item) {
        return !item.isFixedOnPage;
      });
      var _getLiftEffect = getLiftEffect({
        draggable: draggable2,
        home: home2,
        draggables: dimensions.draggables,
        viewport: viewport2
      }), impact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;
      var result = {
        phase: "DRAGGING",
        isDragging: true,
        critical,
        movementMode,
        dimensions,
        initial,
        current: initial,
        isWindowScrollAllowed,
        impact,
        afterCritical,
        onLiftImpact: impact,
        viewport: viewport2,
        scrollJumpRequest: null,
        forceShouldAnimate: null
      };
      return result;
    }
    if (action.type === "COLLECTION_STARTING") {
      if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
        return state;
      }
      !(state.phase === "DRAGGING") ? true ? invariant3(false, "Collection cannot start from phase " + state.phase) : invariant3(false) : void 0;
      var _result = _extends({
        phase: "COLLECTING"
      }, state, {
        phase: "COLLECTING"
      });
      return _result;
    }
    if (action.type === "PUBLISH_WHILE_DRAGGING") {
      !(state.phase === "COLLECTING" || state.phase === "DROP_PENDING") ? true ? invariant3(false, "Unexpected " + action.type + " received in phase " + state.phase) : invariant3(false) : void 0;
      return publishWhileDraggingInVirtual({
        state,
        published: action.payload
      });
    }
    if (action.type === "MOVE") {
      if (state.phase === "DROP_PENDING") {
        return state;
      }
      !isMovementAllowed(state) ? true ? invariant3(false, action.type + " not permitted in phase " + state.phase) : invariant3(false) : void 0;
      var _clientSelection = action.payload.client;
      if (isEqual2(_clientSelection, state.current.client.selection)) {
        return state;
      }
      return update({
        state,
        clientSelection: _clientSelection,
        impact: isSnapping(state) ? state.impact : null
      });
    }
    if (action.type === "UPDATE_DROPPABLE_SCROLL") {
      if (state.phase === "DROP_PENDING") {
        return removeScrollJumpRequest(state);
      }
      if (state.phase === "COLLECTING") {
        return removeScrollJumpRequest(state);
      }
      !isMovementAllowed(state) ? true ? invariant3(false, action.type + " not permitted in phase " + state.phase) : invariant3(false) : void 0;
      var _action$payload2 = action.payload, id = _action$payload2.id, newScroll = _action$payload2.newScroll;
      var target = state.dimensions.droppables[id];
      if (!target) {
        return state;
      }
      var scrolled = scrollDroppable(target, newScroll);
      return postDroppableChange(state, scrolled, false);
    }
    if (action.type === "UPDATE_DROPPABLE_IS_ENABLED") {
      if (state.phase === "DROP_PENDING") {
        return state;
      }
      !isMovementAllowed(state) ? true ? invariant3(false, "Attempting to move in an unsupported phase " + state.phase) : invariant3(false) : void 0;
      var _action$payload3 = action.payload, _id = _action$payload3.id, isEnabled = _action$payload3.isEnabled;
      var _target = state.dimensions.droppables[_id];
      !_target ? true ? invariant3(false, "Cannot find Droppable[id: " + _id + "] to toggle its enabled state") : invariant3(false) : void 0;
      !(_target.isEnabled !== isEnabled) ? true ? invariant3(false, "Trying to set droppable isEnabled to " + String(isEnabled) + "\n      but it is already " + String(_target.isEnabled)) : invariant3(false) : void 0;
      var updated = _extends({}, _target, {
        isEnabled
      });
      return postDroppableChange(state, updated, true);
    }
    if (action.type === "UPDATE_DROPPABLE_IS_COMBINE_ENABLED") {
      if (state.phase === "DROP_PENDING") {
        return state;
      }
      !isMovementAllowed(state) ? true ? invariant3(false, "Attempting to move in an unsupported phase " + state.phase) : invariant3(false) : void 0;
      var _action$payload4 = action.payload, _id2 = _action$payload4.id, isCombineEnabled = _action$payload4.isCombineEnabled;
      var _target2 = state.dimensions.droppables[_id2];
      !_target2 ? true ? invariant3(false, "Cannot find Droppable[id: " + _id2 + "] to toggle its isCombineEnabled state") : invariant3(false) : void 0;
      !(_target2.isCombineEnabled !== isCombineEnabled) ? true ? invariant3(false, "Trying to set droppable isCombineEnabled to " + String(isCombineEnabled) + "\n      but it is already " + String(_target2.isCombineEnabled)) : invariant3(false) : void 0;
      var _updated = _extends({}, _target2, {
        isCombineEnabled
      });
      return postDroppableChange(state, _updated, true);
    }
    if (action.type === "MOVE_BY_WINDOW_SCROLL") {
      if (state.phase === "DROP_PENDING" || state.phase === "DROP_ANIMATING") {
        return state;
      }
      !isMovementAllowed(state) ? true ? invariant3(false, "Cannot move by window in phase " + state.phase) : invariant3(false) : void 0;
      !state.isWindowScrollAllowed ? true ? invariant3(false, "Window scrolling is currently not supported for fixed lists") : invariant3(false) : void 0;
      var _newScroll = action.payload.newScroll;
      if (isEqual2(state.viewport.scroll.current, _newScroll)) {
        return removeScrollJumpRequest(state);
      }
      var _viewport = scrollViewport(state.viewport, _newScroll);
      if (isSnapping(state)) {
        return refreshSnap({
          state,
          viewport: _viewport
        });
      }
      return update({
        state,
        viewport: _viewport
      });
    }
    if (action.type === "UPDATE_VIEWPORT_MAX_SCROLL") {
      if (!isMovementAllowed(state)) {
        return state;
      }
      var maxScroll = action.payload.maxScroll;
      if (isEqual2(maxScroll, state.viewport.scroll.max)) {
        return state;
      }
      var withMaxScroll3 = _extends({}, state.viewport, {
        scroll: _extends({}, state.viewport.scroll, {
          max: maxScroll
        })
      });
      return _extends({
        phase: "DRAGGING"
      }, state, {
        viewport: withMaxScroll3
      });
    }
    if (action.type === "MOVE_UP" || action.type === "MOVE_DOWN" || action.type === "MOVE_LEFT" || action.type === "MOVE_RIGHT") {
      if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
        return state;
      }
      !(state.phase === "DRAGGING") ? true ? invariant3(false, action.type + " received while not in DRAGGING phase") : invariant3(false) : void 0;
      var _result2 = moveInDirection({
        state,
        type: action.type
      });
      if (!_result2) {
        return state;
      }
      return update({
        state,
        impact: _result2.impact,
        clientSelection: _result2.clientSelection,
        scrollJumpRequest: _result2.scrollJumpRequest
      });
    }
    if (action.type === "DROP_PENDING") {
      var reason = action.payload.reason;
      !(state.phase === "COLLECTING") ? true ? invariant3(false, "Can only move into the DROP_PENDING phase from the COLLECTING phase") : invariant3(false) : void 0;
      var newState = _extends({
        phase: "DROP_PENDING"
      }, state, {
        phase: "DROP_PENDING",
        isWaiting: true,
        reason
      });
      return newState;
    }
    if (action.type === "DROP_ANIMATE") {
      var _action$payload5 = action.payload, completed = _action$payload5.completed, dropDuration = _action$payload5.dropDuration, newHomeClientOffset = _action$payload5.newHomeClientOffset;
      !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant3(false, "Cannot animate drop from phase " + state.phase) : invariant3(false) : void 0;
      var _result3 = {
        phase: "DROP_ANIMATING",
        completed,
        dropDuration,
        newHomeClientOffset,
        dimensions: state.dimensions
      };
      return _result3;
    }
    if (action.type === "DROP_COMPLETE") {
      var _completed = action.payload.completed;
      return {
        phase: "IDLE",
        completed: _completed,
        shouldFlush: false
      };
    }
    return state;
  };
  var beforeInitialCapture = function beforeInitialCapture2(args) {
    return {
      type: "BEFORE_INITIAL_CAPTURE",
      payload: args
    };
  };
  var lift = function lift2(args) {
    return {
      type: "LIFT",
      payload: args
    };
  };
  var initialPublish = function initialPublish2(args) {
    return {
      type: "INITIAL_PUBLISH",
      payload: args
    };
  };
  var publishWhileDragging = function publishWhileDragging2(args) {
    return {
      type: "PUBLISH_WHILE_DRAGGING",
      payload: args
    };
  };
  var collectionStarting = function collectionStarting2() {
    return {
      type: "COLLECTION_STARTING",
      payload: null
    };
  };
  var updateDroppableScroll = function updateDroppableScroll2(args) {
    return {
      type: "UPDATE_DROPPABLE_SCROLL",
      payload: args
    };
  };
  var updateDroppableIsEnabled = function updateDroppableIsEnabled2(args) {
    return {
      type: "UPDATE_DROPPABLE_IS_ENABLED",
      payload: args
    };
  };
  var updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled2(args) {
    return {
      type: "UPDATE_DROPPABLE_IS_COMBINE_ENABLED",
      payload: args
    };
  };
  var move = function move2(args) {
    return {
      type: "MOVE",
      payload: args
    };
  };
  var moveByWindowScroll = function moveByWindowScroll2(args) {
    return {
      type: "MOVE_BY_WINDOW_SCROLL",
      payload: args
    };
  };
  var updateViewportMaxScroll = function updateViewportMaxScroll2(args) {
    return {
      type: "UPDATE_VIEWPORT_MAX_SCROLL",
      payload: args
    };
  };
  var moveUp = function moveUp2() {
    return {
      type: "MOVE_UP",
      payload: null
    };
  };
  var moveDown = function moveDown2() {
    return {
      type: "MOVE_DOWN",
      payload: null
    };
  };
  var moveRight = function moveRight2() {
    return {
      type: "MOVE_RIGHT",
      payload: null
    };
  };
  var moveLeft = function moveLeft2() {
    return {
      type: "MOVE_LEFT",
      payload: null
    };
  };
  var flush = function flush2() {
    return {
      type: "FLUSH",
      payload: null
    };
  };
  var animateDrop = function animateDrop2(args) {
    return {
      type: "DROP_ANIMATE",
      payload: args
    };
  };
  var completeDrop = function completeDrop2(args) {
    return {
      type: "DROP_COMPLETE",
      payload: args
    };
  };
  var drop = function drop2(args) {
    return {
      type: "DROP",
      payload: args
    };
  };
  var dropPending = function dropPending2(args) {
    return {
      type: "DROP_PENDING",
      payload: args
    };
  };
  var dropAnimationFinished = function dropAnimationFinished2() {
    return {
      type: "DROP_ANIMATION_FINISHED",
      payload: null
    };
  };
  function checkIndexes(insideDestination) {
    if (insideDestination.length <= 1) {
      return;
    }
    var indexes = insideDestination.map(function(d4) {
      return d4.descriptor.index;
    });
    var errors = {};
    for (var i3 = 1; i3 < indexes.length; i3++) {
      var current = indexes[i3];
      var previous = indexes[i3 - 1];
      if (current !== previous + 1) {
        errors[current] = true;
      }
    }
    if (!Object.keys(errors).length) {
      return;
    }
    var formatted = indexes.map(function(index2) {
      var hasError = Boolean(errors[index2]);
      return hasError ? "[\u{1F525}" + index2 + "]" : "" + index2;
    }).join(", ");
    true ? warning3("\n    Detected non-consecutive <Draggable /> indexes.\n\n    (This can cause unexpected bugs)\n\n    " + formatted + "\n  ") : void 0;
  }
  function validateDimensions(critical, dimensions) {
    if (true) {
      var insideDestination = getDraggablesInsideDroppable(critical.droppable.id, dimensions.draggables);
      checkIndexes(insideDestination);
    }
  }
  var lift$1 = function(marshal) {
    return function(_ref) {
      var getState = _ref.getState, dispatch = _ref.dispatch;
      return function(next) {
        return function(action) {
          if (action.type !== "LIFT") {
            next(action);
            return;
          }
          var _action$payload = action.payload, id = _action$payload.id, clientSelection = _action$payload.clientSelection, movementMode = _action$payload.movementMode;
          var initial = getState();
          if (initial.phase === "DROP_ANIMATING") {
            dispatch(completeDrop({
              completed: initial.completed
            }));
          }
          !(getState().phase === "IDLE") ? true ? invariant3(false, "Unexpected phase to start a drag") : invariant3(false) : void 0;
          dispatch(flush());
          dispatch(beforeInitialCapture({
            draggableId: id,
            movementMode
          }));
          var scrollOptions = {
            shouldPublishImmediately: movementMode === "SNAP"
          };
          var request = {
            draggableId: id,
            scrollOptions
          };
          var _marshal$startPublish = marshal.startPublishing(request), critical = _marshal$startPublish.critical, dimensions = _marshal$startPublish.dimensions, viewport2 = _marshal$startPublish.viewport;
          validateDimensions(critical, dimensions);
          dispatch(initialPublish({
            critical,
            dimensions,
            clientSelection,
            movementMode,
            viewport: viewport2
          }));
        };
      };
    };
  };
  var style = function(marshal) {
    return function() {
      return function(next) {
        return function(action) {
          if (action.type === "INITIAL_PUBLISH") {
            marshal.dragging();
          }
          if (action.type === "DROP_ANIMATE") {
            marshal.dropping(action.payload.completed.result.reason);
          }
          if (action.type === "FLUSH" || action.type === "DROP_COMPLETE") {
            marshal.resting();
          }
          next(action);
        };
      };
    };
  };
  var curves = {
    outOfTheWay: "cubic-bezier(0.2, 0, 0, 1)",
    drop: "cubic-bezier(.2,1,.1,1)"
  };
  var combine = {
    opacity: {
      drop: 0,
      combining: 0.7
    },
    scale: {
      drop: 0.75
    }
  };
  var timings = {
    outOfTheWay: 0.2,
    minDropTime: 0.33,
    maxDropTime: 0.55
  };
  var outOfTheWayTiming = timings.outOfTheWay + "s " + curves.outOfTheWay;
  var transitions = {
    fluid: "opacity " + outOfTheWayTiming,
    snap: "transform " + outOfTheWayTiming + ", opacity " + outOfTheWayTiming,
    drop: function drop3(duration) {
      var timing = duration + "s " + curves.drop;
      return "transform " + timing + ", opacity " + timing;
    },
    outOfTheWay: "transform " + outOfTheWayTiming,
    placeholder: "height " + outOfTheWayTiming + ", width " + outOfTheWayTiming + ", margin " + outOfTheWayTiming
  };
  var moveTo = function moveTo2(offset4) {
    return isEqual2(offset4, origin) ? null : "translate(" + offset4.x + "px, " + offset4.y + "px)";
  };
  var transforms = {
    moveTo,
    drop: function drop4(offset4, isCombining) {
      var translate = moveTo(offset4);
      if (!translate) {
        return null;
      }
      if (!isCombining) {
        return translate;
      }
      return translate + " scale(" + combine.scale.drop + ")";
    }
  };
  var minDropTime = timings.minDropTime;
  var maxDropTime = timings.maxDropTime;
  var dropTimeRange = maxDropTime - minDropTime;
  var maxDropTimeAtDistance = 1500;
  var cancelDropModifier = 0.6;
  var getDropDuration = function(_ref) {
    var current = _ref.current, destination = _ref.destination, reason = _ref.reason;
    var distance$1 = distance(current, destination);
    if (distance$1 <= 0) {
      return minDropTime;
    }
    if (distance$1 >= maxDropTimeAtDistance) {
      return maxDropTime;
    }
    var percentage = distance$1 / maxDropTimeAtDistance;
    var duration = minDropTime + dropTimeRange * percentage;
    var withDuration = reason === "CANCEL" ? duration * cancelDropModifier : duration;
    return Number(withDuration.toFixed(2));
  };
  var getNewHomeClientOffset = function(_ref) {
    var impact = _ref.impact, draggable2 = _ref.draggable, dimensions = _ref.dimensions, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
    var draggables = dimensions.draggables, droppables = dimensions.droppables;
    var droppableId = whatIsDraggedOver(impact);
    var destination = droppableId ? droppables[droppableId] : null;
    var home2 = droppables[draggable2.descriptor.droppableId];
    var newClientCenter = getClientBorderBoxCenter({
      impact,
      draggable: draggable2,
      draggables,
      afterCritical,
      droppable: destination || home2,
      viewport: viewport2
    });
    var offset4 = subtract(newClientCenter, draggable2.client.borderBox.center);
    return offset4;
  };
  var getDropImpact = function(_ref) {
    var draggables = _ref.draggables, reason = _ref.reason, lastImpact = _ref.lastImpact, home2 = _ref.home, viewport2 = _ref.viewport, onLiftImpact = _ref.onLiftImpact;
    if (!lastImpact.at || reason !== "DROP") {
      var recomputedHomeImpact = recompute({
        draggables,
        impact: onLiftImpact,
        destination: home2,
        viewport: viewport2,
        forceShouldAnimate: true
      });
      return {
        impact: recomputedHomeImpact,
        didDropInsideDroppable: false
      };
    }
    if (lastImpact.at.type === "REORDER") {
      return {
        impact: lastImpact,
        didDropInsideDroppable: true
      };
    }
    var withoutMovement = _extends({}, lastImpact, {
      displaced: emptyGroups
    });
    return {
      impact: withoutMovement,
      didDropInsideDroppable: true
    };
  };
  var drop$1 = function(_ref) {
    var getState = _ref.getState, dispatch = _ref.dispatch;
    return function(next) {
      return function(action) {
        if (action.type !== "DROP") {
          next(action);
          return;
        }
        var state = getState();
        var reason = action.payload.reason;
        if (state.phase === "COLLECTING") {
          dispatch(dropPending({
            reason
          }));
          return;
        }
        if (state.phase === "IDLE") {
          return;
        }
        var isWaitingForDrop = state.phase === "DROP_PENDING" && state.isWaiting;
        !!isWaitingForDrop ? true ? invariant3(false, "A DROP action occurred while DROP_PENDING and still waiting") : invariant3(false) : void 0;
        !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant3(false, "Cannot drop in phase: " + state.phase) : invariant3(false) : void 0;
        var critical = state.critical;
        var dimensions = state.dimensions;
        var draggable2 = dimensions.draggables[state.critical.draggable.id];
        var _getDropImpact = getDropImpact({
          reason,
          lastImpact: state.impact,
          afterCritical: state.afterCritical,
          onLiftImpact: state.onLiftImpact,
          home: state.dimensions.droppables[state.critical.droppable.id],
          viewport: state.viewport,
          draggables: state.dimensions.draggables
        }), impact = _getDropImpact.impact, didDropInsideDroppable = _getDropImpact.didDropInsideDroppable;
        var destination = didDropInsideDroppable ? tryGetDestination(impact) : null;
        var combine2 = didDropInsideDroppable ? tryGetCombine(impact) : null;
        var source = {
          index: critical.draggable.index,
          droppableId: critical.droppable.id
        };
        var result = {
          draggableId: draggable2.descriptor.id,
          type: draggable2.descriptor.type,
          source,
          reason,
          mode: state.movementMode,
          destination,
          combine: combine2
        };
        var newHomeClientOffset = getNewHomeClientOffset({
          impact,
          draggable: draggable2,
          dimensions,
          viewport: state.viewport,
          afterCritical: state.afterCritical
        });
        var completed = {
          critical: state.critical,
          afterCritical: state.afterCritical,
          result,
          impact
        };
        var isAnimationRequired = !isEqual2(state.current.client.offset, newHomeClientOffset) || Boolean(result.combine);
        if (!isAnimationRequired) {
          dispatch(completeDrop({
            completed
          }));
          return;
        }
        var dropDuration = getDropDuration({
          current: state.current.client.offset,
          destination: newHomeClientOffset,
          reason
        });
        var args = {
          newHomeClientOffset,
          dropDuration,
          completed
        };
        dispatch(animateDrop(args));
      };
    };
  };
  var getWindowScroll4 = function() {
    return {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  };
  function getWindowScrollBinding(update2) {
    return {
      eventName: "scroll",
      options: {
        passive: true,
        capture: false
      },
      fn: function fn4(event) {
        if (event.target !== window && event.target !== window.document) {
          return;
        }
        update2();
      }
    };
  }
  function getScrollListener(_ref) {
    var onWindowScroll = _ref.onWindowScroll;
    function updateScroll() {
      onWindowScroll(getWindowScroll4());
    }
    var scheduled = raf_schd_esm_default(updateScroll);
    var binding = getWindowScrollBinding(scheduled);
    var unbind = noop2;
    function isActive() {
      return unbind !== noop2;
    }
    function start4() {
      !!isActive() ? true ? invariant3(false, "Cannot start scroll listener when already active") : invariant3(false) : void 0;
      unbind = bindEvents(window, [binding]);
    }
    function stop() {
      !isActive() ? true ? invariant3(false, "Cannot stop scroll listener when not active") : invariant3(false) : void 0;
      scheduled.cancel();
      unbind();
      unbind = noop2;
    }
    return {
      start: start4,
      stop,
      isActive
    };
  }
  var shouldEnd = function shouldEnd2(action) {
    return action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATE" || action.type === "FLUSH";
  };
  var scrollListener = function(store) {
    var listener = getScrollListener({
      onWindowScroll: function onWindowScroll(newScroll) {
        store.dispatch(moveByWindowScroll({
          newScroll
        }));
      }
    });
    return function(next) {
      return function(action) {
        if (!listener.isActive() && action.type === "INITIAL_PUBLISH") {
          listener.start();
        }
        if (listener.isActive() && shouldEnd(action)) {
          listener.stop();
        }
        next(action);
      };
    };
  };
  var getExpiringAnnounce = function(announce) {
    var wasCalled = false;
    var isExpired = false;
    var timeoutId = setTimeout(function() {
      isExpired = true;
    });
    var result = function result2(message) {
      if (wasCalled) {
        true ? warning3("Announcement already made. Not making a second announcement") : void 0;
        return;
      }
      if (isExpired) {
        true ? warning3("\n        Announcements cannot be made asynchronously.\n        Default message has already been announced.\n      ") : void 0;
        return;
      }
      wasCalled = true;
      announce(message);
      clearTimeout(timeoutId);
    };
    result.wasCalled = function() {
      return wasCalled;
    };
    return result;
  };
  var getAsyncMarshal = function() {
    var entries = [];
    var execute3 = function execute4(timerId) {
      var index2 = findIndex(entries, function(item) {
        return item.timerId === timerId;
      });
      !(index2 !== -1) ? true ? invariant3(false, "Could not find timer") : invariant3(false) : void 0;
      var _entries$splice = entries.splice(index2, 1), entry = _entries$splice[0];
      entry.callback();
    };
    var add3 = function add4(fn4) {
      var timerId = setTimeout(function() {
        return execute3(timerId);
      });
      var entry = {
        timerId,
        callback: fn4
      };
      entries.push(entry);
    };
    var flush3 = function flush4() {
      if (!entries.length) {
        return;
      }
      var shallow = [].concat(entries);
      entries.length = 0;
      shallow.forEach(function(entry) {
        clearTimeout(entry.timerId);
        entry.callback();
      });
    };
    return {
      add: add3,
      flush: flush3
    };
  };
  var areLocationsEqual = function areLocationsEqual2(first, second) {
    if (first == null && second == null) {
      return true;
    }
    if (first == null || second == null) {
      return false;
    }
    return first.droppableId === second.droppableId && first.index === second.index;
  };
  var isCombineEqual = function isCombineEqual2(first, second) {
    if (first == null && second == null) {
      return true;
    }
    if (first == null || second == null) {
      return false;
    }
    return first.draggableId === second.draggableId && first.droppableId === second.droppableId;
  };
  var isCriticalEqual = function isCriticalEqual2(first, second) {
    if (first === second) {
      return true;
    }
    var isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
    var isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
    return isDraggableEqual && isDroppableEqual;
  };
  var withTimings = function withTimings2(key, fn4) {
    start2();
    fn4();
    finish();
  };
  var getDragStart = function getDragStart2(critical, mode) {
    return {
      draggableId: critical.draggable.id,
      type: critical.droppable.type,
      source: {
        droppableId: critical.droppable.id,
        index: critical.draggable.index
      },
      mode
    };
  };
  var execute = function execute2(responder, data, announce, getDefaultMessage) {
    if (!responder) {
      announce(getDefaultMessage(data));
      return;
    }
    var willExpire = getExpiringAnnounce(announce);
    var provided = {
      announce: willExpire
    };
    responder(data, provided);
    if (!willExpire.wasCalled()) {
      announce(getDefaultMessage(data));
    }
  };
  var getPublisher = function(getResponders, announce) {
    var asyncMarshal = getAsyncMarshal();
    var dragging = null;
    var beforeCapture = function beforeCapture2(draggableId, mode) {
      !!dragging ? true ? invariant3(false, "Cannot fire onBeforeCapture as a drag start has already been published") : invariant3(false) : void 0;
      withTimings("onBeforeCapture", function() {
        var fn4 = getResponders().onBeforeCapture;
        if (fn4) {
          var before = {
            draggableId,
            mode
          };
          fn4(before);
        }
      });
    };
    var beforeStart = function beforeStart2(critical, mode) {
      !!dragging ? true ? invariant3(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant3(false) : void 0;
      withTimings("onBeforeDragStart", function() {
        var fn4 = getResponders().onBeforeDragStart;
        if (fn4) {
          fn4(getDragStart(critical, mode));
        }
      });
    };
    var start4 = function start5(critical, mode) {
      !!dragging ? true ? invariant3(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant3(false) : void 0;
      var data = getDragStart(critical, mode);
      dragging = {
        mode,
        lastCritical: critical,
        lastLocation: data.source,
        lastCombine: null
      };
      asyncMarshal.add(function() {
        withTimings("onDragStart", function() {
          return execute(getResponders().onDragStart, data, announce, preset.onDragStart);
        });
      });
    };
    var update2 = function update3(critical, impact) {
      var location = tryGetDestination(impact);
      var combine2 = tryGetCombine(impact);
      !dragging ? true ? invariant3(false, "Cannot fire onDragMove when onDragStart has not been called") : invariant3(false) : void 0;
      var hasCriticalChanged = !isCriticalEqual(critical, dragging.lastCritical);
      if (hasCriticalChanged) {
        dragging.lastCritical = critical;
      }
      var hasLocationChanged = !areLocationsEqual(dragging.lastLocation, location);
      if (hasLocationChanged) {
        dragging.lastLocation = location;
      }
      var hasGroupingChanged = !isCombineEqual(dragging.lastCombine, combine2);
      if (hasGroupingChanged) {
        dragging.lastCombine = combine2;
      }
      if (!hasCriticalChanged && !hasLocationChanged && !hasGroupingChanged) {
        return;
      }
      var data = _extends({}, getDragStart(critical, dragging.mode), {
        combine: combine2,
        destination: location
      });
      asyncMarshal.add(function() {
        withTimings("onDragUpdate", function() {
          return execute(getResponders().onDragUpdate, data, announce, preset.onDragUpdate);
        });
      });
    };
    var flush3 = function flush4() {
      !dragging ? true ? invariant3(false, "Can only flush responders while dragging") : invariant3(false) : void 0;
      asyncMarshal.flush();
    };
    var drop5 = function drop6(result) {
      !dragging ? true ? invariant3(false, "Cannot fire onDragEnd when there is no matching onDragStart") : invariant3(false) : void 0;
      dragging = null;
      withTimings("onDragEnd", function() {
        return execute(getResponders().onDragEnd, result, announce, preset.onDragEnd);
      });
    };
    var abort = function abort2() {
      if (!dragging) {
        return;
      }
      var result = _extends({}, getDragStart(dragging.lastCritical, dragging.mode), {
        combine: null,
        destination: null,
        reason: "CANCEL"
      });
      drop5(result);
    };
    return {
      beforeCapture,
      beforeStart,
      start: start4,
      update: update2,
      flush: flush3,
      drop: drop5,
      abort
    };
  };
  var responders = function(getResponders, announce) {
    var publisher = getPublisher(getResponders, announce);
    return function(store) {
      return function(next) {
        return function(action) {
          if (action.type === "BEFORE_INITIAL_CAPTURE") {
            publisher.beforeCapture(action.payload.draggableId, action.payload.movementMode);
            return;
          }
          if (action.type === "INITIAL_PUBLISH") {
            var critical = action.payload.critical;
            publisher.beforeStart(critical, action.payload.movementMode);
            next(action);
            publisher.start(critical, action.payload.movementMode);
            return;
          }
          if (action.type === "DROP_COMPLETE") {
            var result = action.payload.completed.result;
            publisher.flush();
            next(action);
            publisher.drop(result);
            return;
          }
          next(action);
          if (action.type === "FLUSH") {
            publisher.abort();
            return;
          }
          var state = store.getState();
          if (state.phase === "DRAGGING") {
            publisher.update(state.critical, state.impact);
          }
        };
      };
    };
  };
  var dropAnimationFinish = function(store) {
    return function(next) {
      return function(action) {
        if (action.type !== "DROP_ANIMATION_FINISHED") {
          next(action);
          return;
        }
        var state = store.getState();
        !(state.phase === "DROP_ANIMATING") ? true ? invariant3(false, "Cannot finish a drop animating when no drop is occurring") : invariant3(false) : void 0;
        store.dispatch(completeDrop({
          completed: state.completed
        }));
      };
    };
  };
  var dropAnimationFlushOnScroll = function(store) {
    var unbind = null;
    var frameId = null;
    function clear() {
      if (frameId) {
        cancelAnimationFrame(frameId);
        frameId = null;
      }
      if (unbind) {
        unbind();
        unbind = null;
      }
    }
    return function(next) {
      return function(action) {
        if (action.type === "FLUSH" || action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATION_FINISHED") {
          clear();
        }
        next(action);
        if (action.type !== "DROP_ANIMATE") {
          return;
        }
        var binding = {
          eventName: "scroll",
          options: {
            capture: true,
            passive: false,
            once: true
          },
          fn: function flushDropAnimation() {
            var state = store.getState();
            if (state.phase === "DROP_ANIMATING") {
              store.dispatch(dropAnimationFinished());
            }
          }
        };
        frameId = requestAnimationFrame(function() {
          frameId = null;
          unbind = bindEvents(window, [binding]);
        });
      };
    };
  };
  var dimensionMarshalStopper = function(marshal) {
    return function() {
      return function(next) {
        return function(action) {
          if (action.type === "DROP_COMPLETE" || action.type === "FLUSH" || action.type === "DROP_ANIMATE") {
            marshal.stopPublishing();
          }
          next(action);
        };
      };
    };
  };
  var focus = function(marshal) {
    var isWatching = false;
    return function() {
      return function(next) {
        return function(action) {
          if (action.type === "INITIAL_PUBLISH") {
            isWatching = true;
            marshal.tryRecordFocus(action.payload.critical.draggable.id);
            next(action);
            marshal.tryRestoreFocusRecorded();
            return;
          }
          next(action);
          if (!isWatching) {
            return;
          }
          if (action.type === "FLUSH") {
            isWatching = false;
            marshal.tryRestoreFocusRecorded();
            return;
          }
          if (action.type === "DROP_COMPLETE") {
            isWatching = false;
            var result = action.payload.completed.result;
            if (result.combine) {
              marshal.tryShiftRecord(result.draggableId, result.combine.draggableId);
            }
            marshal.tryRestoreFocusRecorded();
          }
        };
      };
    };
  };
  var shouldStop = function shouldStop2(action) {
    return action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATE" || action.type === "FLUSH";
  };
  var autoScroll = function(autoScroller) {
    return function(store) {
      return function(next) {
        return function(action) {
          if (shouldStop(action)) {
            autoScroller.stop();
            next(action);
            return;
          }
          if (action.type === "INITIAL_PUBLISH") {
            next(action);
            var state = store.getState();
            !(state.phase === "DRAGGING") ? true ? invariant3(false, "Expected phase to be DRAGGING after INITIAL_PUBLISH") : invariant3(false) : void 0;
            autoScroller.start(state);
            return;
          }
          next(action);
          autoScroller.scroll(store.getState());
        };
      };
    };
  };
  var pendingDrop = function(store) {
    return function(next) {
      return function(action) {
        next(action);
        if (action.type !== "PUBLISH_WHILE_DRAGGING") {
          return;
        }
        var postActionState = store.getState();
        if (postActionState.phase !== "DROP_PENDING") {
          return;
        }
        if (postActionState.isWaiting) {
          return;
        }
        store.dispatch(drop({
          reason: postActionState.reason
        }));
      };
    };
  };
  var composeEnhancers = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
    name: "react-beautiful-dnd"
  }) : compose;
  var createStore2 = function(_ref) {
    var dimensionMarshal = _ref.dimensionMarshal, focusMarshal = _ref.focusMarshal, styleMarshal = _ref.styleMarshal, getResponders = _ref.getResponders, announce = _ref.announce, autoScroller = _ref.autoScroller;
    return createStore(reducer2, composeEnhancers(applyMiddleware(style(styleMarshal), dimensionMarshalStopper(dimensionMarshal), lift$1(dimensionMarshal), drop$1, dropAnimationFinish, dropAnimationFlushOnScroll, pendingDrop, autoScroll(autoScroller), scrollListener, focus(focusMarshal), responders(getResponders, announce))));
  };
  var clean$1 = function clean4() {
    return {
      additions: {},
      removals: {},
      modified: {}
    };
  };
  function createPublisher(_ref) {
    var registry = _ref.registry, callbacks = _ref.callbacks;
    var staging = clean$1();
    var frameId = null;
    var collect = function collect2() {
      if (frameId) {
        return;
      }
      callbacks.collectionStarting();
      frameId = requestAnimationFrame(function() {
        frameId = null;
        start2();
        var _staging = staging, additions = _staging.additions, removals = _staging.removals, modified = _staging.modified;
        var added = Object.keys(additions).map(function(id) {
          return registry.draggable.getById(id).getDimension(origin);
        }).sort(function(a3, b3) {
          return a3.descriptor.index - b3.descriptor.index;
        });
        var updated = Object.keys(modified).map(function(id) {
          var entry = registry.droppable.getById(id);
          var scroll3 = entry.callbacks.getScrollWhileDragging();
          return {
            droppableId: id,
            scroll: scroll3
          };
        });
        var result = {
          additions: added,
          removals: Object.keys(removals),
          modified: updated
        };
        staging = clean$1();
        finish();
        callbacks.publish(result);
      });
    };
    var add3 = function add4(entry) {
      var id = entry.descriptor.id;
      staging.additions[id] = entry;
      staging.modified[entry.descriptor.droppableId] = true;
      if (staging.removals[id]) {
        delete staging.removals[id];
      }
      collect();
    };
    var remove = function remove2(entry) {
      var descriptor = entry.descriptor;
      staging.removals[descriptor.id] = true;
      staging.modified[descriptor.droppableId] = true;
      if (staging.additions[descriptor.id]) {
        delete staging.additions[descriptor.id];
      }
      collect();
    };
    var stop = function stop2() {
      if (!frameId) {
        return;
      }
      cancelAnimationFrame(frameId);
      frameId = null;
      staging = clean$1();
    };
    return {
      add: add3,
      remove,
      stop
    };
  }
  var getMaxScroll = function(_ref) {
    var scrollHeight = _ref.scrollHeight, scrollWidth = _ref.scrollWidth, height = _ref.height, width = _ref.width;
    var maxScroll = subtract({
      x: scrollWidth,
      y: scrollHeight
    }, {
      x: width,
      y: height
    });
    var adjustedMaxScroll = {
      x: Math.max(0, maxScroll.x),
      y: Math.max(0, maxScroll.y)
    };
    return adjustedMaxScroll;
  };
  var getDocumentElement2 = function() {
    var doc = document.documentElement;
    !doc ? true ? invariant3(false, "Cannot find document.documentElement") : invariant3(false) : void 0;
    return doc;
  };
  var getMaxWindowScroll = function() {
    var doc = getDocumentElement2();
    var maxScroll = getMaxScroll({
      scrollHeight: doc.scrollHeight,
      scrollWidth: doc.scrollWidth,
      width: doc.clientWidth,
      height: doc.clientHeight
    });
    return maxScroll;
  };
  var getViewport = function() {
    var scroll3 = getWindowScroll4();
    var maxScroll = getMaxWindowScroll();
    var top2 = scroll3.y;
    var left2 = scroll3.x;
    var doc = getDocumentElement2();
    var width = doc.clientWidth;
    var height = doc.clientHeight;
    var right2 = left2 + width;
    var bottom2 = top2 + height;
    var frame = getRect({
      top: top2,
      left: left2,
      right: right2,
      bottom: bottom2
    });
    var viewport2 = {
      frame,
      scroll: {
        initial: scroll3,
        current: scroll3,
        max: maxScroll,
        diff: {
          value: origin,
          displacement: origin
        }
      }
    };
    return viewport2;
  };
  var getInitialPublish = function(_ref) {
    var critical = _ref.critical, scrollOptions = _ref.scrollOptions, registry = _ref.registry;
    start2();
    var viewport2 = getViewport();
    var windowScroll = viewport2.scroll.current;
    var home2 = critical.droppable;
    var droppables = registry.droppable.getAllByType(home2.type).map(function(entry) {
      return entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions);
    });
    var draggables = registry.draggable.getAllByType(critical.draggable.type).map(function(entry) {
      return entry.getDimension(windowScroll);
    });
    var dimensions = {
      draggables: toDraggableMap(draggables),
      droppables: toDroppableMap(droppables)
    };
    finish();
    var result = {
      dimensions,
      critical,
      viewport: viewport2
    };
    return result;
  };
  function shouldPublishUpdate(registry, dragging, entry) {
    if (entry.descriptor.id === dragging.id) {
      return false;
    }
    if (entry.descriptor.type !== dragging.type) {
      return false;
    }
    var home2 = registry.droppable.getById(entry.descriptor.droppableId);
    if (home2.descriptor.mode !== "virtual") {
      true ? warning3("\n      You are attempting to add or remove a Draggable [id: " + entry.descriptor.id + "]\n      while a drag is occurring. This is only supported for virtual lists.\n\n      See https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/patterns/virtual-lists.md\n    ") : void 0;
      return false;
    }
    return true;
  }
  var createDimensionMarshal = function(registry, callbacks) {
    var collection = null;
    var publisher = createPublisher({
      callbacks: {
        publish: callbacks.publishWhileDragging,
        collectionStarting: callbacks.collectionStarting
      },
      registry
    });
    var updateDroppableIsEnabled3 = function updateDroppableIsEnabled4(id, isEnabled) {
      !registry.droppable.exists(id) ? true ? invariant3(false, "Cannot update is enabled flag of Droppable " + id + " as it is not registered") : invariant3(false) : void 0;
      if (!collection) {
        return;
      }
      callbacks.updateDroppableIsEnabled({
        id,
        isEnabled
      });
    };
    var updateDroppableIsCombineEnabled3 = function updateDroppableIsCombineEnabled4(id, isCombineEnabled) {
      if (!collection) {
        return;
      }
      !registry.droppable.exists(id) ? true ? invariant3(false, "Cannot update isCombineEnabled flag of Droppable " + id + " as it is not registered") : invariant3(false) : void 0;
      callbacks.updateDroppableIsCombineEnabled({
        id,
        isCombineEnabled
      });
    };
    var updateDroppableScroll3 = function updateDroppableScroll4(id, newScroll) {
      if (!collection) {
        return;
      }
      !registry.droppable.exists(id) ? true ? invariant3(false, "Cannot update the scroll on Droppable " + id + " as it is not registered") : invariant3(false) : void 0;
      callbacks.updateDroppableScroll({
        id,
        newScroll
      });
    };
    var scrollDroppable2 = function scrollDroppable3(id, change) {
      if (!collection) {
        return;
      }
      registry.droppable.getById(id).callbacks.scroll(change);
    };
    var stopPublishing = function stopPublishing2() {
      if (!collection) {
        return;
      }
      publisher.stop();
      var home2 = collection.critical.droppable;
      registry.droppable.getAllByType(home2.type).forEach(function(entry) {
        return entry.callbacks.dragStopped();
      });
      collection.unsubscribe();
      collection = null;
    };
    var subscriber = function subscriber2(event) {
      !collection ? true ? invariant3(false, "Should only be subscribed when a collection is occurring") : invariant3(false) : void 0;
      var dragging = collection.critical.draggable;
      if (event.type === "ADDITION") {
        if (shouldPublishUpdate(registry, dragging, event.value)) {
          publisher.add(event.value);
        }
      }
      if (event.type === "REMOVAL") {
        if (shouldPublishUpdate(registry, dragging, event.value)) {
          publisher.remove(event.value);
        }
      }
    };
    var startPublishing = function startPublishing2(request) {
      !!collection ? true ? invariant3(false, "Cannot start capturing critical dimensions as there is already a collection") : invariant3(false) : void 0;
      var entry = registry.draggable.getById(request.draggableId);
      var home2 = registry.droppable.getById(entry.descriptor.droppableId);
      var critical = {
        draggable: entry.descriptor,
        droppable: home2.descriptor
      };
      var unsubscribe = registry.subscribe(subscriber);
      collection = {
        critical,
        unsubscribe
      };
      return getInitialPublish({
        critical,
        registry,
        scrollOptions: request.scrollOptions
      });
    };
    var marshal = {
      updateDroppableIsEnabled: updateDroppableIsEnabled3,
      updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled3,
      scrollDroppable: scrollDroppable2,
      updateDroppableScroll: updateDroppableScroll3,
      startPublishing,
      stopPublishing
    };
    return marshal;
  };
  var canStartDrag = function(state, id) {
    if (state.phase === "IDLE") {
      return true;
    }
    if (state.phase !== "DROP_ANIMATING") {
      return false;
    }
    if (state.completed.result.draggableId === id) {
      return false;
    }
    return state.completed.result.reason === "DROP";
  };
  var scrollWindow = function(change) {
    window.scrollBy(change.x, change.y);
  };
  var getScrollableDroppables = memoize_one_esm_default(function(droppables) {
    return toDroppableList(droppables).filter(function(droppable2) {
      if (!droppable2.isEnabled) {
        return false;
      }
      if (!droppable2.frame) {
        return false;
      }
      return true;
    });
  });
  var getScrollableDroppableOver = function getScrollableDroppableOver2(target, droppables) {
    var maybe = find(getScrollableDroppables(droppables), function(droppable2) {
      !droppable2.frame ? true ? invariant3(false, "Invalid result") : invariant3(false) : void 0;
      return isPositionInFrame(droppable2.frame.pageMarginBox)(target);
    });
    return maybe;
  };
  var getBestScrollableDroppable = function(_ref) {
    var center = _ref.center, destination = _ref.destination, droppables = _ref.droppables;
    if (destination) {
      var _dimension = droppables[destination];
      if (!_dimension.frame) {
        return null;
      }
      return _dimension;
    }
    var dimension = getScrollableDroppableOver(center, droppables);
    return dimension;
  };
  var config = {
    startFromPercentage: 0.25,
    maxScrollAtPercentage: 0.05,
    maxPixelScroll: 28,
    ease: function ease(percentage) {
      return Math.pow(percentage, 2);
    },
    durationDampening: {
      stopDampeningAt: 1200,
      accelerateAt: 360
    }
  };
  var getDistanceThresholds = function(container, axis) {
    var startScrollingFrom = container[axis.size] * config.startFromPercentage;
    var maxScrollValueAt = container[axis.size] * config.maxScrollAtPercentage;
    var thresholds = {
      startScrollingFrom,
      maxScrollValueAt
    };
    return thresholds;
  };
  var getPercentage = function(_ref) {
    var startOfRange = _ref.startOfRange, endOfRange = _ref.endOfRange, current = _ref.current;
    var range = endOfRange - startOfRange;
    if (range === 0) {
      true ? warning3("\n      Detected distance range of 0 in the fluid auto scroller\n      This is unexpected and would cause a divide by 0 issue.\n      Not allowing an auto scroll\n    ") : void 0;
      return 0;
    }
    var currentInRange = current - startOfRange;
    var percentage = currentInRange / range;
    return percentage;
  };
  var minScroll = 1;
  var getValueFromDistance = function(distanceToEdge, thresholds) {
    if (distanceToEdge > thresholds.startScrollingFrom) {
      return 0;
    }
    if (distanceToEdge <= thresholds.maxScrollValueAt) {
      return config.maxPixelScroll;
    }
    if (distanceToEdge === thresholds.startScrollingFrom) {
      return minScroll;
    }
    var percentageFromMaxScrollValueAt = getPercentage({
      startOfRange: thresholds.maxScrollValueAt,
      endOfRange: thresholds.startScrollingFrom,
      current: distanceToEdge
    });
    var percentageFromStartScrollingFrom = 1 - percentageFromMaxScrollValueAt;
    var scroll3 = config.maxPixelScroll * config.ease(percentageFromStartScrollingFrom);
    return Math.ceil(scroll3);
  };
  var accelerateAt = config.durationDampening.accelerateAt;
  var stopAt = config.durationDampening.stopDampeningAt;
  var dampenValueByTime = function(proposedScroll, dragStartTime) {
    var startOfRange = dragStartTime;
    var endOfRange = stopAt;
    var now2 = Date.now();
    var runTime = now2 - startOfRange;
    if (runTime >= stopAt) {
      return proposedScroll;
    }
    if (runTime < accelerateAt) {
      return minScroll;
    }
    var betweenAccelerateAtAndStopAtPercentage = getPercentage({
      startOfRange: accelerateAt,
      endOfRange,
      current: runTime
    });
    var scroll3 = proposedScroll * config.ease(betweenAccelerateAtAndStopAtPercentage);
    return Math.ceil(scroll3);
  };
  var getValue = function(_ref) {
    var distanceToEdge = _ref.distanceToEdge, thresholds = _ref.thresholds, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
    var scroll3 = getValueFromDistance(distanceToEdge, thresholds);
    if (scroll3 === 0) {
      return 0;
    }
    if (!shouldUseTimeDampening) {
      return scroll3;
    }
    return Math.max(dampenValueByTime(scroll3, dragStartTime), minScroll);
  };
  var getScrollOnAxis = function(_ref) {
    var container = _ref.container, distanceToEdges = _ref.distanceToEdges, dragStartTime = _ref.dragStartTime, axis = _ref.axis, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
    var thresholds = getDistanceThresholds(container, axis);
    var isCloserToEnd = distanceToEdges[axis.end] < distanceToEdges[axis.start];
    if (isCloserToEnd) {
      return getValue({
        distanceToEdge: distanceToEdges[axis.end],
        thresholds,
        dragStartTime,
        shouldUseTimeDampening
      });
    }
    return -1 * getValue({
      distanceToEdge: distanceToEdges[axis.start],
      thresholds,
      dragStartTime,
      shouldUseTimeDampening
    });
  };
  var adjustForSizeLimits = function(_ref) {
    var container = _ref.container, subject = _ref.subject, proposedScroll = _ref.proposedScroll;
    var isTooBigVertically = subject.height > container.height;
    var isTooBigHorizontally = subject.width > container.width;
    if (!isTooBigHorizontally && !isTooBigVertically) {
      return proposedScroll;
    }
    if (isTooBigHorizontally && isTooBigVertically) {
      return null;
    }
    return {
      x: isTooBigHorizontally ? 0 : proposedScroll.x,
      y: isTooBigVertically ? 0 : proposedScroll.y
    };
  };
  var clean$2 = apply(function(value) {
    return value === 0 ? 0 : value;
  });
  var getScroll = function(_ref) {
    var dragStartTime = _ref.dragStartTime, container = _ref.container, subject = _ref.subject, center = _ref.center, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
    var distanceToEdges = {
      top: center.y - container.top,
      right: container.right - center.x,
      bottom: container.bottom - center.y,
      left: center.x - container.left
    };
    var y2 = getScrollOnAxis({
      container,
      distanceToEdges,
      dragStartTime,
      axis: vertical,
      shouldUseTimeDampening
    });
    var x3 = getScrollOnAxis({
      container,
      distanceToEdges,
      dragStartTime,
      axis: horizontal,
      shouldUseTimeDampening
    });
    var required2 = clean$2({
      x: x3,
      y: y2
    });
    if (isEqual2(required2, origin)) {
      return null;
    }
    var limited = adjustForSizeLimits({
      container,
      subject,
      proposedScroll: required2
    });
    if (!limited) {
      return null;
    }
    return isEqual2(limited, origin) ? null : limited;
  };
  var smallestSigned = apply(function(value) {
    if (value === 0) {
      return 0;
    }
    return value > 0 ? 1 : -1;
  });
  var getOverlap = function() {
    var getRemainder = function getRemainder2(target, max2) {
      if (target < 0) {
        return target;
      }
      if (target > max2) {
        return target - max2;
      }
      return 0;
    };
    return function(_ref) {
      var current = _ref.current, max2 = _ref.max, change = _ref.change;
      var targetScroll = add(current, change);
      var overlap = {
        x: getRemainder(targetScroll.x, max2.x),
        y: getRemainder(targetScroll.y, max2.y)
      };
      if (isEqual2(overlap, origin)) {
        return null;
      }
      return overlap;
    };
  }();
  var canPartiallyScroll = function canPartiallyScroll2(_ref2) {
    var rawMax = _ref2.max, current = _ref2.current, change = _ref2.change;
    var max2 = {
      x: Math.max(current.x, rawMax.x),
      y: Math.max(current.y, rawMax.y)
    };
    var smallestChange = smallestSigned(change);
    var overlap = getOverlap({
      max: max2,
      current,
      change: smallestChange
    });
    if (!overlap) {
      return true;
    }
    if (smallestChange.x !== 0 && overlap.x === 0) {
      return true;
    }
    if (smallestChange.y !== 0 && overlap.y === 0) {
      return true;
    }
    return false;
  };
  var canScrollWindow = function canScrollWindow2(viewport2, change) {
    return canPartiallyScroll({
      current: viewport2.scroll.current,
      max: viewport2.scroll.max,
      change
    });
  };
  var getWindowOverlap = function getWindowOverlap2(viewport2, change) {
    if (!canScrollWindow(viewport2, change)) {
      return null;
    }
    var max2 = viewport2.scroll.max;
    var current = viewport2.scroll.current;
    return getOverlap({
      current,
      max: max2,
      change
    });
  };
  var canScrollDroppable = function canScrollDroppable2(droppable2, change) {
    var frame = droppable2.frame;
    if (!frame) {
      return false;
    }
    return canPartiallyScroll({
      current: frame.scroll.current,
      max: frame.scroll.max,
      change
    });
  };
  var getDroppableOverlap = function getDroppableOverlap2(droppable2, change) {
    var frame = droppable2.frame;
    if (!frame) {
      return null;
    }
    if (!canScrollDroppable(droppable2, change)) {
      return null;
    }
    return getOverlap({
      current: frame.scroll.current,
      max: frame.scroll.max,
      change
    });
  };
  var getWindowScrollChange = function(_ref) {
    var viewport2 = _ref.viewport, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
    var scroll3 = getScroll({
      dragStartTime,
      container: viewport2.frame,
      subject,
      center,
      shouldUseTimeDampening
    });
    return scroll3 && canScrollWindow(viewport2, scroll3) ? scroll3 : null;
  };
  var getDroppableScrollChange = function(_ref) {
    var droppable2 = _ref.droppable, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
    var frame = droppable2.frame;
    if (!frame) {
      return null;
    }
    var scroll3 = getScroll({
      dragStartTime,
      container: frame.pageMarginBox,
      subject,
      center,
      shouldUseTimeDampening
    });
    return scroll3 && canScrollDroppable(droppable2, scroll3) ? scroll3 : null;
  };
  var scroll$1 = function(_ref) {
    var state = _ref.state, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening, scrollWindow2 = _ref.scrollWindow, scrollDroppable2 = _ref.scrollDroppable;
    var center = state.current.page.borderBoxCenter;
    var draggable2 = state.dimensions.draggables[state.critical.draggable.id];
    var subject = draggable2.page.marginBox;
    if (state.isWindowScrollAllowed) {
      var viewport2 = state.viewport;
      var _change = getWindowScrollChange({
        dragStartTime,
        viewport: viewport2,
        subject,
        center,
        shouldUseTimeDampening
      });
      if (_change) {
        scrollWindow2(_change);
        return;
      }
    }
    var droppable2 = getBestScrollableDroppable({
      center,
      destination: whatIsDraggedOver(state.impact),
      droppables: state.dimensions.droppables
    });
    if (!droppable2) {
      return;
    }
    var change = getDroppableScrollChange({
      dragStartTime,
      droppable: droppable2,
      subject,
      center,
      shouldUseTimeDampening
    });
    if (change) {
      scrollDroppable2(droppable2.descriptor.id, change);
    }
  };
  var createFluidScroller = function(_ref) {
    var scrollWindow2 = _ref.scrollWindow, scrollDroppable2 = _ref.scrollDroppable;
    var scheduleWindowScroll = raf_schd_esm_default(scrollWindow2);
    var scheduleDroppableScroll = raf_schd_esm_default(scrollDroppable2);
    var dragging = null;
    var tryScroll = function tryScroll2(state) {
      !dragging ? true ? invariant3(false, "Cannot fluid scroll if not dragging") : invariant3(false) : void 0;
      var _dragging = dragging, shouldUseTimeDampening = _dragging.shouldUseTimeDampening, dragStartTime = _dragging.dragStartTime;
      scroll$1({
        state,
        scrollWindow: scheduleWindowScroll,
        scrollDroppable: scheduleDroppableScroll,
        dragStartTime,
        shouldUseTimeDampening
      });
    };
    var start$1 = function start$12(state) {
      start2();
      !!dragging ? true ? invariant3(false, "Cannot start auto scrolling when already started") : invariant3(false) : void 0;
      var dragStartTime = Date.now();
      var wasScrollNeeded = false;
      var fakeScrollCallback = function fakeScrollCallback2() {
        wasScrollNeeded = true;
      };
      scroll$1({
        state,
        dragStartTime: 0,
        shouldUseTimeDampening: false,
        scrollWindow: fakeScrollCallback,
        scrollDroppable: fakeScrollCallback
      });
      dragging = {
        dragStartTime,
        shouldUseTimeDampening: wasScrollNeeded
      };
      finish();
      if (wasScrollNeeded) {
        tryScroll(state);
      }
    };
    var stop = function stop2() {
      if (!dragging) {
        return;
      }
      scheduleWindowScroll.cancel();
      scheduleDroppableScroll.cancel();
      dragging = null;
    };
    return {
      start: start$1,
      stop,
      scroll: tryScroll
    };
  };
  var createJumpScroller = function(_ref) {
    var move3 = _ref.move, scrollDroppable2 = _ref.scrollDroppable, scrollWindow2 = _ref.scrollWindow;
    var moveByOffset = function moveByOffset2(state, offset4) {
      var client = add(state.current.client.selection, offset4);
      move3({
        client
      });
    };
    var scrollDroppableAsMuchAsItCan = function scrollDroppableAsMuchAsItCan2(droppable2, change) {
      if (!canScrollDroppable(droppable2, change)) {
        return change;
      }
      var overlap = getDroppableOverlap(droppable2, change);
      if (!overlap) {
        scrollDroppable2(droppable2.descriptor.id, change);
        return null;
      }
      var whatTheDroppableCanScroll = subtract(change, overlap);
      scrollDroppable2(droppable2.descriptor.id, whatTheDroppableCanScroll);
      var remainder = subtract(change, whatTheDroppableCanScroll);
      return remainder;
    };
    var scrollWindowAsMuchAsItCan = function scrollWindowAsMuchAsItCan2(isWindowScrollAllowed, viewport2, change) {
      if (!isWindowScrollAllowed) {
        return change;
      }
      if (!canScrollWindow(viewport2, change)) {
        return change;
      }
      var overlap = getWindowOverlap(viewport2, change);
      if (!overlap) {
        scrollWindow2(change);
        return null;
      }
      var whatTheWindowCanScroll = subtract(change, overlap);
      scrollWindow2(whatTheWindowCanScroll);
      var remainder = subtract(change, whatTheWindowCanScroll);
      return remainder;
    };
    var jumpScroller = function jumpScroller2(state) {
      var request = state.scrollJumpRequest;
      if (!request) {
        return;
      }
      var destination = whatIsDraggedOver(state.impact);
      !destination ? true ? invariant3(false, "Cannot perform a jump scroll when there is no destination") : invariant3(false) : void 0;
      var droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination], request);
      if (!droppableRemainder) {
        return;
      }
      var viewport2 = state.viewport;
      var windowRemainder = scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed, viewport2, droppableRemainder);
      if (!windowRemainder) {
        return;
      }
      moveByOffset(state, windowRemainder);
    };
    return jumpScroller;
  };
  var createAutoScroller = function(_ref) {
    var scrollDroppable2 = _ref.scrollDroppable, scrollWindow2 = _ref.scrollWindow, move3 = _ref.move;
    var fluidScroller = createFluidScroller({
      scrollWindow: scrollWindow2,
      scrollDroppable: scrollDroppable2
    });
    var jumpScroll = createJumpScroller({
      move: move3,
      scrollWindow: scrollWindow2,
      scrollDroppable: scrollDroppable2
    });
    var scroll3 = function scroll4(state) {
      if (state.phase !== "DRAGGING") {
        return;
      }
      if (state.movementMode === "FLUID") {
        fluidScroller.scroll(state);
        return;
      }
      if (!state.scrollJumpRequest) {
        return;
      }
      jumpScroll(state);
    };
    var scroller = {
      scroll: scroll3,
      start: fluidScroller.start,
      stop: fluidScroller.stop
    };
    return scroller;
  };
  var prefix$1 = "data-rbd";
  var dragHandle = function() {
    var base = prefix$1 + "-drag-handle";
    return {
      base,
      draggableId: base + "-draggable-id",
      contextId: base + "-context-id"
    };
  }();
  var draggable = function() {
    var base = prefix$1 + "-draggable";
    return {
      base,
      contextId: base + "-context-id",
      id: base + "-id"
    };
  }();
  var droppable = function() {
    var base = prefix$1 + "-droppable";
    return {
      base,
      contextId: base + "-context-id",
      id: base + "-id"
    };
  }();
  var scrollContainer = {
    contextId: prefix$1 + "-scroll-container-context-id"
  };
  var makeGetSelector = function makeGetSelector2(context) {
    return function(attribute) {
      return "[" + attribute + '="' + context + '"]';
    };
  };
  var getStyles = function getStyles2(rules, property) {
    return rules.map(function(rule) {
      var value = rule.styles[property];
      if (!value) {
        return "";
      }
      return rule.selector + " { " + value + " }";
    }).join(" ");
  };
  var noPointerEvents = "pointer-events: none;";
  var getStyles$1 = function(contextId) {
    var getSelector2 = makeGetSelector(contextId);
    var dragHandle$1 = function() {
      var grabCursor = "\n      cursor: -webkit-grab;\n      cursor: grab;\n    ";
      return {
        selector: getSelector2(dragHandle.contextId),
        styles: {
          always: "\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",
          resting: grabCursor,
          dragging: noPointerEvents,
          dropAnimating: grabCursor
        }
      };
    }();
    var draggable$1 = function() {
      var transition = "\n      transition: " + transitions.outOfTheWay + ";\n    ";
      return {
        selector: getSelector2(draggable.contextId),
        styles: {
          dragging: transition,
          dropAnimating: transition,
          userCancel: transition
        }
      };
    }();
    var droppable$1 = {
      selector: getSelector2(droppable.contextId),
      styles: {
        always: "overflow-anchor: none;"
      }
    };
    var body = {
      selector: "body",
      styles: {
        dragging: "\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "
      }
    };
    var rules = [draggable$1, dragHandle$1, droppable$1, body];
    return {
      always: getStyles(rules, "always"),
      resting: getStyles(rules, "resting"),
      dragging: getStyles(rules, "dragging"),
      dropAnimating: getStyles(rules, "dropAnimating"),
      userCancel: getStyles(rules, "userCancel")
    };
  };
  var useIsomorphicLayoutEffect3 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react25.useLayoutEffect : import_react25.useEffect;
  var getHead = function getHead2() {
    var head = document.querySelector("head");
    !head ? true ? invariant3(false, "Cannot find the head to append a style to") : invariant3(false) : void 0;
    return head;
  };
  var createStyleEl = function createStyleEl2(nonce) {
    var el = document.createElement("style");
    if (nonce) {
      el.setAttribute("nonce", nonce);
    }
    el.type = "text/css";
    return el;
  };
  function useStyleMarshal(contextId, nonce) {
    var styles = useMemo5(function() {
      return getStyles$1(contextId);
    }, [contextId]);
    var alwaysRef = (0, import_react25.useRef)(null);
    var dynamicRef = (0, import_react25.useRef)(null);
    var setDynamicStyle = useCallback2(memoize_one_esm_default(function(proposed) {
      var el = dynamicRef.current;
      !el ? true ? invariant3(false, "Cannot set dynamic style element if it is not set") : invariant3(false) : void 0;
      el.textContent = proposed;
    }), []);
    var setAlwaysStyle = useCallback2(function(proposed) {
      var el = alwaysRef.current;
      !el ? true ? invariant3(false, "Cannot set dynamic style element if it is not set") : invariant3(false) : void 0;
      el.textContent = proposed;
    }, []);
    useIsomorphicLayoutEffect3(function() {
      !(!alwaysRef.current && !dynamicRef.current) ? true ? invariant3(false, "style elements already mounted") : invariant3(false) : void 0;
      var always = createStyleEl(nonce);
      var dynamic = createStyleEl(nonce);
      alwaysRef.current = always;
      dynamicRef.current = dynamic;
      always.setAttribute(prefix$1 + "-always", contextId);
      dynamic.setAttribute(prefix$1 + "-dynamic", contextId);
      getHead().appendChild(always);
      getHead().appendChild(dynamic);
      setAlwaysStyle(styles.always);
      setDynamicStyle(styles.resting);
      return function() {
        var remove = function remove2(ref2) {
          var current = ref2.current;
          !current ? true ? invariant3(false, "Cannot unmount ref as it is not set") : invariant3(false) : void 0;
          getHead().removeChild(current);
          ref2.current = null;
        };
        remove(alwaysRef);
        remove(dynamicRef);
      };
    }, [nonce, setAlwaysStyle, setDynamicStyle, styles.always, styles.resting, contextId]);
    var dragging = useCallback2(function() {
      return setDynamicStyle(styles.dragging);
    }, [setDynamicStyle, styles.dragging]);
    var dropping = useCallback2(function(reason) {
      if (reason === "DROP") {
        setDynamicStyle(styles.dropAnimating);
        return;
      }
      setDynamicStyle(styles.userCancel);
    }, [setDynamicStyle, styles.dropAnimating, styles.userCancel]);
    var resting = useCallback2(function() {
      if (!dynamicRef.current) {
        return;
      }
      setDynamicStyle(styles.resting);
    }, [setDynamicStyle, styles.resting]);
    var marshal = useMemo5(function() {
      return {
        dragging,
        dropping,
        resting
      };
    }, [dragging, dropping, resting]);
    return marshal;
  }
  var getWindowFromEl = function(el) {
    return el && el.ownerDocument ? el.ownerDocument.defaultView : window;
  };
  function isHtmlElement(el) {
    return el instanceof getWindowFromEl(el).HTMLElement;
  }
  function findDragHandle(contextId, draggableId) {
    var selector = "[" + dragHandle.contextId + '="' + contextId + '"]';
    var possible = toArray(document.querySelectorAll(selector));
    if (!possible.length) {
      true ? warning3('Unable to find any drag handles in the context "' + contextId + '"') : void 0;
      return null;
    }
    var handle = find(possible, function(el) {
      return el.getAttribute(dragHandle.draggableId) === draggableId;
    });
    if (!handle) {
      true ? warning3('Unable to find drag handle with id "' + draggableId + '" as no handle with a matching id was found') : void 0;
      return null;
    }
    if (!isHtmlElement(handle)) {
      true ? warning3("drag handle needs to be a HTMLElement") : void 0;
      return null;
    }
    return handle;
  }
  function useFocusMarshal(contextId) {
    var entriesRef = (0, import_react25.useRef)({});
    var recordRef = (0, import_react25.useRef)(null);
    var restoreFocusFrameRef = (0, import_react25.useRef)(null);
    var isMountedRef = (0, import_react25.useRef)(false);
    var register = useCallback2(function register2(id, focus2) {
      var entry = {
        id,
        focus: focus2
      };
      entriesRef.current[id] = entry;
      return function unregister() {
        var entries = entriesRef.current;
        var current = entries[id];
        if (current !== entry) {
          delete entries[id];
        }
      };
    }, []);
    var tryGiveFocus = useCallback2(function tryGiveFocus2(tryGiveFocusTo) {
      var handle = findDragHandle(contextId, tryGiveFocusTo);
      if (handle && handle !== document.activeElement) {
        handle.focus();
      }
    }, [contextId]);
    var tryShiftRecord = useCallback2(function tryShiftRecord2(previous, redirectTo) {
      if (recordRef.current === previous) {
        recordRef.current = redirectTo;
      }
    }, []);
    var tryRestoreFocusRecorded = useCallback2(function tryRestoreFocusRecorded2() {
      if (restoreFocusFrameRef.current) {
        return;
      }
      if (!isMountedRef.current) {
        return;
      }
      restoreFocusFrameRef.current = requestAnimationFrame(function() {
        restoreFocusFrameRef.current = null;
        var record = recordRef.current;
        if (record) {
          tryGiveFocus(record);
        }
      });
    }, [tryGiveFocus]);
    var tryRecordFocus = useCallback2(function tryRecordFocus2(id) {
      recordRef.current = null;
      var focused = document.activeElement;
      if (!focused) {
        return;
      }
      if (focused.getAttribute(dragHandle.draggableId) !== id) {
        return;
      }
      recordRef.current = id;
    }, []);
    useIsomorphicLayoutEffect3(function() {
      isMountedRef.current = true;
      return function clearFrameOnUnmount() {
        isMountedRef.current = false;
        var frameId = restoreFocusFrameRef.current;
        if (frameId) {
          cancelAnimationFrame(frameId);
        }
      };
    }, []);
    var marshal = useMemo5(function() {
      return {
        register,
        tryRecordFocus,
        tryRestoreFocusRecorded,
        tryShiftRecord
      };
    }, [register, tryRecordFocus, tryRestoreFocusRecorded, tryShiftRecord]);
    return marshal;
  }
  function createRegistry() {
    var entries = {
      draggables: {},
      droppables: {}
    };
    var subscribers = [];
    function subscribe(cb) {
      subscribers.push(cb);
      return function unsubscribe() {
        var index2 = subscribers.indexOf(cb);
        if (index2 === -1) {
          return;
        }
        subscribers.splice(index2, 1);
      };
    }
    function notify2(event) {
      if (subscribers.length) {
        subscribers.forEach(function(cb) {
          return cb(event);
        });
      }
    }
    function findDraggableById(id) {
      return entries.draggables[id] || null;
    }
    function getDraggableById(id) {
      var entry = findDraggableById(id);
      !entry ? true ? invariant3(false, "Cannot find draggable entry with id [" + id + "]") : invariant3(false) : void 0;
      return entry;
    }
    var draggableAPI = {
      register: function register(entry) {
        entries.draggables[entry.descriptor.id] = entry;
        notify2({
          type: "ADDITION",
          value: entry
        });
      },
      update: function update2(entry, last) {
        var current = entries.draggables[last.descriptor.id];
        if (!current) {
          return;
        }
        if (current.uniqueId !== entry.uniqueId) {
          return;
        }
        delete entries.draggables[last.descriptor.id];
        entries.draggables[entry.descriptor.id] = entry;
      },
      unregister: function unregister(entry) {
        var draggableId = entry.descriptor.id;
        var current = findDraggableById(draggableId);
        if (!current) {
          return;
        }
        if (entry.uniqueId !== current.uniqueId) {
          return;
        }
        delete entries.draggables[draggableId];
        notify2({
          type: "REMOVAL",
          value: entry
        });
      },
      getById: getDraggableById,
      findById: findDraggableById,
      exists: function exists(id) {
        return Boolean(findDraggableById(id));
      },
      getAllByType: function getAllByType(type) {
        return values(entries.draggables).filter(function(entry) {
          return entry.descriptor.type === type;
        });
      }
    };
    function findDroppableById(id) {
      return entries.droppables[id] || null;
    }
    function getDroppableById(id) {
      var entry = findDroppableById(id);
      !entry ? true ? invariant3(false, "Cannot find droppable entry with id [" + id + "]") : invariant3(false) : void 0;
      return entry;
    }
    var droppableAPI = {
      register: function register(entry) {
        entries.droppables[entry.descriptor.id] = entry;
      },
      unregister: function unregister(entry) {
        var current = findDroppableById(entry.descriptor.id);
        if (!current) {
          return;
        }
        if (entry.uniqueId !== current.uniqueId) {
          return;
        }
        delete entries.droppables[entry.descriptor.id];
      },
      getById: getDroppableById,
      findById: findDroppableById,
      exists: function exists(id) {
        return Boolean(findDroppableById(id));
      },
      getAllByType: function getAllByType(type) {
        return values(entries.droppables).filter(function(entry) {
          return entry.descriptor.type === type;
        });
      }
    };
    function clean5() {
      entries.draggables = {};
      entries.droppables = {};
      subscribers.length = 0;
    }
    return {
      draggable: draggableAPI,
      droppable: droppableAPI,
      subscribe,
      clean: clean5
    };
  }
  function useRegistry() {
    var registry = useMemo5(createRegistry, []);
    (0, import_react25.useEffect)(function() {
      return function unmount() {
        requestAnimationFrame(registry.clean);
      };
    }, [registry]);
    return registry;
  }
  var StoreContext = import_react25.default.createContext(null);
  var getBodyElement = function() {
    var body = document.body;
    !body ? true ? invariant3(false, "Cannot find document.body") : invariant3(false) : void 0;
    return body;
  };
  var visuallyHidden = {
    position: "absolute",
    width: "1px",
    height: "1px",
    margin: "-1px",
    border: "0",
    padding: "0",
    overflow: "hidden",
    clip: "rect(0 0 0 0)",
    "clip-path": "inset(100%)"
  };
  var getId = function getId2(contextId) {
    return "rbd-announcement-" + contextId;
  };
  function useAnnouncer(contextId) {
    var id = useMemo5(function() {
      return getId(contextId);
    }, [contextId]);
    var ref2 = (0, import_react25.useRef)(null);
    (0, import_react25.useEffect)(function setup() {
      var el = document.createElement("div");
      ref2.current = el;
      el.id = id;
      el.setAttribute("aria-live", "assertive");
      el.setAttribute("aria-atomic", "true");
      _extends(el.style, visuallyHidden);
      getBodyElement().appendChild(el);
      return function cleanup() {
        setTimeout(function remove() {
          var body = getBodyElement();
          if (body.contains(el)) {
            body.removeChild(el);
          }
          if (el === ref2.current) {
            ref2.current = null;
          }
        });
      };
    }, [id]);
    var announce = useCallback2(function(message) {
      var el = ref2.current;
      if (el) {
        el.textContent = message;
        return;
      }
      true ? warning3('\n      A screen reader message was trying to be announced but it was unable to do so.\n      This can occur if you unmount your <DragDropContext /> in your onDragEnd.\n      Consider calling provided.announce() before the unmount so that the instruction will\n      not be lost for users relying on a screen reader.\n\n      Message not passed to screen reader:\n\n      "' + message + '"\n    ') : void 0;
    }, []);
    return announce;
  }
  var count = 0;
  var defaults = {
    separator: "::"
  };
  function useUniqueId(prefix3, options) {
    if (options === void 0) {
      options = defaults;
    }
    return useMemo5(function() {
      return "" + prefix3 + options.separator + count++;
    }, [options.separator, prefix3]);
  }
  function getElementId(_ref) {
    var contextId = _ref.contextId, uniqueId = _ref.uniqueId;
    return "rbd-hidden-text-" + contextId + "-" + uniqueId;
  }
  function useHiddenTextElement(_ref2) {
    var contextId = _ref2.contextId, text = _ref2.text;
    var uniqueId = useUniqueId("hidden-text", {
      separator: "-"
    });
    var id = useMemo5(function() {
      return getElementId({
        contextId,
        uniqueId
      });
    }, [uniqueId, contextId]);
    (0, import_react25.useEffect)(function mount() {
      var el = document.createElement("div");
      el.id = id;
      el.textContent = text;
      el.style.display = "none";
      getBodyElement().appendChild(el);
      return function unmount() {
        var body = getBodyElement();
        if (body.contains(el)) {
          body.removeChild(el);
        }
      };
    }, [id, text]);
    return id;
  }
  var AppContext = import_react25.default.createContext(null);
  var peerDependencies = {
    react: "^16.8.5 || ^17.0.0",
    "react-dom": "^16.8.5 || ^17.0.0"
  };
  var semver = /(\d+)\.(\d+)\.(\d+)/;
  var getVersion = function getVersion2(value) {
    var result = semver.exec(value);
    !(result != null) ? true ? invariant3(false, "Unable to parse React version " + value) : invariant3(false) : void 0;
    var major = Number(result[1]);
    var minor = Number(result[2]);
    var patch3 = Number(result[3]);
    return {
      major,
      minor,
      patch: patch3,
      raw: value
    };
  };
  var isSatisfied = function isSatisfied2(expected, actual) {
    if (actual.major > expected.major) {
      return true;
    }
    if (actual.major < expected.major) {
      return false;
    }
    if (actual.minor > expected.minor) {
      return true;
    }
    if (actual.minor < expected.minor) {
      return false;
    }
    return actual.patch >= expected.patch;
  };
  var checkReactVersion = function(peerDepValue, actualValue) {
    var peerDep = getVersion(peerDepValue);
    var actual = getVersion(actualValue);
    if (isSatisfied(peerDep, actual)) {
      return;
    }
    true ? warning3("\n    React version: [" + actual.raw + "]\n    does not satisfy expected peer dependency version: [" + peerDep.raw + "]\n\n    This can result in run time bugs, and even fatal crashes\n  ") : void 0;
  };
  var suffix = "\n  We expect a html5 doctype: <!doctype html>\n  This is to ensure consistent browser layout and measurement\n\n  More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/doctype.md\n";
  var checkDoctype = function(doc) {
    var doctype = doc.doctype;
    if (!doctype) {
      true ? warning3("\n      No <!doctype html> found.\n\n      " + suffix + "\n    ") : void 0;
      return;
    }
    if (doctype.name.toLowerCase() !== "html") {
      true ? warning3("\n      Unexpected <!doctype> found: (" + doctype.name + ")\n\n      " + suffix + "\n    ") : void 0;
    }
    if (doctype.publicId !== "") {
      true ? warning3("\n      Unexpected <!doctype> publicId found: (" + doctype.publicId + ")\n      A html5 doctype does not have a publicId\n\n      " + suffix + "\n    ") : void 0;
    }
  };
  function useDev(useHook) {
    if (true) {
      useHook();
    }
  }
  function useDevSetupWarning(fn4, inputs) {
    useDev(function() {
      (0, import_react25.useEffect)(function() {
        try {
          fn4();
        } catch (e2) {
          error("\n          A setup problem was encountered.\n\n          > " + e2.message + "\n        ");
        }
      }, inputs);
    });
  }
  function useStartupValidation() {
    useDevSetupWarning(function() {
      checkReactVersion(peerDependencies.react, import_react25.default.version);
      checkDoctype(document);
    }, []);
  }
  function usePrevious(current) {
    var ref2 = (0, import_react25.useRef)(current);
    (0, import_react25.useEffect)(function() {
      ref2.current = current;
    });
    return ref2;
  }
  function create2() {
    var lock = null;
    function isClaimed() {
      return Boolean(lock);
    }
    function isActive(value) {
      return value === lock;
    }
    function claim(abandon) {
      !!lock ? true ? invariant3(false, "Cannot claim lock as it is already claimed") : invariant3(false) : void 0;
      var newLock = {
        abandon
      };
      lock = newLock;
      return newLock;
    }
    function release() {
      !lock ? true ? invariant3(false, "Cannot release lock when there is no lock") : invariant3(false) : void 0;
      lock = null;
    }
    function tryAbandon() {
      if (lock) {
        lock.abandon();
        release();
      }
    }
    return {
      isClaimed,
      isActive,
      claim,
      release,
      tryAbandon
    };
  }
  var tab = 9;
  var enter = 13;
  var escape = 27;
  var space = 32;
  var pageUp = 33;
  var pageDown = 34;
  var end2 = 35;
  var home = 36;
  var arrowLeft = 37;
  var arrowUp = 38;
  var arrowRight = 39;
  var arrowDown = 40;
  var _preventedKeys;
  var preventedKeys = (_preventedKeys = {}, _preventedKeys[enter] = true, _preventedKeys[tab] = true, _preventedKeys);
  var preventStandardKeyEvents = function(event) {
    if (preventedKeys[event.keyCode]) {
      event.preventDefault();
    }
  };
  var supportedEventName = function() {
    var base = "visibilitychange";
    if (typeof document === "undefined") {
      return base;
    }
    var candidates = [base, "ms" + base, "webkit" + base, "moz" + base, "o" + base];
    var supported = find(candidates, function(eventName) {
      return "on" + eventName in document;
    });
    return supported || base;
  }();
  var primaryButton = 0;
  var sloppyClickThreshold = 5;
  function isSloppyClickThresholdExceeded(original, current) {
    return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
  }
  var idle$1 = {
    type: "IDLE"
  };
  function getCaptureBindings(_ref) {
    var cancel = _ref.cancel, completed = _ref.completed, getPhase = _ref.getPhase, setPhase = _ref.setPhase;
    return [{
      eventName: "mousemove",
      fn: function fn4(event) {
        var button = event.button, clientX = event.clientX, clientY = event.clientY;
        if (button !== primaryButton) {
          return;
        }
        var point = {
          x: clientX,
          y: clientY
        };
        var phase = getPhase();
        if (phase.type === "DRAGGING") {
          event.preventDefault();
          phase.actions.move(point);
          return;
        }
        !(phase.type === "PENDING") ? true ? invariant3(false, "Cannot be IDLE") : invariant3(false) : void 0;
        var pending = phase.point;
        if (!isSloppyClickThresholdExceeded(pending, point)) {
          return;
        }
        event.preventDefault();
        var actions = phase.actions.fluidLift(point);
        setPhase({
          type: "DRAGGING",
          actions
        });
      }
    }, {
      eventName: "mouseup",
      fn: function fn4(event) {
        var phase = getPhase();
        if (phase.type !== "DRAGGING") {
          cancel();
          return;
        }
        event.preventDefault();
        phase.actions.drop({
          shouldBlockNextClick: true
        });
        completed();
      }
    }, {
      eventName: "mousedown",
      fn: function fn4(event) {
        if (getPhase().type === "DRAGGING") {
          event.preventDefault();
        }
        cancel();
      }
    }, {
      eventName: "keydown",
      fn: function fn4(event) {
        var phase = getPhase();
        if (phase.type === "PENDING") {
          cancel();
          return;
        }
        if (event.keyCode === escape) {
          event.preventDefault();
          cancel();
          return;
        }
        preventStandardKeyEvents(event);
      }
    }, {
      eventName: "resize",
      fn: cancel
    }, {
      eventName: "scroll",
      options: {
        passive: true,
        capture: false
      },
      fn: function fn4() {
        if (getPhase().type === "PENDING") {
          cancel();
        }
      }
    }, {
      eventName: "webkitmouseforcedown",
      fn: function fn4(event) {
        var phase = getPhase();
        !(phase.type !== "IDLE") ? true ? invariant3(false, "Unexpected phase") : invariant3(false) : void 0;
        if (phase.actions.shouldRespectForcePress()) {
          cancel();
          return;
        }
        event.preventDefault();
      }
    }, {
      eventName: supportedEventName,
      fn: cancel
    }];
  }
  function useMouseSensor(api) {
    var phaseRef = (0, import_react25.useRef)(idle$1);
    var unbindEventsRef = (0, import_react25.useRef)(noop2);
    var startCaptureBinding = useMemo5(function() {
      return {
        eventName: "mousedown",
        fn: function onMouseDown(event) {
          if (event.defaultPrevented) {
            return;
          }
          if (event.button !== primaryButton) {
            return;
          }
          if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
            return;
          }
          var draggableId = api.findClosestDraggableId(event);
          if (!draggableId) {
            return;
          }
          var actions = api.tryGetLock(draggableId, stop, {
            sourceEvent: event
          });
          if (!actions) {
            return;
          }
          event.preventDefault();
          var point = {
            x: event.clientX,
            y: event.clientY
          };
          unbindEventsRef.current();
          startPendingDrag(actions, point);
        }
      };
    }, [api]);
    var preventForcePressBinding = useMemo5(function() {
      return {
        eventName: "webkitmouseforcewillbegin",
        fn: function fn4(event) {
          if (event.defaultPrevented) {
            return;
          }
          var id = api.findClosestDraggableId(event);
          if (!id) {
            return;
          }
          var options = api.findOptionsForDraggable(id);
          if (!options) {
            return;
          }
          if (options.shouldRespectForcePress) {
            return;
          }
          if (!api.canGetLock(id)) {
            return;
          }
          event.preventDefault();
        }
      };
    }, [api]);
    var listenForCapture = useCallback2(function listenForCapture2() {
      var options = {
        passive: false,
        capture: true
      };
      unbindEventsRef.current = bindEvents(window, [preventForcePressBinding, startCaptureBinding], options);
    }, [preventForcePressBinding, startCaptureBinding]);
    var stop = useCallback2(function() {
      var current = phaseRef.current;
      if (current.type === "IDLE") {
        return;
      }
      phaseRef.current = idle$1;
      unbindEventsRef.current();
      listenForCapture();
    }, [listenForCapture]);
    var cancel = useCallback2(function() {
      var phase = phaseRef.current;
      stop();
      if (phase.type === "DRAGGING") {
        phase.actions.cancel({
          shouldBlockNextClick: true
        });
      }
      if (phase.type === "PENDING") {
        phase.actions.abort();
      }
    }, [stop]);
    var bindCapturingEvents = useCallback2(function bindCapturingEvents2() {
      var options = {
        capture: true,
        passive: false
      };
      var bindings = getCaptureBindings({
        cancel,
        completed: stop,
        getPhase: function getPhase() {
          return phaseRef.current;
        },
        setPhase: function setPhase(phase) {
          phaseRef.current = phase;
        }
      });
      unbindEventsRef.current = bindEvents(window, bindings, options);
    }, [cancel, stop]);
    var startPendingDrag = useCallback2(function startPendingDrag2(actions, point) {
      !(phaseRef.current.type === "IDLE") ? true ? invariant3(false, "Expected to move from IDLE to PENDING drag") : invariant3(false) : void 0;
      phaseRef.current = {
        type: "PENDING",
        point,
        actions
      };
      bindCapturingEvents();
    }, [bindCapturingEvents]);
    useIsomorphicLayoutEffect3(function mount() {
      listenForCapture();
      return function unmount() {
        unbindEventsRef.current();
      };
    }, [listenForCapture]);
  }
  var _scrollJumpKeys;
  function noop$1() {
  }
  var scrollJumpKeys = (_scrollJumpKeys = {}, _scrollJumpKeys[pageDown] = true, _scrollJumpKeys[pageUp] = true, _scrollJumpKeys[home] = true, _scrollJumpKeys[end2] = true, _scrollJumpKeys);
  function getDraggingBindings(actions, stop) {
    function cancel() {
      stop();
      actions.cancel();
    }
    function drop5() {
      stop();
      actions.drop();
    }
    return [{
      eventName: "keydown",
      fn: function fn4(event) {
        if (event.keyCode === escape) {
          event.preventDefault();
          cancel();
          return;
        }
        if (event.keyCode === space) {
          event.preventDefault();
          drop5();
          return;
        }
        if (event.keyCode === arrowDown) {
          event.preventDefault();
          actions.moveDown();
          return;
        }
        if (event.keyCode === arrowUp) {
          event.preventDefault();
          actions.moveUp();
          return;
        }
        if (event.keyCode === arrowRight) {
          event.preventDefault();
          actions.moveRight();
          return;
        }
        if (event.keyCode === arrowLeft) {
          event.preventDefault();
          actions.moveLeft();
          return;
        }
        if (scrollJumpKeys[event.keyCode]) {
          event.preventDefault();
          return;
        }
        preventStandardKeyEvents(event);
      }
    }, {
      eventName: "mousedown",
      fn: cancel
    }, {
      eventName: "mouseup",
      fn: cancel
    }, {
      eventName: "click",
      fn: cancel
    }, {
      eventName: "touchstart",
      fn: cancel
    }, {
      eventName: "resize",
      fn: cancel
    }, {
      eventName: "wheel",
      fn: cancel,
      options: {
        passive: true
      }
    }, {
      eventName: supportedEventName,
      fn: cancel
    }];
  }
  function useKeyboardSensor(api) {
    var unbindEventsRef = (0, import_react25.useRef)(noop$1);
    var startCaptureBinding = useMemo5(function() {
      return {
        eventName: "keydown",
        fn: function onKeyDown(event) {
          if (event.defaultPrevented) {
            return;
          }
          if (event.keyCode !== space) {
            return;
          }
          var draggableId = api.findClosestDraggableId(event);
          if (!draggableId) {
            return;
          }
          var preDrag = api.tryGetLock(draggableId, stop, {
            sourceEvent: event
          });
          if (!preDrag) {
            return;
          }
          event.preventDefault();
          var isCapturing = true;
          var actions = preDrag.snapLift();
          unbindEventsRef.current();
          function stop() {
            !isCapturing ? true ? invariant3(false, "Cannot stop capturing a keyboard drag when not capturing") : invariant3(false) : void 0;
            isCapturing = false;
            unbindEventsRef.current();
            listenForCapture();
          }
          unbindEventsRef.current = bindEvents(window, getDraggingBindings(actions, stop), {
            capture: true,
            passive: false
          });
        }
      };
    }, [api]);
    var listenForCapture = useCallback2(function tryStartCapture() {
      var options = {
        passive: false,
        capture: true
      };
      unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
    }, [startCaptureBinding]);
    useIsomorphicLayoutEffect3(function mount() {
      listenForCapture();
      return function unmount() {
        unbindEventsRef.current();
      };
    }, [listenForCapture]);
  }
  var idle$2 = {
    type: "IDLE"
  };
  var timeForLongPress = 120;
  var forcePressThreshold = 0.15;
  function getWindowBindings(_ref) {
    var cancel = _ref.cancel, getPhase = _ref.getPhase;
    return [{
      eventName: "orientationchange",
      fn: cancel
    }, {
      eventName: "resize",
      fn: cancel
    }, {
      eventName: "contextmenu",
      fn: function fn4(event) {
        event.preventDefault();
      }
    }, {
      eventName: "keydown",
      fn: function fn4(event) {
        if (getPhase().type !== "DRAGGING") {
          cancel();
          return;
        }
        if (event.keyCode === escape) {
          event.preventDefault();
        }
        cancel();
      }
    }, {
      eventName: supportedEventName,
      fn: cancel
    }];
  }
  function getHandleBindings(_ref2) {
    var cancel = _ref2.cancel, completed = _ref2.completed, getPhase = _ref2.getPhase;
    return [{
      eventName: "touchmove",
      options: {
        capture: false
      },
      fn: function fn4(event) {
        var phase = getPhase();
        if (phase.type !== "DRAGGING") {
          cancel();
          return;
        }
        phase.hasMoved = true;
        var _event$touches$ = event.touches[0], clientX = _event$touches$.clientX, clientY = _event$touches$.clientY;
        var point = {
          x: clientX,
          y: clientY
        };
        event.preventDefault();
        phase.actions.move(point);
      }
    }, {
      eventName: "touchend",
      fn: function fn4(event) {
        var phase = getPhase();
        if (phase.type !== "DRAGGING") {
          cancel();
          return;
        }
        event.preventDefault();
        phase.actions.drop({
          shouldBlockNextClick: true
        });
        completed();
      }
    }, {
      eventName: "touchcancel",
      fn: function fn4(event) {
        if (getPhase().type !== "DRAGGING") {
          cancel();
          return;
        }
        event.preventDefault();
        cancel();
      }
    }, {
      eventName: "touchforcechange",
      fn: function fn4(event) {
        var phase = getPhase();
        !(phase.type !== "IDLE") ? true ? invariant3(false) : invariant3(false) : void 0;
        var touch = event.touches[0];
        if (!touch) {
          return;
        }
        var isForcePress = touch.force >= forcePressThreshold;
        if (!isForcePress) {
          return;
        }
        var shouldRespect = phase.actions.shouldRespectForcePress();
        if (phase.type === "PENDING") {
          if (shouldRespect) {
            cancel();
          }
          return;
        }
        if (shouldRespect) {
          if (phase.hasMoved) {
            event.preventDefault();
            return;
          }
          cancel();
          return;
        }
        event.preventDefault();
      }
    }, {
      eventName: supportedEventName,
      fn: cancel
    }];
  }
  function useTouchSensor(api) {
    var phaseRef = (0, import_react25.useRef)(idle$2);
    var unbindEventsRef = (0, import_react25.useRef)(noop2);
    var getPhase = useCallback2(function getPhase2() {
      return phaseRef.current;
    }, []);
    var setPhase = useCallback2(function setPhase2(phase) {
      phaseRef.current = phase;
    }, []);
    var startCaptureBinding = useMemo5(function() {
      return {
        eventName: "touchstart",
        fn: function onTouchStart(event) {
          if (event.defaultPrevented) {
            return;
          }
          var draggableId = api.findClosestDraggableId(event);
          if (!draggableId) {
            return;
          }
          var actions = api.tryGetLock(draggableId, stop, {
            sourceEvent: event
          });
          if (!actions) {
            return;
          }
          var touch = event.touches[0];
          var clientX = touch.clientX, clientY = touch.clientY;
          var point = {
            x: clientX,
            y: clientY
          };
          unbindEventsRef.current();
          startPendingDrag(actions, point);
        }
      };
    }, [api]);
    var listenForCapture = useCallback2(function listenForCapture2() {
      var options = {
        capture: true,
        passive: false
      };
      unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
    }, [startCaptureBinding]);
    var stop = useCallback2(function() {
      var current = phaseRef.current;
      if (current.type === "IDLE") {
        return;
      }
      if (current.type === "PENDING") {
        clearTimeout(current.longPressTimerId);
      }
      setPhase(idle$2);
      unbindEventsRef.current();
      listenForCapture();
    }, [listenForCapture, setPhase]);
    var cancel = useCallback2(function() {
      var phase = phaseRef.current;
      stop();
      if (phase.type === "DRAGGING") {
        phase.actions.cancel({
          shouldBlockNextClick: true
        });
      }
      if (phase.type === "PENDING") {
        phase.actions.abort();
      }
    }, [stop]);
    var bindCapturingEvents = useCallback2(function bindCapturingEvents2() {
      var options = {
        capture: true,
        passive: false
      };
      var args = {
        cancel,
        completed: stop,
        getPhase
      };
      var unbindTarget = bindEvents(window, getHandleBindings(args), options);
      var unbindWindow = bindEvents(window, getWindowBindings(args), options);
      unbindEventsRef.current = function unbindAll() {
        unbindTarget();
        unbindWindow();
      };
    }, [cancel, getPhase, stop]);
    var startDragging = useCallback2(function startDragging2() {
      var phase = getPhase();
      !(phase.type === "PENDING") ? true ? invariant3(false, "Cannot start dragging from phase " + phase.type) : invariant3(false) : void 0;
      var actions = phase.actions.fluidLift(phase.point);
      setPhase({
        type: "DRAGGING",
        actions,
        hasMoved: false
      });
    }, [getPhase, setPhase]);
    var startPendingDrag = useCallback2(function startPendingDrag2(actions, point) {
      !(getPhase().type === "IDLE") ? true ? invariant3(false, "Expected to move from IDLE to PENDING drag") : invariant3(false) : void 0;
      var longPressTimerId = setTimeout(startDragging, timeForLongPress);
      setPhase({
        type: "PENDING",
        point,
        actions,
        longPressTimerId
      });
      bindCapturingEvents();
    }, [bindCapturingEvents, getPhase, setPhase, startDragging]);
    useIsomorphicLayoutEffect3(function mount() {
      listenForCapture();
      return function unmount() {
        unbindEventsRef.current();
        var phase = getPhase();
        if (phase.type === "PENDING") {
          clearTimeout(phase.longPressTimerId);
          setPhase(idle$2);
        }
      };
    }, [getPhase, listenForCapture, setPhase]);
    useIsomorphicLayoutEffect3(function webkitHack() {
      var unbind = bindEvents(window, [{
        eventName: "touchmove",
        fn: function fn4() {
        },
        options: {
          capture: false,
          passive: false
        }
      }]);
      return unbind;
    }, []);
  }
  function useValidateSensorHooks(sensorHooks) {
    useDev(function() {
      var previousRef = usePrevious(sensorHooks);
      useDevSetupWarning(function() {
        !(previousRef.current.length === sensorHooks.length) ? true ? invariant3(false, "Cannot change the amount of sensor hooks after mounting") : invariant3(false) : void 0;
      });
    });
  }
  var interactiveTagNames = {
    input: true,
    button: true,
    textarea: true,
    select: true,
    option: true,
    optgroup: true,
    video: true,
    audio: true
  };
  function isAnInteractiveElement(parent, current) {
    if (current == null) {
      return false;
    }
    var hasAnInteractiveTag = Boolean(interactiveTagNames[current.tagName.toLowerCase()]);
    if (hasAnInteractiveTag) {
      return true;
    }
    var attribute = current.getAttribute("contenteditable");
    if (attribute === "true" || attribute === "") {
      return true;
    }
    if (current === parent) {
      return false;
    }
    return isAnInteractiveElement(parent, current.parentElement);
  }
  function isEventInInteractiveElement(draggable2, event) {
    var target = event.target;
    if (!isHtmlElement(target)) {
      return false;
    }
    return isAnInteractiveElement(draggable2, target);
  }
  var getBorderBoxCenterPosition = function(el) {
    return getRect(el.getBoundingClientRect()).center;
  };
  function isElement3(el) {
    return el instanceof getWindowFromEl(el).Element;
  }
  var supportedMatchesName = function() {
    var base = "matches";
    if (typeof document === "undefined") {
      return base;
    }
    var candidates = [base, "msMatchesSelector", "webkitMatchesSelector"];
    var value = find(candidates, function(name) {
      return name in Element.prototype;
    });
    return value || base;
  }();
  function closestPonyfill(el, selector) {
    if (el == null) {
      return null;
    }
    if (el[supportedMatchesName](selector)) {
      return el;
    }
    return closestPonyfill(el.parentElement, selector);
  }
  function closest$1(el, selector) {
    if (el.closest) {
      return el.closest(selector);
    }
    return closestPonyfill(el, selector);
  }
  function getSelector(contextId) {
    return "[" + dragHandle.contextId + '="' + contextId + '"]';
  }
  function findClosestDragHandleFromEvent(contextId, event) {
    var target = event.target;
    if (!isElement3(target)) {
      true ? warning3("event.target must be a Element") : void 0;
      return null;
    }
    var selector = getSelector(contextId);
    var handle = closest$1(target, selector);
    if (!handle) {
      return null;
    }
    if (!isHtmlElement(handle)) {
      true ? warning3("drag handle must be a HTMLElement") : void 0;
      return null;
    }
    return handle;
  }
  function tryGetClosestDraggableIdFromEvent(contextId, event) {
    var handle = findClosestDragHandleFromEvent(contextId, event);
    if (!handle) {
      return null;
    }
    return handle.getAttribute(dragHandle.draggableId);
  }
  function findDraggable(contextId, draggableId) {
    var selector = "[" + draggable.contextId + '="' + contextId + '"]';
    var possible = toArray(document.querySelectorAll(selector));
    var draggable$1 = find(possible, function(el) {
      return el.getAttribute(draggable.id) === draggableId;
    });
    if (!draggable$1) {
      return null;
    }
    if (!isHtmlElement(draggable$1)) {
      true ? warning3("Draggable element is not a HTMLElement") : void 0;
      return null;
    }
    return draggable$1;
  }
  function preventDefault(event) {
    event.preventDefault();
  }
  function _isActive(_ref) {
    var expected = _ref.expected, phase = _ref.phase, isLockActive = _ref.isLockActive, shouldWarn = _ref.shouldWarn;
    if (!isLockActive()) {
      if (shouldWarn) {
        true ? warning3("\n        Cannot perform action.\n        The sensor no longer has an action lock.\n\n        Tips:\n\n        - Throw away your action handlers when forceStop() is called\n        - Check actions.isActive() if you really need to\n      ") : void 0;
      }
      return false;
    }
    if (expected !== phase) {
      if (shouldWarn) {
        true ? warning3("\n        Cannot perform action.\n        The actions you used belong to an outdated phase\n\n        Current phase: " + expected + "\n        You called an action from outdated phase: " + phase + "\n\n        Tips:\n\n        - Do not use preDragActions actions after calling preDragActions.lift()\n      ") : void 0;
      }
      return false;
    }
    return true;
  }
  function canStart(_ref2) {
    var lockAPI = _ref2.lockAPI, store = _ref2.store, registry = _ref2.registry, draggableId = _ref2.draggableId;
    if (lockAPI.isClaimed()) {
      return false;
    }
    var entry = registry.draggable.findById(draggableId);
    if (!entry) {
      true ? warning3("Unable to find draggable with id: " + draggableId) : void 0;
      return false;
    }
    if (!entry.options.isEnabled) {
      return false;
    }
    if (!canStartDrag(store.getState(), draggableId)) {
      return false;
    }
    return true;
  }
  function tryStart(_ref3) {
    var lockAPI = _ref3.lockAPI, contextId = _ref3.contextId, store = _ref3.store, registry = _ref3.registry, draggableId = _ref3.draggableId, forceSensorStop = _ref3.forceSensorStop, sourceEvent = _ref3.sourceEvent;
    var shouldStart = canStart({
      lockAPI,
      store,
      registry,
      draggableId
    });
    if (!shouldStart) {
      return null;
    }
    var entry = registry.draggable.getById(draggableId);
    var el = findDraggable(contextId, entry.descriptor.id);
    if (!el) {
      true ? warning3("Unable to find draggable element with id: " + draggableId) : void 0;
      return null;
    }
    if (sourceEvent && !entry.options.canDragInteractiveElements && isEventInInteractiveElement(el, sourceEvent)) {
      return null;
    }
    var lock = lockAPI.claim(forceSensorStop || noop2);
    var phase = "PRE_DRAG";
    function getShouldRespectForcePress() {
      return entry.options.shouldRespectForcePress;
    }
    function isLockActive() {
      return lockAPI.isActive(lock);
    }
    function tryDispatch(expected, getAction) {
      if (_isActive({
        expected,
        phase,
        isLockActive,
        shouldWarn: true
      })) {
        store.dispatch(getAction());
      }
    }
    var tryDispatchWhenDragging = tryDispatch.bind(null, "DRAGGING");
    function lift$12(args) {
      function completed() {
        lockAPI.release();
        phase = "COMPLETED";
      }
      if (phase !== "PRE_DRAG") {
        completed();
        !(phase === "PRE_DRAG") ? true ? invariant3(false, "Cannot lift in phase " + phase) : invariant3(false) : void 0;
      }
      store.dispatch(lift(args.liftActionArgs));
      phase = "DRAGGING";
      function finish3(reason, options) {
        if (options === void 0) {
          options = {
            shouldBlockNextClick: false
          };
        }
        args.cleanup();
        if (options.shouldBlockNextClick) {
          var unbind = bindEvents(window, [{
            eventName: "click",
            fn: preventDefault,
            options: {
              once: true,
              passive: false,
              capture: true
            }
          }]);
          setTimeout(unbind);
        }
        completed();
        store.dispatch(drop({
          reason
        }));
      }
      return _extends({
        isActive: function isActive() {
          return _isActive({
            expected: "DRAGGING",
            phase,
            isLockActive,
            shouldWarn: false
          });
        },
        shouldRespectForcePress: getShouldRespectForcePress,
        drop: function drop5(options) {
          return finish3("DROP", options);
        },
        cancel: function cancel(options) {
          return finish3("CANCEL", options);
        }
      }, args.actions);
    }
    function fluidLift(clientSelection) {
      var move$1 = raf_schd_esm_default(function(client) {
        tryDispatchWhenDragging(function() {
          return move({
            client
          });
        });
      });
      var api = lift$12({
        liftActionArgs: {
          id: draggableId,
          clientSelection,
          movementMode: "FLUID"
        },
        cleanup: function cleanup() {
          return move$1.cancel();
        },
        actions: {
          move: move$1
        }
      });
      return _extends({}, api, {
        move: move$1
      });
    }
    function snapLift() {
      var actions = {
        moveUp: function moveUp$1() {
          return tryDispatchWhenDragging(moveUp);
        },
        moveRight: function moveRight$1() {
          return tryDispatchWhenDragging(moveRight);
        },
        moveDown: function moveDown$1() {
          return tryDispatchWhenDragging(moveDown);
        },
        moveLeft: function moveLeft$1() {
          return tryDispatchWhenDragging(moveLeft);
        }
      };
      return lift$12({
        liftActionArgs: {
          id: draggableId,
          clientSelection: getBorderBoxCenterPosition(el),
          movementMode: "SNAP"
        },
        cleanup: noop2,
        actions
      });
    }
    function abortPreDrag() {
      var shouldRelease = _isActive({
        expected: "PRE_DRAG",
        phase,
        isLockActive,
        shouldWarn: true
      });
      if (shouldRelease) {
        lockAPI.release();
      }
    }
    var preDrag = {
      isActive: function isActive() {
        return _isActive({
          expected: "PRE_DRAG",
          phase,
          isLockActive,
          shouldWarn: false
        });
      },
      shouldRespectForcePress: getShouldRespectForcePress,
      fluidLift,
      snapLift,
      abort: abortPreDrag
    };
    return preDrag;
  }
  var defaultSensors = [useMouseSensor, useKeyboardSensor, useTouchSensor];
  function useSensorMarshal(_ref4) {
    var contextId = _ref4.contextId, store = _ref4.store, registry = _ref4.registry, customSensors = _ref4.customSensors, enableDefaultSensors = _ref4.enableDefaultSensors;
    var useSensors = [].concat(enableDefaultSensors ? defaultSensors : [], customSensors || []);
    var lockAPI = (0, import_react25.useState)(function() {
      return create2();
    })[0];
    var tryAbandonLock = useCallback2(function tryAbandonLock2(previous, current) {
      if (previous.isDragging && !current.isDragging) {
        lockAPI.tryAbandon();
      }
    }, [lockAPI]);
    useIsomorphicLayoutEffect3(function listenToStore() {
      var previous = store.getState();
      var unsubscribe = store.subscribe(function() {
        var current = store.getState();
        tryAbandonLock(previous, current);
        previous = current;
      });
      return unsubscribe;
    }, [lockAPI, store, tryAbandonLock]);
    useIsomorphicLayoutEffect3(function() {
      return lockAPI.tryAbandon;
    }, [lockAPI.tryAbandon]);
    var canGetLock = useCallback2(function(draggableId) {
      return canStart({
        lockAPI,
        registry,
        store,
        draggableId
      });
    }, [lockAPI, registry, store]);
    var tryGetLock = useCallback2(function(draggableId, forceStop, options) {
      return tryStart({
        lockAPI,
        registry,
        contextId,
        store,
        draggableId,
        forceSensorStop: forceStop,
        sourceEvent: options && options.sourceEvent ? options.sourceEvent : null
      });
    }, [contextId, lockAPI, registry, store]);
    var findClosestDraggableId = useCallback2(function(event) {
      return tryGetClosestDraggableIdFromEvent(contextId, event);
    }, [contextId]);
    var findOptionsForDraggable = useCallback2(function(id) {
      var entry = registry.draggable.findById(id);
      return entry ? entry.options : null;
    }, [registry.draggable]);
    var tryReleaseLock = useCallback2(function tryReleaseLock2() {
      if (!lockAPI.isClaimed()) {
        return;
      }
      lockAPI.tryAbandon();
      if (store.getState().phase !== "IDLE") {
        store.dispatch(flush());
      }
    }, [lockAPI, store]);
    var isLockClaimed = useCallback2(lockAPI.isClaimed, [lockAPI]);
    var api = useMemo5(function() {
      return {
        canGetLock,
        tryGetLock,
        findClosestDraggableId,
        findOptionsForDraggable,
        tryReleaseLock,
        isLockClaimed
      };
    }, [canGetLock, tryGetLock, findClosestDraggableId, findOptionsForDraggable, tryReleaseLock, isLockClaimed]);
    useValidateSensorHooks(useSensors);
    for (var i3 = 0; i3 < useSensors.length; i3++) {
      useSensors[i3](api);
    }
  }
  var createResponders = function createResponders2(props) {
    return {
      onBeforeCapture: props.onBeforeCapture,
      onBeforeDragStart: props.onBeforeDragStart,
      onDragStart: props.onDragStart,
      onDragEnd: props.onDragEnd,
      onDragUpdate: props.onDragUpdate
    };
  };
  function getStore(lazyRef) {
    !lazyRef.current ? true ? invariant3(false, "Could not find store from lazy ref") : invariant3(false) : void 0;
    return lazyRef.current;
  }
  function App(props) {
    var contextId = props.contextId, setCallbacks = props.setCallbacks, sensors = props.sensors, nonce = props.nonce, dragHandleUsageInstructions2 = props.dragHandleUsageInstructions;
    var lazyStoreRef = (0, import_react25.useRef)(null);
    useStartupValidation();
    var lastPropsRef = usePrevious(props);
    var getResponders = useCallback2(function() {
      return createResponders(lastPropsRef.current);
    }, [lastPropsRef]);
    var announce = useAnnouncer(contextId);
    var dragHandleUsageInstructionsId = useHiddenTextElement({
      contextId,
      text: dragHandleUsageInstructions2
    });
    var styleMarshal = useStyleMarshal(contextId, nonce);
    var lazyDispatch = useCallback2(function(action) {
      getStore(lazyStoreRef).dispatch(action);
    }, []);
    var marshalCallbacks = useMemo5(function() {
      return bindActionCreators({
        publishWhileDragging,
        updateDroppableScroll,
        updateDroppableIsEnabled,
        updateDroppableIsCombineEnabled,
        collectionStarting
      }, lazyDispatch);
    }, [lazyDispatch]);
    var registry = useRegistry();
    var dimensionMarshal = useMemo5(function() {
      return createDimensionMarshal(registry, marshalCallbacks);
    }, [registry, marshalCallbacks]);
    var autoScroller = useMemo5(function() {
      return createAutoScroller(_extends({
        scrollWindow,
        scrollDroppable: dimensionMarshal.scrollDroppable
      }, bindActionCreators({
        move
      }, lazyDispatch)));
    }, [dimensionMarshal.scrollDroppable, lazyDispatch]);
    var focusMarshal = useFocusMarshal(contextId);
    var store = useMemo5(function() {
      return createStore2({
        announce,
        autoScroller,
        dimensionMarshal,
        focusMarshal,
        getResponders,
        styleMarshal
      });
    }, [announce, autoScroller, dimensionMarshal, focusMarshal, getResponders, styleMarshal]);
    if (true) {
      if (lazyStoreRef.current && lazyStoreRef.current !== store) {
        true ? warning3("unexpected store change") : void 0;
      }
    }
    lazyStoreRef.current = store;
    var tryResetStore = useCallback2(function() {
      var current = getStore(lazyStoreRef);
      var state = current.getState();
      if (state.phase !== "IDLE") {
        current.dispatch(flush());
      }
    }, []);
    var isDragging = useCallback2(function() {
      var state = getStore(lazyStoreRef).getState();
      return state.isDragging || state.phase === "DROP_ANIMATING";
    }, []);
    var appCallbacks = useMemo5(function() {
      return {
        isDragging,
        tryAbort: tryResetStore
      };
    }, [isDragging, tryResetStore]);
    setCallbacks(appCallbacks);
    var getCanLift = useCallback2(function(id) {
      return canStartDrag(getStore(lazyStoreRef).getState(), id);
    }, []);
    var getIsMovementAllowed = useCallback2(function() {
      return isMovementAllowed(getStore(lazyStoreRef).getState());
    }, []);
    var appContext = useMemo5(function() {
      return {
        marshal: dimensionMarshal,
        focus: focusMarshal,
        contextId,
        canLift: getCanLift,
        isMovementAllowed: getIsMovementAllowed,
        dragHandleUsageInstructionsId,
        registry
      };
    }, [contextId, dimensionMarshal, dragHandleUsageInstructionsId, focusMarshal, getCanLift, getIsMovementAllowed, registry]);
    useSensorMarshal({
      contextId,
      store,
      registry,
      customSensors: sensors,
      enableDefaultSensors: props.enableDefaultSensors !== false
    });
    (0, import_react25.useEffect)(function() {
      return tryResetStore;
    }, [tryResetStore]);
    return import_react25.default.createElement(AppContext.Provider, {
      value: appContext
    }, import_react25.default.createElement(Provider_default, {
      context: StoreContext,
      store
    }, props.children));
  }
  var count$1 = 0;
  function useInstanceCount() {
    return useMemo5(function() {
      return "" + count$1++;
    }, []);
  }
  function DragDropContext(props) {
    var contextId = useInstanceCount();
    var dragHandleUsageInstructions2 = props.dragHandleUsageInstructions || preset.dragHandleUsageInstructions;
    return import_react25.default.createElement(ErrorBoundary2, null, function(setCallbacks) {
      return import_react25.default.createElement(App, {
        nonce: props.nonce,
        contextId,
        setCallbacks,
        dragHandleUsageInstructions: dragHandleUsageInstructions2,
        enableDefaultSensors: props.enableDefaultSensors,
        sensors: props.sensors,
        onBeforeCapture: props.onBeforeCapture,
        onBeforeDragStart: props.onBeforeDragStart,
        onDragStart: props.onDragStart,
        onDragUpdate: props.onDragUpdate,
        onDragEnd: props.onDragEnd
      }, props.children);
    });
  }
  var isEqual$1 = function isEqual4(base) {
    return function(value) {
      return base === value;
    };
  };
  var isScroll = isEqual$1("scroll");
  var isAuto = isEqual$1("auto");
  var isVisible$1 = isEqual$1("visible");
  var isEither = function isEither2(overflow, fn4) {
    return fn4(overflow.overflowX) || fn4(overflow.overflowY);
  };
  var isBoth = function isBoth2(overflow, fn4) {
    return fn4(overflow.overflowX) && fn4(overflow.overflowY);
  };
  var isElementScrollable = function isElementScrollable2(el) {
    var style2 = window.getComputedStyle(el);
    var overflow = {
      overflowX: style2.overflowX,
      overflowY: style2.overflowY
    };
    return isEither(overflow, isScroll) || isEither(overflow, isAuto);
  };
  var isBodyScrollable = function isBodyScrollable2() {
    if (false) {
      return false;
    }
    var body = getBodyElement();
    var html = document.documentElement;
    !html ? true ? invariant3(false) : invariant3(false) : void 0;
    if (!isElementScrollable(body)) {
      return false;
    }
    var htmlStyle = window.getComputedStyle(html);
    var htmlOverflow = {
      overflowX: htmlStyle.overflowX,
      overflowY: htmlStyle.overflowY
    };
    if (isBoth(htmlOverflow, isVisible$1)) {
      return false;
    }
    true ? warning3("\n    We have detected that your <body> element might be a scroll container.\n    We have found no reliable way of detecting whether the <body> element is a scroll container.\n    Under most circumstances a <body> scroll bar will be on the <html> element (document.documentElement)\n\n    Because we cannot determine if the <body> is a scroll container, and generally it is not one,\n    we will be treating the <body> as *not* a scroll container\n\n    More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/how-we-detect-scroll-containers.md\n  ") : void 0;
    return false;
  };
  var getClosestScrollable = function getClosestScrollable2(el) {
    if (el == null) {
      return null;
    }
    if (el === document.body) {
      return isBodyScrollable() ? el : null;
    }
    if (el === document.documentElement) {
      return null;
    }
    if (!isElementScrollable(el)) {
      return getClosestScrollable2(el.parentElement);
    }
    return el;
  };
  var checkForNestedScrollContainers = function(scrollable) {
    if (!scrollable) {
      return;
    }
    var anotherScrollParent = getClosestScrollable(scrollable.parentElement);
    if (!anotherScrollParent) {
      return;
    }
    true ? warning3("\n    Droppable: unsupported nested scroll container detected.\n    A Droppable can only have one scroll parent (which can be itself)\n    Nested scroll containers are currently not supported.\n\n    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131\n  ") : void 0;
  };
  var getScroll$1 = function(el) {
    return {
      x: el.scrollLeft,
      y: el.scrollTop
    };
  };
  var getIsFixed = function getIsFixed2(el) {
    if (!el) {
      return false;
    }
    var style2 = window.getComputedStyle(el);
    if (style2.position === "fixed") {
      return true;
    }
    return getIsFixed2(el.parentElement);
  };
  var getEnv = function(start4) {
    var closestScrollable = getClosestScrollable(start4);
    var isFixedOnPage = getIsFixed(start4);
    return {
      closestScrollable,
      isFixedOnPage
    };
  };
  var getDroppableDimension = function(_ref) {
    var descriptor = _ref.descriptor, isEnabled = _ref.isEnabled, isCombineEnabled = _ref.isCombineEnabled, isFixedOnPage = _ref.isFixedOnPage, direction = _ref.direction, client = _ref.client, page = _ref.page, closest3 = _ref.closest;
    var frame = function() {
      if (!closest3) {
        return null;
      }
      var scrollSize = closest3.scrollSize, frameClient = closest3.client;
      var maxScroll = getMaxScroll({
        scrollHeight: scrollSize.scrollHeight,
        scrollWidth: scrollSize.scrollWidth,
        height: frameClient.paddingBox.height,
        width: frameClient.paddingBox.width
      });
      return {
        pageMarginBox: closest3.page.marginBox,
        frameClient,
        scrollSize,
        shouldClipSubject: closest3.shouldClipSubject,
        scroll: {
          initial: closest3.scroll,
          current: closest3.scroll,
          max: maxScroll,
          diff: {
            value: origin,
            displacement: origin
          }
        }
      };
    }();
    var axis = direction === "vertical" ? vertical : horizontal;
    var subject = getSubject({
      page,
      withPlaceholder: null,
      axis,
      frame
    });
    var dimension = {
      descriptor,
      isCombineEnabled,
      isFixedOnPage,
      axis,
      isEnabled,
      client,
      page,
      frame,
      subject
    };
    return dimension;
  };
  var getClient = function getClient2(targetRef, closestScrollable) {
    var base = getBox(targetRef);
    if (!closestScrollable) {
      return base;
    }
    if (targetRef !== closestScrollable) {
      return base;
    }
    var top2 = base.paddingBox.top - closestScrollable.scrollTop;
    var left2 = base.paddingBox.left - closestScrollable.scrollLeft;
    var bottom2 = top2 + closestScrollable.scrollHeight;
    var right2 = left2 + closestScrollable.scrollWidth;
    var paddingBox = {
      top: top2,
      right: right2,
      bottom: bottom2,
      left: left2
    };
    var borderBox = expand(paddingBox, base.border);
    var client = createBox({
      borderBox,
      margin: base.margin,
      border: base.border,
      padding: base.padding
    });
    return client;
  };
  var getDimension = function(_ref) {
    var ref2 = _ref.ref, descriptor = _ref.descriptor, env = _ref.env, windowScroll = _ref.windowScroll, direction = _ref.direction, isDropDisabled = _ref.isDropDisabled, isCombineEnabled = _ref.isCombineEnabled, shouldClipSubject = _ref.shouldClipSubject;
    var closestScrollable = env.closestScrollable;
    var client = getClient(ref2, closestScrollable);
    var page = withScroll(client, windowScroll);
    var closest3 = function() {
      if (!closestScrollable) {
        return null;
      }
      var frameClient = getBox(closestScrollable);
      var scrollSize = {
        scrollHeight: closestScrollable.scrollHeight,
        scrollWidth: closestScrollable.scrollWidth
      };
      return {
        client: frameClient,
        page: withScroll(frameClient, windowScroll),
        scroll: getScroll$1(closestScrollable),
        scrollSize,
        shouldClipSubject
      };
    }();
    var dimension = getDroppableDimension({
      descriptor,
      isEnabled: !isDropDisabled,
      isCombineEnabled,
      isFixedOnPage: env.isFixedOnPage,
      direction,
      client,
      page,
      closest: closest3
    });
    return dimension;
  };
  var immediate = {
    passive: false
  };
  var delayed = {
    passive: true
  };
  var getListenerOptions = function(options) {
    return options.shouldPublishImmediately ? immediate : delayed;
  };
  function useRequiredContext(Context2) {
    var result = (0, import_react25.useContext)(Context2);
    !result ? true ? invariant3(false, "Could not find required context") : invariant3(false) : void 0;
    return result;
  }
  var getClosestScrollableFromDrag = function getClosestScrollableFromDrag2(dragging) {
    return dragging && dragging.env.closestScrollable || null;
  };
  function useDroppablePublisher(args) {
    var whileDraggingRef = (0, import_react25.useRef)(null);
    var appContext = useRequiredContext(AppContext);
    var uniqueId = useUniqueId("droppable");
    var registry = appContext.registry, marshal = appContext.marshal;
    var previousRef = usePrevious(args);
    var descriptor = useMemo5(function() {
      return {
        id: args.droppableId,
        type: args.type,
        mode: args.mode
      };
    }, [args.droppableId, args.mode, args.type]);
    var publishedDescriptorRef = (0, import_react25.useRef)(descriptor);
    var memoizedUpdateScroll = useMemo5(function() {
      return memoize_one_esm_default(function(x3, y2) {
        !whileDraggingRef.current ? true ? invariant3(false, "Can only update scroll when dragging") : invariant3(false) : void 0;
        var scroll4 = {
          x: x3,
          y: y2
        };
        marshal.updateDroppableScroll(descriptor.id, scroll4);
      });
    }, [descriptor.id, marshal]);
    var getClosestScroll = useCallback2(function() {
      var dragging = whileDraggingRef.current;
      if (!dragging || !dragging.env.closestScrollable) {
        return origin;
      }
      return getScroll$1(dragging.env.closestScrollable);
    }, []);
    var updateScroll = useCallback2(function() {
      var scroll4 = getClosestScroll();
      memoizedUpdateScroll(scroll4.x, scroll4.y);
    }, [getClosestScroll, memoizedUpdateScroll]);
    var scheduleScrollUpdate = useMemo5(function() {
      return raf_schd_esm_default(updateScroll);
    }, [updateScroll]);
    var onClosestScroll = useCallback2(function() {
      var dragging = whileDraggingRef.current;
      var closest3 = getClosestScrollableFromDrag(dragging);
      !(dragging && closest3) ? true ? invariant3(false, "Could not find scroll options while scrolling") : invariant3(false) : void 0;
      var options = dragging.scrollOptions;
      if (options.shouldPublishImmediately) {
        updateScroll();
        return;
      }
      scheduleScrollUpdate();
    }, [scheduleScrollUpdate, updateScroll]);
    var getDimensionAndWatchScroll = useCallback2(function(windowScroll, options) {
      !!whileDraggingRef.current ? true ? invariant3(false, "Cannot collect a droppable while a drag is occurring") : invariant3(false) : void 0;
      var previous = previousRef.current;
      var ref2 = previous.getDroppableRef();
      !ref2 ? true ? invariant3(false, "Cannot collect without a droppable ref") : invariant3(false) : void 0;
      var env = getEnv(ref2);
      var dragging = {
        ref: ref2,
        descriptor,
        env,
        scrollOptions: options
      };
      whileDraggingRef.current = dragging;
      var dimension = getDimension({
        ref: ref2,
        descriptor,
        env,
        windowScroll,
        direction: previous.direction,
        isDropDisabled: previous.isDropDisabled,
        isCombineEnabled: previous.isCombineEnabled,
        shouldClipSubject: !previous.ignoreContainerClipping
      });
      var scrollable = env.closestScrollable;
      if (scrollable) {
        scrollable.setAttribute(scrollContainer.contextId, appContext.contextId);
        scrollable.addEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
        if (true) {
          checkForNestedScrollContainers(scrollable);
        }
      }
      return dimension;
    }, [appContext.contextId, descriptor, onClosestScroll, previousRef]);
    var getScrollWhileDragging = useCallback2(function() {
      var dragging = whileDraggingRef.current;
      var closest3 = getClosestScrollableFromDrag(dragging);
      !(dragging && closest3) ? true ? invariant3(false, "Can only recollect Droppable client for Droppables that have a scroll container") : invariant3(false) : void 0;
      return getScroll$1(closest3);
    }, []);
    var dragStopped = useCallback2(function() {
      var dragging = whileDraggingRef.current;
      !dragging ? true ? invariant3(false, "Cannot stop drag when no active drag") : invariant3(false) : void 0;
      var closest3 = getClosestScrollableFromDrag(dragging);
      whileDraggingRef.current = null;
      if (!closest3) {
        return;
      }
      scheduleScrollUpdate.cancel();
      closest3.removeAttribute(scrollContainer.contextId);
      closest3.removeEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
    }, [onClosestScroll, scheduleScrollUpdate]);
    var scroll3 = useCallback2(function(change) {
      var dragging = whileDraggingRef.current;
      !dragging ? true ? invariant3(false, "Cannot scroll when there is no drag") : invariant3(false) : void 0;
      var closest3 = getClosestScrollableFromDrag(dragging);
      !closest3 ? true ? invariant3(false, "Cannot scroll a droppable with no closest scrollable") : invariant3(false) : void 0;
      closest3.scrollTop += change.y;
      closest3.scrollLeft += change.x;
    }, []);
    var callbacks = useMemo5(function() {
      return {
        getDimensionAndWatchScroll,
        getScrollWhileDragging,
        dragStopped,
        scroll: scroll3
      };
    }, [dragStopped, getDimensionAndWatchScroll, getScrollWhileDragging, scroll3]);
    var entry = useMemo5(function() {
      return {
        uniqueId,
        descriptor,
        callbacks
      };
    }, [callbacks, descriptor, uniqueId]);
    useIsomorphicLayoutEffect3(function() {
      publishedDescriptorRef.current = entry.descriptor;
      registry.droppable.register(entry);
      return function() {
        if (whileDraggingRef.current) {
          true ? warning3("Unsupported: changing the droppableId or type of a Droppable during a drag") : void 0;
          dragStopped();
        }
        registry.droppable.unregister(entry);
      };
    }, [callbacks, descriptor, dragStopped, entry, marshal, registry.droppable]);
    useIsomorphicLayoutEffect3(function() {
      if (!whileDraggingRef.current) {
        return;
      }
      marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id, !args.isDropDisabled);
    }, [args.isDropDisabled, marshal]);
    useIsomorphicLayoutEffect3(function() {
      if (!whileDraggingRef.current) {
        return;
      }
      marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id, args.isCombineEnabled);
    }, [args.isCombineEnabled, marshal]);
  }
  function noop$2() {
  }
  var empty = {
    width: 0,
    height: 0,
    margin: noSpacing2
  };
  var getSize = function getSize2(_ref) {
    var isAnimatingOpenOnMount = _ref.isAnimatingOpenOnMount, placeholder2 = _ref.placeholder, animate = _ref.animate;
    if (isAnimatingOpenOnMount) {
      return empty;
    }
    if (animate === "close") {
      return empty;
    }
    return {
      height: placeholder2.client.borderBox.height,
      width: placeholder2.client.borderBox.width,
      margin: placeholder2.client.margin
    };
  };
  var getStyle = function getStyle2(_ref2) {
    var isAnimatingOpenOnMount = _ref2.isAnimatingOpenOnMount, placeholder2 = _ref2.placeholder, animate = _ref2.animate;
    var size = getSize({
      isAnimatingOpenOnMount,
      placeholder: placeholder2,
      animate
    });
    return {
      display: placeholder2.display,
      boxSizing: "border-box",
      width: size.width,
      height: size.height,
      marginTop: size.margin.top,
      marginRight: size.margin.right,
      marginBottom: size.margin.bottom,
      marginLeft: size.margin.left,
      flexShrink: "0",
      flexGrow: "0",
      pointerEvents: "none",
      transition: animate !== "none" ? transitions.placeholder : null
    };
  };
  function Placeholder(props) {
    var animateOpenTimerRef = (0, import_react25.useRef)(null);
    var tryClearAnimateOpenTimer = useCallback2(function() {
      if (!animateOpenTimerRef.current) {
        return;
      }
      clearTimeout(animateOpenTimerRef.current);
      animateOpenTimerRef.current = null;
    }, []);
    var animate = props.animate, onTransitionEnd = props.onTransitionEnd, onClose = props.onClose, contextId = props.contextId;
    var _useState = (0, import_react25.useState)(props.animate === "open"), isAnimatingOpenOnMount = _useState[0], setIsAnimatingOpenOnMount = _useState[1];
    (0, import_react25.useEffect)(function() {
      if (!isAnimatingOpenOnMount) {
        return noop$2;
      }
      if (animate !== "open") {
        tryClearAnimateOpenTimer();
        setIsAnimatingOpenOnMount(false);
        return noop$2;
      }
      if (animateOpenTimerRef.current) {
        return noop$2;
      }
      animateOpenTimerRef.current = setTimeout(function() {
        animateOpenTimerRef.current = null;
        setIsAnimatingOpenOnMount(false);
      });
      return tryClearAnimateOpenTimer;
    }, [animate, isAnimatingOpenOnMount, tryClearAnimateOpenTimer]);
    var onSizeChangeEnd = useCallback2(function(event) {
      if (event.propertyName !== "height") {
        return;
      }
      onTransitionEnd();
      if (animate === "close") {
        onClose();
      }
    }, [animate, onClose, onTransitionEnd]);
    var style2 = getStyle({
      isAnimatingOpenOnMount,
      animate: props.animate,
      placeholder: props.placeholder
    });
    return import_react25.default.createElement(props.placeholder.tagName, {
      style: style2,
      "data-rbd-placeholder-context-id": contextId,
      onTransitionEnd: onSizeChangeEnd,
      ref: props.innerRef
    });
  }
  var Placeholder$1 = import_react25.default.memo(Placeholder);
  var DroppableContext = import_react25.default.createContext(null);
  function checkIsValidInnerRef(el) {
    !(el && isHtmlElement(el)) ? true ? invariant3(false, "\n    provided.innerRef has not been provided with a HTMLElement.\n\n    You can find a guide on using the innerRef callback functions at:\n    https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/using-inner-ref.md\n  ") : invariant3(false) : void 0;
  }
  function isBoolean(value) {
    return typeof value === "boolean";
  }
  function runChecks(args, checks) {
    checks.forEach(function(check) {
      return check(args);
    });
  }
  var shared = [function required(_ref) {
    var props = _ref.props;
    !props.droppableId ? true ? invariant3(false, "A Droppable requires a droppableId prop") : invariant3(false) : void 0;
    !(typeof props.droppableId === "string") ? true ? invariant3(false, "A Droppable requires a [string] droppableId. Provided: [" + typeof props.droppableId + "]") : invariant3(false) : void 0;
  }, function _boolean(_ref2) {
    var props = _ref2.props;
    !isBoolean(props.isDropDisabled) ? true ? invariant3(false, "isDropDisabled must be a boolean") : invariant3(false) : void 0;
    !isBoolean(props.isCombineEnabled) ? true ? invariant3(false, "isCombineEnabled must be a boolean") : invariant3(false) : void 0;
    !isBoolean(props.ignoreContainerClipping) ? true ? invariant3(false, "ignoreContainerClipping must be a boolean") : invariant3(false) : void 0;
  }, function ref(_ref3) {
    var getDroppableRef = _ref3.getDroppableRef;
    checkIsValidInnerRef(getDroppableRef());
  }];
  var standard = [function placeholder(_ref4) {
    var props = _ref4.props, getPlaceholderRef = _ref4.getPlaceholderRef;
    if (!props.placeholder) {
      return;
    }
    var ref2 = getPlaceholderRef();
    if (ref2) {
      return;
    }
    true ? warning3('\n      Droppable setup issue [droppableId: "' + props.droppableId + '"]:\n      DroppableProvided > placeholder could not be found.\n\n      Please be sure to add the {provided.placeholder} React Node as a child of your Droppable.\n      More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n    ') : void 0;
  }];
  var virtual = [function hasClone(_ref5) {
    var props = _ref5.props;
    !props.renderClone ? true ? invariant3(false, "Must provide a clone render function (renderClone) for virtual lists") : invariant3(false) : void 0;
  }, function hasNoPlaceholder(_ref6) {
    var getPlaceholderRef = _ref6.getPlaceholderRef;
    !!getPlaceholderRef() ? true ? invariant3(false, "Expected virtual list to not have a placeholder") : invariant3(false) : void 0;
  }];
  function useValidation(args) {
    useDevSetupWarning(function() {
      runChecks(args, shared);
      if (args.props.mode === "standard") {
        runChecks(args, standard);
      }
      if (args.props.mode === "virtual") {
        runChecks(args, virtual);
      }
    });
  }
  var AnimateInOut = function(_React$PureComponent) {
    _inheritsLoose(AnimateInOut2, _React$PureComponent);
    function AnimateInOut2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
      _this.state = {
        isVisible: Boolean(_this.props.on),
        data: _this.props.on,
        animate: _this.props.shouldAnimate && _this.props.on ? "open" : "none"
      };
      _this.onClose = function() {
        if (_this.state.animate !== "close") {
          return;
        }
        _this.setState({
          isVisible: false
        });
      };
      return _this;
    }
    AnimateInOut2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (!props.shouldAnimate) {
        return {
          isVisible: Boolean(props.on),
          data: props.on,
          animate: "none"
        };
      }
      if (props.on) {
        return {
          isVisible: true,
          data: props.on,
          animate: "open"
        };
      }
      if (state.isVisible) {
        return {
          isVisible: true,
          data: state.data,
          animate: "close"
        };
      }
      return {
        isVisible: false,
        animate: "close",
        data: null
      };
    };
    var _proto = AnimateInOut2.prototype;
    _proto.render = function render2() {
      if (!this.state.isVisible) {
        return null;
      }
      var provided = {
        onClose: this.onClose,
        data: this.state.data,
        animate: this.state.animate
      };
      return this.props.children(provided);
    };
    return AnimateInOut2;
  }(import_react25.default.PureComponent);
  var zIndexOptions = {
    dragging: 5e3,
    dropAnimating: 4500
  };
  var getDraggingTransition = function getDraggingTransition2(shouldAnimateDragMovement, dropping) {
    if (dropping) {
      return transitions.drop(dropping.duration);
    }
    if (shouldAnimateDragMovement) {
      return transitions.snap;
    }
    return transitions.fluid;
  };
  var getDraggingOpacity = function getDraggingOpacity2(isCombining, isDropAnimating) {
    if (!isCombining) {
      return null;
    }
    return isDropAnimating ? combine.opacity.drop : combine.opacity.combining;
  };
  var getShouldDraggingAnimate = function getShouldDraggingAnimate2(dragging) {
    if (dragging.forceShouldAnimate != null) {
      return dragging.forceShouldAnimate;
    }
    return dragging.mode === "SNAP";
  };
  function getDraggingStyle(dragging) {
    var dimension = dragging.dimension;
    var box = dimension.client;
    var offset4 = dragging.offset, combineWith = dragging.combineWith, dropping = dragging.dropping;
    var isCombining = Boolean(combineWith);
    var shouldAnimate = getShouldDraggingAnimate(dragging);
    var isDropAnimating = Boolean(dropping);
    var transform = isDropAnimating ? transforms.drop(offset4, isCombining) : transforms.moveTo(offset4);
    var style2 = {
      position: "fixed",
      top: box.marginBox.top,
      left: box.marginBox.left,
      boxSizing: "border-box",
      width: box.borderBox.width,
      height: box.borderBox.height,
      transition: getDraggingTransition(shouldAnimate, dropping),
      transform,
      opacity: getDraggingOpacity(isCombining, isDropAnimating),
      zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
      pointerEvents: "none"
    };
    return style2;
  }
  function getSecondaryStyle(secondary) {
    return {
      transform: transforms.moveTo(secondary.offset),
      transition: secondary.shouldAnimateDisplacement ? null : "none"
    };
  }
  function getStyle$1(mapped) {
    return mapped.type === "DRAGGING" ? getDraggingStyle(mapped) : getSecondaryStyle(mapped);
  }
  function getDimension$1(descriptor, el, windowScroll) {
    if (windowScroll === void 0) {
      windowScroll = origin;
    }
    var computedStyles = window.getComputedStyle(el);
    var borderBox = el.getBoundingClientRect();
    var client = calculateBox(borderBox, computedStyles);
    var page = withScroll(client, windowScroll);
    var placeholder2 = {
      client,
      tagName: el.tagName.toLowerCase(),
      display: computedStyles.display
    };
    var displaceBy = {
      x: client.marginBox.width,
      y: client.marginBox.height
    };
    var dimension = {
      descriptor,
      placeholder: placeholder2,
      displaceBy,
      client,
      page
    };
    return dimension;
  }
  function useDraggablePublisher(args) {
    var uniqueId = useUniqueId("draggable");
    var descriptor = args.descriptor, registry = args.registry, getDraggableRef = args.getDraggableRef, canDragInteractiveElements = args.canDragInteractiveElements, shouldRespectForcePress = args.shouldRespectForcePress, isEnabled = args.isEnabled;
    var options = useMemo5(function() {
      return {
        canDragInteractiveElements,
        shouldRespectForcePress,
        isEnabled
      };
    }, [canDragInteractiveElements, isEnabled, shouldRespectForcePress]);
    var getDimension2 = useCallback2(function(windowScroll) {
      var el = getDraggableRef();
      !el ? true ? invariant3(false, "Cannot get dimension when no ref is set") : invariant3(false) : void 0;
      return getDimension$1(descriptor, el, windowScroll);
    }, [descriptor, getDraggableRef]);
    var entry = useMemo5(function() {
      return {
        uniqueId,
        descriptor,
        options,
        getDimension: getDimension2
      };
    }, [descriptor, getDimension2, options, uniqueId]);
    var publishedRef = (0, import_react25.useRef)(entry);
    var isFirstPublishRef = (0, import_react25.useRef)(true);
    useIsomorphicLayoutEffect3(function() {
      registry.draggable.register(publishedRef.current);
      return function() {
        return registry.draggable.unregister(publishedRef.current);
      };
    }, [registry.draggable]);
    useIsomorphicLayoutEffect3(function() {
      if (isFirstPublishRef.current) {
        isFirstPublishRef.current = false;
        return;
      }
      var last = publishedRef.current;
      publishedRef.current = entry;
      registry.draggable.update(entry, last);
    }, [entry, registry.draggable]);
  }
  function useValidation$1(props, contextId, getRef) {
    useDevSetupWarning(function() {
      function prefix3(id2) {
        return "Draggable[id: " + id2 + "]: ";
      }
      var id = props.draggableId;
      !id ? true ? invariant3(false, "Draggable requires a draggableId") : invariant3(false) : void 0;
      !(typeof id === "string") ? true ? invariant3(false, "Draggable requires a [string] draggableId.\n      Provided: [type: " + typeof id + "] (value: " + id + ")") : invariant3(false) : void 0;
      !isInteger(props.index) ? true ? invariant3(false, prefix3(id) + " requires an integer index prop") : invariant3(false) : void 0;
      if (props.mapped.type === "DRAGGING") {
        return;
      }
      checkIsValidInnerRef(getRef());
      if (props.isEnabled) {
        !findDragHandle(contextId, id) ? true ? invariant3(false, prefix3(id) + " Unable to find drag handle") : invariant3(false) : void 0;
      }
    });
  }
  function useClonePropValidation(isClone) {
    useDev(function() {
      var initialRef = (0, import_react25.useRef)(isClone);
      useDevSetupWarning(function() {
        !(isClone === initialRef.current) ? true ? invariant3(false, "Draggable isClone prop value changed during component life") : invariant3(false) : void 0;
      }, [isClone]);
    });
  }
  function preventHtml5Dnd(event) {
    event.preventDefault();
  }
  function Draggable(props) {
    var ref2 = (0, import_react25.useRef)(null);
    var setRef = useCallback2(function(el) {
      ref2.current = el;
    }, []);
    var getRef = useCallback2(function() {
      return ref2.current;
    }, []);
    var _useRequiredContext = useRequiredContext(AppContext), contextId = _useRequiredContext.contextId, dragHandleUsageInstructionsId = _useRequiredContext.dragHandleUsageInstructionsId, registry = _useRequiredContext.registry;
    var _useRequiredContext2 = useRequiredContext(DroppableContext), type = _useRequiredContext2.type, droppableId = _useRequiredContext2.droppableId;
    var descriptor = useMemo5(function() {
      return {
        id: props.draggableId,
        index: props.index,
        type,
        droppableId
      };
    }, [props.draggableId, props.index, type, droppableId]);
    var children = props.children, draggableId = props.draggableId, isEnabled = props.isEnabled, shouldRespectForcePress = props.shouldRespectForcePress, canDragInteractiveElements = props.canDragInteractiveElements, isClone = props.isClone, mapped = props.mapped, dropAnimationFinishedAction = props.dropAnimationFinished;
    useValidation$1(props, contextId, getRef);
    useClonePropValidation(isClone);
    if (!isClone) {
      var forPublisher = useMemo5(function() {
        return {
          descriptor,
          registry,
          getDraggableRef: getRef,
          canDragInteractiveElements,
          shouldRespectForcePress,
          isEnabled
        };
      }, [descriptor, registry, getRef, canDragInteractiveElements, shouldRespectForcePress, isEnabled]);
      useDraggablePublisher(forPublisher);
    }
    var dragHandleProps = useMemo5(function() {
      return isEnabled ? {
        tabIndex: 0,
        role: "button",
        "aria-describedby": dragHandleUsageInstructionsId,
        "data-rbd-drag-handle-draggable-id": draggableId,
        "data-rbd-drag-handle-context-id": contextId,
        draggable: false,
        onDragStart: preventHtml5Dnd
      } : null;
    }, [contextId, dragHandleUsageInstructionsId, draggableId, isEnabled]);
    var onMoveEnd = useCallback2(function(event) {
      if (mapped.type !== "DRAGGING") {
        return;
      }
      if (!mapped.dropping) {
        return;
      }
      if (event.propertyName !== "transform") {
        return;
      }
      dropAnimationFinishedAction();
    }, [dropAnimationFinishedAction, mapped]);
    var provided = useMemo5(function() {
      var style2 = getStyle$1(mapped);
      var onTransitionEnd = mapped.type === "DRAGGING" && mapped.dropping ? onMoveEnd : null;
      var result = {
        innerRef: setRef,
        draggableProps: {
          "data-rbd-draggable-context-id": contextId,
          "data-rbd-draggable-id": draggableId,
          style: style2,
          onTransitionEnd
        },
        dragHandleProps
      };
      return result;
    }, [contextId, dragHandleProps, draggableId, mapped, onMoveEnd, setRef]);
    var rubric = useMemo5(function() {
      return {
        draggableId: descriptor.id,
        type: descriptor.type,
        source: {
          index: descriptor.index,
          droppableId: descriptor.droppableId
        }
      };
    }, [descriptor.droppableId, descriptor.id, descriptor.index, descriptor.type]);
    return children(provided, mapped.snapshot, rubric);
  }
  var isStrictEqual = function(a3, b3) {
    return a3 === b3;
  };
  var whatIsDraggedOverFromResult = function(result) {
    var combine2 = result.combine, destination = result.destination;
    if (destination) {
      return destination.droppableId;
    }
    if (combine2) {
      return combine2.droppableId;
    }
    return null;
  };
  var getCombineWithFromResult = function getCombineWithFromResult2(result) {
    return result.combine ? result.combine.draggableId : null;
  };
  var getCombineWithFromImpact = function getCombineWithFromImpact2(impact) {
    return impact.at && impact.at.type === "COMBINE" ? impact.at.combine.draggableId : null;
  };
  function getDraggableSelector() {
    var memoizedOffset = memoize_one_esm_default(function(x3, y2) {
      return {
        x: x3,
        y: y2
      };
    });
    var getMemoizedSnapshot = memoize_one_esm_default(function(mode, isClone, draggingOver, combineWith, dropping) {
      return {
        isDragging: true,
        isClone,
        isDropAnimating: Boolean(dropping),
        dropAnimation: dropping,
        mode,
        draggingOver,
        combineWith,
        combineTargetFor: null
      };
    });
    var getMemoizedProps = memoize_one_esm_default(function(offset4, mode, dimension, isClone, draggingOver, combineWith, forceShouldAnimate) {
      return {
        mapped: {
          type: "DRAGGING",
          dropping: null,
          draggingOver,
          combineWith,
          mode,
          offset: offset4,
          dimension,
          forceShouldAnimate,
          snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, null)
        }
      };
    });
    var selector = function selector2(state, ownProps) {
      if (state.isDragging) {
        if (state.critical.draggable.id !== ownProps.draggableId) {
          return null;
        }
        var offset4 = state.current.client.offset;
        var dimension = state.dimensions.draggables[ownProps.draggableId];
        var draggingOver = whatIsDraggedOver(state.impact);
        var combineWith = getCombineWithFromImpact(state.impact);
        var forceShouldAnimate = state.forceShouldAnimate;
        return getMemoizedProps(memoizedOffset(offset4.x, offset4.y), state.movementMode, dimension, ownProps.isClone, draggingOver, combineWith, forceShouldAnimate);
      }
      if (state.phase === "DROP_ANIMATING") {
        var completed = state.completed;
        if (completed.result.draggableId !== ownProps.draggableId) {
          return null;
        }
        var isClone = ownProps.isClone;
        var _dimension = state.dimensions.draggables[ownProps.draggableId];
        var result = completed.result;
        var mode = result.mode;
        var _draggingOver = whatIsDraggedOverFromResult(result);
        var _combineWith = getCombineWithFromResult(result);
        var duration = state.dropDuration;
        var dropping = {
          duration,
          curve: curves.drop,
          moveTo: state.newHomeClientOffset,
          opacity: _combineWith ? combine.opacity.drop : null,
          scale: _combineWith ? combine.scale.drop : null
        };
        return {
          mapped: {
            type: "DRAGGING",
            offset: state.newHomeClientOffset,
            dimension: _dimension,
            dropping,
            draggingOver: _draggingOver,
            combineWith: _combineWith,
            mode,
            forceShouldAnimate: null,
            snapshot: getMemoizedSnapshot(mode, isClone, _draggingOver, _combineWith, dropping)
          }
        };
      }
      return null;
    };
    return selector;
  }
  function getSecondarySnapshot(combineTargetFor) {
    return {
      isDragging: false,
      isDropAnimating: false,
      isClone: false,
      dropAnimation: null,
      mode: null,
      draggingOver: null,
      combineTargetFor,
      combineWith: null
    };
  }
  var atRest = {
    mapped: {
      type: "SECONDARY",
      offset: origin,
      combineTargetFor: null,
      shouldAnimateDisplacement: true,
      snapshot: getSecondarySnapshot(null)
    }
  };
  function getSecondarySelector() {
    var memoizedOffset = memoize_one_esm_default(function(x3, y2) {
      return {
        x: x3,
        y: y2
      };
    });
    var getMemoizedSnapshot = memoize_one_esm_default(getSecondarySnapshot);
    var getMemoizedProps = memoize_one_esm_default(function(offset4, combineTargetFor, shouldAnimateDisplacement) {
      if (combineTargetFor === void 0) {
        combineTargetFor = null;
      }
      return {
        mapped: {
          type: "SECONDARY",
          offset: offset4,
          combineTargetFor,
          shouldAnimateDisplacement,
          snapshot: getMemoizedSnapshot(combineTargetFor)
        }
      };
    });
    var getFallback = function getFallback2(combineTargetFor) {
      return combineTargetFor ? getMemoizedProps(origin, combineTargetFor, true) : null;
    };
    var getProps = function getProps2(ownId, draggingId, impact, afterCritical) {
      var visualDisplacement = impact.displaced.visible[ownId];
      var isAfterCriticalInVirtualList = Boolean(afterCritical.inVirtualList && afterCritical.effected[ownId]);
      var combine2 = tryGetCombine(impact);
      var combineTargetFor = combine2 && combine2.draggableId === ownId ? draggingId : null;
      if (!visualDisplacement) {
        if (!isAfterCriticalInVirtualList) {
          return getFallback(combineTargetFor);
        }
        if (impact.displaced.invisible[ownId]) {
          return null;
        }
        var change = negate(afterCritical.displacedBy.point);
        var _offset = memoizedOffset(change.x, change.y);
        return getMemoizedProps(_offset, combineTargetFor, true);
      }
      if (isAfterCriticalInVirtualList) {
        return getFallback(combineTargetFor);
      }
      var displaceBy = impact.displacedBy.point;
      var offset4 = memoizedOffset(displaceBy.x, displaceBy.y);
      return getMemoizedProps(offset4, combineTargetFor, visualDisplacement.shouldAnimate);
    };
    var selector = function selector2(state, ownProps) {
      if (state.isDragging) {
        if (state.critical.draggable.id === ownProps.draggableId) {
          return null;
        }
        return getProps(ownProps.draggableId, state.critical.draggable.id, state.impact, state.afterCritical);
      }
      if (state.phase === "DROP_ANIMATING") {
        var completed = state.completed;
        if (completed.result.draggableId === ownProps.draggableId) {
          return null;
        }
        return getProps(ownProps.draggableId, completed.result.draggableId, completed.impact, completed.afterCritical);
      }
      return null;
    };
    return selector;
  }
  var makeMapStateToProps = function makeMapStateToProps2() {
    var draggingSelector = getDraggableSelector();
    var secondarySelector = getSecondarySelector();
    var selector = function selector2(state, ownProps) {
      return draggingSelector(state, ownProps) || secondarySelector(state, ownProps) || atRest;
    };
    return selector;
  };
  var mapDispatchToProps = {
    dropAnimationFinished
  };
  var ConnectedDraggable = connect_default(makeMapStateToProps, mapDispatchToProps, null, {
    context: StoreContext,
    pure: true,
    areStatePropsEqual: isStrictEqual
  })(Draggable);
  function PrivateDraggable(props) {
    var droppableContext = useRequiredContext(DroppableContext);
    var isUsingCloneFor = droppableContext.isUsingCloneFor;
    if (isUsingCloneFor === props.draggableId && !props.isClone) {
      return null;
    }
    return import_react25.default.createElement(ConnectedDraggable, props);
  }
  function PublicDraggable(props) {
    var isEnabled = typeof props.isDragDisabled === "boolean" ? !props.isDragDisabled : true;
    var canDragInteractiveElements = Boolean(props.disableInteractiveElementBlocking);
    var shouldRespectForcePress = Boolean(props.shouldRespectForcePress);
    return import_react25.default.createElement(PrivateDraggable, _extends({}, props, {
      isClone: false,
      isEnabled,
      canDragInteractiveElements,
      shouldRespectForcePress
    }));
  }
  function Droppable(props) {
    var appContext = (0, import_react25.useContext)(AppContext);
    !appContext ? true ? invariant3(false, "Could not find app context") : invariant3(false) : void 0;
    var contextId = appContext.contextId, isMovementAllowed2 = appContext.isMovementAllowed;
    var droppableRef = (0, import_react25.useRef)(null);
    var placeholderRef = (0, import_react25.useRef)(null);
    var children = props.children, droppableId = props.droppableId, type = props.type, mode = props.mode, direction = props.direction, ignoreContainerClipping = props.ignoreContainerClipping, isDropDisabled = props.isDropDisabled, isCombineEnabled = props.isCombineEnabled, snapshot = props.snapshot, useClone = props.useClone, updateViewportMaxScroll3 = props.updateViewportMaxScroll, getContainerForClone = props.getContainerForClone;
    var getDroppableRef = useCallback2(function() {
      return droppableRef.current;
    }, []);
    var setDroppableRef = useCallback2(function(value) {
      droppableRef.current = value;
    }, []);
    var getPlaceholderRef = useCallback2(function() {
      return placeholderRef.current;
    }, []);
    var setPlaceholderRef = useCallback2(function(value) {
      placeholderRef.current = value;
    }, []);
    useValidation({
      props,
      getDroppableRef,
      getPlaceholderRef
    });
    var onPlaceholderTransitionEnd = useCallback2(function() {
      if (isMovementAllowed2()) {
        updateViewportMaxScroll3({
          maxScroll: getMaxWindowScroll()
        });
      }
    }, [isMovementAllowed2, updateViewportMaxScroll3]);
    useDroppablePublisher({
      droppableId,
      type,
      mode,
      direction,
      isDropDisabled,
      isCombineEnabled,
      ignoreContainerClipping,
      getDroppableRef
    });
    var placeholder2 = import_react25.default.createElement(AnimateInOut, {
      on: props.placeholder,
      shouldAnimate: props.shouldAnimatePlaceholder
    }, function(_ref) {
      var onClose = _ref.onClose, data = _ref.data, animate = _ref.animate;
      return import_react25.default.createElement(Placeholder$1, {
        placeholder: data,
        onClose,
        innerRef: setPlaceholderRef,
        animate,
        contextId,
        onTransitionEnd: onPlaceholderTransitionEnd
      });
    });
    var provided = useMemo5(function() {
      return {
        innerRef: setDroppableRef,
        placeholder: placeholder2,
        droppableProps: {
          "data-rbd-droppable-id": droppableId,
          "data-rbd-droppable-context-id": contextId
        }
      };
    }, [contextId, droppableId, placeholder2, setDroppableRef]);
    var isUsingCloneFor = useClone ? useClone.dragging.draggableId : null;
    var droppableContext = useMemo5(function() {
      return {
        droppableId,
        type,
        isUsingCloneFor
      };
    }, [droppableId, isUsingCloneFor, type]);
    function getClone() {
      if (!useClone) {
        return null;
      }
      var dragging = useClone.dragging, render2 = useClone.render;
      var node = import_react25.default.createElement(PrivateDraggable, {
        draggableId: dragging.draggableId,
        index: dragging.source.index,
        isClone: true,
        isEnabled: true,
        shouldRespectForcePress: false,
        canDragInteractiveElements: true
      }, function(draggableProvided, draggableSnapshot) {
        return render2(draggableProvided, draggableSnapshot, dragging);
      });
      return import_react_dom4.default.createPortal(node, getContainerForClone());
    }
    return import_react25.default.createElement(DroppableContext.Provider, {
      value: droppableContext
    }, children(provided, snapshot), getClone());
  }
  var isMatchingType = function isMatchingType2(type, critical) {
    return type === critical.droppable.type;
  };
  var getDraggable = function getDraggable2(critical, dimensions) {
    return dimensions.draggables[critical.draggable.id];
  };
  var makeMapStateToProps$1 = function makeMapStateToProps3() {
    var idleWithAnimation = {
      placeholder: null,
      shouldAnimatePlaceholder: true,
      snapshot: {
        isDraggingOver: false,
        draggingOverWith: null,
        draggingFromThisWith: null,
        isUsingPlaceholder: false
      },
      useClone: null
    };
    var idleWithoutAnimation = _extends({}, idleWithAnimation, {
      shouldAnimatePlaceholder: false
    });
    var getDraggableRubric = memoize_one_esm_default(function(descriptor) {
      return {
        draggableId: descriptor.id,
        type: descriptor.type,
        source: {
          index: descriptor.index,
          droppableId: descriptor.droppableId
        }
      };
    });
    var getMapProps = memoize_one_esm_default(function(id, isEnabled, isDraggingOverForConsumer, isDraggingOverForImpact, dragging, renderClone) {
      var draggableId = dragging.descriptor.id;
      var isHome = dragging.descriptor.droppableId === id;
      if (isHome) {
        var useClone = renderClone ? {
          render: renderClone,
          dragging: getDraggableRubric(dragging.descriptor)
        } : null;
        var _snapshot = {
          isDraggingOver: isDraggingOverForConsumer,
          draggingOverWith: isDraggingOverForConsumer ? draggableId : null,
          draggingFromThisWith: draggableId,
          isUsingPlaceholder: true
        };
        return {
          placeholder: dragging.placeholder,
          shouldAnimatePlaceholder: false,
          snapshot: _snapshot,
          useClone
        };
      }
      if (!isEnabled) {
        return idleWithoutAnimation;
      }
      if (!isDraggingOverForImpact) {
        return idleWithAnimation;
      }
      var snapshot = {
        isDraggingOver: isDraggingOverForConsumer,
        draggingOverWith: draggableId,
        draggingFromThisWith: null,
        isUsingPlaceholder: true
      };
      return {
        placeholder: dragging.placeholder,
        shouldAnimatePlaceholder: true,
        snapshot,
        useClone: null
      };
    });
    var selector = function selector2(state, ownProps) {
      var id = ownProps.droppableId;
      var type = ownProps.type;
      var isEnabled = !ownProps.isDropDisabled;
      var renderClone = ownProps.renderClone;
      if (state.isDragging) {
        var critical = state.critical;
        if (!isMatchingType(type, critical)) {
          return idleWithoutAnimation;
        }
        var dragging = getDraggable(critical, state.dimensions);
        var isDraggingOver = whatIsDraggedOver(state.impact) === id;
        return getMapProps(id, isEnabled, isDraggingOver, isDraggingOver, dragging, renderClone);
      }
      if (state.phase === "DROP_ANIMATING") {
        var completed = state.completed;
        if (!isMatchingType(type, completed.critical)) {
          return idleWithoutAnimation;
        }
        var _dragging = getDraggable(completed.critical, state.dimensions);
        return getMapProps(id, isEnabled, whatIsDraggedOverFromResult(completed.result) === id, whatIsDraggedOver(completed.impact) === id, _dragging, renderClone);
      }
      if (state.phase === "IDLE" && state.completed && !state.shouldFlush) {
        var _completed = state.completed;
        if (!isMatchingType(type, _completed.critical)) {
          return idleWithoutAnimation;
        }
        var wasOver = whatIsDraggedOver(_completed.impact) === id;
        var wasCombining = Boolean(_completed.impact.at && _completed.impact.at.type === "COMBINE");
        var isHome = _completed.critical.droppable.id === id;
        if (wasOver) {
          return wasCombining ? idleWithAnimation : idleWithoutAnimation;
        }
        if (isHome) {
          return idleWithAnimation;
        }
        return idleWithoutAnimation;
      }
      return idleWithoutAnimation;
    };
    return selector;
  };
  var mapDispatchToProps$1 = {
    updateViewportMaxScroll
  };
  function getBody() {
    !document.body ? true ? invariant3(false, "document.body is not ready") : invariant3(false) : void 0;
    return document.body;
  }
  var defaultProps2 = {
    mode: "standard",
    type: "DEFAULT",
    direction: "vertical",
    isDropDisabled: false,
    isCombineEnabled: false,
    ignoreContainerClipping: false,
    renderClone: null,
    getContainerForClone: getBody
  };
  var ConnectedDroppable = connect_default(makeMapStateToProps$1, mapDispatchToProps$1, null, {
    context: StoreContext,
    pure: true,
    areStatePropsEqual: isStrictEqual
  })(Droppable);
  ConnectedDroppable.defaultProps = defaultProps2;

  // assets/svg/drag-handle.svg
  var React17 = __toESM(require_react(), 1);
  var SvgDragHandle = (props) => /* @__PURE__ */ React17.createElement("svg", {
    width: 17,
    height: 17,
    viewBox: "0 0 21 21",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React17.createElement("path", {
    d: "M20.26 9.6625L17.4 6.8325C17.08 6.5125 16.56 6.5125 16.24 6.8325C16.08 6.9825 16 7.1925 16 7.4125C16 7.6325 16.09 7.8325 16.24 7.9925L17.69 9.4325H10.87V2.8025L12.31 4.2525C12.62 4.5625 13.16 4.5625 13.47 4.2525C13.79 3.9325 13.79 3.4125 13.47 3.0925L10.63 0.2325C10.32 -0.0775 9.78 -0.0775 9.47 0.2325L6.64 3.0925C6.32 3.4125 6.32 3.9325 6.64 4.2525C6.95 4.5625 7.49 4.5625 7.8 4.2525L9.24 2.8025V9.4225H2.81L4.26 7.9825C4.42 7.8325 4.5 7.6225 4.5 7.4025C4.5 7.1825 4.41 6.9825 4.26 6.8225C3.94 6.5025 3.42 6.5025 3.1 6.8225L0.24 9.6625C0.08 9.8125 0 10.0225 0 10.2425C0 10.4625 0.09 10.6725 0.24 10.8225L3.1 13.6525C3.42 13.9725 3.94 13.9725 4.26 13.6525C4.42 13.5025 4.5 13.2925 4.5 13.0725C4.5 12.8525 4.41 12.6525 4.26 12.4925L2.81 11.0525H9.23V17.6725L7.79 16.2225C7.64 16.0625 7.43 15.9825 7.21 15.9825C6.99 15.9825 6.79 16.0725 6.63 16.2225C6.31 16.5425 6.31 17.0625 6.63 17.3825L9.46 20.2425C9.61 20.4025 9.82 20.4825 10.04 20.4825C10.26 20.4825 10.47 20.3925 10.62 20.2425L13.45 17.3825C13.77 17.0625 13.77 16.5425 13.45 16.2225C13.14 15.9125 12.6 15.9125 12.29 16.2225L10.85 17.6725V11.0525H17.67L16.22 12.4925C16.06 12.6425 15.98 12.8525 15.98 13.0725C15.98 13.2925 16.07 13.4925 16.22 13.6525C16.54 13.9725 17.06 13.9725 17.38 13.6525L20.24 10.8225C20.4 10.6725 20.48 10.4625 20.48 10.2425C20.48 10.0225 20.39 9.8125 20.24 9.6625H20.26Z",
    fill: "#231F20"
  }));

  // src/hooks/useDragAndDrop.tsx
  var DndDragHandle = ({
    dragHandleProps,
    className
  }) => {
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", {
      className: `BlockWrapper-dragHandle ${className ? className : ""}`,
      ...dragHandleProps
    }, /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      content: intl.formatMessage({ id: "DND_INFO" }),
      delay: [700, 0]
    }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(SvgDragHandle, {
      style: { display: "block" }
    }))));
  };
  var DndWrapper = ({
    id,
    children,
    onDragEnd: onDragEnd3,
    wrapperClass = ""
  }) => {
    return /* @__PURE__ */ React.createElement(DragDropContext, {
      onDragEnd: onDragEnd3
    }, /* @__PURE__ */ React.createElement(ConnectedDroppable, {
      droppableId: id
    }, (provided, snapshot) => /* @__PURE__ */ React.createElement("div", {
      className: `DndWrapper ${wrapperClass}`,
      ...provided.droppableProps,
      ref: provided.innerRef
    }, children, provided.placeholder, snapshot.isDraggingOver && /* @__PURE__ */ React.createElement("div", {
      className: "DndOverlay"
    }))));
  };
  var DndWrapElement = ({
    id,
    children,
    index: index2,
    wrapperClass = ""
  }) => {
    return /* @__PURE__ */ React.createElement(PublicDraggable, {
      draggableId: id,
      index: index2
    }, (provided) => /* @__PURE__ */ React.createElement("div", {
      key: `${id}-wrapper`,
      ref: provided.innerRef,
      className: wrapperClass,
      ...provided.draggableProps
    }, children({
      DndDragHandle: () => /* @__PURE__ */ React.createElement(DndDragHandle, {
        dragHandleProps: provided.dragHandleProps
      })
    })));
  };
  var useDragAndDrop = () => ({ DndWrapper, DndWrapElement });
  var useDragAndDrop_default = useDragAndDrop;

  // assets/svg/close-chevron.svg
  var React18 = __toESM(require_react(), 1);
  var SvgCloseChevron = (props) => /* @__PURE__ */ React18.createElement("svg", {
    width: 10,
    height: 15,
    viewBox: "0 0 10 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React18.createElement("path", {
    d: "M8.99986 1.58809C9.00246 1.47345 8.96819 1.36088 8.90175 1.26601C8.83531 1.17115 8.73999 1.09872 8.62913 1.05878C8.51827 1.01884 8.39734 1.01339 8.28314 1.04318C8.16893 1.07296 8.06718 1.13651 7.99194 1.22498L5.0092 4.60072L2.02751 1.22498C1.98112 1.16378 1.92222 1.11253 1.85445 1.07443C1.78668 1.03633 1.7115 1.01221 1.63367 1.00358C1.55584 0.994942 1.47703 1.00198 1.40214 1.02426C1.32724 1.04653 1.25788 1.08355 1.19843 1.13302C1.13897 1.18248 1.09075 1.2433 1.05667 1.31169C1.02259 1.38008 1.00345 1.45456 1.00042 1.53045C0.997405 1.60635 1.01054 1.68203 1.03908 1.75276C1.06763 1.8235 1.11092 1.88775 1.16627 1.94151L4.57691 5.80642C4.63033 5.86712 4.69663 5.91585 4.77136 5.94927C4.84609 5.98269 4.92743 6 5.00973 6C5.09202 6 5.17336 5.98269 5.24809 5.94927C5.32282 5.91585 5.38919 5.86712 5.44261 5.80642L8.85653 1.94151C8.94597 1.84387 8.99682 1.71864 8.99999 1.58809L8.99986 1.58809Z",
    fill: "white",
    stroke: "white",
    strokeWidth: 0.5
  }), /* @__PURE__ */ React18.createElement("path", {
    d: "M1.00014 13.4119C0.997537 13.5265 1.03181 13.6391 1.09825 13.734C1.16469 13.8288 1.26001 13.9013 1.37087 13.9412C1.48173 13.9812 1.60266 13.9866 1.71686 13.9568C1.83107 13.927 1.93282 13.8635 2.00806 13.775L4.9908 10.3993L7.97249 13.775C8.01889 13.8362 8.07778 13.8875 8.14555 13.9256C8.21332 13.9637 8.2885 13.9878 8.36633 13.9964C8.44416 14.0051 8.52297 13.998 8.59787 13.9757C8.67276 13.9535 8.74212 13.9164 8.80158 13.867C8.86103 13.8175 8.90925 13.7567 8.94333 13.6883C8.97741 13.6199 8.99656 13.5454 8.99958 13.4695C9.0026 13.3937 8.98947 13.318 8.96092 13.2472C8.93238 13.1765 8.88908 13.1122 8.83373 13.0585L5.42309 9.19358C5.36967 9.13288 5.30337 9.08415 5.22864 9.05073C5.15391 9.01731 5.07257 9 4.99027 9C4.90798 9 4.82664 9.01731 4.75191 9.05073C4.67718 9.08415 4.61081 9.13288 4.55739 9.19358L1.14347 13.0585C1.05403 13.1561 1.00318 13.2814 1.00001 13.4119L1.00014 13.4119Z",
    fill: "white",
    stroke: "white",
    strokeWidth: 0.5
  }));

  // assets/svg/open-chevron.svg
  var React19 = __toESM(require_react(), 1);
  var SvgOpenChevron = (props) => /* @__PURE__ */ React19.createElement("svg", {
    width: 10,
    height: 15,
    viewBox: "0 0 10 17",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React19.createElement("path", {
    d: "M1.02566 5.51547C1.02456 5.63013 1.0603 5.74225 1.12797 5.83624C1.19565 5.93023 1.2919 6.00141 1.40328 6.0399C1.51465 6.07838 1.63563 6.08226 1.74944 6.05098C1.86325 6.01971 1.96416 5.95484 2.03824 5.86539L4.97663 2.45098L8.00216 5.78749C8.04935 5.84808 8.10891 5.89856 8.17718 5.93577C8.24544 5.97298 8.32092 5.99612 8.39886 6.00373C8.47679 6.01135 8.55551 6.00328 8.6301 5.98003C8.7047 5.95678 8.77357 5.91885 8.83237 5.86862C8.89117 5.81839 8.9386 5.75693 8.97179 5.6881C9.00497 5.61928 9.02314 5.54456 9.02517 5.46863C9.0272 5.3927 9.01308 5.31719 8.98361 5.24684C8.95415 5.17649 8.91001 5.1128 8.85397 5.05978L5.39314 1.23973C5.33894 1.17974 5.272 1.13188 5.19684 1.09943C5.12168 1.06699 5.04012 1.05075 4.95783 1.05183C4.87555 1.0529 4.79444 1.07127 4.72015 1.10566C4.64587 1.14005 4.58014 1.18965 4.52751 1.25104L1.16436 5.16022C1.0762 5.25901 1.02699 5.38489 1.02553 5.51547L1.02566 5.51547Z",
    fill: "white",
    stroke: "white",
    strokeWidth: 0.5
  }), /* @__PURE__ */ React19.createElement("path", {
    d: "M8.99715 11.632C8.99951 11.5174 8.96501 11.4049 8.89838 11.3102C8.83175 11.2154 8.73628 11.1432 8.62534 11.1035C8.5144 11.0638 8.39346 11.0586 8.27932 11.0886C8.16517 11.1186 8.06355 11.1823 7.98849 11.271L5.01259 14.6527L2.02407 11.283C1.97755 11.2219 1.91855 11.1708 1.8507 11.1328C1.78286 11.0949 1.70763 11.0709 1.62979 11.0624C1.55194 11.054 1.47314 11.0612 1.39829 11.0836C1.32344 11.106 1.25415 11.1432 1.1948 11.1927C1.13545 11.2423 1.08735 11.3033 1.05341 11.3717C1.01947 11.4402 1.00047 11.5147 0.997607 11.5906C0.994741 11.6665 1.00802 11.7421 1.03671 11.8128C1.0654 11.8835 1.10883 11.9477 1.16428 12.0013L4.58273 15.8593C4.63628 15.9199 4.70268 15.9685 4.77748 16.0018C4.85228 16.035 4.93365 16.0522 5.01594 16.052C5.09824 16.0518 5.17954 16.0344 5.2542 16.0008C5.32886 15.9672 5.39514 15.9184 5.44844 15.8576L8.85453 11.9857C8.94378 11.8879 8.99437 11.7626 8.99728 11.632L8.99715 11.632Z",
    fill: "white",
    stroke: "white",
    strokeWidth: 0.5
  }));

  // assets/svg/delete.svg
  var React20 = __toESM(require_react(), 1);
  var SvgDelete = (props) => /* @__PURE__ */ React20.createElement("svg", {
    width: 16,
    height: 18,
    viewBox: "0 0 16 18",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React20.createElement("path", {
    d: "M4.82857 0.621914C5.02143 0.24075 5.41786 0 5.85 0H10.15C10.5821 0 10.9786 0.24075 11.1714 0.621914L11.4286 1.125H14.8571C15.4893 1.125 16 1.62879 16 2.25C16 2.87121 15.4893 3.375 14.8571 3.375H1.14286C0.511786 3.375 0 2.87121 0 2.25C0 1.62879 0.511786 1.125 1.14286 1.125H4.57143L4.82857 0.621914ZM1.11071 4.5H14.8571V15.75C14.8571 16.991 13.8321 18 12.5714 18H3.39643C2.16607 18 1.11071 16.991 1.11071 15.75V4.5ZM3.96786 7.3125V15.1875C3.96786 15.4969 4.25714 15.75 4.53929 15.75C4.88571 15.75 5.11071 15.4969 5.11071 15.1875V7.3125C5.11071 7.00313 4.88571 6.75 4.53929 6.75C4.25714 6.75 3.96786 7.00313 3.96786 7.3125ZM7.39643 7.3125V15.1875C7.39643 15.4969 7.68571 15.75 7.96786 15.75C8.31429 15.75 8.57143 15.4969 8.57143 15.1875V7.3125C8.57143 7.00313 8.31429 6.75 7.96786 6.75C7.68571 6.75 7.39643 7.00313 7.39643 7.3125ZM10.8571 7.3125V15.1875C10.8571 15.4969 11.1143 15.75 11.4286 15.75C11.7429 15.75 12 15.4969 12 15.1875V7.3125C12 7.00313 11.7429 6.75 11.4286 6.75C11.1143 6.75 10.8571 7.00313 10.8571 7.3125Z",
    fill: "currentcolor"
  }));

  // src/components/LayoutHeader/LayoutHeader.tsx
  var LayoutHeader = ({
    title,
    icon,
    open,
    setOpen,
    onDelete
  }) => {
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", {
      className: `LayoutHeader ${!open ? "LayoutHeader--closed" : ""}`
    }, /* @__PURE__ */ React.createElement("div", {
      className: "LayoutHeader__Infos"
    }, icon, /* @__PURE__ */ React.createElement("span", {
      className: "LayoutHeader__Title"
    }, title)), /* @__PURE__ */ React.createElement("div", {
      className: "LayoutHeader__Actions"
    }, onDelete && /* @__PURE__ */ React.createElement("button", {
      className: "LayoutHeader__DeleteButton",
      onClick: () => onDelete(),
      title: intl.formatMessage({ id: "DELETE" })
    }, /* @__PURE__ */ React.createElement(SvgDelete, null)), /* @__PURE__ */ React.createElement("button", {
      onClick: () => setOpen(!open),
      className: "LayoutHeader__Collapse"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "LayoutHeader__Collapse__Icon"
    }, open ? /* @__PURE__ */ React.createElement(SvgCloseChevron, {
      style: { display: "block" }
    }) : /* @__PURE__ */ React.createElement(SvgOpenChevron, {
      style: { display: "block" }
    })), /* @__PURE__ */ React.createElement("div", {
      className: "LayoutHeader__Collapse__Label"
    }, open ? intl.formatMessage({ id: "FOLD" }) : intl.formatMessage({ id: "UNFOLD" })))));
  };
  var LayoutHeader_default = LayoutHeader;

  // src/blocks/MultiColumns/MultiColumns.tsx
  var NestedColumn = ({ onUpdate }) => {
    const { blockList, moveBlockTo } = useBlocksContext();
    const { DndWrapper: DndWrapper2, DndWrapElement: DndWrapElement2 } = useDragAndDrop_default();
    (0, import_react27.useEffect)(() => {
      onUpdate(blockList);
    }, [blockList]);
    const onDragEnd3 = (e2) => {
      if (e2.destination) {
        moveBlockTo(e2.source.index, e2.destination.index);
      }
    };
    return blockList.length > 0 ? /* @__PURE__ */ React.createElement("div", {
      className: "flex flex-col gap-6 px-6 pt-4 xl:pt-8 xl:px-10"
    }, /* @__PURE__ */ React.createElement(DndWrapper2, {
      id: "main",
      onDragEnd: onDragEnd3
    }, blockList.map((block, index2) => /* @__PURE__ */ React.createElement(DndWrapElement2, {
      key: block.id,
      id: block.id,
      index: index2
    }, ({ DndDragHandle: DndDragHandle2 }) => /* @__PURE__ */ React.createElement(Block_default, {
      DndDragHandle: DndDragHandle2,
      inLayout: true,
      key: index2,
      block
    }))))) : null;
  };
  var ColumnIcon = ({
    cols,
    currentCol,
    asIcon
  }) => {
    const { width } = useWindowSize_default();
    return /* @__PURE__ */ React.createElement("div", {
      className: `${asIcon ? "ColumnIcon ColumnIcon--asCompactIcon" : "ColumnIcon ColumnIcon--asLayoutIcon"}`,
      style: { minWidth: width > 1024 ? "60px" : "40px" }
    }, [...Array(cols)].map((_3, index2) => /* @__PURE__ */ React.createElement("div", {
      key: index2,
      style: { width: 100 / cols + "%" },
      className: `${index2 !== cols - 1 ? "ColumnIcon__Chip" : ""} ${currentCol === index2 ? "ColumnIcon__Chip--current" : asIcon ? "ColumnIcon__Chip--asCompactIcon" : "ColumnIcon__Chip--asLayoutIcon"}`
    })));
  };
  var ColumnComponent = ({
    column,
    index: index2,
    data,
    onUpdate
  }) => {
    const [open, setOpen] = (0, import_react27.useState)(true);
    const { width } = useWindowSize_default();
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", {
      key: index2,
      className: "BlockColumn"
    }, /* @__PURE__ */ React.createElement(LayoutHeader_default, {
      title: `${intl.formatMessage({ id: "COLUMN" })} #${index2 + 1}`,
      open,
      setOpen,
      icon: width > 400 && /* @__PURE__ */ React.createElement(ColumnIcon, {
        cols: data.length,
        currentCol: index2
      })
    }), /* @__PURE__ */ React.createElement("div", {
      className: `${!open ? "BlockColumn--closed" : "BlockColumn__Content"}`
    }, /* @__PURE__ */ React.createElement(BlockContextProvider, {
      defaultBlocks: column
    }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(NestedColumn, {
      onUpdate: (columnNewData) => {
        const nextState = immer_esm_default(data, (draft) => {
          draft[index2] = columnNewData;
        });
        onUpdate(nextState);
      }
    }), /* @__PURE__ */ React.createElement(AddBlocks_default, {
      excludeLayout: true,
      inLayout: true
    })))));
  };
  var MultiColumnsComponent = ({
    data,
    onUpdate
  }) => {
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockMultiColumns__Wrapper"
    }, data.map((column, index2) => /* @__PURE__ */ React.createElement(ColumnComponent, {
      key: index2,
      data,
      onUpdate,
      column,
      index: index2
    })));
  };
  var moduleLayout = {
    default: "Columns",
    fr: "Colonnes",
    en: "Columns",
    es: "Columnas",
    it: "Colonne"
  };
  var moduleType = {
    id: "multiColumns"
  };
  var Column = {
    type: moduleType,
    component: MultiColumnsComponent,
    initialData: [[]],
    layout: moduleLayout,
    icon: SvgColumn,
    title: {
      default: "Columns",
      fr: "Colonnes",
      en: "Columns",
      es: "Columnas",
      it: "Colonne"
    },
    description: {
      default: "Display blocks in multiple columns",
      fr: "Affiche des blocks dans diff\xE9rentes colonnes",
      en: "Display blocks in multiple columns",
      es: "Mostrar bloques en columnas",
      it: "Mostra i blocchi in colonne"
    },
    image: {
      default: "https://source.unsplash.com/featured/300x250?nature&multiColumns"
    }
  };
  var TwoColumns = {
    ...Column,
    component: MultiColumnsComponent,
    title: {
      default: "2 Columns",
      fr: "2 Colonnes",
      en: "2 Columns",
      es: "2 Columnas",
      it: "2 Colonne"
    },
    layout: moduleLayout,
    initialData: [[], []],
    customIcon: /* @__PURE__ */ React.createElement(ColumnIcon, {
      asIcon: true,
      cols: 2
    })
  };
  var ThreeColumns = {
    ...Column,
    component: MultiColumnsComponent,
    type: { id: "3cols" },
    layout: moduleLayout,
    title: {
      default: "3 Columns",
      fr: "3 Colonnes",
      en: "3 Columns",
      es: "3 Columnas",
      it: "3 Colonne"
    },
    initialData: [[], [], []],
    customIcon: /* @__PURE__ */ React.createElement(ColumnIcon, {
      asIcon: true,
      cols: 3
    })
  };
  var FourColumns = {
    ...Column,
    component: MultiColumnsComponent,
    layout: moduleLayout,
    title: {
      default: "4 Columns",
      fr: "4 Colonnes",
      en: "4 Columns",
      es: "4 Columnas",
      it: "4 Colonne"
    },
    initialData: [[], [], [], []],
    customIcon: /* @__PURE__ */ React.createElement(ColumnIcon, {
      asIcon: true,
      cols: 4
    })
  };
  var FiveColumns = {
    ...Column,
    component: MultiColumnsComponent,
    layout: moduleLayout,
    title: {
      default: "5 Columns",
      fr: "5 Colonnes",
      en: "5 Columns",
      es: "5 Columnas",
      it: "5 Colonne"
    },
    initialData: [[], [], [], [], []],
    customIcon: /* @__PURE__ */ React.createElement(ColumnIcon, {
      asIcon: true,
      cols: 5
    })
  };
  var SixColumns = {
    ...Column,
    component: MultiColumnsComponent,
    layout: moduleLayout,
    title: {
      default: "6 Columns",
      fr: "6 Colonnes",
      en: "6 Columns",
      es: "6 Columnas",
      it: "6 Colonne"
    },
    initialData: [[], [], [], [], [], []],
    customIcon: /* @__PURE__ */ React.createElement(ColumnIcon, {
      asIcon: true,
      cols: 6
    })
  };

  // src/blocks/Accordion/assets/accordion.svg
  var React21 = __toESM(require_react(), 1);
  var SvgAccordion = (props) => /* @__PURE__ */ React21.createElement("svg", {
    width: 22,
    height: 18,
    viewBox: "0 0 22 18",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React21.createElement("path", {
    d: "M4.77332 8.72599H16.9231C17.4777 8.75248 18.032 8.66612 18.5523 8.47212C19.0726 8.27812 19.5481 7.98052 19.95 7.59736C20.3519 7.2142 20.6718 6.75345 20.8904 6.24301C21.109 5.73257 21.2217 5.18306 21.2217 4.62778C21.2217 4.0725 21.109 3.523 20.8904 3.01256C20.6718 2.50212 20.3519 2.04136 19.95 1.6582C19.5481 1.27504 19.0726 0.977448 18.5523 0.783448C18.032 0.589449 17.4777 0.503081 16.9231 0.529576H4.77332C3.72027 0.579878 2.72698 1.03362 1.99951 1.79667C1.27204 2.55972 0.866211 3.57352 0.866211 4.62778C0.866211 5.68204 1.27204 6.69585 1.99951 7.4589C2.72698 8.22195 3.72027 8.67569 4.77332 8.72599ZM4.77332 1.43613H16.9231C17.353 1.41276 17.7832 1.47725 18.1873 1.62568C18.5915 1.77411 18.9611 2.00335 19.2737 2.29942C19.5863 2.59548 19.8353 2.95216 20.0055 3.34766C20.1756 3.74316 20.2634 4.16919 20.2634 4.59974C20.2634 5.03029 20.1756 5.45633 20.0055 5.85183C19.8353 6.24733 19.5863 6.60401 19.2737 6.90007C18.9611 7.19614 18.5915 7.42538 18.1873 7.57381C17.7832 7.72224 17.353 7.78673 16.9231 7.76335H4.77332C3.96402 7.71935 3.20235 7.36686 2.64501 6.77839C2.08768 6.18993 1.77706 5.41025 1.77706 4.59974C1.77706 3.78924 2.08768 3.00956 2.64501 2.42109C3.20235 1.83263 3.96402 1.48014 4.77332 1.43613Z",
    fill: "#444444"
  }), /* @__PURE__ */ React21.createElement("path", {
    d: "M16.9045 9.7078H4.75477C3.70171 9.7581 2.70843 10.2118 1.98096 10.9749C1.25348 11.7379 0.847656 12.7517 0.847656 13.806C0.847656 14.8603 1.25348 15.8741 1.98096 16.6371C2.70843 17.4002 3.70171 17.8539 4.75477 17.9042H16.9045C17.4592 17.9307 18.0134 17.8443 18.5337 17.6503C19.054 17.4563 19.5295 17.1587 19.9314 16.7756C20.3333 16.3924 20.6532 15.9317 20.8718 15.4212C21.0905 14.9108 21.2032 14.3613 21.2032 13.806C21.2032 13.2507 21.0905 12.7012 20.8718 12.1908C20.6532 11.6803 20.3333 11.2196 19.9314 10.8364C19.5295 10.4533 19.054 10.1557 18.5337 9.96167C18.0134 9.76767 17.4592 9.6813 16.9045 9.7078ZM16.9045 16.9696H4.75477C3.94546 16.9256 3.1838 16.5731 2.62646 15.9847C2.06912 15.3962 1.7585 14.6165 1.7585 13.806C1.7585 12.9955 2.06912 12.2158 2.62646 11.6274C3.1838 11.0389 3.94546 10.6864 4.75477 10.6424H16.9045C17.3344 10.619 17.7646 10.6835 18.1688 10.8319C18.5729 10.9804 18.9426 11.2096 19.2552 11.5057C19.5678 11.8017 19.8168 12.1584 19.9869 12.5539C20.1571 12.9494 20.2448 13.3755 20.2448 13.806C20.2448 14.2366 20.1571 14.6626 19.9869 15.0581C19.8168 15.4536 19.5678 15.8103 19.2552 16.1063C18.9426 16.4024 18.5729 16.6316 18.1688 16.7801C17.7646 16.9285 17.3344 16.993 16.9045 16.9696Z",
    fill: "#444444"
  }), /* @__PURE__ */ React21.createElement("path", {
    d: "M14.96 4.99674H16.0348V6.10891C16.0331 6.15947 16.0423 6.20981 16.0616 6.25655C16.0809 6.30329 16.11 6.34536 16.147 6.37995C16.2208 6.45578 16.3215 6.49944 16.4273 6.50144C16.5311 6.49837 16.6305 6.45864 16.7077 6.38929C16.744 6.35228 16.7726 6.30844 16.7918 6.26032C16.8111 6.2122 16.8206 6.16074 16.8199 6.10891V4.99674H17.8947C18.0005 4.99474 18.1012 4.95108 18.175 4.87525C18.211 4.83996 18.2395 4.79777 18.2588 4.75119C18.2781 4.70461 18.2877 4.65462 18.2872 4.60421C18.2885 4.55232 18.2792 4.50071 18.2599 4.45251C18.2406 4.40431 18.2117 4.36054 18.175 4.32384C18.1012 4.248 18.0005 4.20434 17.8947 4.20234H16.8199V3.12755C16.8206 3.07573 16.8111 3.02427 16.7918 2.97615C16.7726 2.92802 16.744 2.88419 16.7077 2.84717C16.6297 2.78007 16.5302 2.74316 16.4273 2.74316C16.3244 2.74316 16.225 2.78007 16.147 2.84717C16.1107 2.88419 16.0821 2.92802 16.0628 2.97615C16.0436 3.02427 16.0341 3.07573 16.0348 3.12755V4.23972H14.96C14.9075 4.2402 14.8557 4.2512 14.8075 4.27207C14.7594 4.29294 14.7159 4.32325 14.6796 4.36122C14.6429 4.39792 14.6141 4.4417 14.5948 4.4899C14.5755 4.53809 14.5662 4.5897 14.5675 4.6416C14.567 4.692 14.5766 4.742 14.5959 4.78857C14.6152 4.83515 14.6436 4.87735 14.6796 4.91263C14.7588 4.97577 14.8592 5.00591 14.96 4.99674Z",
    fill: "#444444"
  }), /* @__PURE__ */ React21.createElement("path", {
    d: "M17.8941 13.4359H16.8193V12.3611C16.8173 12.2553 16.7737 12.1545 16.6978 12.0807C16.6223 12.0124 16.524 11.9746 16.4221 11.9746C16.3203 11.9746 16.222 12.0124 16.1464 12.0807C16.1102 12.1177 16.0816 12.1616 16.0623 12.2097C16.0431 12.2578 16.0335 12.3093 16.0343 12.3611V13.4359H14.9501C14.8482 13.4425 14.7522 13.486 14.6799 13.5582C14.6077 13.6304 14.5642 13.7265 14.5576 13.8284C14.559 13.9325 14.599 14.0324 14.6698 14.1088C14.7068 14.1451 14.7506 14.1737 14.7987 14.1929C14.8469 14.2122 14.8983 14.2217 14.9501 14.221H16.0343V15.3051C16.0337 15.3555 16.0434 15.4055 16.0627 15.4521C16.0819 15.4986 16.1104 15.5408 16.1464 15.5761C16.1827 15.6141 16.2262 15.6444 16.2743 15.6653C16.3225 15.6861 16.3743 15.6971 16.4268 15.6976C16.5288 15.691 16.6248 15.6475 16.697 15.5753C16.7693 15.5031 16.8127 15.407 16.8193 15.3051V14.221H17.8941C17.946 14.2217 17.9974 14.2122 18.0455 14.1929C18.0937 14.1737 18.1375 14.1451 18.1745 14.1088C18.2453 14.0324 18.2853 13.9325 18.2867 13.8284C18.286 13.7404 18.2564 13.655 18.2025 13.5854C18.1653 13.5393 18.1184 13.502 18.0651 13.4761C18.0118 13.4503 17.9534 13.4365 17.8941 13.4359Z",
    fill: "#444444"
  }));

  // src/blocks/Accordion/Accordion.tsx
  var import_react32 = __toESM(require_react(), 1);

  // src/components/Inputs/Input.tsx
  var import_react29 = __toESM(require_react(), 1);

  // assets/svg/info.svg
  var React22 = __toESM(require_react(), 1);
  var SvgInfo = (props) => /* @__PURE__ */ React22.createElement("svg", {
    width: 15,
    height: 15,
    viewBox: "0 0 19 19",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React22.createElement("path", {
    d: "M9.5 0C4.25322 0 0 4.25337 0 9.5C0 14.7469 4.25322 19 9.5 19C14.7468 19 19 14.7469 19 9.5C19 4.25337 14.7468 0 9.5 0ZM9.5 4.75C10.1559 4.75 10.6875 5.2817 10.6875 5.9375C10.6875 6.59359 10.1559 7.125 9.5 7.125C8.84413 7.125 8.3125 6.59359 8.3125 5.9375C8.3125 5.2817 8.84413 4.75 9.5 4.75ZM11.2812 14.25H7.71875C7.39085 14.25 7.125 13.9844 7.125 13.6562C7.125 13.3284 7.39085 13.0625 7.71875 13.0625H8.3125V9.5H7.71875C7.39085 9.5 7.125 9.23445 7.125 8.90625C7.125 8.57835 7.39085 8.3125 7.71875 8.3125H10.0938C10.4216 8.3125 10.6875 8.57835 10.6875 8.90625V13.0625H11.2812C11.6091 13.0625 11.875 13.3284 11.875 13.6562C11.875 13.9844 11.6091 14.25 11.2812 14.25Z",
    fill: "#222222"
  }));

  // src/components/Inputs/InputWrapper.tsx
  var InputWrapper = ({
    children,
    label,
    error: error2,
    info,
    id
  }) => {
    return /* @__PURE__ */ React.createElement("div", {
      className: "Input__Wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "Input__Wrapper__Header"
    }, label && /* @__PURE__ */ React.createElement("label", {
      htmlFor: id
    }, label), info && /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [700, 0],
      content: info
    }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(SvgInfo, null)))), children, error2 && /* @__PURE__ */ React.createElement("div", {
      className: "Input__Wrapper__Error"
    }, error2));
  };
  var InputWrapper_default = InputWrapper;

  // src/components/Inputs/Input.tsx
  var InputIcon = ({
    icon,
    alignment = "left"
  }) => {
    return /* @__PURE__ */ React.createElement("span", {
      className: `Input__Icon Input__Icon${alignment === "left" ? "--left" : "--right"}`
    }, icon);
  };
  var Input = (0, import_react29.forwardRef)(
    ({
      value,
      onChange,
      className = "",
      emphasize,
      placeholder: placeholder2,
      icon,
      iconAlignment = "left",
      type = "text",
      isValid,
      label,
      id,
      info,
      error: error2,
      ...props
    }, ref2) => {
      return /* @__PURE__ */ React.createElement(InputWrapper_default, {
        id,
        label,
        error: error2,
        info
      }, /* @__PURE__ */ React.createElement("div", {
        className: "Input__Text__Wrapper"
      }, /* @__PURE__ */ React.createElement("input", {
        ref: ref2,
        type,
        value,
        id,
        onChange,
        className: `Input__Text ${emphasize ? "Input__Text--emphasize" : ""} ${iconAlignment === "left" && icon ? "Input__Text--withIcon" : icon && isValid ? "Input__Text--withIcons" : ""}`,
        placeholder: placeholder2,
        ...props
      }), icon && /* @__PURE__ */ React.createElement(InputIcon, {
        alignment: iconAlignment,
        icon
      }), icon && isValid && iconAlignment === "left" && /* @__PURE__ */ React.createElement(InputIcon, {
        alignment: iconAlignment,
        icon: /* @__PURE__ */ React.createElement("i", {
          className: "fas fa-check"
        })
      })));
    }
  );
  var Input_default = Input;

  // src/components/Inputs/Select.tsx
  var import_react30 = __toESM(require_react(), 1);
  var Select = (0, import_react30.forwardRef)(
    ({
      value,
      onChange,
      className,
      label,
      id,
      info,
      error: error2,
      children,
      ...props
    }, ref2) => {
      return /* @__PURE__ */ React.createElement(InputWrapper_default, {
        id,
        label,
        error: error2,
        info
      }, /* @__PURE__ */ React.createElement("div", {
        className: "Input__Select__Separator"
      }), /* @__PURE__ */ React.createElement("select", {
        id,
        ref: ref2,
        value,
        onChange,
        className: "Input__Select",
        ...props
      }, children));
    }
  );
  var Select_default = Select;

  // src/components/Inputs/TextArea.tsx
  var import_react31 = __toESM(require_react(), 1);
  var TextArea = (0, import_react31.forwardRef)(
    ({
      rows = 6,
      id,
      label,
      info,
      error: error2,
      className,
      ...props
    }, ref2) => {
      return /* @__PURE__ */ React.createElement(InputWrapper_default, {
        id,
        label,
        error: error2,
        info
      }, /* @__PURE__ */ React.createElement("textarea", {
        className: "Input__TextArea",
        ref: ref2,
        rows,
        id,
        ...props
      }));
    }
  );
  var TextArea_default = TextArea;

  // src/blocks/Accordion/Accordion.tsx
  var NestedBlocks = ({ onUpdate }) => {
    const { blockList, moveBlockTo } = useBlocksContext();
    const { DndWrapper: DndWrapper2, DndWrapElement: DndWrapElement2 } = useDragAndDrop_default();
    (0, import_react32.useEffect)(() => {
      onUpdate(blockList);
    }, [blockList]);
    const onDragEnd3 = (e2) => {
      if (e2.destination) {
        moveBlockTo(e2.source.index, e2.destination.index);
      }
    };
    return blockList.length > 0 ? /* @__PURE__ */ React.createElement(DndWrapper2, {
      id: "main",
      onDragEnd: onDragEnd3
    }, blockList.map((block, index2) => /* @__PURE__ */ React.createElement(DndWrapElement2, {
      key: block.id,
      id: block.id,
      index: index2
    }, ({ DndDragHandle: DndDragHandle2 }) => /* @__PURE__ */ React.createElement(Block_default, {
      DndDragHandle: DndDragHandle2,
      inLayout: true,
      key: index2,
      block
    })))) : null;
  };
  var AccordionItemComponent = ({
    data,
    item,
    index: index2,
    onUpdate,
    onDelete
  }) => {
    const [open, setIsOpen] = (0, import_react32.useState)(true);
    const [itemTitle, setItemTitle] = (0, import_react32.useState)(item.title);
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockAccordion"
    }, /* @__PURE__ */ React.createElement(LayoutHeader_default, {
      title: `${intl.formatMessage({ id: "ACCORDION" })} #${index2 + 1}`,
      open,
      setOpen: setIsOpen,
      onDelete
    }), /* @__PURE__ */ React.createElement("div", {
      className: `${!open ? "BlockAccordion--closed" : "BlockAccordion__Content"}`
    }, /* @__PURE__ */ React.createElement(BlockContextProvider, {
      defaultBlocks: item.content
    }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
      className: "flex flex-col gap-6 px-6 pt-4 xl:pt-8 xl:px-10"
    }, /* @__PURE__ */ React.createElement(Input_default, {
      id: `BlockAccordion-field-title-${index2}`,
      label: intl.formatMessage({ id: "BlockAccordion__TITLE" }),
      placeholder: intl.formatMessage({
        id: "BlockAccordion__TITLE_PLACEHOLDER"
      }),
      value: itemTitle,
      onChange: (e2) => setItemTitle(e2.target.value),
      onBlur: () => onUpdate({ ...item, title: itemTitle })
    }), /* @__PURE__ */ React.createElement(NestedBlocks, {
      onUpdate: (columnNewData) => {
        const nextState = immer_esm_default(data, (draft) => {
          draft.group[index2].content = columnNewData;
        });
        onUpdate({
          title: item.title,
          content: nextState.group[index2].content
        });
      }
    })), /* @__PURE__ */ React.createElement(AddBlocks_default, {
      excludeLayout: true,
      inLayout: true
    })))));
  };
  var AccordionComponent = ({
    data,
    onUpdate
  }) => {
    const [title, setTitle] = (0, import_react32.useState)(data.title);
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Input_default, {
      id: "title-field",
      label: "Titre principal",
      placeholder: "Indiquez le titre principal",
      value: title,
      onChange: (e2) => setTitle(e2.target.value),
      onBlur: () => onUpdate({ ...data, title })
    }), /* @__PURE__ */ React.createElement("div", {
      className: "flex flex-col gap-3 my-4"
    }, data.group.map((item, index2) => /* @__PURE__ */ React.createElement(import_react32.Fragment, {
      key: item.id
    }, /* @__PURE__ */ React.createElement(AccordionItemComponent, {
      data,
      index: index2,
      item,
      onDelete: () => {
        if (data.group.length > 1) {
          onUpdate({
            ...data,
            group: data.group.filter((element) => element.id !== item.id)
          });
        }
      },
      onUpdate: ({ title: title2, content }) => onUpdate({
        ...data,
        group: data.group.map((element) => {
          if (element.id === item.id) {
            return {
              ...element,
              title: title2,
              content
            };
          }
          return element;
        })
      })
    })))), /* @__PURE__ */ React.createElement("button", {
      className: "BlockAccordion__Add",
      onClick: () => onUpdate({
        ...data,
        group: [...data.group, { id: nanoid(), title: "", content: [] }]
      })
    }, intl.formatMessage({ id: "BlockAccordion__ADD" })));
  };
  var initialData = {
    title: "",
    group: [{ id: nanoid(), title: "", content: [] }]
  };
  var moduleType2 = {
    id: "blockAccordion"
  };
  var Accordion = {
    type: moduleType2,
    component: AccordionComponent,
    initialData,
    title: {
      default: "Accordion",
      fr: "Accord\xE9on",
      en: "Accordion",
      es: "Accordi\xF3n",
      it: "Accordion"
    },
    icon: SvgAccordion,
    description: {
      default: "Display blocks in accordion",
      fr: "Affiche des blocs en accord\xE9on",
      en: "Display blocks in accordion",
      es: "Affiche des blocks en accord\xE9on",
      it: "Display blocks in accordion"
    },
    image: {
      default: "https://source.unsplash.com/featured/300x250?nature&multiColumns"
    }
  };
  var Accordion_default = Accordion;

  // src/blocks/Button/Button.tsx
  var import_react33 = __toESM(require_react(), 1);

  // src/blocks/Button/assets/button.svg
  var React23 = __toESM(require_react(), 1);
  var SvgButton = (props) => /* @__PURE__ */ React23.createElement("svg", {
    width: 25,
    height: 17,
    viewBox: "0 0 25 17",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React23.createElement("path", {
    d: "M22.1277 8.32771C23.0244 8.08057 23.809 7.47447 24.3331 6.62408C24.8572 5.77368 25.0844 4.73797 24.9718 3.71286C24.8592 2.68775 24.4146 1.74434 23.722 1.0611C23.0294 0.377865 22.137 0.00217757 21.2135 0.0051124H3.97091C3.45883 -0.0230592 2.94696 0.0654142 2.46637 0.265164C1.98579 0.464914 1.5465 0.771777 1.17516 1.16713C0.803825 1.56249 0.508183 2.03809 0.306174 2.56509C0.104165 3.09209 0 3.65949 0 4.23287C0 4.80625 0.104165 5.37365 0.306174 5.90065C0.508183 6.42765 0.803825 6.90325 1.17516 7.29861C1.5465 7.69396 1.98579 8.00083 2.46637 8.20058C2.94696 8.40033 3.45883 8.4888 3.97091 8.46063H17.7851V14.5952C17.7737 14.719 17.7986 14.8436 17.8562 14.9501C17.9138 15.0566 18.0009 15.1393 18.1042 15.1855C18.2075 15.2317 18.3215 15.239 18.4289 15.2063C18.5363 15.1736 18.6312 15.1026 18.6993 15.0042L20.7106 12.7446L22.1277 16.6503C22.1528 16.7189 22.1897 16.7813 22.2364 16.8339C22.2831 16.8865 22.3386 16.9282 22.3998 16.9567C22.461 16.9852 22.5266 17 22.5928 17C22.6591 17.0001 22.7247 16.9855 22.7859 16.957C22.9106 16.8981 23.0099 16.7873 23.0628 16.648C23.1156 16.5087 23.118 16.3519 23.0694 16.2107L21.6157 12.305H24.4773C24.5774 12.3067 24.6755 12.2744 24.7588 12.2123C24.8421 12.1502 24.9065 12.0613 24.9436 11.9573C24.9836 11.8531 24.9946 11.7378 24.975 11.6265C24.9555 11.5152 24.9062 11.4131 24.8338 11.3337L22.1277 8.32771ZM3.96177 7.30528C3.23436 7.30528 2.53674 6.98212 2.02238 6.40689C1.50802 5.83166 1.21905 5.05148 1.21905 4.23798C1.21905 3.42448 1.50802 2.64431 2.02238 2.06908C2.53674 1.49385 3.23436 1.17069 3.96177 1.17069H21.2135C21.5736 1.16733 21.9309 1.24334 22.2648 1.39439C22.5987 1.54543 22.9027 1.76855 23.1595 2.051C23.4164 2.33345 23.6209 2.66971 23.7615 3.04056C23.9021 3.41142 23.976 3.80962 23.979 4.21242C23.982 4.61522 23.9141 5.01474 23.779 5.38817C23.6439 5.7616 23.4444 6.10162 23.1919 6.38881C22.9393 6.67601 22.6386 6.90477 22.307 7.06201C21.9754 7.21926 21.6193 7.30192 21.2592 7.30528L18.6627 4.43224C18.5946 4.3338 18.4997 4.26284 18.3923 4.23013C18.2849 4.19742 18.171 4.20473 18.0676 4.25095C17.9643 4.29718 17.8772 4.3798 17.8197 4.48631C17.7621 4.59282 17.7371 4.71741 17.7485 4.84122V7.3155L3.96177 7.30528ZM20.8569 11.1701C20.7908 11.1698 20.7252 11.1841 20.6641 11.2121C20.6029 11.2402 20.5472 11.2815 20.5003 11.3337L18.809 13.2252V6.21128L23.2431 11.1701H20.8569Z",
    fill: "#333333"
  }));

  // assets/svg/link.svg
  var React24 = __toESM(require_react(), 1);
  var SvgLink = (props) => /* @__PURE__ */ React24.createElement("svg", {
    width: 18,
    height: 18,
    viewBox: "0 0 21 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React24.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M15.4946 9.2899C15.3987 9.38254 15.3222 9.49337 15.2696 9.6159C15.2169 9.73843 15.1892 9.87021 15.1881 10.0036C15.1869 10.1369 15.2123 10.2692 15.2628 10.3926C15.3133 10.516 15.3879 10.6281 15.4822 10.7224C15.5765 10.8167 15.6886 10.8913 15.8121 10.9418C15.9355 10.9923 16.0677 11.0177 16.2011 11.0166C16.3344 11.0154 16.4662 10.9877 16.5888 10.9351C16.7113 10.8824 16.8221 10.8059 16.9147 10.71L18.4654 9.15934C19.4573 8.14444 20.0091 6.77936 20.0009 5.36026C19.9928 3.94116 19.4254 2.5825 18.422 1.57903C17.4185 0.575558 16.0598 0.00821647 14.6407 8.57056e-05C13.2216 -0.00804506 11.8566 0.543691 10.8417 1.5356L9.29101 3.08626C9.19509 3.1789 9.11858 3.28972 9.06594 3.41225C9.0133 3.53478 8.9856 3.66657 8.98444 3.79992C8.98328 3.93327 9.00869 4.06552 9.05919 4.18895C9.10969 4.31237 9.18426 4.42451 9.27856 4.51881C9.37286 4.6131 9.48499 4.68768 9.60842 4.73817C9.73184 4.78867 9.86409 4.81408 9.99744 4.81292C10.1308 4.81176 10.2626 4.78406 10.3851 4.73142C10.5076 4.67879 10.6185 4.60228 10.7111 4.50636L12.2618 2.9557C12.5752 2.63878 12.9483 2.38695 13.3594 2.21467C13.7705 2.0424 14.2116 1.95309 14.6574 1.95187C15.1031 1.95065 15.5447 2.03755 15.9568 2.20757C16.3688 2.37759 16.7432 2.62738 17.0584 2.94258C17.3736 3.25777 17.6234 3.63216 17.7934 4.04422C17.9635 4.45628 18.0504 4.89788 18.0491 5.34364C18.0479 5.78939 17.9586 6.23051 17.7863 6.64163C17.6141 7.05275 17.3622 7.42577 17.0453 7.73924L15.4946 9.2899ZM4.50639 10.7111C4.60231 10.6184 4.67882 10.5076 4.73145 10.3851C4.78409 10.2626 4.81179 10.1308 4.81295 9.99741C4.81411 9.86406 4.7887 9.73181 4.7382 9.60839C4.68771 9.48496 4.61313 9.37283 4.51883 9.27853C4.42454 9.18423 4.3124 9.10966 4.18898 9.05916C4.06555 9.00866 3.9333 8.98325 3.79995 8.98441C3.6666 8.98557 3.53481 9.01327 3.41228 9.06591C3.28975 9.11854 3.17893 9.19506 3.08629 9.29098L1.53563 10.8416C0.543721 11.8565 -0.00801487 13.2216 0.000115891 14.6407C0.00824665 16.0598 0.575589 17.4185 1.57906 18.4219C2.58253 19.4254 3.94119 19.9928 5.36029 20.0009C6.77939 20.009 8.14447 19.4573 9.15937 18.4654L10.71 16.9147C10.893 16.7253 10.9942 16.4716 10.9919 16.2083C10.9896 15.945 10.884 15.6931 10.6978 15.5069C10.5116 15.3206 10.2597 15.215 9.99636 15.2127C9.73304 15.2104 9.47935 15.3117 9.28993 15.4946L7.73927 17.0453C7.10374 17.6739 6.24522 18.0254 5.35133 18.0229C4.45744 18.0205 3.60086 17.6643 2.96878 17.0322C2.3367 16.4002 1.98051 15.5436 1.97807 14.6497C1.97562 13.7558 2.32711 12.8973 2.95573 12.2617L4.50639 10.7111ZM6.89727 14.1112C6.63096 14.1112 6.37556 14.0055 6.18722 13.8172C6.09324 13.7238 6.01865 13.6128 5.96775 13.4905C5.91686 13.3682 5.89065 13.2371 5.89065 13.1046C5.89065 12.9722 5.91686 12.841 5.96775 12.7187C6.01865 12.5964 6.09324 12.4854 6.18722 12.3921L12.3949 6.18941C12.4875 6.09349 12.5983 6.01698 12.7209 5.96435C12.8434 5.91171 12.9752 5.88401 13.1085 5.88285C13.2419 5.88169 13.3741 5.9071 13.4976 5.9576C13.621 6.00809 13.7331 6.08267 13.8274 6.17697C13.9217 6.27126 13.9963 6.3834 14.0468 6.50682C14.0973 6.63025 14.1227 6.7625 14.1215 6.89585C14.1204 7.0292 14.0927 7.16099 14.04 7.28352C13.9874 7.40605 13.9109 7.51687 13.815 7.60951L7.60732 13.8172C7.41898 14.0055 7.16358 14.1112 6.89727 14.1112Z",
    fill: "currentcolor"
  }));

  // src/blocks/Button/Button.tsx
  var BlockButtonComponent = ({
    data,
    onUpdate
  }) => {
    const intl = useIntl();
    const types2 = [
      intl.formatMessage({ id: "PRIMARY" }),
      intl.formatMessage({ id: "SECONDARY" }),
      intl.formatMessage({ id: "TERTIARY" })
    ];
    const [label, setLabel] = (0, import_react33.useState)("");
    const [type, setType] = (0, import_react33.useState)(data.type);
    const [url, setUrl] = (0, import_react33.useState)("");
    (0, import_react33.useEffect)(() => {
      if (data.url) {
        setUrl(data.url);
      }
      if (data.label) {
        setLabel(data.label);
      }
    }, [data]);
    const onChangeLabel = (e2) => {
      setLabel(e2.target.value);
    };
    const onBlurLabel = (e2) => {
      if (e2.target.value) {
        onUpdate({ ...data, label: e2.target.value });
      }
    };
    const onChangeUrl = (e2) => {
      setUrl(e2.target.value);
    };
    const onBlurUrl = (e2) => {
      if (e2.target.value) {
        onUpdate({ ...data, url: e2.target.value });
      }
    };
    const onChangeType = (e2) => {
      setType(e2.target.value);
      onUpdate({ ...data, type: e2.target.value });
    };
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockButton"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlockButton__Config"
    }, /* @__PURE__ */ React.createElement(Input_default, {
      type: "text",
      id: "BlockButton-field-text",
      placeholder: intl.formatMessage({ id: "BlockButton__TEXT_PLACEHOLDER" }),
      value: label,
      onChange: onChangeLabel,
      onBlur: onBlurLabel,
      label: intl.formatMessage({ id: "BlockButton__TEXT" })
    }), /* @__PURE__ */ React.createElement(Select_default, {
      id: "BlockButton-field-type",
      onChange: onChangeType,
      value: type,
      label: intl.formatMessage({ id: "BlockButton__TYPE" })
    }, types2.map((type2, index2) => /* @__PURE__ */ React.createElement("option", {
      key: index2,
      value: type2
    }, type2)))), /* @__PURE__ */ React.createElement(Input_default, {
      type: "text",
      id: "BlockButton-field-url",
      placeholder: intl.formatMessage({ id: "BlockButton__URL_PLACEHOLDER" }),
      value: url,
      icon: /* @__PURE__ */ React.createElement(SvgLink, null),
      iconAlignment: "left",
      onChange: onChangeUrl,
      onBlur: onBlurUrl,
      label: intl.formatMessage({ id: "BlockButton__URL" })
    }));
  };
  var initialData2 = {
    label: "",
    url: "",
    type: "primary"
  };
  var moduleType3 = {
    id: "blockButton"
  };
  var blockButton = {
    type: moduleType3,
    component: BlockButtonComponent,
    initialData: initialData2,
    title: {
      default: "Button",
      fr: "Bouton",
      en: "Button",
      es: "Bot\xF3n",
      it: "Bottone"
    },
    icon: SvgButton,
    description: {
      default: "Link to an URL",
      fr: "Lien vers une URL",
      en: "Link to an URL",
      es: "Enlace a una URL",
      it: "Link a un URL"
    }
  };
  var Button_default = blockButton;

  // src/blocks/Product/Product.tsx
  var import_react34 = __toESM(require_react(), 1);

  // assets/svg/xmark.svg
  var React25 = __toESM(require_react(), 1);
  var SvgXmark = (props) => /* @__PURE__ */ React25.createElement("svg", {
    width: 19,
    height: 18,
    viewBox: "0 0 19 18",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React25.createElement("path", {
    d: "M17.5913 15.0762L10.9713 8.67623L17.6013 2.27623C17.728 2.15573 17.829 2.0107 17.898 1.84996C17.9669 1.68923 18.0025 1.51614 18.0025 1.34123C18.0025 1.16632 17.9669 0.993238 17.898 0.832502C17.829 0.671767 17.728 0.526739 17.6013 0.406233C17.3305 0.151704 16.9729 0.00999999 16.6013 0.00999999C16.2296 0.00999999 15.872 0.151704 15.6013 0.406233L9.00125 6.77623L2.40125 0.396233C2.13049 0.141704 1.77286 0 1.40125 0C1.02964 0 0.672011 0.141704 0.401251 0.396233C0.275468 0.518481 0.17531 0.664572 0.10663 0.825969C0.0379507 0.987366 0.00212641 1.16083 0.00125089 1.33623C0.000992191 1.51181 0.0363014 1.68561 0.105048 1.84717C0.173796 2.00873 0.274556 2.15468 0.401251 2.27623L7.03125 8.67623L0.401251 15.0762C0.274474 15.1967 0.173528 15.3418 0.104549 15.5025C0.0355706 15.6632 0 15.8363 0 16.0112C0 16.1861 0.0355706 16.3592 0.104549 16.52C0.173528 16.6807 0.274474 16.8257 0.401251 16.9462C0.675245 17.1943 1.03165 17.3317 1.40125 17.3317C1.77085 17.3317 2.12726 17.1943 2.40125 16.9462L9.00125 10.5762L15.6013 16.9462C15.8731 17.1986 16.2303 17.3388 16.6013 17.3388C16.9722 17.3388 17.3294 17.1986 17.6013 16.9462C17.7307 16.8273 17.834 16.6828 17.9046 16.5218C17.9753 16.3609 18.0118 16.187 18.0118 16.0112C18.0118 15.8355 17.9753 15.6616 17.9046 15.5007C17.834 15.3397 17.7307 15.1952 17.6013 15.0762H17.5913Z",
    fill: "currentcolor"
  }));

  // src/blocks/Product/assets/product.svg
  var React26 = __toESM(require_react(), 1);
  var SvgProduct = (props) => /* @__PURE__ */ React26.createElement("svg", {
    width: 24,
    height: 25,
    viewBox: "0 0 24 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React26.createElement("path", {
    d: "M23.1203 19.6913V5.12125C23.1208 5.01464 23.0898 4.91027 23.031 4.82129C22.9723 4.73232 22.8886 4.66271 22.7903 4.62125L11.7603 0.0112518C11.6944 -0.00279117 11.6263 -0.00279117 11.5603 0.0112518C11.4945 -0.00375059 11.4262 -0.00375059 11.3603 0.0112518L0.330342 4.62125C0.23049 4.66039 0.145181 4.72944 0.0861036 4.81895C0.0270265 4.90847 -0.0029286 5.01405 0.000342419 5.12125V19.6913C-0.00356197 19.7998 0.0260012 19.907 0.0850279 19.9982C0.144055 20.0894 0.229693 20.1603 0.330342 20.2013L11.3303 24.8013C11.4402 24.841 11.5605 24.841 11.6703 24.8013L11.8503 24.7413L22.7903 20.2213C22.8926 20.1768 22.9789 20.1023 23.0378 20.0076C23.0968 19.913 23.1255 19.8026 23.1203 19.6913ZM11.5603 1.10125H11.6503L14.9003 2.46125L5.48034 6.67125L1.85034 5.15125L11.5603 1.10125ZM11.0303 23.4913L1.03034 19.3313V6.00125L5.03034 7.67125V11.9713C5.01987 12.0476 5.02589 12.1254 5.04798 12.1993C5.07007 12.2731 5.10772 12.3414 5.15841 12.3995C5.2091 12.4576 5.27164 12.5042 5.34183 12.5361C5.41202 12.5681 5.48824 12.5846 5.56534 12.5846C5.64245 12.5846 5.71866 12.5681 5.78885 12.5361C5.85905 12.5042 5.92159 12.4576 5.97228 12.3995C6.02296 12.3414 6.06062 12.2731 6.08271 12.1993C6.1048 12.1254 6.11081 12.0476 6.10034 11.9713V8.11125L11.0003 10.1113L11.0303 23.4913ZM11.5603 9.22125H11.4603L6.86034 7.22125L16.2703 3.05125H16.3703L21.2603 5.05125L20.7103 5.28125L11.5603 9.22125ZM22.0603 19.3413L21.9003 19.4013L12.1203 23.4913V10.1613L12.2703 10.1013L22.0903 6.00125L22.0603 19.3413Z",
    fill: "#333333"
  }));

  // src/blocks/Product/Product.tsx
  var Product = ({
    productId,
    productIndex,
    data,
    onUpdate
  }) => {
    const { data: product } = useProductsBy({ type: "ids", value: productId });
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockProduct__Product"
    }, product?.[0]?.images.length > 0 ? /* @__PURE__ */ React.createElement("img", {
      className: "Product__Image",
      src: product?.[0]?.images[0].url,
      loading: "lazy",
      alt: "product image"
    }) : /* @__PURE__ */ React.createElement("img", {
      className: "Product__Image",
      src: "https://via.placeholder.com/150",
      loading: "lazy",
      alt: "product image"
    }), /* @__PURE__ */ React.createElement("div", {
      className: "Product__Infos"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "Product__Infos__Title"
    }, product?.[0]?.i18n.title), /* @__PURE__ */ React.createElement("div", {
      className: "Product__Infos__Ref"
    }, "#", product?.[0]?.reference)), /* @__PURE__ */ React.createElement("div", {
      className: "Product__Actions"
    }, /* @__PURE__ */ React.createElement("button", {
      disabled: productIndex === 0,
      onClick: () => onUpdate({
        ...data,
        productList: [...reorder(data.productList, productIndex, productIndex - 1)]
      })
    }, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-arrow-up"
    })), /* @__PURE__ */ React.createElement("button", {
      disabled: productIndex === data.productList.length - 1,
      onClick: () => onUpdate({
        ...data,
        productList: [...reorder(data.productList, productIndex, productIndex + 1)]
      })
    }, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-arrow-down"
    }))), /* @__PURE__ */ React.createElement("a", {
      target: "_blank",
      rel: "noopener noreferrer",
      href: product?.[0]?.url,
      className: "Product__Link"
    }, /* @__PURE__ */ React.createElement("span", {
      className: "Product__Link__Label"
    }, intl.formatMessage({ id: "PRODUCT_SHEET" })), /* @__PURE__ */ React.createElement("i", {
      className: "Product__Link__Icon fa fa-arrow-right"
    })), /* @__PURE__ */ React.createElement("button", {
      className: "Product__Delete",
      onClick: () => onUpdate({
        ...data,
        productList: data.productList.filter((id) => id != product?.[0]?.id)
      })
    }, /* @__PURE__ */ React.createElement(SvgXmark, null)));
  };
  var ProductsList = ({
    currentProductList,
    type,
    value,
    onUpdate
  }) => {
    const { data: products } = useProductsBy({ type, value });
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("ul", {
      className: "ProductList"
    }, products?.length > 0 ? /* @__PURE__ */ React.createElement(React.Fragment, null, products?.filter((product) => !currentProductList.includes(product.id)).map((product) => /* @__PURE__ */ React.createElement("li", {
      key: product.id,
      onClick: () => {
        onUpdate(product);
      },
      className: "ProductList__Item"
    }, /* @__PURE__ */ React.createElement("span", null, product.i18n.title), /* @__PURE__ */ React.createElement("span", {
      className: "ProductList__Item__Ref"
    }, "#", product.reference)))) : value && value.length > 1 ? /* @__PURE__ */ React.createElement("li", {
      className: "ProductList__NoResults"
    }, /* @__PURE__ */ React.createElement("span", null, intl.formatMessage({ id: "NO_RESULTS" }), " ", value && value.length > 0 ? /* @__PURE__ */ React.createElement("span", null, intl.formatMessage({ id: "FOR" }), ' "', /* @__PURE__ */ React.createElement("span", {
      className: "emphasize"
    }, value), '"') : "")) : null);
  };
  function BlockProductComponent({ data, onUpdate }) {
    const [searchByRef, setSearchByRef] = (0, import_react34.useState)(false);
    const [query, setQuery] = (0, import_react34.useState)("");
    const intl = useIntl();
    (0, import_react34.useEffect)(() => {
      query.startsWith("#") ? setSearchByRef(true) : setSearchByRef(false);
    }, [query]);
    const type = searchByRef ? "reference" : "title";
    const value = searchByRef ? query.substring(1) : query;
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockProduct"
    }, data.productList.map((productId, index2) => {
      return /* @__PURE__ */ React.createElement(import_react34.Suspense, {
        key: index2,
        fallback: /* @__PURE__ */ React.createElement("div", {
          className: "BlockProduct__Product__Loader"
        }, /* @__PURE__ */ React.createElement("i", {
          className: "Loader fa fa-circle-notch fa-spin"
        }))
      }, /* @__PURE__ */ React.createElement(Product, {
        productIndex: index2,
        productId,
        data,
        onUpdate
      }));
    }), /* @__PURE__ */ React.createElement("div", {
      className: "BlockProduct__Content"
    }, /* @__PURE__ */ React.createElement("span", {
      className: "BlockProduct__Content__Title"
    }, intl.formatMessage({ id: "BlockProduct__ADD_PRODUCT" })), /* @__PURE__ */ React.createElement("div", {
      className: "BlockProduct__Content__Search"
    }, /* @__PURE__ */ React.createElement(Input_default, {
      onChange: (e2) => setQuery(e2.target.value),
      value: query,
      placeholder: intl.formatMessage({ id: "SEARCH_BY" }),
      info: intl.formatMessage({ id: "SEARCH_BY_INFO" }),
      id: "BlockProduct-field-product",
      type: "text",
      emphasize: searchByRef,
      icon: /* @__PURE__ */ React.createElement("i", {
        className: "fa fa-search emphasize"
      }),
      iconAlignment: "right",
      label: intl.formatMessage({ id: "SEARCH" })
    }), /* @__PURE__ */ React.createElement(import_react34.Suspense, {
      fallback: /* @__PURE__ */ React.createElement("div", {
        className: "BlockProduct__Loader"
      }, /* @__PURE__ */ React.createElement("i", {
        className: "fa fa-circle-notch fa-spin"
      }))
    }, /* @__PURE__ */ React.createElement(ProductsList, {
      currentProductList: data.productList,
      searchIn: "product",
      type,
      value,
      onUpdate: (product) => {
        onUpdate({
          ...data,
          productList: [...data.productList, product.id]
        });
        setQuery("");
      }
    })))));
  }
  var initialData3 = {
    productList: []
  };
  var moduleType4 = {
    id: "blockProduct"
  };
  var blockProduct = {
    type: moduleType4,
    component: BlockProductComponent,
    initialData: initialData3,
    title: {
      default: "Product",
      fr: "Produit",
      en: "Product",
      es: "Producto",
      it: "Prodotto"
    },
    icon: SvgProduct,
    description: {
      default: "Display a product",
      fr: "Affiche un produit",
      en: "Display a product",
      es: "Mostrar un producto",
      it: "Mostra un prodotto"
    },
    image: {
      default: "https://source.unsplash.com/featured/300x250?nature&blockProduct"
    }
  };
  var Product_default = blockProduct;

  // src/blocks/Raw/Raw.tsx
  var import_react_modal = __toESM(require_lib(), 1);

  // src/blocks/Raw/assets/html.svg
  var React27 = __toESM(require_react(), 1);
  var SvgHtml = (props) => /* @__PURE__ */ React27.createElement("svg", {
    width: 21,
    height: 21,
    viewBox: "0 0 21 21",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React27.createElement("path", {
    d: "M18.95 2.85741e-05H1.76C1.52934 -0.00128947 1.30071 0.0430028 1.08723 0.130358C0.873755 0.217714 0.679654 0.346409 0.51609 0.509043C0.352527 0.671677 0.222729 0.865041 0.134159 1.07801C0.0455887 1.29099 -3.76563e-06 1.51937 2.33271e-10 1.75003V18.92C-3.76563e-06 19.1507 0.0455887 19.3791 0.134159 19.592C0.222729 19.805 0.352527 19.9984 0.51609 20.161C0.679654 20.3236 0.873755 20.4523 1.08723 20.5397C1.30071 20.6271 1.52934 20.6713 1.76 20.67H18.95C19.4124 20.6674 19.8549 20.4818 20.181 20.1539C20.507 19.826 20.69 19.3824 20.69 18.92V1.75003C20.69 1.28763 20.507 0.844017 20.181 0.516114C19.8549 0.188211 19.4124 0.00267087 18.95 2.85741e-05ZM19.69 18.92C19.6874 19.1013 19.6135 19.2742 19.4844 19.4015C19.3553 19.5287 19.1813 19.6 19 19.6H1.76C1.57965 19.6 1.40669 19.5284 1.27917 19.4009C1.15164 19.2733 1.08 19.1004 1.08 18.92V5.92003H19.69V18.92ZM19.69 4.92003H1.08V1.75003C1.08 1.56968 1.15164 1.39672 1.27917 1.2692C1.40669 1.14167 1.57965 1.07003 1.76 1.07003H18.95C19.1313 1.07001 19.3053 1.14133 19.4344 1.26858C19.5635 1.39582 19.6374 1.56877 19.64 1.75003L19.69 4.92003Z",
    fill: "#333333"
  }), /* @__PURE__ */ React27.createElement("path", {
    d: "M6.31094 15.6204C6.41206 15.7209 6.54832 15.7783 6.69094 15.7804C6.79721 15.7796 6.9009 15.7476 6.98903 15.6882C7.07716 15.6288 7.14581 15.5447 7.18638 15.4465C7.22695 15.3483 7.23764 15.2403 7.21711 15.136C7.19657 15.0317 7.14572 14.9359 7.07094 14.8604L5.01094 12.8004L7.07094 10.7304C7.12174 10.681 7.16212 10.6219 7.1897 10.5566C7.21727 10.4913 7.23148 10.4212 7.23148 10.3504C7.23148 10.2795 7.21727 10.2094 7.1897 10.1441C7.16212 10.0788 7.12174 10.0197 7.07094 9.97035C6.9688 9.87252 6.83236 9.81866 6.69094 9.82035C6.54971 9.81971 6.41365 9.87342 6.31094 9.97035L3.87094 12.4204C3.82023 12.4698 3.77995 12.5289 3.75247 12.5942C3.72499 12.6594 3.71087 12.7295 3.71094 12.8004C3.71164 12.8696 3.72615 12.938 3.75362 13.0015C3.7811 13.065 3.82098 13.1224 3.87094 13.1704L6.31094 15.6204Z",
    fill: "#333333"
  }), /* @__PURE__ */ React27.createElement("path", {
    d: "M15.6892 12.8H15.6392L13.6392 14.8C13.5436 14.9034 13.4905 15.0391 13.4905 15.18C13.4905 15.3208 13.5436 15.4565 13.6392 15.56C13.7414 15.6588 13.877 15.7159 14.0192 15.72C14.09 15.72 14.1601 15.7059 14.2254 15.6784C14.2906 15.651 14.3497 15.6107 14.3992 15.56L16.8492 13.11C16.8978 13.0616 16.9361 13.0038 16.9619 12.9403C16.9877 12.8767 17.0003 12.8086 16.9992 12.74C17.0011 12.6698 16.9888 12.5999 16.963 12.5346C16.9373 12.4693 16.8985 12.4099 16.8492 12.36L14.3992 9.90997C14.3492 9.8606 14.2898 9.82186 14.2245 9.79609C14.1592 9.77031 14.0894 9.75802 14.0192 9.75997C13.9128 9.75783 13.8083 9.78775 13.7191 9.84583C13.63 9.90391 13.5604 9.98747 13.5194 10.0856C13.4785 10.1838 13.468 10.292 13.4893 10.3962C13.5107 10.5005 13.5629 10.5958 13.6392 10.67L15.6892 12.8Z",
    fill: "#333333"
  }), /* @__PURE__ */ React27.createElement("path", {
    d: "M8.95914 16.9703C9.09442 17.0147 9.24176 17.0039 9.36911 16.9402C9.49647 16.8765 9.59351 16.7651 9.63914 16.6303L12.0891 9.30026C12.1336 9.16498 12.1228 9.01764 12.0591 8.89028C11.9954 8.76293 11.884 8.66588 11.7491 8.62026H11.5791C11.4654 8.61762 11.3538 8.65238 11.2617 8.71922C11.1696 8.78605 11.1019 8.88127 11.0691 8.99026L8.62914 16.3203C8.60191 16.3852 8.58789 16.4549 8.58789 16.5253C8.58789 16.5957 8.60191 16.6653 8.62914 16.7303C8.70644 16.8476 8.8237 16.9329 8.95914 16.9703Z",
    fill: "#333333"
  }), /* @__PURE__ */ React27.createElement("path", {
    d: "M4.24933 2.43957H3.02933C2.95294 2.4291 2.87519 2.43511 2.80132 2.4572C2.72744 2.4793 2.65915 2.51695 2.60104 2.56764C2.54294 2.61832 2.49636 2.68087 2.46445 2.75106C2.43253 2.82125 2.41602 2.89746 2.41602 2.97457C2.41602 3.05168 2.43253 3.12789 2.46445 3.19808C2.49636 3.26827 2.54294 3.33082 2.60104 3.3815C2.65915 3.43219 2.72744 3.46985 2.80132 3.49194C2.87519 3.51403 2.95294 3.52004 3.02933 3.50957H4.24933C4.37864 3.49185 4.49715 3.4279 4.58295 3.32954C4.66875 3.23119 4.71601 3.10509 4.71601 2.97457C4.71601 2.84405 4.66875 2.71795 4.58295 2.6196C4.49715 2.52124 4.37864 2.45729 4.24933 2.43957Z",
    fill: "#333333"
  }), /* @__PURE__ */ React27.createElement("path", {
    d: "M7.90934 2.43957H6.68934C6.56003 2.45729 6.44152 2.52124 6.35572 2.6196C6.26993 2.71795 6.22266 2.84405 6.22266 2.97457C6.22266 3.10509 6.26993 3.23119 6.35572 3.32954C6.44152 3.4279 6.56003 3.49185 6.68934 3.50957H7.90934C7.98574 3.52004 8.06348 3.51403 8.13736 3.49194C8.21123 3.46985 8.27952 3.43219 8.33763 3.3815C8.39573 3.33082 8.44231 3.26827 8.47423 3.19808C8.50614 3.12789 8.52266 3.05168 8.52266 2.97457C8.52266 2.89746 8.50614 2.82125 8.47423 2.75106C8.44231 2.68087 8.39573 2.61832 8.33763 2.56764C8.27952 2.51695 8.21123 2.4793 8.13736 2.4572C8.06348 2.43511 7.98574 2.4291 7.90934 2.43957Z",
    fill: "#333333"
  }), /* @__PURE__ */ React27.createElement("path", {
    d: "M11.5794 2.43957H10.3594C10.283 2.4291 10.2053 2.43511 10.1314 2.4572C10.0575 2.4793 9.98923 2.51695 9.93112 2.56764C9.87302 2.61832 9.82644 2.68087 9.79452 2.75106C9.76261 2.82125 9.74609 2.89746 9.74609 2.97457C9.74609 3.05168 9.76261 3.12789 9.79452 3.19808C9.82644 3.26827 9.87302 3.33082 9.93112 3.3815C9.98923 3.43219 10.0575 3.46985 10.1314 3.49194C10.2053 3.51403 10.283 3.52004 10.3594 3.50957H11.5794C11.6558 3.52004 11.7336 3.51403 11.8074 3.49194C11.8813 3.46985 11.9496 3.43219 12.0077 3.3815C12.0658 3.33082 12.1124 3.26827 12.1443 3.19808C12.1762 3.12789 12.1927 3.05168 12.1927 2.97457C12.1927 2.89746 12.1762 2.82125 12.1443 2.75106C12.1124 2.68087 12.0658 2.61832 12.0077 2.56764C11.9496 2.51695 11.8813 2.4793 11.8074 2.4572C11.7336 2.43511 11.6558 2.4291 11.5794 2.43957Z",
    fill: "#333333"
  }));

  // assets/svg/html-warning.svg
  var React28 = __toESM(require_react(), 1);
  var SvgHtmlWarning = (props) => /* @__PURE__ */ React28.createElement("svg", {
    width: 138,
    height: 242,
    viewBox: "0 0 138 242",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React28.createElement("g", {
    clipPath: "url(#clip0_996_115142)"
  }, /* @__PURE__ */ React28.createElement("path", {
    d: "M92.0639 184.83C92.0639 184.83 88.7709 208.897 91.4621 213.835C94.1533 218.776 114.172 181.333 114.172 181.333L103.684 173.26L92.0678 184.83H92.0639Z",
    fill: "url(#paint0_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M105.16 174.371L108.564 176.905L90.8374 196.809C90.8374 196.809 91.3128 190.162 91.5888 188.341L105.16 174.375V174.371Z",
    fill: "url(#paint1_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M50.7222 51.6844C47.5595 44.6574 40.4328 47.3179 40.4328 47.3179C40.4328 47.3179 36.3654 41.5944 34.1304 42.7406C31.8954 43.883 33.885 47.1838 33.885 47.1838C30.0974 44.7878 25.3744 43.0013 24.3815 44.4581C23.8218 45.2823 24.1132 46.1525 24.4774 46.7544C23.0589 46.4094 21.8322 46.5397 21.3491 47.8815C20.3371 50.703 24.4544 51.3202 26.7239 51.4467C22.204 51.4314 21.4258 52.3016 21.6137 53.9769C21.8207 55.8132 25.5738 56.4074 28.1845 56.7448C30.7951 57.0821 36.8676 58.0635 36.8676 58.0635L39.6278 67.2987L55.0388 63.2312C55.0388 63.2312 53.8849 58.7152 50.7222 51.6844Z",
    fill: "url(#paint2_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M47.1456 222.651C47.1456 222.651 23.5191 228.287 19.8848 232.584C16.2544 236.882 58.401 242 58.401 242L62.135 229.299L47.1456 222.655V222.651Z",
    fill: "url(#paint3_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M72.2594 100.524C72.2594 100.524 53.1642 118.795 47.7972 124.128C46.9231 124.994 46.003 126.213 45.0906 127.601C40.0916 135.219 40.5517 145.22 46.2292 152.343C46.3941 152.55 46.5359 152.723 46.6548 152.853L85.999 195.126L107.494 171.795L86.6661 151.408L80.2486 143.948L96.2386 129.391L107.31 120.133L72.2594 100.524Z",
    fill: "url(#paint4_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M115.272 109.212L85.1173 94.7666L73.7085 123.277L35.9092 221.298L69.4992 234.651C69.4992 234.651 102.441 158.017 112.673 132.792C116.53 123.289 116.929 115.434 115.276 109.212H115.272Z",
    fill: "url(#paint5_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M6.73181 68.4987C6.73181 70.358 5.2252 71.8646 3.3659 71.8646C1.50661 71.8646 0 70.358 0 68.4987C0 66.6394 1.50661 65.1328 3.3659 65.1328C5.2252 65.1328 6.73181 66.6394 6.73181 68.4987Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M31.1136 165.976C31.1136 167.836 29.607 169.342 27.7477 169.342C25.8884 169.342 24.3818 167.836 24.3818 165.976C24.3818 164.117 25.8884 162.61 27.7477 162.61C29.607 162.61 31.1136 164.117 31.1136 165.976Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M137.266 148.678C137.266 150.538 135.759 152.044 133.9 152.044C132.041 152.044 130.534 150.538 130.534 148.678C130.534 146.819 132.041 145.312 133.9 145.312C135.759 145.312 137.266 146.819 137.266 148.678Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M32.1523 64.4545L54.138 56.7413L59.0565 67.0384C59.0565 67.0384 60.3523 51.428 83.0817 49.4652L97.8947 49.2428C97.8947 49.2428 115.92 48.4684 123.469 60.9698C128.314 68.9935 133.781 84.1823 137.262 95.6064C139.466 102.844 131.841 117.995 115.272 109.208L64.2089 107.602V102.112C64.2089 102.112 51.2321 111.32 44.301 100.904C37.3698 90.4885 32.1484 64.4545 32.1484 64.4545H32.1523Z",
    fill: "url(#paint6_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M97.8947 49.2468L83.0817 49.4691C80.9924 49.6493 79.0871 49.9445 77.3428 50.3355C79.0986 53.2452 82.9552 57.3625 90.722 57.3625C98.4889 57.3625 103.354 53.0766 105.915 49.9943C101.372 49.1011 97.8909 49.2506 97.8909 49.2506L97.8947 49.2468Z",
    fill: "url(#paint7_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M82.5603 25.306C82.5603 27.2305 81 28.7908 79.0756 28.7908C77.1511 28.7908 75.5908 27.2305 75.5908 25.306C75.5908 23.3816 77.1511 21.8213 79.0756 21.8213C81 21.8213 82.5603 23.3816 82.5603 25.306Z",
    fill: "url(#paint8_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M103.224 25.2562C105.175 32.1605 101.161 39.337 94.2608 41.2921C87.3565 43.2434 80.18 39.2335 78.2249 32.3292C76.2736 25.4249 80.2835 18.2484 87.1878 16.2932C94.0921 14.3419 101.269 18.3519 103.224 25.2562Z",
    fill: "url(#paint9_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M98.121 51.0637L97.3466 39.973C92.5431 38.7885 92.3399 32.4132 92.3399 32.4132C92.3399 32.4132 88.284 30.0057 88.974 22.1736L81.4947 20.6172C81.4947 20.6172 78.3664 23.1934 77.9946 25.6775C77.8297 26.7855 77.6611 28.1004 77.5154 29.6262C76.9135 35.8826 75.1155 43.7875 83.1201 44.7535L83.1048 50.5615C83.1048 50.5615 83.8715 52.4936 89.7944 52.9766C95.7135 53.4597 98.1248 51.0713 98.1248 51.0713L98.121 51.0637Z",
    fill: "url(#paint10_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M101.82 19.0603C101.617 19.0603 101.418 19.0794 101.222 19.1063C101.445 18.4967 101.571 17.8374 101.571 17.1511C101.571 13.9731 98.995 11.3931 95.8132 11.3931C94.318 11.3931 92.9571 11.9681 91.9335 12.9035C91.2435 11.4199 89.7484 10.3887 88.0041 10.3887C85.9301 10.3887 84.2012 11.8454 83.7756 13.7891C83.0664 13.4747 82.2844 13.2984 81.4563 13.2984C78.2783 13.2984 75.6982 15.8746 75.6982 19.0564C75.6982 22.2383 78.2744 24.8145 81.4563 24.8145C82.7482 24.8145 83.9367 24.3852 84.8951 23.6683C85.3743 25.5391 87.0687 26.923 89.089 26.923C91.4812 26.923 93.421 24.9832 93.421 22.591C93.421 22.5182 93.4133 22.4492 93.4095 22.3802C94.1417 22.7175 94.9544 22.9092 95.8132 22.9092C96.4227 22.9092 97.0054 22.8134 97.5574 22.637C97.5153 22.8824 97.4884 23.1354 97.4884 23.3923C97.4884 25.7844 99.4282 27.7242 101.82 27.7242C104.213 27.7242 106.152 25.7844 106.152 23.3923C106.152 21.0001 104.213 19.0603 101.82 19.0603Z",
    fill: "url(#paint11_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M12.0721 0H47.4946C50.4427 0 52.8348 2.39217 52.8348 5.34021V29.2197C52.8348 32.1678 50.4427 34.5599 47.4946 34.5599H12.0721C9.1241 34.5599 6.73193 32.1678 6.73193 29.2197V5.34021C6.73193 2.39217 9.1241 0 12.0721 0Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M19.3254 23.5882C19.2104 23.5882 19.0954 23.5422 19.0072 23.4541L13.9047 18.3515C13.7284 18.1752 13.7284 17.8877 13.9047 17.7113L19.3178 12.2983C19.4941 12.1219 19.7816 12.1219 19.958 12.2983C20.1343 12.4746 20.1343 12.7621 19.958 12.9385L14.8631 18.0333L19.6475 22.8177C19.8238 22.994 19.8238 23.2815 19.6475 23.4579C19.5593 23.5461 19.4443 23.5921 19.3293 23.5921L19.3254 23.5882Z",
    fill: "url(#paint12_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M39.9348 23.5882C39.8198 23.5882 39.7048 23.5422 39.6166 23.454C39.4403 23.2776 39.4403 22.9901 39.6166 22.8138L44.7115 17.7189L39.9272 12.9346C39.7508 12.7582 39.7508 12.4707 39.9272 12.2944C40.1035 12.118 40.391 12.118 40.5674 12.2944L45.6699 17.3969C45.7542 17.4812 45.8041 17.5962 45.8041 17.7151C45.8041 17.8339 45.7581 17.9489 45.6699 18.0333L40.2568 23.4463C40.1687 23.5345 40.0537 23.5805 39.9387 23.5805L39.9348 23.5882Z",
    fill: "url(#paint13_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M26.0455 26.1565C25.988 26.1565 25.9267 26.145 25.8692 26.1182C25.6392 26.0185 25.5318 25.754 25.6315 25.524L33.107 8.05425C33.2067 7.82423 33.4712 7.71689 33.7012 7.81656C33.9313 7.91624 34.0386 8.18076 33.9389 8.41077L26.4634 25.8805C26.3906 26.053 26.2219 26.1565 26.0494 26.1565H26.0455Z",
    fill: "url(#paint14_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M101.82 19.0603C101.617 19.0603 101.418 19.0794 101.222 19.1063C101.445 18.4967 101.571 17.8374 101.571 17.1511C101.571 13.9731 98.995 11.3931 95.8132 11.3931C94.318 11.3931 92.9571 11.9681 91.9335 12.9035C91.2435 11.4199 89.7484 10.3887 88.0041 10.3887C85.9301 10.3887 84.2012 11.8454 83.7756 13.7891C83.0664 13.4747 82.2844 13.2984 81.4563 13.2984C78.2783 13.2984 75.6982 15.8746 75.6982 19.0564C75.6982 22.2383 78.2744 24.8145 81.4563 24.8145C82.7482 24.8145 83.9367 24.3852 84.8951 23.6683C85.3743 25.5391 87.0687 26.923 89.089 26.923C91.4812 26.923 93.421 24.9832 93.421 22.591C93.421 22.5182 93.4133 22.4492 93.4095 22.3802C94.1417 22.7175 94.9544 22.9092 95.8132 22.9092C96.4227 22.9092 97.0054 22.8134 97.5574 22.637C97.5153 22.8824 97.4884 23.1354 97.4884 23.3923C97.4884 25.7844 99.4282 27.7242 101.82 27.7242C104.213 27.7242 106.152 25.7844 106.152 23.3923C106.152 21.0001 104.213 19.0603 101.82 19.0603Z",
    fill: "url(#paint15_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M86.283 68.5488H49.6453C46.9055 68.5488 44.6846 70.7698 44.6846 73.5095V95.7291C44.6846 98.4688 46.9055 100.69 49.6453 100.69H86.283C89.0227 100.69 91.2437 98.4688 91.2437 95.7291V73.5095C91.2437 70.7698 89.0227 68.5488 86.283 68.5488Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M101.403 80.2217C101.403 80.2217 97.4847 75.5178 91.236 74.0879V78.9144C91.236 79.5891 90.6226 80.1028 89.9594 79.984C88.0464 79.6428 84.4888 79.0064 82.8787 78.7036C80.6169 78.278 78.7346 78.2397 78.4317 79.7463C78.1864 80.9769 79.2329 81.7551 82.3458 82.5563C82.3458 82.5563 78.0407 81.5404 77.5155 83.8367C76.9864 86.1331 81.9586 86.85 81.9586 86.85C81.9586 86.85 78.1787 86.4934 77.918 87.9809C77.665 89.4338 78.4739 90.327 82.457 91.2126C82.1426 91.2126 81.7669 91.3813 81.7133 92.1748C81.5753 94.2565 89.9402 94.7472 91.2973 94.774C92.6544 94.797 96.4535 95.0999 96.4535 95.0999L100.743 97.1317L106.739 82.0426L101.403 80.2293V80.2217Z",
    fill: "url(#paint16_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M106.739 82.0351L100.743 97.1241C100.743 97.1241 114.51 113.62 126.432 111.719C138.355 109.821 138.04 96.8405 137.933 96.4188C137.826 95.9971 135.085 88.6097 135.085 88.6097L106.739 82.0312V82.0351Z",
    fill: "url(#paint17_linear_996_115142)"
  }), /* @__PURE__ */ React28.createElement("path", {
    d: "M61.5026 231.473L42.3422 223.855L37.7266 225.147L60.4905 234.881L61.5026 231.473Z",
    fill: "url(#paint18_linear_996_115142)"
  })), /* @__PURE__ */ React28.createElement("defs", null, /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint0_linear_996_115142",
    x1: 112.451,
    y1: 179.612,
    x2: 84.8146,
    y2: 207.248,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#14336D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint1_linear_996_115142",
    x1: 90.8374,
    y1: 185.588,
    x2: 108.564,
    y2: 185.588,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#FFAA9D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#FF9F91"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint2_linear_996_115142",
    x1: 21.192,
    y1: 54.943,
    x2: 55.0388,
    y2: 54.943,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#FFAA9D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#FF9F91"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint3_linear_996_115142",
    x1: 54.6326,
    y1: 221.793,
    x2: 31.309,
    y2: 245.116,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#14336D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint4_linear_996_115142",
    x1: 55.4759,
    y1: 116.449,
    x2: 110.074,
    y2: 171.051,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.16,
    stopColor: "#14336D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint5_linear_996_115142",
    x1: 104.117,
    y1: 214.663,
    x2: 47.4483,
    y2: 116.515,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#14336D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint6_linear_996_115142",
    x1: 32.1523,
    y1: 80.5557,
    x2: 137.634,
    y2: 80.5557,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.34,
    stopColor: "#3162DF"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.96,
    stopColor: "#173DB8"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint7_linear_996_115142",
    x1: 77.3428,
    y1: 53.2989,
    x2: 105.918,
    y2: 53.2989,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#FFAA9D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#FF9F91"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint8_linear_996_115142",
    x1: 75.587,
    y1: 25.306,
    x2: 82.5603,
    y2: 25.306,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#143383"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint9_linear_996_115142",
    x1: 77.7303,
    y1: 28.7946,
    x2: 103.718,
    y2: 28.7946,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#143383"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint10_linear_996_115142",
    x1: 76.9135,
    y1: 36.8257,
    x2: 98.121,
    y2: 36.8257,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#FFAA9D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#FF9F91"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint11_linear_996_115142",
    x1: 75.7021,
    y1: 19.0603,
    x2: 106.156,
    y2: 19.0603,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#143383"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint12_linear_996_115142",
    x1: 13.7667,
    y1: 17.88,
    x2: 20.0845,
    y2: 17.88,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#14336D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint13_linear_996_115142",
    x1: 39.4825,
    y1: 17.8799,
    x2: 45.7964,
    y2: 17.8799,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#14336D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint14_linear_996_115142",
    x1: 25.5932,
    y1: 16.9712,
    x2: 33.9734,
    y2: 16.9712,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#14336D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint15_linear_996_115142",
    x1: 75.7021,
    y1: 19.0603,
    x2: 106.156,
    y2: 19.0603,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#14336D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint16_linear_996_115142",
    x1: 77.4771,
    y1: 85.6079,
    x2: 106.739,
    y2: 85.6079,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#FFAA9D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#FF9F91"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint17_linear_996_115142",
    x1: 103.753,
    y1: 104.335,
    x2: 136.457,
    y2: 86.5702,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#3162DF"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.1,
    stopColor: "#2551CD"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.23,
    stopColor: "#1A42BD"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.33,
    stopColor: "#173DB8"
  })), /* @__PURE__ */ React28.createElement("linearGradient", {
    id: "paint18_linear_996_115142",
    x1: 37.7266,
    y1: 229.368,
    x2: 61.5026,
    y2: 229.368,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React28.createElement("stop", {
    stopColor: "#FFAA9D"
  }), /* @__PURE__ */ React28.createElement("stop", {
    offset: 0.97,
    stopColor: "#FF9F91"
  })), /* @__PURE__ */ React28.createElement("clipPath", {
    id: "clip0_996_115142"
  }, /* @__PURE__ */ React28.createElement("rect", {
    width: 137.96,
    height: 242,
    fill: "white"
  }))));

  // src/blocks/Raw/Raw.tsx
  var import_react35 = __toESM(require_react(), 1);
  var WarningModal = ({
    isOpen,
    setSaveLocation
  }) => {
    const [checked, setChecked] = (0, import_react35.useState)(false);
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement(import_react_modal.default, {
      ariaHideApp: false,
      isOpen,
      onRequestClose: () => setSaveLocation(sessionStorage),
      overlayClassName: "Overlay",
      className: "Modal-htmlWarning"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlockRaw__Modal__Content"
    }, /* @__PURE__ */ React.createElement("button", {
      onClick: () => setSaveLocation(sessionStorage),
      className: "BlockRaw__Modal__Content__Close"
    }, /* @__PURE__ */ React.createElement(SvgXmark, {
      className: "BlockRaw__Modal__Content__Close__Icon"
    })), /* @__PURE__ */ React.createElement(SvgHtmlWarning, {
      className: "BlockRaw__Modal__Content__Image"
    }), /* @__PURE__ */ React.createElement("div", {
      className: "BlockRaw__Modal__Content__Infos"
    }, /* @__PURE__ */ React.createElement("p", {
      className: "BlockRaw__Modal__Content__Description"
    }, intl.formatMessage({ id: "HTMLWarningModal__DESCRIPTION" })), /* @__PURE__ */ React.createElement("div", {
      className: "BlockRaw__Modal__Content__Actions"
    }, /* @__PURE__ */ React.createElement("input", {
      type: "checkbox",
      checked,
      onChange: () => setChecked(!checked),
      name: "display-alert",
      id: "display-alert",
      style: { margin: "0px" }
    }), /* @__PURE__ */ React.createElement("label", {
      className: "BlockRaw__Modal__Content__CBLabel",
      htmlFor: "display-alert"
    }, intl.formatMessage({ id: "DO_NOT_SHOW_AGAIN" }))), /* @__PURE__ */ React.createElement("button", {
      onClick: () => {
        if (checked) {
          setSaveLocation(localStorage);
        } else {
          setSaveLocation(sessionStorage);
        }
      },
      className: "BlockRaw__Modal__Content__Accept"
    }, intl.formatMessage({ id: "I_UNDERSTOOD" })))));
  };
  function BlockRawComponent({ data, onUpdate }) {
    const [value, setValue] = (0, import_react35.useState)(data.value);
    const [isOpen, setIsOpen] = (0, import_react35.useState)(false);
    const intl = useIntl();
    (0, import_react35.useLayoutEffect)(() => {
      if (sessionStorage.getItem("html-alert-status") === "shown") {
        return;
      }
      if (localStorage.getItem("html-alert-status") === "shown") {
        return;
      }
      setIsOpen(true);
    });
    (0, import_react35.useEffect)(() => {
      if (data.value) {
        setValue(data.value);
      }
    }, [data]);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(TextArea_default, {
      value,
      onChange: (e2) => setValue(e2.target.value),
      onBlur: (e2) => onUpdate({ value: e2.target.value }),
      placeholder: intl.formatMessage({ id: "BlockHTML__HTML_PLACEHOLDER" }),
      id: "BlockHTML-HTML-field"
    }), /* @__PURE__ */ React.createElement(WarningModal, {
      isOpen,
      setSaveLocation: (storage) => {
        storage.setItem("html-alert-status", "shown");
        setIsOpen(false);
      }
    }));
  }
  var initialData4 = {
    value: ""
  };
  var moduleType5 = {
    id: "blockRaw"
  };
  var blockRaw = {
    type: moduleType5,
    component: BlockRawComponent,
    initialData: initialData4,
    title: {
      default: "HTML",
      fr: "HTML",
      en: "HTML",
      es: "HTML",
      it: "HTML"
    },
    icon: SvgHtml,
    description: {
      default: "Raw HTML content",
      fr: "Contenu libre HTML",
      en: "Raw HTML content",
      es: "Contenido HTML libre",
      it: "Contenuto HTML libero"
    }
  };
  var Raw_default = blockRaw;

  // src/blocks/Separator/Separator.tsx
  var import_react36 = __toESM(require_react(), 1);

  // src/blocks/Separator/assets/separator.svg
  var React29 = __toESM(require_react(), 1);
  var SvgSeparator = (props) => /* @__PURE__ */ React29.createElement("svg", {
    width: 19,
    height: 21,
    viewBox: "0 0 19 21",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React29.createElement("path", {
    d: "M14.1924 13.45H4.09598C3.57853 13.45 3.06614 13.5519 2.58808 13.7499C2.11001 13.9479 1.67563 14.2382 1.30974 14.6041C0.570782 15.343 0.15564 16.3453 0.15564 17.3903V20.5884C0.189519 20.707 0.261113 20.8114 0.359585 20.8856C0.458057 20.9599 0.578047 21.0001 0.701394 21.0001C0.824741 21.0001 0.94473 20.9599 1.0432 20.8856C1.14167 20.8114 1.21327 20.707 1.24715 20.5884V17.3903C1.24708 17.0187 1.32112 16.6508 1.46495 16.3082C1.60877 15.9656 1.81949 15.6551 2.08477 15.3949C2.35005 15.1347 2.66456 14.93 3.0099 14.7929C3.35524 14.6557 3.72447 14.5888 4.09598 14.596H14.1924C14.9335 14.596 15.6442 14.8904 16.1683 15.4145C16.6923 15.9385 16.9867 16.6492 16.9867 17.3903V20.5884C17.0206 20.707 17.0922 20.8114 17.1906 20.8856C17.2891 20.9599 17.4091 21.0001 17.5324 21.0001C17.6558 21.0001 17.7758 20.9599 17.8743 20.8856C17.9727 20.8114 18.0443 20.707 18.0782 20.5884V17.3903C18.0783 16.3546 17.6707 15.3606 16.9435 14.6232C16.2163 13.8858 15.228 13.4643 14.1924 13.45Z",
    fill: "#333333"
  }), /* @__PURE__ */ React29.createElement("path", {
    d: "M0.723483 11.2237H2.4044C2.52301 11.1898 2.62735 11.1182 2.70163 11.0197C2.77591 10.9213 2.81609 10.8013 2.81609 10.6779C2.81609 10.5546 2.77591 10.4346 2.70163 10.3361C2.62735 10.2377 2.52301 10.1661 2.4044 10.1322H0.723483C0.639013 10.1081 0.550095 10.1039 0.463729 10.1199C0.377364 10.136 0.295908 10.1719 0.225776 10.2248C0.155643 10.2777 0.0987481 10.3462 0.0595699 10.4248C0.0203918 10.5034 0 10.5901 0 10.6779C0 10.7658 0.0203918 10.8524 0.0595699 10.9311C0.0987481 11.0097 0.155643 11.0782 0.225776 11.1311C0.295908 11.184 0.377364 11.2199 0.463729 11.2359C0.550095 11.252 0.639013 11.2478 0.723483 11.2237Z",
    fill: "#333333"
  }), /* @__PURE__ */ React29.createElement("path", {
    d: "M5.77597 10.0885C5.6915 10.0644 5.60259 10.0602 5.51622 10.0762C5.42985 10.0923 5.3484 10.1282 5.27827 10.1811C5.20813 10.234 5.15124 10.3025 5.11206 10.3811C5.07288 10.4597 5.05249 10.5464 5.05249 10.6342C5.05249 10.7221 5.07288 10.8087 5.11206 10.8874C5.15124 10.966 5.20813 11.0345 5.27827 11.0874C5.3484 11.1403 5.42985 11.1762 5.51622 11.1922C5.60259 11.2083 5.6915 11.2041 5.77597 11.18H7.47873C7.59733 11.1461 7.70167 11.0745 7.77595 10.976C7.85023 10.8776 7.89041 10.7576 7.89041 10.6342C7.89041 10.5109 7.85023 10.3909 7.77595 10.2924C7.70167 10.194 7.59733 10.1224 7.47873 10.0885H5.77597Z",
    fill: "#333333"
  }), /* @__PURE__ */ React29.createElement("path", {
    d: "M10.8199 10.0885C10.7354 10.0644 10.6465 10.0602 10.5602 10.0762C10.4738 10.0923 10.3923 10.1282 10.3222 10.1811C10.2521 10.234 10.1952 10.3025 10.156 10.3811C10.1168 10.4597 10.0964 10.5464 10.0964 10.6342C10.0964 10.7221 10.1168 10.8087 10.156 10.8874C10.1952 10.966 10.2521 11.0345 10.3222 11.0874C10.3923 11.1403 10.4738 11.1762 10.5602 11.1922C10.6465 11.2083 10.7354 11.2041 10.8199 11.18H12.5008C12.5853 11.2041 12.6742 11.2083 12.7606 11.1922C12.847 11.1762 12.9284 11.1403 12.9985 11.0874C13.0687 11.0345 13.1256 10.966 13.1648 10.8874C13.2039 10.8087 13.2243 10.7221 13.2243 10.6342C13.2243 10.5464 13.2039 10.4597 13.1648 10.3811C13.1256 10.3025 13.0687 10.234 12.9985 10.1811C12.9284 10.1282 12.847 10.0923 12.7606 10.0762C12.6742 10.0602 12.5853 10.0644 12.5008 10.0885H10.8199Z",
    fill: "#333333"
  }), /* @__PURE__ */ React29.createElement("path", {
    d: "M17.5533 10.0885H15.8724C15.7879 10.0644 15.699 10.0602 15.6127 10.0762C15.5263 10.0923 15.4448 10.1282 15.3747 10.1811C15.3046 10.234 15.2477 10.3025 15.2085 10.3811C15.1693 10.4597 15.1489 10.5464 15.1489 10.6342C15.1489 10.7221 15.1693 10.8087 15.2085 10.8874C15.2477 10.966 15.3046 11.0345 15.3747 11.0874C15.4448 11.1403 15.5263 11.1762 15.6127 11.1922C15.699 11.2083 15.7879 11.2041 15.8724 11.18H17.5533C17.6378 11.2041 17.7267 11.2083 17.8131 11.1922C17.8995 11.1762 17.9809 11.1403 18.051 11.0874C18.1212 11.0345 18.1781 10.966 18.2172 10.8874C18.2564 10.8087 18.2768 10.7221 18.2768 10.6342C18.2768 10.5464 18.2564 10.4597 18.2172 10.3811C18.1781 10.3025 18.1212 10.234 18.051 10.1811C17.9809 10.1282 17.8995 10.0923 17.8131 10.0762C17.7267 10.0602 17.6378 10.0644 17.5533 10.0885Z",
    fill: "#333333"
  }), /* @__PURE__ */ React29.createElement("path", {
    d: "M4.09493 7.86195H14.1914C15.2345 7.85906 16.234 7.44264 16.9706 6.70399C17.7072 5.96535 18.1208 4.96476 18.1208 3.9216V0.723483C18.1449 0.639013 18.1491 0.550095 18.1331 0.463729C18.117 0.377364 18.0811 0.295908 18.0282 0.225776C17.9753 0.155643 17.9068 0.0987481 17.8282 0.0595699C17.7495 0.0203918 17.6629 0 17.5751 0C17.4872 0 17.4006 0.0203918 17.3219 0.0595699C17.2433 0.0987481 17.1748 0.155643 17.1219 0.225776C17.069 0.295908 17.0331 0.377364 17.017 0.463729C17.001 0.550095 17.0052 0.639013 17.0293 0.723483V3.9216C17.0293 4.66369 16.7353 5.37555 16.2115 5.90131C15.6878 6.42707 14.9771 6.72389 14.235 6.72678H4.09493C3.35095 6.72678 2.63744 6.43123 2.11137 5.90516C1.58529 5.37909 1.28975 4.66558 1.28975 3.9216V0.723483C1.25587 0.60488 1.18428 0.500542 1.0858 0.42626C0.987333 0.351979 0.867343 0.311797 0.743996 0.311797C0.620649 0.311797 0.500659 0.351979 0.402188 0.42626C0.303716 0.500542 0.232122 0.60488 0.198242 0.723483V3.9216C0.198179 4.95912 0.607322 5.95481 1.33686 6.69252C2.0664 7.43024 3.05747 7.85045 4.09493 7.86195Z",
    fill: "#333333"
  }));

  // src/blocks/Separator/Separator.tsx
  var initialData5 = {
    type: "space",
    size: 1
  };
  var BlockSeparatorComponent = ({
    data,
    onUpdate
  }) => {
    const [type, setType] = (0, import_react36.useState)(initialData5.type);
    const [size, setSize] = (0, import_react36.useState)(initialData5.size);
    const intl = useIntl();
    const types2 = [
      { label: intl.formatMessage({ id: "SPACE" }), value: "space" },
      { label: intl.formatMessage({ id: "BORDER" }), value: "hr" }
    ];
    (0, import_react36.useEffect)(() => {
      if (data.type) {
        setType(data.type);
      }
      if (data.size) {
        setSize(data.size);
      }
    }, [data]);
    const onChangeType = (e2) => {
      setType(e2.target.value);
      onUpdate({ ...data, type: e2.target.value });
    };
    const onChangeSize = (e2) => {
      setSize(+e2.target.value);
    };
    const onBlurSize = (e2) => {
      if (e2.target.value) {
        onUpdate({ ...data, size: +e2.target.value });
      }
    };
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockSeparator",
      "data-type": type
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlockSeparator__Config"
    }, /* @__PURE__ */ React.createElement(Select_default, {
      id: "BlockSeparator-field-type",
      onChange: onChangeType,
      value: type.toString(),
      label: intl.formatMessage({ id: "BlockSeparator__STYLE" })
    }, types2.map(({ label, value }) => /* @__PURE__ */ React.createElement("option", {
      key: value,
      value
    }, label))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", {
      htmlFor: "separator-size"
    }, intl.formatMessage({ id: "BlockSeparator__SIZE" })), /* @__PURE__ */ React.createElement("input", {
      type: "number",
      name: "separator-size",
      id: "separator-size",
      className: "Input__Number",
      value: size.toString(),
      onChange: onChangeSize,
      onBlur: onBlurSize
    }))), /* @__PURE__ */ React.createElement("div", {
      className: "BlockSeparator__Preview"
    }, type === "hr" ? /* @__PURE__ */ React.createElement("div", {
      className: "BlockSeparator__Preview--element"
    }) : null));
  };
  var moduleType6 = {
    id: "blockSeparator"
  };
  var BlockSeparator = {
    type: moduleType6,
    component: BlockSeparatorComponent,
    initialData: initialData5,
    title: {
      default: "Separator",
      fr: "S\xE9parateur",
      en: "Separator",
      es: "Separador",
      it: "Separatore"
    },
    icon: SvgSeparator,
    description: {
      default: "Display a separator",
      fr: "Affiche un s\xE9parateur",
      en: "Display a separator",
      es: "Muestra un separador",
      it: "Visualizza un separatore"
    },
    image: {
      default: "https://source.unsplash.com/featured/300x250?nature&blockSeparator"
    }
  };
  var Separator_default = BlockSeparator;

  // src/blocks/Text/Text.tsx
  var import_react41 = __toESM(require_react(), 1);

  // src/blocks/Text/assets/text.svg
  var React30 = __toESM(require_react(), 1);
  var SvgText = (props) => /* @__PURE__ */ React30.createElement("svg", {
    width: 15,
    height: 15,
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React30.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M7.92 12.67H9.5C9.70952 12.67 9.91046 12.7532 10.0586 12.9014C10.2068 13.0495 10.29 13.2505 10.29 13.46C10.29 13.6695 10.2068 13.8705 10.0586 14.0186C9.91046 14.1668 9.70952 14.25 9.5 14.25H4.75C4.54048 14.25 4.33954 14.1668 4.19139 14.0186C4.04323 13.8705 3.96 13.6695 3.96 13.46C3.96 13.2505 4.04323 13.0495 4.19139 12.9014C4.33954 12.7532 4.54048 12.67 4.75 12.67H6.33V1.58H1.58V3.17C1.58 3.37952 1.49677 3.58046 1.34861 3.72861C1.20046 3.87677 0.999521 3.96 0.79 3.96C0.580479 3.96 0.379539 3.87677 0.231386 3.72861C0.0832319 3.58046 0 3.37952 0 3.17V0.79C0 0.580479 0.0832319 0.379539 0.231386 0.231386C0.379539 0.0832319 0.580479 0 0.79 0H13.5C13.7095 0 13.9105 0.0832319 14.0586 0.231386C14.2068 0.379539 14.29 0.580479 14.29 0.79V3.17C14.29 3.37952 14.2068 3.58046 14.0586 3.72861C13.9105 3.87677 13.7095 3.96 13.5 3.96C13.2905 3.96 13.0895 3.87677 12.9414 3.72861C12.7932 3.58046 12.71 3.37952 12.71 3.17V1.58H7.92V12.67Z",
    fill: "#333333"
  }));

  // src/blocks/Text/Editor/Editor.tsx
  var import_react38 = __toESM(require_react(), 1);
  var import_react_quill = __toESM(require_lib2(), 1);
  var EditorToolbar = ({
    setIsModalOpen,
    toolbarId
  }) => {
    const intl = useIntl();
    const editorModules = [
      { name: "bold", tooltip: intl.formatMessage({ id: "BOLD" }) },
      { name: "italic", tooltip: intl.formatMessage({ id: "ITALIC" }) },
      { name: "underline", tooltip: intl.formatMessage({ id: "UNDERLINE" }) },
      { name: "align", value: "", tooltip: intl.formatMessage({ id: "ALIGN_LEFT" }) },
      {
        name: "align",
        value: "center",
        tooltip: intl.formatMessage({ id: "ALIGN_CENTER" })
      },
      { name: "align", value: "right", tooltip: intl.formatMessage({ id: "ALIGN_RIGHT" }) },
      {
        name: "list",
        value: "ordered",
        tooltip: intl.formatMessage({ id: "ORDERED_LIST" })
      },
      {
        name: "list",
        value: "bullet",
        tooltip: intl.formatMessage({ id: "UNORDERED_LIST" })
      }
    ];
    return /* @__PURE__ */ React.createElement("div", {
      id: toolbarId
    }, editorModules.map((module, index2) => /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [500, 0],
      content: module.tooltip,
      key: index2
    }, /* @__PURE__ */ React.createElement("button", {
      className: `ql-${module.name}`,
      value: module.value
    }))), /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [500, 0],
      content: intl.formatMessage({ id: "INSERT_LINK" })
    }, /* @__PURE__ */ React.createElement("button", {
      className: "search",
      onClick: () => setIsModalOpen(true)
    }, /* @__PURE__ */ React.createElement(SvgLink, {
      style: { display: "block" }
    }))));
  };
  var Editor = (0, import_react38.forwardRef)(
    ({
      value,
      setValue,
      setIsModalOpen
    }, ref2) => {
      const icons = import_react_quill.Quill.import("ui/icons");
      icons["bold"] = '<i class="fas fa-bold"></i>';
      icons["italic"] = '<i class="fas fa-italic"></i>';
      icons["underline"] = '<i class="fas fa-underline"></i>';
      icons["align"][""] = '<i class="fas fa-align-left"></i>';
      icons["align"]["center"] = '<i class="fas fa-align-center"></i>';
      icons["align"]["right"] = '<i class="fas fa-align-right"></i>';
      icons["list"]["bullet"] = '<i class="fas fa-list"></i>';
      icons["list"]["ordered"] = '<i class="fas fa-list-ol"></i>';
      const intl = useIntl();
      const [toolbarId] = (0, import_react38.useState)(
        `editor-toolbar-${Math.random().toString(36).substring(7)}`
      );
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(EditorToolbar, {
        setIsModalOpen,
        toolbarId
      }), /* @__PURE__ */ React.createElement(import_react_quill.default, {
        modules: { toolbar: { container: `#${toolbarId}` } },
        ref: ref2,
        value,
        placeholder: intl.formatMessage({ id: "BlockText__TEXT_PLACEHOLDER" }),
        onChange: (value2) => setValue(value2)
      }));
    }
  );
  var Editor_default = Editor;

  // src/blocks/Text/Modal/SearchModal.tsx
  var import_react40 = __toESM(require_react(), 1);
  var import_react_modal2 = __toESM(require_lib(), 1);

  // src/blocks/Text/Modal/Search.tsx
  var import_react39 = __toESM(require_react(), 1);
  var InsertLink = (0, import_react39.forwardRef)(
    ({
      cursorIndex,
      setIsModalOpen,
      setIsSearching
    }, ref2) => {
      const intl = useIntl();
      const [link, setLink] = (0, import_react39.useState)("");
      const [url, setUrl] = (0, import_react39.useState)("");
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("span", {
        className: "Search__Content__Title"
      }, intl.formatMessage({ id: "BlockText__TEXT_INSERT_LINK" })), /* @__PURE__ */ React.createElement("div", {
        className: "Search__Content__InsertLink"
      }, /* @__PURE__ */ React.createElement("div", {
        className: "Search__Content__LinkInput"
      }, /* @__PURE__ */ React.createElement(Input_default, {
        onChange: (e2) => setLink(e2.target.value),
        value: link,
        id: "Search-field",
        type: "text",
        label: intl.formatMessage({ id: "BlockText__LINK_LABEL" }),
        placeholder: intl.formatMessage({
          id: "BlockText__LINK_LABEL_PLACEHOLDER"
        })
      })), /* @__PURE__ */ React.createElement("div", {
        className: "Search__Content__UrlInput"
      }, /* @__PURE__ */ React.createElement(Input_default, {
        onChange: (e2) => setUrl(e2.target.value),
        value: url,
        id: "Search-field",
        type: "text",
        label: intl.formatMessage({ id: "BlockText__LINK_URL" }),
        placeholder: intl.formatMessage({ id: "BlockText__LINK_URL_PLACEHOLDER" })
      })), /* @__PURE__ */ React.createElement("button", {
        className: "Search__Content__InsertButton",
        disabled: !link || !url,
        onClick: () => {
          ref2.current.editor.insertText(cursorIndex, link, "link", url);
          setIsModalOpen(false);
          setIsSearching(false);
        }
      }, intl.formatMessage({ id: "INSERT" }))));
    }
  );
  var SearchResults = ({
    searchIn,
    type,
    value,
    onUpdate
  }) => {
    const { data } = useSearchBy({ searchIn, type, value });
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("ul", {
      className: "SearchResult"
    }, data?.length > 0 ? data?.filter((element) => !data.includes(element.id)).map((element) => /* @__PURE__ */ React.createElement("li", {
      key: element.id,
      onClick: () => {
        onUpdate(element);
      },
      className: "SearchResult__Item"
    }, /* @__PURE__ */ React.createElement("span", null, element.i18n.title), /* @__PURE__ */ React.createElement("span", {
      className: "SearchResult__Item__Ref"
    }, "#", element.reference || element.id))) : value && value.length > 1 ? /* @__PURE__ */ React.createElement("li", {
      className: "SearchResult__NoResults"
    }, /* @__PURE__ */ React.createElement("span", null, intl.formatMessage({ id: "NO_RESULTS" }), " ", value && value.length > 0 ? /* @__PURE__ */ React.createElement("span", null, intl.formatMessage({ id: "FOR" }), ' "', /* @__PURE__ */ React.createElement("span", {
      className: "emphasize"
    }, value), '"') : "")) : null);
  };
  var Search = (0, import_react39.forwardRef)(
    ({
      mode,
      setIsModalOpen,
      setIsSearching,
      cursorIndex
    }, ref2) => {
      const [searchByRef, setSearchByRef] = (0, import_react39.useState)(false);
      const [query, setQuery] = (0, import_react39.useState)("");
      const intl = useIntl();
      (0, import_react39.useEffect)(
        () => query.startsWith("#") ? setSearchByRef(true) : setSearchByRef(false),
        [query]
      );
      const type = mode === "product" ? searchByRef ? "reference" : "title" : searchByRef ? "id" : "title";
      const value = searchByRef ? query.substring(1) : query;
      return /* @__PURE__ */ React.createElement("div", {
        className: "Search__Content"
      }, mode === "link" ? /* @__PURE__ */ React.createElement(InsertLink, {
        cursorIndex,
        setIsModalOpen,
        setIsSearching,
        ref: ref2
      }) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("span", {
        className: "Search__Content__Title"
      }, intl.formatMessage({ id: "BlockText__TEXT_LINK_MODAL_TITLE" })), /* @__PURE__ */ React.createElement("div", {
        className: "Search__Content__Search"
      }, /* @__PURE__ */ React.createElement(Input_default, {
        onChange: (e2) => setQuery(e2.target.value),
        value: query,
        placeholder: intl.formatMessage({ id: "SEARCH_BY" }),
        id: "Search-field",
        emphasize: searchByRef,
        type: "text",
        icon: /* @__PURE__ */ React.createElement("i", {
          className: "fa fa-search emphasize"
        }),
        iconAlignment: "right",
        label: intl.formatMessage({ id: "SEARCH" }),
        info: intl.formatMessage({ id: "BlockText__SEARCH_INFO" })
      }), /* @__PURE__ */ React.createElement(import_react39.Suspense, {
        fallback: /* @__PURE__ */ React.createElement("div", {
          className: "Search__Loader"
        }, /* @__PURE__ */ React.createElement("i", {
          className: "fa fa-circle-notch fa-spin"
        }))
      }, /* @__PURE__ */ React.createElement(SearchResults, {
        searchIn: mode,
        type,
        value,
        onUpdate: (content) => {
          ref2.current.editor.insertText(
            cursorIndex,
            `[${mode}_link id=${content.id} title="${content.i18n.title}"]`
          );
          setIsModalOpen(false);
          setIsSearching(false);
        }
      })))));
    }
  );
  var Search_default = Search;

  // src/blocks/Text/Modal/SearchModal.tsx
  var SearchModal = (0, import_react40.forwardRef)(
    ({ isOpen, setIsOpen }, ref2) => {
      const intl = useIntl();
      const modes = {
        link: {
          mode: "link",
          icon: /* @__PURE__ */ React.createElement("i", {
            className: "text-2xl fas fa-link"
          }),
          title: intl.formatMessage({ id: "URL" })
        },
        product: {
          mode: "product",
          icon: /* @__PURE__ */ React.createElement("i", {
            className: "text-2xl fas fa-box"
          }),
          title: intl.formatMessage({ id: "PRODUCTS" })
        },
        folder: {
          mode: "folder",
          icon: /* @__PURE__ */ React.createElement("i", {
            className: "text-2xl fas fa-folder-open"
          }),
          title: intl.formatMessage({ id: "FOLDERS" })
        },
        category: {
          mode: "category",
          icon: /* @__PURE__ */ React.createElement("i", {
            className: "text-2xl fas fa-book"
          }),
          title: intl.formatMessage({ id: "CATEGORIES" })
        },
        content: {
          mode: "content",
          icon: /* @__PURE__ */ React.createElement("i", {
            className: "text-2xl fas fa-file-alt"
          }),
          title: intl.formatMessage({ id: "CONTENTS" })
        }
      };
      const [isSearching, setIsSearching] = (0, import_react40.useState)(false);
      const [mode, setMode] = (0, import_react40.useState)("product");
      return /* @__PURE__ */ React.createElement(import_react_modal2.default, {
        isOpen,
        onRequestClose: () => {
          setIsOpen(false);
          setIsSearching(false);
        },
        className: "Modal-InsertLink",
        overlayClassName: "Overlay"
      }, /* @__PURE__ */ React.createElement("div", {
        className: "flex flex-col px-4 pt-2 pb-4"
      }, /* @__PURE__ */ React.createElement("div", {
        className: "flex mb-8"
      }, isSearching ? /* @__PURE__ */ React.createElement("div", {
        className: "Search__Back__Wrapper"
      }, /* @__PURE__ */ React.createElement("button", {
        className: "Search__Back",
        onClick: () => setIsSearching(false)
      }, intl.formatMessage({ id: "BACK" })), /* @__PURE__ */ React.createElement("i", {
        className: "fa fa-chevron-left"
      })) : /* @__PURE__ */ React.createElement("div", {
        className: "text-2xl font-bold"
      }, intl.formatMessage({ id: "INSERT_LINK" })), /* @__PURE__ */ React.createElement("button", {
        onClick: () => setIsOpen(false),
        className: "ml-auto"
      }, /* @__PURE__ */ React.createElement(SvgXmark, {
        className: "text-2xl text-darkCharbon hover:text-vermillon"
      }))), isSearching ? /* @__PURE__ */ React.createElement(Search_default, {
        mode,
        setIsModalOpen: setIsOpen,
        setIsSearching,
        cursorIndex: ref2?.current?.editor?.getText()?.index || ref2?.current?.editor?.getLength() - 1 || 0,
        ref: ref2
      }) : /* @__PURE__ */ React.createElement("div", {
        className: "flex flex-col gap-4 overflow-auto md:flex-row"
      }, Object.entries(modes).map(([key, mode2]) => /* @__PURE__ */ React.createElement("button", {
        key,
        className: "flex flex-col items-center justify-center w-full gap-4 p-12 rounded-md bg-pearlMedium hover:bg-pearlLight text-mediumCharbon md:w-1/4",
        onClick: () => {
          setIsSearching(true);
          setMode(mode2.mode);
        }
      }, mode2.icon, /* @__PURE__ */ React.createElement("span", {
        className: "text-center"
      }, mode2.title))))));
    }
  );
  var SearchModal_default = SearchModal;

  // src/blocks/Text/Text.tsx
  var BlockTextComponent = ({
    data,
    onUpdate
  }) => {
    const quillRef = (0, import_react41.useRef)(null);
    const [localData, setData] = (0, import_react41.useState)(data.value);
    const [isModalOpen, setIsModalOpen] = (0, import_react41.useState)(false);
    (0, import_react41.useEffect)(() => setData(data.value), [data]);
    (0, import_react41.useEffect)(() => onUpdate({ value: localData }), [localData]);
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockText"
    }, data !== void 0 ? /* @__PURE__ */ React.createElement("div", {
      className: "BlockText__Editor"
    }, /* @__PURE__ */ React.createElement(Editor_default, {
      ref: quillRef,
      setIsModalOpen,
      value: localData,
      setValue: setData
    })) : null, /* @__PURE__ */ React.createElement(SearchModal_default, {
      ref: quillRef,
      isOpen: isModalOpen,
      setIsOpen: setIsModalOpen
    }));
  };
  var initialData6 = {
    value: ""
  };
  var moduleType7 = {
    id: "blockText"
  };
  var Blocktext = {
    type: moduleType7,
    component: BlockTextComponent,
    initialData: initialData6,
    title: {
      default: "Text",
      fr: "Texte",
      en: "Text",
      es: "Texto",
      it: "Testo"
    },
    icon: SvgText,
    description: {
      default: "Display a formated text",
      fr: "Affiche un texte mis en forme",
      en: "Display a formated text",
      es: "Muestra un texto en formato",
      it: "Visualizza un testo formattato"
    },
    image: {
      default: "https://source.unsplash.com/featured/300x250?nature&blockText"
    }
  };
  var Text_default = Blocktext;

  // src/blocks/Title/Title.tsx
  var import_react42 = __toESM(require_react(), 1);

  // src/blocks/Title/assets/title.svg
  var React31 = __toESM(require_react(), 1);
  var SvgTitle = (props) => /* @__PURE__ */ React31.createElement("svg", {
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React31.createElement("path", {
    d: "M11.9 0C9.54598 8.31164e-07 7.24484 0.698177 5.28768 2.00621C3.33052 3.31424 1.80527 5.17336 0.904881 7.34838C0.004493 9.5234 -0.230582 11.9166 0.229393 14.2253C0.689368 16.5339 1.82373 18.6543 3.48897 20.3181C5.15422 21.982 7.27553 23.1145 9.58456 23.5726C11.8936 24.0306 14.2866 23.7935 16.4609 22.8913C18.6351 21.9891 20.493 20.4623 21.7994 18.504C23.1057 16.5457 23.802 14.244 23.8 11.89C23.7947 8.73647 22.5389 5.71376 20.3081 3.48481C18.0773 1.25587 15.0535 0.00264336 11.9 0V0ZM11.9 22.54C9.79363 22.54 7.73456 21.9154 5.98318 20.7452C4.23179 19.5749 2.86676 17.9116 2.06068 15.9656C1.25461 14.0195 1.04371 11.8782 1.45464 9.81229C1.86557 7.74639 2.87988 5.84874 4.36931 4.35931C5.85874 2.86988 7.75639 1.85557 9.82229 1.44464C11.8882 1.0337 14.0295 1.24461 15.9756 2.05068C17.9216 2.85676 19.5849 4.22179 20.7552 5.97318C21.9254 7.72456 22.55 9.78363 22.55 11.89C22.5474 14.7137 21.4245 17.4211 19.4278 19.4178C17.4311 21.4145 14.7237 22.5374 11.9 22.54Z",
    fill: "#333333"
  }), /* @__PURE__ */ React31.createElement("path", {
    d: "M16.4507 6.87996H7.5707C7.48103 6.87861 7.392 6.89528 7.30889 6.92897C7.22578 6.96267 7.15028 7.01271 7.08686 7.07612C7.02345 7.13954 6.97341 7.21504 6.93972 7.29815C6.90602 7.38126 6.88935 7.47029 6.8907 7.55996V9.21996C6.8907 9.40031 6.96234 9.57327 7.08987 9.70079C7.21739 9.82832 7.39035 9.89996 7.5707 9.89996C7.75105 9.89996 7.92401 9.82832 8.05153 9.70079C8.17906 9.57327 8.2507 9.40031 8.2507 9.21996V8.21996H11.3307V15.74H10.3307C10.1504 15.74 9.97739 15.8116 9.84987 15.9391C9.72234 16.0666 9.6507 16.2396 9.6507 16.42C9.6507 16.6003 9.72234 16.7733 9.84987 16.9008C9.97739 17.0283 10.1504 17.1 10.3307 17.1H13.6707C13.851 17.1 14.024 17.0283 14.1515 16.9008C14.2791 16.7733 14.3507 16.6003 14.3507 16.42C14.3507 16.2396 14.2791 16.0666 14.1515 15.9391C14.024 15.8116 13.851 15.74 13.6707 15.74H12.6707V8.23996H15.7507V9.23996C15.7507 9.42031 15.8223 9.59327 15.9499 9.72079C16.0774 9.84832 16.2504 9.91996 16.4307 9.91996C16.611 9.91996 16.784 9.84832 16.9115 9.72079C17.0391 9.59327 17.1107 9.42031 17.1107 9.23996V7.55996C17.112 7.47197 17.096 7.38458 17.0635 7.30279C17.0311 7.22099 16.9828 7.14639 16.9216 7.08325C16.8603 7.0201 16.7871 6.96965 16.7063 6.93477C16.6256 6.89989 16.5387 6.88126 16.4507 6.87996Z",
    fill: "#333333"
  }));

  // src/blocks/Title/Title.tsx
  var BlockTitleComponent = ({
    data,
    onUpdate
  }) => {
    const intl = useIntl();
    const levels = [
      {
        label: `${intl.formatMessage({ id: "NEUTRAL" })}`,
        value: 0
      },
      {
        label: `${intl.formatMessage({ id: "LEVEL" })} 1`,
        value: 1
      },
      {
        label: `${intl.formatMessage({ id: "LEVEL" })} 2`,
        value: 2
      },
      {
        label: `${intl.formatMessage({ id: "LEVEL" })} 3`,
        value: 3
      },
      {
        label: `${intl.formatMessage({ id: "LEVEL" })} 4`,
        value: 4
      },
      {
        label: `${intl.formatMessage({ id: "LEVEL" })} 5`,
        value: 5
      },
      {
        label: `${intl.formatMessage({ id: "LEVEL" })} 6`,
        value: 6
      }
    ];
    const [level, setLevel] = (0, import_react42.useState)(initialData7.level);
    const [text, setText] = (0, import_react42.useState)(initialData7.text);
    (0, import_react42.useEffect)(() => {
      if (data.level) {
        setLevel(data.level);
      }
      if (data.text) {
        setText(data.text);
      }
    }, [data]);
    const onChangeLevel = (e2) => {
      setLevel(parseInt(e2.target.value, 10));
      onUpdate({ ...data, level: parseInt(e2.target.value, 10) });
    };
    const onChangeText = (e2) => {
      setText(e2.target.value);
    };
    const onBlurText = (e2) => {
      if (e2.target.value) {
        onUpdate({ ...data, text: e2.target.value });
      }
    };
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockTitle"
    }, /* @__PURE__ */ React.createElement(Select_default, {
      id: "BlockTitle-field-level",
      onChange: onChangeLevel,
      value: level.toString(),
      label: intl.formatMessage({ id: "BlockTitle__LEVEL" })
    }, levels.map(({ label, value }) => /* @__PURE__ */ React.createElement("option", {
      key: value,
      value
    }, label))), /* @__PURE__ */ React.createElement(Input_default, {
      type: "text",
      id: "BlockTitle-field-text",
      value: text,
      onChange: onChangeText,
      onBlur: onBlurText,
      placeholder: intl.formatMessage({ id: "BlockTitle__TEXT_PLACEHOLDER" })
    }));
  };
  var initialData7 = {
    level: 0,
    text: ""
  };
  var moduleType8 = {
    id: "blockTitle"
  };
  var BlockTitle = {
    type: moduleType8,
    component: BlockTitleComponent,
    initialData: initialData7,
    title: {
      default: "Title",
      fr: "Titre",
      en: "Title",
      es: "Titulo",
      it: "Titolo"
    },
    icon: SvgTitle,
    description: {
      default: "Display a title",
      fr: "Affiche un titre",
      en: "Display a title",
      es: "Muestra un titulo",
      it: "Visualizza un titolo"
    },
    image: {
      default: "https://source.unsplash.com/featured/300x250?nature&blockTitle"
    }
  };
  var Title_default = BlockTitle;

  // src/blocks/Video/assets/video.svg
  var React32 = __toESM(require_react(), 1);
  var SvgVideo = (props) => /* @__PURE__ */ React32.createElement("svg", {
    width: 21,
    height: 24,
    viewBox: "0 0 21 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React32.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19.9551 9.80845H5.13784L19.3717 5.67813C19.4267 5.66411 19.4782 5.63875 19.5229 5.60366C19.5675 5.56858 19.6044 5.52455 19.631 5.47439C19.6724 5.36712 19.6724 5.24828 19.631 5.141L18.8809 2.5665C18.7349 2.07042 18.4342 1.63396 18.0228 1.32077C17.6113 1.00758 17.1105 0.834041 16.5935 0.825469C16.3679 0.824339 16.1434 0.855525 15.9267 0.918077L2.56334 4.78909C1.95422 4.97756 1.44329 5.39737 1.14027 5.95838C0.837258 6.51939 0.766322 7.17686 0.9427 7.78959L1.6743 10.2993V20.6528C1.6743 21.2939 1.92896 21.9087 2.38225 22.362C2.60669 22.5864 2.87315 22.7645 3.1664 22.8859C3.45965 23.0074 3.77396 23.0699 4.09137 23.0699H17.9826C18.622 23.0675 19.2344 22.8117 19.6857 22.3587C20.137 21.9057 20.3904 21.2923 20.3904 20.6528V10.2344C20.388 10.1206 20.341 10.0123 20.2597 9.93264C20.1783 9.853 20.069 9.80842 19.9551 9.80845ZM16.5379 10.6697L14.6857 13.8739H12.2964L14.1486 10.6697H16.5379ZM13.1392 10.6697L11.287 13.8739H8.88847L10.7406 10.6697H13.1392ZM9.7312 10.6697L7.87904 13.8739H5.48975L7.34191 10.6697H9.7312ZM6.33249 10.6697L4.48033 13.8739H2.50778V10.6697H6.33249ZM16.1675 1.75155C16.3065 1.71493 16.4497 1.69626 16.5935 1.69598C16.9289 1.69448 17.2557 1.80206 17.5246 2.00251C17.7936 2.20296 17.99 2.48542 18.0844 2.80728L18.7142 4.96505L16.9731 5.47439L16.9083 5.40031L13.8245 2.43685L16.1675 1.75155ZM12.8706 2.67763C12.8835 2.70347 12.9026 2.72574 12.9262 2.74245L16.0193 5.70591L13.6948 6.38195C13.6848 6.35428 13.6651 6.33122 13.6393 6.31712L10.5554 3.38145L12.8706 2.67763ZM9.59229 3.60371L9.65711 3.66853L12.741 6.64125L10.4258 7.30803C10.4128 7.28219 10.3938 7.25992 10.3702 7.24321L7.27709 4.32605L9.59229 3.60371ZM6.32323 4.52979C6.33987 4.55585 6.36199 4.57797 6.38805 4.59462L9.4719 7.56733L7.1567 8.23411L7.10113 8.16928L4.00802 5.27991L6.32323 4.52979ZM1.74839 7.54881C1.68721 7.35492 1.66633 7.15057 1.68703 6.94831C1.70773 6.74605 1.76958 6.55016 1.86878 6.37269C1.96627 6.19293 2.09824 6.03415 2.25715 5.90544C2.41605 5.77673 2.59877 5.6806 2.79486 5.62256L3.0449 5.54848L3.10047 5.62256L6.19357 8.58602L2.3596 9.69732L1.74839 7.54881ZM19.5199 20.6528C19.5199 21.063 19.3569 21.4564 19.0669 21.7464C18.7769 22.0365 18.3835 22.1994 17.9733 22.1994H4.08211C3.67194 22.1994 3.27857 22.0365 2.98853 21.7464C2.6985 21.4564 2.53556 21.063 2.53556 20.6528V14.7352H19.5199V20.6528ZM19.5199 13.8739H15.7044L17.5566 10.6697H19.5291L19.5199 13.8739Z",
    fill: "#444444"
  }), /* @__PURE__ */ React32.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M13.7958 18.051L9.98032 15.8469C9.91519 15.8058 9.83973 15.7839 9.76269 15.7839C9.68565 15.7839 9.61019 15.8058 9.54506 15.8469C9.4807 15.8851 9.42729 15.9393 9.38998 16.0042C9.35267 16.0691 9.33272 16.1425 9.33207 16.2174V20.6255C9.33111 20.7019 9.35029 20.7772 9.38768 20.8439C9.42507 20.9105 9.47935 20.9662 9.54506 21.0052C9.61373 21.041 9.68989 21.06 9.76732 21.0608C9.84196 21.0612 9.91542 21.0421 9.98032 21.0052L13.7958 18.8011C13.8635 18.7646 13.9201 18.7105 13.9595 18.6445C13.999 18.5785 14.0198 18.503 14.0198 18.4261C14.0198 18.3491 13.999 18.2737 13.9595 18.2076C13.9201 18.1416 13.8635 18.0875 13.7958 18.051ZM10.2026 19.8754V17.0045L12.7123 18.4492L10.2026 19.8754Z",
    fill: "#444444"
  }));

  // src/utils/youtube.ts
  var getYouTubeID = (url) => url.match(/^((?:https?:)?\/\/)?((?:www|m)\.)?((?:youtube(-nocookie)?\.com|youtu.be))(\/(?:[\w\-]+\?v=|embed\/|v\/)?)([\w\-]+)(\S+)?$/)?.[6];

  // src/blocks/Video/Video.tsx
  var import_react43 = __toESM(require_react(), 1);
  var YouTubeFrame = ({
    url,
    className,
    ...props
  }) => /* @__PURE__ */ React.createElement("iframe", {
    ...props,
    className: `${className}`,
    src: `https://www.youtube.com/embed/${url}`,
    allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
    allowFullScreen: true
  });
  var BlockVideoComponent = ({ data, onUpdate }) => {
    const [url, setUrl] = (0, import_react43.useState)("");
    const [isUrlValid, setIsUrlValid] = (0, import_react43.useState)(false);
    const intl = useIntl();
    (0, import_react43.useEffect)(() => {
      if (data.url) {
        setUrl(data.url);
      }
    }, [data]);
    (0, import_react43.useEffect)(() => {
      if (getYouTubeID(url)?.trim().length === 11) {
        setIsUrlValid(true);
      } else {
        setIsUrlValid(false);
      }
    }, [url]);
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockVideo"
    }, url.length > 0 && isUrlValid ? /* @__PURE__ */ React.createElement(YouTubeFrame, {
      url: getYouTubeID(url)?.trim(),
      className: "BlockVideo__Frame",
      style: { aspectRatio: "16/9" }
    }) : null, /* @__PURE__ */ React.createElement("div", {
      className: "BlockVideo__Content"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlockVideo__Content__Title"
    }, intl.formatMessage({ id: "BlockVideo__TITLE" })), /* @__PURE__ */ React.createElement("div", {
      className: "BlockVideo__Content__Search"
    }, /* @__PURE__ */ React.createElement(Input_default, {
      id: "BlockVideo-field-url",
      type: "text",
      placeholder: intl.formatMessage({ id: "BlockVideo__URL_PLACEHOLDER" }),
      className: `${url.length > 2 && isUrlValid && "border-greenDark bg-greenLight"}`,
      onChange: (e2) => setUrl(e2.target.value),
      onBlur: (e2) => onUpdate({
        ...data,
        url: e2.target.value,
        videoId: getYouTubeID(url)?.trim()
      }),
      value: url,
      icon: /* @__PURE__ */ React.createElement(SvgLink, null),
      iconAlignment: "left",
      isValid: isUrlValid,
      label: intl.formatMessage({ id: "BlockVideo__URL" })
    }))));
  };
  var initialData8 = {
    url: "",
    videoId: ""
  };
  var moduleType9 = {
    id: "blockVideo"
  };
  var blockVideo = {
    type: moduleType9,
    component: BlockVideoComponent,
    initialData: initialData8,
    title: {
      default: "Video",
      fr: "Vid\xE9o",
      en: "Video",
      es: "Video",
      it: "Video"
    },
    icon: SvgVideo,
    description: {
      default: "Display a YouTube video",
      fr: "Affiche une vid\xE9o YouTube",
      en: "Display a YouTube video",
      es: "Muestra un video de YouTube",
      it: "Visualizza un video di YouTube"
    },
    image: {
      default: ""
    }
  };
  var Video_default = blockVideo;

  // src/blocks/List/List.tsx
  var import_react44 = __toESM(require_react(), 1);
  var types = [
    {
      label: "Ordered",
      value: "ol" /* Ordered */
    },
    {
      label: "Unordered",
      value: "ul" /* Unordered */
    }
  ];
  function BlockListComponent({
    data,
    onUpdate
  }) {
    const [listItems, setListItems] = (0, import_react44.useState)([]);
    (0, import_react44.useEffect)(() => {
      if (data.values) {
        setListItems(data.values.map((value) => ({ id: nanoid(), value })));
      }
    }, []);
    const onChangeType = (e2) => {
      onUpdate({ ...data, type: e2.target.value });
    };
    const addLine = () => {
      const newListItems = [...listItems, { id: nanoid(), value: "" }];
      setListItems(newListItems);
      onUpdate({ ...data, values: newListItems.map(({ value }) => value) });
    };
    const deleteLine = (id) => {
      const newListItems = listItems.filter(({ id: currentId }) => currentId !== id);
      setListItems(newListItems);
      onUpdate({ ...data, values: newListItems.map(({ value }) => value) });
    };
    const handleUpdateText = (listItem, textData) => {
      const newListItems = listItems.map(({ id, value }) => ({
        id,
        value: id === listItem.id ? textData.value : value
      }));
      setListItems(newListItems);
      onUpdate({
        ...data,
        values: newListItems.map(({ value }) => value)
      });
    };
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockList"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlockList__Config"
    }, /* @__PURE__ */ React.createElement(Select_default, {
      id: "type-field",
      label: "Type",
      value: data.type,
      onChange: onChangeType
    }, types.map(({ label, value }) => /* @__PURE__ */ React.createElement("option", {
      key: value,
      value
    }, label)))), /* @__PURE__ */ React.createElement("div", {
      className: "BlockList__List"
    }, listItems.map((listItem) => /* @__PURE__ */ React.createElement("div", {
      className: "BlockList__Line",
      key: listItem.id
    }, /* @__PURE__ */ React.createElement(Text_default.component, {
      id: `text-${listItem.id}`,
      data: { value: listItem.value },
      onUpdate: (textData) => {
        handleUpdateText(listItem, textData);
      }
    }), /* @__PURE__ */ React.createElement("button", {
      type: "button",
      onClick: () => deleteLine(listItem.id),
      disabled: listItems.length < 2,
      className: "BlockList__Delete"
    }, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-trash"
    })))), /* @__PURE__ */ React.createElement("div", {
      className: "text-center"
    }, /* @__PURE__ */ React.createElement("button", {
      type: "button",
      className: "BlockList__Add",
      onClick: addLine
    }, "Ajouter un \xE9l\xE9ment"))));
  }
  var initialData9 = {
    type: "ul" /* Unordered */,
    values: [""]
  };
  var moduleType10 = {
    id: "blockList"
  };
  var BlockList = {
    type: moduleType10,
    component: BlockListComponent,
    initialData: initialData9,
    icon: SvgButton,
    internalOnly: true,
    title: {
      default: "List",
      fr: "Liste",
      en: "List",
      es: "Lista",
      it: "Lista"
    },
    description: {
      default: "Display a list",
      fr: "Affiche une liste",
      en: "Display a list",
      es: "Mostrar una lista",
      it: "Mostra una lista"
    },
    image: {
      default: "https://source.unsplash.com/featured/300x250?nature&blockList"
    }
  };
  var List_default = BlockList;

  // src/blocks/Group/Group.tsx
  var import_react45 = __toESM(require_react(), 1);
  var NestedBlocks2 = ({ onUpdate }) => {
    const { blockList, moveBlockTo } = useBlocksContext();
    const { DndWrapper: DndWrapper2, DndWrapElement: DndWrapElement2 } = useDragAndDrop_default();
    (0, import_react45.useEffect)(() => {
      onUpdate(blockList);
    }, [blockList]);
    const onDragEnd3 = (e2) => {
      if (e2.destination) {
        moveBlockTo(e2.source.index, e2.destination.index);
      }
    };
    return blockList.length > 0 ? /* @__PURE__ */ React.createElement("div", {
      className: "px-3 pt-2 xl:pt-4 xl:px-5"
    }, /* @__PURE__ */ React.createElement(DndWrapper2, {
      id: "main",
      onDragEnd: onDragEnd3
    }, blockList.map((block, index2) => /* @__PURE__ */ React.createElement(DndWrapElement2, {
      key: block.id,
      id: block.id,
      index: index2
    }, ({ DndDragHandle: DndDragHandle2 }) => /* @__PURE__ */ React.createElement(Block_default, {
      DndDragHandle: DndDragHandle2,
      inLayout: true,
      key: index2,
      block
    }))))) : null;
  };
  var GroupContentComponent = ({
    blocks,
    index: index2,
    data,
    onUpdate
  }) => {
    const [open, setOpen] = (0, import_react45.useState)(true);
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement(BlockContextProvider, {
      defaultBlocks: blocks
    }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(NestedBlocks2, {
      onUpdate: (columnNewData) => {
        const nextState = immer_esm_default(data, (draft) => {
          draft.content[index2] = columnNewData;
        });
        onUpdate(nextState);
      }
    }), /* @__PURE__ */ React.createElement(AddBlocks_default, {
      excludeLayout: true,
      inLayout: true
    })));
  };
  var AccordionComponent2 = ({ data, onUpdate }) => {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, data.content.map((blocks, index2) => {
      return /* @__PURE__ */ React.createElement(GroupContentComponent, {
        key: index2,
        data,
        onUpdate,
        blocks,
        index: index2
      });
    }));
  };
  var initialData10 = {
    content: [[]]
  };
  var moduleType11 = {
    id: "blockGroup"
  };
  var Group = {
    type: moduleType11,
    component: AccordionComponent2,
    initialData: initialData10,
    title: {
      default: "Group",
      fr: "Groupe",
      en: "Group",
      es: "Grupo",
      it: "Gruppo"
    },
    description: {
      default: "Group blocks",
      fr: "Groupe de blocs",
      en: "Group blocks",
      es: "Grupo de bloques",
      it: "Gruppo di blocchi"
    },
    image: {
      default: "https://source.unsplash.com/featured/300x250?nature&group"
    }
  };
  var Group_default = Group;

  // src/blocks/Highlight/Highlight.tsx
  function BlockHighlightComponent({
    data,
    onUpdate
  }) {
    const handleUpdate = (newData) => {
      onUpdate(newData);
    };
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlockHighlight"
    }, /* @__PURE__ */ React.createElement(Text_default.component, {
      data,
      onUpdate: handleUpdate,
      id: nanoid()
    }));
  }
  var initialData11 = {
    value: ""
  };
  var moduleType12 = {
    id: "blockHighlight"
  };
  var BlockHighlight = {
    type: moduleType12,
    component: BlockHighlightComponent,
    initialData: initialData11,
    title: {
      default: "Highlight",
      fr: "Mise en avant",
      en: "Highlight",
      es: "Destacado",
      it: "Evidenziare"
    },
    description: {
      default: "Display a highlighted text",
      fr: "Affiche un bloc de texte mis en avant",
      en: "Display a highlighted text",
      es: "Muestra un texto resaltado",
      it: "Mostra un testo evidenziato"
    },
    image: {
      default: "https://source.unsplash.com/featured/300x250?nature&blockHighlight"
    }
  };
  var Highlight_default = BlockHighlight;

  // src/blocks/index.ts
  var Columns = {
    TwoColumns,
    ThreeColumns,
    FourColumns,
    FiveColumns,
    SixColumns
  };

  // src/hooks/usePlugins.tsx
  var TB_DEFAULT_PLUGINS = [
    { id: nanoid(), ...Title_default },
    { id: nanoid(), ...Text_default },
    { id: nanoid(), ...Button_default },
    { id: nanoid(), ...Separator_default },
    { id: nanoid(), ...List_default },
    { id: nanoid(), ...Group_default },
    { id: nanoid(), ...Accordion_default },
    { id: nanoid(), ...Product_default },
    { id: nanoid(), ...Highlight_default },
    { id: nanoid(), ...Raw_default },
    { id: nanoid(), ...Video_default },
    ...Object.values(Columns).map((colType) => ({ id: nanoid(), ...colType }))
  ];
  window.eventTBPlugins = new CustomEvent("update-tb-plugins");
  function registerPlugin(plugin) {
    if (!window.TB__PLUGINS)
      window.TB__PLUGINS = [];
    const alreadyExist = window.TB__PLUGINS.find((p3) => p3.type.id === plugin.type.id);
    if (alreadyExist)
      return;
    window.TB__PLUGINS.push({ ...plugin, id: nanoid() });
    document.dispatchEvent(window.eventTBPlugins);
  }
  function usePlugins() {
    const [plugins, setPlugins] = (0, import_react46.useState)([
      ...TB_DEFAULT_PLUGINS,
      ...window.TB__PLUGINS || []
    ]);
    (0, import_react46.useEffect)(() => {
      const fn4 = () => {
        setPlugins([...TB_DEFAULT_PLUGINS, ...window.TB__PLUGINS]);
      };
      document.addEventListener("update-tb-plugins", fn4);
      () => {
        document.removeEventListener("update-tb-plugins", fn4);
      };
    }, []);
    return plugins;
  }

  // src/components/AddBlocks/AddBlocks.tsx
  var import_react48 = __toESM(require_react(), 1);
  var AddButton = ({
    plugin,
    setIsOpen,
    style: style2,
    inLayout
  }) => {
    const { addBlock } = useBlocksContext();
    const intl = useIntl();
    const Icon = plugin?.icon;
    return /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      content: /* @__PURE__ */ React.createElement(BlockTooltip_default, {
        title: plugin.title[intl.locale || "default"],
        description: plugin?.description?.[intl.locale || "default"]
      }),
      delay: [500, 0]
    }, /* @__PURE__ */ React.createElement("button", {
      style: style2,
      className: "AddBlocks__Modal__Add",
      onClick: () => {
        addBlock({
          id: nanoid(),
          data: plugin.initialData,
          parent: null,
          title: plugin.title,
          type: { id: plugin.type.id }
        });
        setIsOpen(false);
        if (!inLayout) {
          setTimeout(() => {
            window.scrollTo({
              top: document.body.scrollHeight,
              behavior: "smooth"
            });
          }, 250);
        }
      },
      key: plugin.id
    }, plugin?.customIcon ? plugin?.customIcon : typeof plugin?.icon === "function" ? /* @__PURE__ */ React.createElement(Icon, {
      className: "Sidebar__Add__Icon"
    }) : /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      content: "Icone introuvable"
    }, /* @__PURE__ */ React.createElement("i", {
      className: "far fa-question-circle",
      style: { fontSize: "24px", color: "#333333" }
    })), plugin.title[intl.locale || "default"]));
  };
  var AddBlockModal = ({
    children,
    title,
    isOpen,
    setIsOpen
  }) => {
    return /* @__PURE__ */ React.createElement(import_react_modal3.default, {
      isOpen,
      onRequestClose: () => setIsOpen(false),
      overlayClassName: "Overlay",
      className: "Modal-TheliaBlocks"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "AddBlocks__Modal"
    }, /* @__PURE__ */ React.createElement("button", {
      onClick: () => setIsOpen(false),
      className: "AddBlocks__Modal__Close"
    }, /* @__PURE__ */ React.createElement(SvgXmark, {
      className: "AddBlocks__Modal__Close__Icon"
    })), /* @__PURE__ */ React.createElement("div", {
      className: "AddBlocks__Modal__Content"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "AddBlocks__Modal__Title"
    }, title), /* @__PURE__ */ React.createElement("div", {
      className: "AddBlocks__Modal__BlocksList__Wrapper"
    }, children))));
  };
  var ModalContent = ({
    excludeLayout,
    setIsOpen,
    inLayout
  }) => {
    const [subModalOpen, setSubModalOpen] = (0, import_react48.useState)(false);
    const { width } = useWindowSize_default();
    const plugins = usePlugins();
    const intl = useIntl();
    let availablePLugins = plugins.filter((plugin) => !plugin.internalOnly);
    if (excludeLayout) {
      availablePLugins = availablePLugins.filter((plugin) => !plugin["layout"]);
    }
    const [commonBlocks, layoutPlugins] = (0, import_partition.default)(availablePLugins, (i3) => !i3.layout);
    const layoutPluginsByType = (0, import_groupBy.default)(
      layoutPlugins,
      `layout["${intl.locale || "default"}"]`
    );
    return /* @__PURE__ */ React.createElement("ol", {
      className: "AddBlocks__Modal__BlocksList"
    }, commonBlocks.map((plugin, index2) => {
      return /* @__PURE__ */ React.createElement(AddButton, {
        key: index2,
        plugin,
        setIsOpen,
        inLayout
      });
    }), Object.entries(layoutPluginsByType).map(
      ([layoutType, layoutPluginsByType2], index2) => {
        const LayoutIcon = layoutPluginsByType2[index2].icon;
        return layoutPluginsByType2.length === 1 ? /* @__PURE__ */ React.createElement(AddButton, {
          key: index2,
          plugin: layoutPluginsByType2[0],
          setIsOpen,
          inLayout
        }) : /* @__PURE__ */ React.createElement(import_react48.Fragment, {
          key: index2
        }, /* @__PURE__ */ React.createElement("button", {
          onClick: () => setSubModalOpen(true),
          className: "AddBlocks__Modal__Add"
        }, /* @__PURE__ */ React.createElement(LayoutIcon, null), layoutType), /* @__PURE__ */ React.createElement(AddBlockModal, {
          title: intl.formatMessage({ id: "AddBlocks__COLUMNS_NUMBER" }),
          isOpen: subModalOpen,
          setIsOpen: setSubModalOpen
        }, /* @__PURE__ */ React.createElement("ol", {
          className: "AddBlocks__Modal__LayoutBlocksList"
        }, layoutPluginsByType2.map((plugin, index3) => /* @__PURE__ */ React.createElement(AddButton, {
          style: { flex: width > 768 ? "0 0 32%" : "0 0 100%" },
          key: index3,
          plugin,
          setIsOpen,
          inLayout
        })))));
      }
    ));
  };
  var AddBlocks = ({
    excludeLayout,
    inLayout
  }) => {
    const [isOpen, setIsOpen] = (0, import_react48.useState)(false);
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
      className: "AddBlocks"
    }, /* @__PURE__ */ React.createElement("button", {
      className: "AddBlocks__Button",
      onClick: () => setIsOpen(true)
    }, intl.formatMessage({ id: "AddBlocks__ADD_CONTENT" }))), /* @__PURE__ */ React.createElement(AddBlockModal, {
      title: intl.formatMessage({ id: "AddBlocks__SELECT_CONTENT" }),
      isOpen,
      setIsOpen
    }, /* @__PURE__ */ React.createElement(ModalContent, {
      excludeLayout,
      setIsOpen,
      inLayout
    })));
  };
  var AddBlocks_default = AddBlocks;

  // assets/svg/empty-tb.svg
  var React33 = __toESM(require_react(), 1);
  var SvgEmptyTb = (props) => /* @__PURE__ */ React33.createElement("svg", {
    width: 238,
    height: 242,
    viewBox: "0 0 238 242",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React33.createElement("g", {
    clipPath: "url(#clip0_996_115666)"
  }, /* @__PURE__ */ React33.createElement("path", {
    d: "M146.265 0H31.3005C24.5352 0 19.0508 5.48441 19.0508 12.2498V87.985C19.0508 94.7504 24.5352 100.235 31.3005 100.235H146.265C153.03 100.235 158.514 94.7504 158.514 87.985V12.2498C158.514 5.48441 153.03 0 146.265 0Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M210.424 201.105L237.961 177.006L128.578 52.0139L101.04 76.1127L210.424 201.105Z",
    fill: "url(#paint0_linear_996_115666)"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M211.649 188.45C211.337 188.45 211.029 188.441 210.717 188.419C207.054 188.177 203.703 186.521 201.285 183.755C198.866 180.99 197.669 177.453 197.912 173.786C198.155 170.123 199.815 166.772 202.576 164.353C205.342 161.935 208.879 160.738 212.546 160.981C216.209 161.224 219.559 162.88 221.978 165.645C226.972 171.35 226.391 180.054 220.687 185.047C218.159 187.258 214.978 188.45 211.649 188.45ZM211.61 161.956C208.523 161.956 205.58 163.062 203.239 165.112C200.678 167.353 199.143 170.457 198.918 173.855C198.692 177.249 199.802 180.53 202.043 183.092C204.284 185.654 207.388 187.188 210.786 187.414C214.18 187.639 217.462 186.53 220.023 184.289C225.312 179.663 225.845 171.597 221.22 166.313C218.979 163.751 215.875 162.216 212.477 161.991C212.186 161.974 211.9 161.961 211.614 161.961L211.61 161.956Z",
    fill: "white"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M176.783 67.7805C178.262 58.6663 172.073 50.0784 162.959 48.599C153.844 47.1195 145.256 53.3087 143.777 62.423C142.297 71.5372 148.487 80.1251 157.601 81.6046C166.715 83.084 175.303 76.8948 176.783 67.7805Z",
    fill: "#14336A"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M158.826 81.9421C156.915 81.643 153.17 67.2953 153.17 67.2953C148.896 64.4517 150.352 58.2965 151.375 55.3273C151.574 54.7507 150.92 54.2566 150.417 54.599C149.203 55.4183 147.565 56.7794 146.46 58.6996C146.173 59.1981 143.646 63.6975 143.646 63.6975L141.912 63.2077C140.989 62.9476 140.135 63.7798 140.365 64.7075L140.863 66.6927C138.904 72.9433 136.511 76.7665 146.382 79.8268C147.439 80.1562 146.382 85.4705 146.121 86.5455L147.513 90.9625L166.343 92.0549L158.822 81.9378L158.826 81.9421Z",
    fill: "url(#paint1_linear_996_115666)"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M151.536 70.1605C152.441 71.3048 154.401 71.3872 155.914 70.3468C157.426 69.3065 157.921 67.538 157.015 66.398C156.109 65.2536 154.149 65.1713 152.637 66.2116C151.124 67.2519 150.63 69.0204 151.536 70.1605Z",
    fill: "url(#paint2_linear_996_115666)"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M142.056 84.2616C142.056 91.8386 148.198 97.9852 155.779 97.9852C163.361 97.9852 169.503 91.843 169.503 84.2616C169.503 76.6803 163.361 70.5381 155.779 70.5381C148.198 70.5381 142.056 76.6803 142.056 84.2616Z",
    fill: "#14336A"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M159.628 242L152.147 195.086C148.575 201.276 144.362 209.139 139.494 219.884C137.743 223.751 133.668 232.377 129.091 242H92.064L134.938 144.054L166.126 148.276L175.181 144.054C194.275 169.828 183.837 170.239 190.972 218.926C191.566 222.975 192.728 231.9 194.02 242H159.633H159.628Z",
    fill: "url(#paint3_linear_996_115666)"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M152.147 195.086C148.575 201.276 144.362 209.139 139.494 219.884C137.743 223.751 133.668 232.377 129.091 242H92.064L134.938 144.054L166.126 148.276L175.181 144.054C181.644 152.779 180.682 164.817 175.797 171.132C171.514 176.672 163.894 176.629 159.901 182.073C155.684 187.825 152.147 195.086 152.147 195.086Z",
    fill: "url(#paint4_linear_996_115666)"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M180.101 20.0086C180.101 22.0849 181.787 23.7711 183.864 23.7711C185.94 23.7711 187.626 22.0849 187.626 20.0086C187.626 17.9323 185.94 16.2461 183.864 16.2461C181.787 16.2461 180.101 17.9323 180.101 20.0086Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M92.0596 175.992C92.0596 178.068 93.7458 179.754 95.8221 179.754C97.8984 179.754 99.5845 178.068 99.5845 175.992C99.5845 173.916 97.8984 172.229 95.8221 172.229C93.7458 172.229 92.0596 173.916 92.0596 175.992Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M0 51.0496C0 53.1259 1.68618 54.8121 3.76249 54.8121C5.83879 54.8121 7.52498 53.1259 7.52498 51.0496C7.52498 48.9733 5.83879 47.2871 3.76249 47.2871C1.68618 47.2871 0 48.9733 0 51.0496Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M17.3904 141.73H40.3208V118.8H17.3904L17.3904 141.73Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M40.321 118.804H17.3906V141.734H40.321V118.804Z",
    fill: "#EAEAEA"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M114.977 77.1743C113.204 72.1418 109.888 73.2168 109.064 75.2367C108.462 76.7192 110.443 81.3269 111.253 83.88C111.483 84.6039 110.712 85.2411 110.044 84.8727C108.895 84.2398 107.378 83.2732 106.737 82.2805L102.593 77.9155C102.385 81.2879 101.761 86.3595 103.971 89.1683C102.441 91.405 104.682 94.2269 106.043 95.8654C109.012 99.4502 111.895 102.48 111.895 102.48L121.683 97.1181C121.683 97.1181 123.846 91.8905 122.324 88.0803C120.803 84.2702 116.745 82.1982 114.973 77.17L114.977 77.1743Z",
    fill: "url(#paint5_linear_996_115666)"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M102.354 130.422C103.642 110.495 104.24 100.508 104.24 100.508L122.805 94.8775L123.269 97.7557C123.269 97.7557 125.887 95.48 126.702 94.6607C131.891 89.4505 139.611 86.4856 157.747 86.9754C162.541 87.1054 166.412 87.2311 171.089 88.2671C180.166 90.2741 183.668 91.6915 203.248 108.181C209.113 113.118 219.187 126.104 212.68 133.842C209.36 137.791 206.23 140.756 206.23 140.756L197.379 130.643L183.85 123.148V153.538H127.816L128.332 149.789C128.332 149.789 123.828 152.06 118.583 152.529C107.274 153.538 101.574 142.346 102.341 130.413L102.354 130.422Z",
    fill: "url(#paint6_linear_996_115666)"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M157.747 86.9751C139.611 86.4853 131.886 89.4458 126.702 94.6604C125.887 95.4797 123.269 97.7554 123.269 97.7554L122.805 94.8772L104.235 100.508C104.235 100.508 103.637 110.495 102.35 130.421C101.578 142.35 107.283 153.547 118.592 152.537C123.837 152.069 128.341 149.797 128.341 149.797C128.341 149.797 155.372 114.327 169.19 97.4606C183.009 80.5945 157.751 86.9794 157.751 86.9794L157.747 86.9751Z",
    fill: "url(#paint7_linear_996_115666)"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M161.926 72.8568L176.352 69.7012C176.352 69.7012 172.026 79.2071 177.5 85.0155C184.999 92.974 188.229 105.861 177.747 113.122C173.031 116.39 165.324 117.066 160.14 114.53C152.091 110.594 151.453 100.872 150.612 93.039C149.941 86.7537 142.381 87.2392 142.381 87.2392L161.922 72.8525L161.926 72.8568Z",
    fill: "#14336A"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M68.5096 17.8115H34.2614C31.4748 17.8115 29.2158 20.0705 29.2158 22.8571V47.6774C29.2158 50.4639 31.4748 52.7229 34.2614 52.7229H68.5096C71.2961 52.7229 73.5551 50.4639 73.5551 47.6774V22.8571C73.5551 20.0705 71.2961 17.8115 68.5096 17.8115Z",
    fill: "#CED4DD"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M73.555 47.6772V36.5718C73.555 36.5718 66.793 45.7439 51.3832 36.6758C35.9778 27.6077 29.2114 36.342 29.2114 36.6758V47.6772C29.2114 50.4514 31.4828 52.7227 34.257 52.7227H68.5052C71.2793 52.7227 73.5507 50.4514 73.5507 47.6772H73.555Z",
    fill: "white"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M67.7029 26.298C67.7029 28.2269 66.1381 29.7874 64.2135 29.7874C62.2889 29.7874 60.7241 28.2226 60.7241 26.298C60.7241 24.3734 62.2889 22.8086 64.2135 22.8086C66.1381 22.8086 67.7029 24.3734 67.7029 26.298Z",
    fill: "white"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M50.3256 62.5495H33.0824C32.8049 62.5495 32.5752 62.3241 32.5752 62.0423C32.5752 61.7606 32.8006 61.5352 33.0824 61.5352H50.3256C50.6031 61.5352 50.8328 61.7606 50.8328 62.0423C50.8328 62.3241 50.6074 62.5495 50.3256 62.5495Z",
    fill: "#CED4DD"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M50.3256 67.9372H33.0824C32.8049 67.9372 32.5752 67.7118 32.5752 67.43C32.5752 67.1483 32.8006 66.9229 33.0824 66.9229H50.3256C50.6031 66.9229 50.8328 67.1483 50.8328 67.43C50.8328 67.7118 50.6074 67.9372 50.3256 67.9372Z",
    fill: "#CED4DD"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M50.3256 76.7458H33.0824C32.8049 76.7458 32.5752 76.5204 32.5752 76.2386C32.5752 75.9568 32.8006 75.7314 33.0824 75.7314H50.3256C50.6031 75.7314 50.8328 75.9568 50.8328 76.2386C50.8328 76.5204 50.6074 76.7458 50.3256 76.7458Z",
    fill: "#CED4DD"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M50.3256 82.1335H33.0824C32.8049 82.1335 32.5752 81.908 32.5752 81.6263C32.5752 81.3445 32.8006 81.1191 33.0824 81.1191H50.3256C50.6031 81.1191 50.8328 81.3445 50.8328 81.6263C50.8328 81.908 50.6074 82.1335 50.3256 82.1335Z",
    fill: "#CED4DD"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M98.6092 60.6417C98.3318 60.6417 98.1021 60.4163 98.1021 60.1345V17.8109C98.1021 17.5334 98.3275 17.3037 98.6092 17.3037C98.891 17.3037 99.1164 17.5291 99.1164 17.8109V60.1389C99.1164 60.4163 98.891 60.646 98.6092 60.646V60.6417Z",
    fill: "#CED4DD"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M143.2 10.0779C143.07 10.0779 142.94 10.0303 142.844 9.93056C142.645 9.73117 142.645 9.41474 142.844 9.21534L148.345 3.71465C148.544 3.51959 148.861 3.51959 149.06 3.71465C149.26 3.91405 149.26 4.23048 149.06 4.42987L143.56 9.93056C143.46 10.0303 143.33 10.0779 143.204 10.0779H143.2Z",
    fill: "#CED4DD"
  }), /* @__PURE__ */ React33.createElement("path", {
    d: "M148.7 10.0779C148.57 10.0779 148.44 10.0303 148.345 9.93056L142.844 4.42987C142.645 4.23048 142.645 3.91405 142.844 3.71465C143.044 3.51959 143.36 3.51959 143.56 3.71465L149.06 9.21534C149.26 9.41474 149.26 9.73117 149.06 9.93056C148.961 10.0303 148.831 10.0779 148.705 10.0779H148.7Z",
    fill: "#CED4DD"
  })), /* @__PURE__ */ React33.createElement("defs", null, /* @__PURE__ */ React33.createElement("linearGradient", {
    id: "paint0_linear_996_115666",
    x1: 101.045,
    y1: 126.557,
    x2: 237.969,
    y2: 126.557,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React33.createElement("stop", {
    stopColor: "#58CFAA"
  }), /* @__PURE__ */ React33.createElement("stop", {
    offset: 0.97,
    stopColor: "#45A184"
  })), /* @__PURE__ */ React33.createElement("linearGradient", {
    id: "paint1_linear_996_115666",
    x1: 139.104,
    y1: 73.2728,
    x2: 166.347,
    y2: 73.2728,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React33.createElement("stop", {
    stopColor: "#FFAA9D"
  }), /* @__PURE__ */ React33.createElement("stop", {
    offset: 0.97,
    stopColor: "#FF9F91"
  })), /* @__PURE__ */ React33.createElement("linearGradient", {
    id: "paint2_linear_996_115666",
    x1: 151.08,
    y1: 68.2792,
    x2: 157.47,
    y2: 68.2792,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React33.createElement("stop", {
    stopColor: "#FFAA9D"
  }), /* @__PURE__ */ React33.createElement("stop", {
    offset: 0.97,
    stopColor: "#FF9F91"
  })), /* @__PURE__ */ React33.createElement("linearGradient", {
    id: "paint3_linear_996_115666",
    x1: 92.0596,
    y1: 193.027,
    x2: 194.015,
    y2: 193.027,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React33.createElement("stop", {
    stopColor: "#14336D"
  }), /* @__PURE__ */ React33.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React33.createElement("linearGradient", {
    id: "paint4_linear_996_115666",
    x1: 124596e-10,
    y1: -203019e-9,
    x2: 179.741,
    y2: -203019e-9,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React33.createElement("stop", {
    stopColor: "#14336D"
  }), /* @__PURE__ */ React33.createElement("stop", {
    offset: 0.97,
    stopColor: "#0E2253"
  })), /* @__PURE__ */ React33.createElement("linearGradient", {
    id: "paint5_linear_996_115666",
    x1: 102.354,
    y1: 88.0153,
    x2: 122.875,
    y2: 88.0153,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React33.createElement("stop", {
    stopColor: "#FFAA9D"
  }), /* @__PURE__ */ React33.createElement("stop", {
    offset: 0.97,
    stopColor: "#FF9F91"
  })), /* @__PURE__ */ React33.createElement("linearGradient", {
    id: "paint6_linear_996_115666",
    x1: 102.285,
    y1: 120.24,
    x2: 214.8,
    y2: 120.24,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React33.createElement("stop", {
    stopColor: "#3162DF"
  }), /* @__PURE__ */ React33.createElement("stop", {
    offset: 0.96,
    stopColor: "#173DB8"
  })), /* @__PURE__ */ React33.createElement("linearGradient", {
    id: "paint7_linear_996_115666",
    x1: 100.291,
    y1: 141.145,
    x2: 163.278,
    y2: 78.1584,
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React33.createElement("stop", {
    stopColor: "#3162DF"
  }), /* @__PURE__ */ React33.createElement("stop", {
    offset: 0.96,
    stopColor: "#173DB8"
  })), /* @__PURE__ */ React33.createElement("clipPath", {
    id: "clip0_996_115666"
  }, /* @__PURE__ */ React33.createElement("rect", {
    width: 237.964,
    height: 242,
    fill: "white"
  }))));

  // src/components/BlocksContent/BlocksContent.tsx
  var EmptyList = () => {
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", {
      className: "EmptyList"
    }, /* @__PURE__ */ React.createElement(SvgEmptyTb, null), /* @__PURE__ */ React.createElement("p", {
      className: "EmptyList__Text"
    }, intl.formatMessage({ id: "BlocksContent__EMPTY_BLOCK" })));
  };
  function BlocksContent() {
    const { blockList, moveBlockTo } = useBlocksContext();
    const { DndWrapper: DndWrapper2, DndWrapElement: DndWrapElement2 } = useDragAndDrop_default();
    const onDragEnd3 = (e2) => {
      if (e2.destination) {
        moveBlockTo(e2.source.index, e2.destination.index);
      }
    };
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlocksContent"
    }, blockList.length > 0 ? /* @__PURE__ */ React.createElement(DndWrapper2, {
      id: "main",
      onDragEnd: onDragEnd3
    }, blockList.map((block, index2) => /* @__PURE__ */ React.createElement(DndWrapElement2, {
      key: block.id,
      id: block.id,
      index: index2
    }, ({ DndDragHandle: DndDragHandle2 }) => /* @__PURE__ */ React.createElement(Block_default, {
      DndDragHandle: DndDragHandle2,
      key: index2,
      block
    })))) : /* @__PURE__ */ React.createElement(EmptyList, null));
  }

  // src/components/GroupLocale/GroupLocale.tsx
  var import_react49 = __toESM(require_react(), 1);
  function GroupLocale() {
    const { locales, currentLocale, setCurrentLocale } = (0, import_react49.useContext)(LocaleContext);
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("form", {
      onSubmit: (e2) => {
        e2.preventDefault();
      },
      className: "GroupLocale__Wrapper"
    }, /* @__PURE__ */ React.createElement(Select_default, {
      placeholder: "S\xE9lectionnez",
      id: "GroupLocale-field-locale",
      onChange: (e2) => {
        setCurrentLocale(e2.target.value);
      },
      value: currentLocale,
      label: intl.formatMessage({ id: "GroupLocale__BLOCK_LOCALE" }),
      info: intl.formatMessage({ id: "GroupLocale__BLOCK_LOCALE_INFO" })
    }, /* @__PURE__ */ React.createElement("option", {
      value: "",
      disabled: true
    }, intl.formatMessage({ id: "SELECT" })), locales.map((locale2) => /* @__PURE__ */ React.createElement("option", {
      key: locale2.id,
      value: locale2.code
    }, locale2.title))));
  }

  // src/components/GroupTitle/GroupTitle.tsx
  var import_react50 = __toESM(require_react(), 1);
  function GroupTitle({
    isGroupLinkedToCurrentContent,
    onLink,
    isLinking
  }) {
    const [title, setTitle] = (0, import_react50.useState)("");
    const intl = useIntl();
    const { group, editGroup } = (0, import_react50.useContext)(BlocksGroupContext);
    (0, import_react50.useEffect)(() => {
      if (group?.title) {
        setTitle(group.title);
      }
    }, [group]);
    return /* @__PURE__ */ React.createElement("div", {
      className: "GroupTitle__Wrapper"
    }, /* @__PURE__ */ React.createElement(Input_default, {
      value: title,
      id: "GroupTitle-field-title",
      type: "text",
      label: intl.formatMessage({ id: "GroupTitle__BLOCK_NAME" }),
      placeholder: intl.formatMessage({
        id: "GroupTitle__BLOCK_NAME_PLACEHOLDER"
      }),
      info: intl.formatMessage({ id: "GroupTitle__BLOCK_NAME_INFO" }),
      onChange: (e2) => setTitle(e2.target.value),
      onBlur: (e2) => editGroup({ ...group, title: e2.target.value })
    }), isGroupLinkedToCurrentContent ? /* @__PURE__ */ React.createElement("button", {
      onClick: onLink,
      className: "BlocksEditor__Header__Unlink__Button"
    }, isLinking ? /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-circle-notch fa-spin"
    }) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("i", {
      className: "fas fa-unlink"
    }), intl.formatMessage({ id: "UNLINK" }))) : null);
  }

  // src/BlocksEditor.tsx
  var import_react_modal5 = __toESM(require_lib(), 1);

  // src/components/Sidebar/Sidebar.tsx
  var import_react51 = __toESM(require_react(), 1);

  // assets/svg/retract.svg
  var React34 = __toESM(require_react(), 1);
  var SvgRetract = (props) => /* @__PURE__ */ React34.createElement("svg", {
    width: 20,
    height: 11,
    viewBox: "0 0 20 11",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React34.createElement("path", {
    fillRule: "evenodd",
    fill: "currentColor",
    clipRule: "evenodd",
    d: "M15.0746 0.269592L19.7267 4.85285C19.9099 5.03045 20 5.26534 20 5.50023C20 5.73513 19.9091 5.96945 19.7274 6.14819L15.0754 10.7314C14.7119 11.0895 14.1231 11.0895 13.7597 10.7314C13.3962 10.3734 13.3962 9.79331 13.7597 9.43525L16.825 6.41689L0.904839 6.41688C0.390496 6.41688 0.000593416 6.00639 0.000593438 5.52601C0.00059346 5.04563 0.390496 4.58358 0.904839 4.58358L16.825 4.58358L13.7604 1.56436C13.397 1.20629 13.397 0.626228 13.7604 0.268158C14.1239 -0.0899086 14.7112 -0.0884742 15.0746 0.269592ZM10.7999 9.99983C10.7999 10.4416 10.4417 10.7998 9.99994 10.7998L1.0002 10.7998C0.558386 10.7998 0.200226 10.4416 0.200226 9.99983C0.200226 9.55801 0.558388 9.19985 1.0002 9.19985L9.99994 9.19985C10.4417 9.19985 10.7999 9.55801 10.7999 9.99983ZM9.99994 1.79999C10.4417 1.79999 10.7999 1.44183 10.7999 1.00001C10.7999 0.558196 10.4418 0.200034 9.99994 0.200034L1.0002 0.200033C0.558388 0.200033 0.200226 0.558195 0.200226 1.00001C0.200226 1.44182 0.558386 1.79999 1.0002 1.79999L9.99994 1.79999Z"
  }));

  // assets/svg/expand.svg
  var React35 = __toESM(require_react(), 1);
  var SvgExpand = (props) => /* @__PURE__ */ React35.createElement("svg", {
    width: 20,
    height: 11,
    viewBox: "0 0 20 11",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React35.createElement("path", {
    fillRule: "evenodd",
    fill: "currentColor",
    clipRule: "evenodd",
    d: "M4.92537 10.7304L0.27331 6.14715C0.0901356 5.96955 0 5.73466 0 5.49976C0 5.26487 0.0908623 5.03055 0.272583 4.85181L4.92465 0.26855C5.28809 -0.0895166 5.87687 -0.0895166 6.24031 0.26855C6.60375 0.626616 6.60375 1.20669 6.24031 1.56475L3.17504 4.58311H19.0952C19.6095 4.58311 19.9994 4.9936 19.9994 5.47398C19.9994 5.95437 19.6095 6.41642 19.0952 6.41642H3.17504L6.23958 9.43564C6.60303 9.7937 6.60303 10.3738 6.23958 10.7318C5.87614 11.0899 5.28882 11.0885 4.92537 10.7304ZM9.20009 1.00017C9.20009 0.558356 9.55825 0.200194 10.0001 0.200194H18.9998C19.4416 0.200194 19.7998 0.558356 19.7998 1.00017C19.7998 1.44199 19.4416 1.80015 18.9998 1.80015H10.0001C9.55825 1.80015 9.20009 1.44199 9.20009 1.00017ZM10.0001 9.20007C9.55825 9.20007 9.20009 9.55823 9.20009 10C9.20009 10.4419 9.55825 10.8 10.0001 10.8H18.9998C19.4416 10.8 19.7998 10.4419 19.7998 10C19.7998 9.55823 19.4416 9.20007 18.9998 9.20007H10.0001Z"
  }));

  // src/components/Sidebar/Sidebar.tsx
  var import_lodash = __toESM(require_lodash(), 1);
  var AddButton2 = ({
    plugin,
    isSidebarOpen
  }) => {
    const { addBlock } = useBlocksContext();
    const intl = useIntl();
    const Icon = plugin?.icon;
    return /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      content: /* @__PURE__ */ React.createElement(BlockTooltip_default, {
        title: plugin.title[intl.locale || "default"],
        description: plugin?.description?.[intl.locale || "default"]
      }),
      placement: "left",
      delay: [500, 0]
    }, /* @__PURE__ */ React.createElement("button", {
      className: `Sidebar__Add ${isSidebarOpen && plugin?.customIcon ? "Sidebar__Add--withCustomIcon" : ""} ${isSidebarOpen ? "Sidebar__Add--expanded" : "Sidebar__Add--collapsed"}`,
      onClick: () => {
        addBlock({
          id: nanoid(),
          data: plugin.initialData,
          parent: null,
          title: plugin.title,
          type: { id: plugin.type.id }
        });
        setTimeout(() => {
          window.scrollTo({
            top: document.body.scrollHeight,
            behavior: "smooth"
          });
        }, 250);
      },
      key: plugin.id
    }, isSidebarOpen && plugin?.customIcon ? plugin?.customIcon : typeof plugin?.icon === "function" ? /* @__PURE__ */ React.createElement(Icon, {
      className: "Sidebar__Add__Icon"
    }) : /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      content: "Icone introuvable"
    }, /* @__PURE__ */ React.createElement("i", {
      className: "far fa-question-circle",
      style: { fontSize: "24px", color: "#333333" }
    })), isSidebarOpen ? plugin.title[intl.locale || "default"] : null));
  };
  var Sidebar = () => {
    const plugins = usePlugins();
    const intl = useIntl();
    const [isSidebarOpen, setIsSidebarOpen] = (0, import_react51.useState)(true);
    const [isDisplayingSubMenu, setIsDisplayingSubMenu] = (0, import_react51.useState)(false);
    const availablePLugins = plugins.filter((plugin) => !plugin.internalOnly);
    const [commonBlocks, layoutPlugins] = (0, import_lodash.partition)(availablePLugins, (i3) => !i3.layout);
    const layoutPluginsByType = (0, import_lodash.groupBy)(
      layoutPlugins,
      `layout["${intl.locale || "default"}"]`
    );
    const [pluginList, setPluginList] = (0, import_react51.useState)(commonBlocks || []);
    return /* @__PURE__ */ React.createElement("div", {
      className: "Sidebar"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "Sidebar__Header"
    }, /* @__PURE__ */ React.createElement("button", {
      onClick: () => {
        setIsSidebarOpen(!isSidebarOpen);
        if (isDisplayingSubMenu) {
          setPluginList(commonBlocks);
          setIsDisplayingSubMenu(false);
        }
      },
      className: `${isSidebarOpen ? "Sidebar__Header__Toggle--open" : "Sidebar__Header__Toggle--closed"}`
    }, isSidebarOpen ? /* @__PURE__ */ React.createElement(SvgRetract, null) : /* @__PURE__ */ React.createElement(SvgExpand, null)), isSidebarOpen ? /* @__PURE__ */ React.createElement("span", {
      className: "Sidebar__Header__Title"
    }, intl.formatMessage({ id: "CONTENTS" })) : null), /* @__PURE__ */ React.createElement("div", {
      className: "Sidebar__Content__Wrapper"
    }, isDisplayingSubMenu && /* @__PURE__ */ React.createElement("div", {
      className: "Sidebar__Back__Wrapper"
    }, /* @__PURE__ */ React.createElement("button", {
      className: "Sidebar__Back",
      onClick: () => {
        setPluginList(commonBlocks);
        setIsDisplayingSubMenu(false);
      }
    }, intl.formatMessage({ id: "BACK" })), /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-chevron-left"
    })), /* @__PURE__ */ React.createElement("ol", {
      className: "Sidebar__Content"
    }, pluginList.map((plugin) => /* @__PURE__ */ React.createElement(AddButton2, {
      plugin,
      isSidebarOpen,
      key: plugin.id
    })), !isDisplayingSubMenu && Object.entries(layoutPluginsByType).map(
      ([layoutType, layoutPluginsByType2], index2) => {
        const LayoutIcon = layoutPluginsByType2[index2].icon;
        return /* @__PURE__ */ React.createElement(import_react51.Fragment, {
          key: index2
        }, layoutPluginsByType2.length === 1 ? /* @__PURE__ */ React.createElement(AddButton2, {
          plugin: layoutPluginsByType2[0],
          isSidebarOpen
        }) : /* @__PURE__ */ React.createElement("button", {
          className: `Sidebar__Add ${isSidebarOpen ? "Sidebar__Add--expanded" : "Sidebar__Add--collapsed"}`,
          onClick: () => {
            setPluginList(layoutPluginsByType2);
            setIsDisplayingSubMenu(true);
            setIsSidebarOpen(true);
          }
        }, /* @__PURE__ */ React.createElement(LayoutIcon, null), isSidebarOpen ? layoutType : null));
      }
    ))));
  };
  var Sidebar_default = Sidebar;

  // src/components/ToolBar/ToolBar.tsx
  var import_react55 = __toESM(require_react(), 1);

  // src/components/Preview/Preview.tsx
  var import_react54 = __toESM(require_react(), 1);

  // src/components/Iframe/Iframe.tsx
  var import_react53 = __toESM(require_react(), 1);
  var Iframe = ({ content }) => {
    const ref2 = (0, import_react53.useRef)(null);
    (0, import_react53.useEffect)(() => {
      const node = ref2.current;
      if (!node)
        return;
      let doc = node.contentDocument;
      if (!doc)
        return;
      doc.open();
      doc.write(content);
      doc.close();
      node.style.width = "100%";
      if (node.contentWindow) {
        node.style.height = `70vh`;
      }
    }, [ref2, content]);
    return /* @__PURE__ */ React.createElement("iframe", {
      src: "about:blank",
      frameBorder: "0",
      ref: ref2,
      sandbox: "allow-same-origin"
    });
  };
  var Iframe_default = Iframe;

  // src/components/Modal/Modal.tsx
  var import_react_modal4 = __toESM(require_lib(), 1);
  var Modal3 = ({
    modalClassName = "Modal-TheliaBlocks",
    isOpen,
    setIsOpen,
    title,
    children
  }) => {
    return /* @__PURE__ */ React.createElement(import_react_modal4.default, {
      isOpen,
      onRequestClose: () => {
        setIsOpen(false);
      },
      className: modalClassName,
      overlayClassName: "Overlay"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "Modal__Wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "Modal__Header"
    }, /* @__PURE__ */ React.createElement("button", {
      onClick: () => setIsOpen(false),
      className: "Modal__Header__Close"
    }, /* @__PURE__ */ React.createElement(SvgXmark, null)), /* @__PURE__ */ React.createElement("div", {
      className: "Modal__Header__Title"
    }, title)), /* @__PURE__ */ React.createElement("div", {
      className: "Modal__Content"
    }, children)));
  };
  var Modal_default = Modal3;

  // src/components/Preview/Preview.tsx
  function Preview({
    isOpen,
    setIsOpen,
    setIsPreviewLoading,
    timestamp,
    data
  }) {
    const { blockList } = useBlocksContext();
    const preview = usePreviewGroup(timestamp, JSON.stringify(data || blockList));
    const intl = useIntl();
    (0, import_react54.useEffect)(() => {
      if (preview.isLoading) {
        setIsPreviewLoading(true);
        return;
      }
      setIsPreviewLoading(false);
    }, [preview]);
    (0, import_react54.useEffect)(() => {
      if (timestamp) {
        setIsOpen(true);
      }
      return () => setIsOpen(false);
    }, [timestamp]);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, !preview.isLoading ? /* @__PURE__ */ React.createElement(Modal_default, {
      isOpen,
      setIsOpen,
      title: intl.formatMessage({ id: "PreviewModal__TITLE" })
    }, preview.data ? /* @__PURE__ */ React.createElement(Iframe_default, {
      content: preview.data
    }) : null) : null);
  }

  // src/components/ToolBar/ToolBar.tsx
  var ToolBar = () => {
    const [showPreview, setShowPreview] = (0, import_react55.useState)(false);
    const [timestamp, setTimestamp] = (0, import_react55.useState)(0);
    const [isPreviewLoading, setIsPreviewLoading] = (0, import_react55.useState)(false);
    const { group } = (0, import_react55.useContext)(BlocksGroupContext);
    const { blockList } = useBlocksContext();
    const createGroup = useCreateOrUpdateGroup();
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
      className: "Toolbar"
    }, /* @__PURE__ */ React.createElement("button", {
      className: "Toolbar__View",
      onClick: () => {
        if (!blockList.length) {
          Et.error(intl.formatMessage({ id: "Toast__NO_BLOCKS_TO_DISPLAY" }));
          return;
        }
        setTimestamp(Date.now());
        setShowPreview(true);
      },
      disabled: isPreviewLoading
    }, isPreviewLoading ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-circle-notch fa-spin Toolbar__View__Icon"
    }), intl.formatMessage({ id: "LOADING" })) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("i", {
      className: "fas fa-eye Toolbar__View__Icon"
    }), intl.formatMessage({ id: "PREVIEW" }))), /* @__PURE__ */ React.createElement("button", {
      className: "Toolbar__Save",
      disabled: createGroup.isLoading,
      onClick: () => {
        if (!group?.title) {
          Et.error(intl.formatMessage({ id: "Toast__BLOCK_MUST_HAVE_A_NAME" }));
          return;
        }
        createGroup.mutate({ blocks: blockList });
      }
    }, createGroup.isLoading ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-circle-notch fa-spin Toolbar__Save__Icon"
    }), intl.formatMessage({ id: "SAVING" })) : intl.formatMessage({ id: "SAVE" }))), /* @__PURE__ */ React.createElement(ErrorBoundary_default, null, /* @__PURE__ */ React.createElement(Preview, {
      isOpen: showPreview,
      setIsOpen: setShowPreview,
      setIsPreviewLoading,
      timestamp
    })));
  };
  var ToolBar_default = ToolBar;

  // src/utils/intl.ts
  var getLocale = () => document.documentElement.lang || navigator.languages && navigator.languages[0] || navigator.language || "en";
  var locale = getLocale();
  var messages = {
    "fr": {
      BlocksEditor__CREATE_A_NEW_THELIA_BLOCKS: "Cr\xE9ation d'un nouveau Thelia Blocks",
      BlocksEditor__EDIT_A_THELIA_BLOCKS: "Edition d'un Thelia Blocks",
      BlocksEditor__LOADING: "Chargement de Thelia Blocks...",
      BlocksList__EXISTING_THELIA_BLOCKS: "Thelia Blocks existants",
      BlocksList__NO_THELIA_BLOCKS: "Vous n'avez pas encore cr\xE9\xE9 de Thelia Blocks",
      BlocksList__ERROR_LOADING_THELIA_BLOCKS: "Erreur lors du chargement des Thelia Blocks",
      GroupTitle__BLOCK_NAME: "Nom de votre Thelia Blocks",
      GroupTitle__BLOCK_NAME_PLACEHOLDER: "Indiquez le nom de votre Thelia Blocks",
      GroupTitle__BLOCK_NAME_INFO: "Ce nom sera utilis\xE9 dans le titre de votre Thelia Blocks",
      GroupLocale__BLOCK_LOCALE: "Langue",
      GroupLocale__BLOCK_LOCALE_INFO: "S\xE9lectionnez la langue de votre Thelia Blocks",
      AddBlocks__COLUMNS_NUMBER: "Choisissez le nombre de colonnes",
      AddBlocks__DROP_CONTENT: "Glissez-d\xE9posez le type de contenu souhait\xE9 depuis le menu de droite",
      AddBlocks__ADD_CONTENT: "Ajouter du contenu",
      AddBlocks__SELECT_CONTENT: "Choisissez le contenu souhait\xE9",
      BlocksContent__EMPTY_BLOCK: "Vous n'avez pas encore de contenu dans votre Thelia Blocks. Pour commencer, s\xE9lectionnez un type de contenu depuis le menu lat\xE9ral droit.",
      PreviewModal__TITLE: "Aper\xE7u de votre Thelia Blocks",
      HTMLWarningModal__DESCRIPTION: "Ici un petit message pour informer sur l'utilisation de HTML directement dans le back-office. Ce message apparait en pop-in \xE0 chaque fois que l'utilisateur ajoute un bloc de HTML.",
      Toast__BLOCK_MUST_HAVE_A_NAME: "Vous devez indiquer un nom pour votre Thelia Blocks",
      Toast__NO_BLOCKS_TO_DISPLAY: "Vous ne pouvez pas pr\xE9visualiser un Thelia Blocks sans contenu",
      Toast__BLOCK_SAVED: "Votre Thelia Blocks a \xE9t\xE9 enregistr\xE9 avec succ\xE8s",
      Toast__BLOCK_NOT_SAVED: "Une erreur est survenue lors de l'enregistrement de votre Thelia Blocks",
      Toast__BLOCK_DELETED: "Ce Thelia Blocks a \xE9t\xE9 supprim\xE9 avec succ\xE8s",
      Toast__BLOCK_NOT_DELETED: "Une erreur est survenue lors de la suppression de ce Thelia Blocks",
      Toast__ITEM_BLOCK_GROUP_DELETED: "Ce contenu li\xE9 a \xE9t\xE9 supprim\xE9 avec succ\xE8s",
      Toast__ITEM_BLOCK_GROUP_NOT_DELETED: "Une erreur est survenue lors de la suppression de ce contenu li\xE9",
      Toast__ITEM_BLOCK_GROUP_LINKED: "Ce contenu a \xE9t\xE9 li\xE9 avec succ\xE8s",
      Toast__ITEM_BLOCK_GROUP_UNLINKED: "Ce contenu a \xE9t\xE9 d\xE9li\xE9 avec succ\xE8s",
      Toast__TOOLBAR_PREVIEW_ERROR: "Une erreur est survenue lors de la pr\xE9visualisation de votre Thelia Blocks",
      BlockButton__TEXT: "Texte du bouton",
      BlockButton__TEXT_PLACEHOLDER: "Indiquez le texte du bouton",
      BlockButton__URL: "URL du bouton",
      BlockButton__URL_PLACEHOLDER: "Indiquez le lien du bouton",
      BlockButton__TYPE: "Type de bouton",
      BlockProduct__ADD_PRODUCT: "Ajouter un produit",
      BlockProduct__PRODUCT_LOADING: "Chargement du produit...",
      BlockSeparator__STYLE: "Style du s\xE9parateur",
      BlockSeparator__SIZE: "Taille du s\xE9parateur",
      BlockHTML__HTML_PLACEHOLDER: "Indiquez votre code HTML",
      BlockText__TEXT_PLACEHOLDER: "Votre texte ici",
      BlockText__TEXT_LINK_MODAL_TITLE: "S\xE9lectionnez un \xE9l\xE9ment \xE0 ins\xE9rer",
      BlockText__TEXT_INSERT_LINK: "Ins\xE9rer un lien",
      BlockText__SEARCH_INFO: "Pr\xE9fixez votre recherche par un # pour faire une recherche par r\xE9f\xE9rence",
      BlockText__LINK_LABEL: "Titre de votre lien",
      BlockText__LINK_LABEL_PLACEHOLDER: "Indiquez le titre de votre lien",
      BlockText__LINK_URL: "URL de votre lien",
      BlockText__LINK_URL_PLACEHOLDER: "Indiquez le lien de votre lien",
      BlockTitle__TEXT_PLACEHOLDER: "Votre titre ici",
      BlockTitle__LEVEL: "Niveau du titre",
      BlockVideo__TITLE: "Ajouter une vid\xE9o depuis YouTube",
      BlockVideo__URL: "URL de la vid\xE9o",
      BlockVideo__URL_PLACEHOLDER: "Indiquez l'URL de la vid\xE9o",
      BlockAccordion__TITLE: "Titre de l'accord\xE9on",
      BlockAccordion__TITLE_PLACEHOLDER: "Indiquez le titre de l'accord\xE9on",
      BlockAccordion__ADD: "Ajouter un accord\xE9on",
      LinkBlockToItem__LINK_GROUP: "Lier un groupe",
      LinkBlockToItem__LINK_GROUP_PLACEHOLDER: "Indiquez le nom du groupe",
      LinkBlockToItem__UNLINK_GROUP: "D\xE9lier ce groupe",
      CREATE: "Cr\xE9er",
      CONTENTS: "Contenus",
      BACK: "Retour",
      UNSUPPORTED_BLOCK: "Ce block n'est pas support\xE9 par Thelia Blocks",
      UP: "Monter",
      DOWN: "Descendre",
      DELETE: "Supprimer",
      SELECT: "S\xE9lectionnez",
      FOLD: "Replier",
      UNFOLD: "D\xE9plier",
      SAVE: "Enregistrer",
      SAVING: "Enregistrement...",
      LOADING: "Chargement...",
      PREVIEW: "Pr\xE9visualiser",
      COLUMN: "Colonne",
      PRODUCT_SHEET: "Fiche produit",
      NO_RESULTS: "Aucun r\xE9sultat",
      FOR: "pour",
      SEARCH: "Rechercher",
      SEARCH_BY: "R\xE9f\xE9rence, nom, ...",
      SEARCH_BY_INFO: "Pr\xE9fixez votre recherche par un # pour faire une recherche par r\xE9f\xE9rence",
      DO_NOT_SHOW_AGAIN: "Ne plus afficher ce message",
      I_UNDERSTOOD: "J'ai compris",
      SPACE: "Espace",
      BORDER: "Bordure",
      INSERT_LINK: "Ins\xE9rer un lien",
      PRODUCTS: "Produits",
      FOLDERS: "Dossiers",
      CATEGORIES: "Cat\xE9gories",
      LEVEL: "Niveau",
      NEUTRAL: "Neutre",
      DND_INFO: "Faites glisser l'\xE9l\xE9ment pour le d\xE9placer",
      ACCORDION: "Accord\xE9on",
      ID: "ID",
      NAME: "Nom",
      TYPE: "Type",
      LINKED_CONTENTS: "contenus li\xE9s",
      NO_LINKED_CONTENTS: "Aucun contenu li\xE9",
      LINKED_CONTENTS_LIST: "Liste des contenus li\xE9s",
      ACCESS_LINKED_CONTENT: "Acc\xE9der \xE0 ce contenu",
      EDIT_LINKED_CONTENT: "Modifier ce contenu",
      DELETE_LINKED_CONTENT: "Supprimer ce contenu li\xE9",
      AVAILABLE_LOCALES: "Langues disponibles",
      ACTIONS: "Actions",
      TITLE: "Titre",
      NO_TITLE: "Aucun titre",
      DUPLICATE_BLOCK: "Dupliquer ce Thelia Blocks",
      COPY_SHORTCODE: "Copier le shortcode",
      COPY_ERROR: "Une erreur est survenue lors de la copie du shortcode",
      COPY_SUCCESS: "copi\xE9 avec succ\xE8s",
      DELETE_BLOCK: "Supprimer ce Thelia Blocks",
      EDIT_BLOCK: "Editer ce Thelia Blocks",
      OTHER: "autre",
      LINK: "Lier",
      UNLINK: "D\xE9lier",
      INSERT: "Ins\xE9rer",
      PRIMARY: "Primaire",
      SECONDARY: "Secondaire",
      TERTIARY: "Tertiaire",
      BOLD: "Gras",
      ITALIC: "Italique",
      UNDERLINE: "Soulign\xE9",
      ALIGN_LEFT: "Align\xE9 \xE0 gauche",
      ALIGN_CENTER: "Align\xE9 au centre",
      ALIGN_RIGHT: "Align\xE9 \xE0 droite",
      ORDERED_LIST: "Liste ordonn\xE9e",
      UNORDERED_LIST: "Liste non ordonn\xE9e",
      URL: "Lien",
      CONTENT_GROUP: "Contenu du groupe"
    },
    "en": {
      BlocksEditor__CREATE_A_NEW_THELIA_BLOCKS: "Creation of a new Thelia Blocks",
      BlocksEditor__EDIT_A_THELIA_BLOCKS: "Edition of a Thelia Blocks",
      BlocksEditor__LOADING: "Thelia Blocks loading...",
      BlocksList__EXISTING_THELIA_BLOCKS: "Existing Thelia Blocks",
      BlocksList__NO_THELIA_BLOCKS: "You haven't created any Thelia Blocks yet",
      BlocksList__ERROR_LOADING_THELIA_BLOCKS: "Error while loading Thelia Blocks",
      GroupTitle__BLOCK_NAME: "Name of your Thelia Blocks",
      GroupTitle__BLOCK_NAME_PLACEHOLDER: "Enter the name of your Thelia Blocks",
      GroupTitle__BLOCK_NAME_INFO: "This name will be used in the title of your Thelia Blocks",
      GroupLocale__BLOCK_LOCALE: "Language",
      GroupLocale__BLOCK_LOCALE_INFO: "Select the language of your Thelia Blocks",
      AddBlocks__COLUMNS_NUMBER: "Choose the number of columns",
      AddBlocks__DROP_CONTENT: "Drop the type of content you want from the right menu",
      AddBlocks__ADD_CONTENT: "Add content",
      AddBlocks__SELECT_CONTENT: "Select the content you want",
      BlocksContent__EMPTY_BLOCK: "You don't have any content in your Thelia Blocks. To start, select a type of content from the right menu.",
      PreviewModal__TITLE: "Preview of your Thelia Blocks",
      HTMLWarningModal__DESCRIPTION: "Here is a little message to inform you about the use of HTML directly in the back-office. This message appears in a pop-in every time you add a block of HTML.",
      Toast__BLOCK_MUST_HAVE_A_NAME: "You must enter a name for your Thelia Blocks",
      Toast__NO_BLOCKS_TO_DISPLAY: "You can't preview a Thelia Blocks without content",
      Toast__BLOCK_SAVED: "Your Thelia Blocks has been saved successfully",
      Toast__BLOCK_NOT_SAVED: "An error occurred while saving your Thelia Blocks",
      Toast__BLOCK_DELETED: "This Thelia Blocks has been deleted successfully",
      Toast__BLOCK_NOT_DELETED: "An error occurred while deleting this Thelia Blocks",
      Toast__ITEM_BLOCK_GROUP_DELETED: "This content linked has been deleted successfully",
      Toast__ITEM_BLOCK_GROUP_NOT_DELETED: "An error occurred while deleting this linked content",
      Toast__ITEM_BLOCK_GROUP_LINKED: "This content has been linked successfully",
      Toast__ITEM_BLOCK_GROUP_UNLINKED: "This content has been unlinked successfully",
      Toast__TOOLBAR_PREVIEW_ERROR: "An error occurred while previewing your Thelia Blocks",
      BlockButton__TEXT: "Text of the button",
      BlockButton__TEXT_PLACEHOLDER: "Enter the text of the button",
      BlockButton__URL: "URL of the button",
      BlockButton__URL_PLACEHOLDER: "Enter the URL of the button",
      BlockButton__TYPE: "Type of the button",
      BlockProduct__ADD_PRODUCT: "Add a product",
      BlockProduct__PRODUCT_LOADING: "Loading product...",
      BlockSeparator__STYLE: "Style of the separator",
      BlockSeparator__SIZE: "Size of the separator",
      BlockHTML__HTML_PLACEHOLDER: "Enter the HTML code",
      BlockText__TEXT_PLACEHOLDER: "Your text here",
      BlockText__TEXT_LINK_MODAL_TITLE: "Select an element to insert",
      BlockText__TEXT_INSERT_LINK: "Insert a link",
      BlockText__SEARCH_INFO: "Prefix your search by a # to search by reference",
      BlockText__LINK_LABEL: "Label of the link",
      BlockText__LINK_LABEL_PLACEHOLDER: "Enter the label of the link",
      BlockText__LINK_URL: "URL of the link",
      BlockText__LINK_URL_PLACEHOLDER: "Enter the URL of the link",
      BlockTitle__TEXT_PLACEHOLDER: "Your title here",
      BlockTitle__LEVEL: "Title level",
      BlockVideo__TITLE: "Add a video from YouTube",
      BlockVideo__URL: "URL of the video",
      BlockVideo__URL_PLACEHOLDER: "Enter the URL of the video",
      BlockAccordion__TITLE: "Title of the accordion",
      BlockAccordion__TITLE_PLACEHOLDER: "Enter the title of the accordion",
      BlockAccordion__ADD: "Add an accordion",
      LinkBlockToItem__LINK_GROUP: "Link a group",
      LinkBlockToItem__LINK_GROUP_PLACEHOLDER: "Enter the name of the group",
      LinkBlockToItem__UNLINK_GROUP: "Unlink this group",
      CREATE: "Create",
      CONTENTS: "Contents",
      BACK: "Back",
      UNSUPPORTED_BLOCK: "This block is not supported by Thelia Blocks",
      UP: "Up",
      DOWN: "Down",
      DELETE: "Delete",
      SELECT: "Select",
      FOLD: "Fold",
      UNFOLD: "Unfold",
      SAVE: "Save",
      SAVING: "Saving...",
      LOADING: "Loading...",
      PREVIEW: "Preview",
      COLUMN: "Column",
      PRODUCT_SHEET: "Product sheet",
      NO_RESULTS: "No results",
      FOR: "for",
      SEARCH: "Search",
      SEARCH_BY: "Reference, name, ...",
      SEARCH_BY_INFO: "Prefix your search by a # to search by reference",
      DO_NOT_SHOW_AGAIN: "Do not show this message again",
      I_UNDERSTOOD: "I understood",
      SPACE: "Space",
      BORDER: "Border",
      INSERT_LINK: "Insert a link",
      PRODUCTS: "Products",
      FOLDERS: "Folders",
      CATEGORIES: "Categories",
      LEVEL: "Level",
      NEUTRAL: "Neutral",
      DND_INFO: "Drag and drop the element to move",
      ACCORDION: "Accordion",
      ID: "ID",
      NAME: "Name",
      TYPE: "Type",
      LINKED_CONTENTS: "linked contents",
      NO_LINKED_CONTENTS: "No linked contents",
      LINKED_CONTENTS_LIST: "Linked contents list",
      ACCESS_LINKED_CONTENT: "Access to this content",
      EDIT_LINKED_CONTENT: "Edit this content",
      DELETE_LINKED_CONTENT: "Delete this linked content",
      AVAILABLE_LOCALES: "Available locales",
      ACTIONS: "Actions",
      TITLE: "Title",
      NO_TITLE: "No title",
      DUPLICATE_BLOCK: "Duplicate this Thelia Blocks",
      COPY_SHORTCODE: "Copy the shortcode",
      COPY_ERROR: "An error occurred while copying the shortcode",
      COPY_SUCCESS: "copied successfully",
      DELETE_BLOCK: "Delete this Thelia Blocks",
      EDIT_BLOCK: "Edit this Thelia Blocks",
      OTHER: "other",
      LINK: "Link",
      UNLINK: "Unlink",
      INSERT: "Insert",
      PRIMARY: "Primary",
      SECONDARY: "Secondary",
      TERTIARY: "Tertiary",
      BOLD: "Bold",
      ITALIC: "Italic",
      UNDERLINE: "Underline",
      ALIGN_LEFT: "Align left",
      ALIGN_CENTER: "Align center",
      ALIGN_RIGHT: "Align right",
      ORDERED_LIST: "Ordered list",
      UNORDERED_LIST: "Unordered list",
      URL: "Link",
      CONTENT_GROUP: "Content group"
    },
    "es": {
      BlocksEditor__CREATE_A_NEW_THELIA_BLOCKS: "Creaci\xF3n de un nuevo Thelia Blocks",
      BlocksEditor__EDIT_A_THELIA_BLOCKS: "Edici\xF3n de un Thelia Blocks",
      BlocksEditor__LOADING: "Cargando Thelia Blocks...",
      BlocksList__EXISTING_THELIA_BLOCKS: "Thelia Blocks existentes",
      BlocksList__NO_THELIA_BLOCKS: "No has creado ning\xFAn Thelia Blocks todav\xEDa",
      BlocksList__ERROR_LOADING_THELIA_BLOCKS: "Error al cargar Thelia Blocks",
      GroupTitle__BLOCK_NAME: "Nombre de tu Thelia Blocks",
      GroupTitle__BLOCK_NAME_PLACEHOLDER: "Introduce el nombre de tu Thelia Blocks",
      GroupTitle__BLOCK_NAME_INFO: "Este nombre se utilizar\xE1 en el t\xEDtulo de tu Thelia Blocks",
      GroupLocale__BLOCK_LOCALE: "Idioma",
      GroupLocale__BLOCK_LOCALE_INFO: "Selecciona el idioma de tu Thelia Blocks",
      AddBlocks__COLUMNS_NUMBER: "Elige el n\xFAmero de columnas",
      AddBlocks__DROP_CONTENT: "Solta el tipo de contenido que quieres desde el men\xFA derecho",
      AddBlocks__ADD_CONTENT: "A\xF1ade contenido",
      AddBlocks__SELECT_CONTENT: "Elige el contenido que quieres",
      BlocksContent__EMPTY_BLOCK: "No tienes ning\xFAn contenido en tu Thelia Blocks. Para comenzar, selecciona un tipo de contenido desde el men\xFA derecho.",
      PreviewModal__TITLE: "Vista previa de tu Thelia Blocks",
      HTMLWarningModal__DESCRIPTION: "Aqu\xED hay un peque\xF1o mensaje para informarte sobre el uso de HTML directamente en el back-office. Este mensaje aparece en un pop-in cada vez que a\xF1ades un bloque de HTML.",
      Toast__BLOCK_MUST_HAVE_A_NAME: "Debes introducir un nombre para tu Thelia Blocks",
      Toast__NO_BLOCKS_TO_DISPLAY: "No puedes previsualizar un Thelia Blocks sin contenido",
      Toast__BLOCK_SAVED: "Tu Thelia Blocks ha sido guardado con \xE9xito",
      Toast__BLOCK_NOT_SAVED: "Ha ocurrido un error al guardar tu Thelia Blocks",
      Toast__BLOCK_DELETED: "Este Thelia Blocks ha sido eliminado con \xE9xito",
      Toast__BLOCK_NOT_DELETED: "Ha ocurrido un error al eliminar este Thelia Blocks",
      Toast__ITEM_BLOCK_GROUP_DELETED: "Este contenido vinculado ha sido eliminado con \xE9xito",
      Toast__ITEM_BLOCK_GROUP_NOT_DELETED: "Ha ocurrido un error al eliminar este contenido vinculado",
      Toast__ITEM_BLOCK_GROUP_LINKED: "Este contenido ha sido vinculado con \xE9xito",
      Toast__ITEM_BLOCK_GROUP_UNLINKED: "Este contenido ha sido desvinculado con \xE9xito",
      Toast__TOOLBAR_PREVIEW_ERROR: "Ha ocurrido un error al cargar la vista previa",
      BlockButton__TEXT: "Texto del bot\xF3n",
      BlockButton__TEXT_PLACEHOLDER: "Introduce el texto del bot\xF3n",
      BlockButton__URL: "URL del bot\xF3n",
      BlockButton__URL_PLACEHOLDER: "Introduce la URL del bot\xF3n",
      BlockButton__TYPE: "Tipo de bot\xF3n",
      BlockProduct__ADD_PRODUCT: "A\xF1ade un producto",
      BlockProduct__PRODUCT_LOADING: "Cargando producto...",
      BlockSeparator__STYLE: "Estilo del separador",
      BlockSeparator__SIZE: "Tama\xF1o del separador",
      BlockHTML__HTML_PLACEHOLDER: "Introduce el c\xF3digo HTML",
      BlockText__TEXT_PLACEHOLDER: "Tu texto aqu\xED",
      BlockText__TEXT_LINK_MODAL_TITLE: "Elige un elemento para insertar",
      BlockText__TEXT_INSERT_LINK: "Insertar un enlace",
      BlockText__SEARCH_INFO: "Prefijate tu b\xFAsqueda con un # para buscar por referencia",
      BlockText__LINK_LABEL: "Label del enlace",
      BlockText__LINK_LABEL_PLACEHOLDER: "Introduce el label del enlace",
      BlockText__LINK_URL: "URL del enlace",
      BlockText__LINK_URL_PLACEHOLDER: "Introduce la URL del enlace",
      BlockTitle__TEXT_PLACEHOLDER: "Tu t\xEDtulo aqu\xED",
      BlockTitle__LEVEL: "Nivel de t\xEDtulo",
      BlockVideo__TITLE: "A\xF1ade un v\xEDdeo de YouTube",
      BlockVideo__URL: "URL del v\xEDdeo",
      BlockVideo__URL_PLACEHOLDER: "Introduce la URL del v\xEDdeo",
      BlockAccordion__TITLE: "T\xEDtulo del acorde\xF3n",
      BlockAccordion__TITLE_PLACEHOLDER: "Introduce el t\xEDtulo del acorde\xF3n",
      BlockAccordion__ADD: "A\xF1ade un acorde\xF3n",
      LinkBlockToItem__LINK_GROUP: "Vincula un grupo",
      LinkBlockToItem__LINK_GROUP_PLACEHOLDER: "Elige un grupo",
      LinkBlockToItem__UNLINK_GROUP: "Desvincula este grupo",
      CREATE: "Crear",
      CONTENTS: "Contenidos",
      BACK: "Atr\xE1s",
      UNSUPPORTED_BLOCK: "Este bloque no es soportado por Thelia Blocks",
      UP: "Arriba",
      DOWN: "Abajo",
      DELETE: "Eliminar",
      SELECT: "Seleccionar",
      FOLD: "Plegar",
      UNFOLD: "Desplegar",
      SAVE: "Guardar",
      SAVING: "Guardando...",
      LOADING: "Cargando...",
      PREVIEW: "Vista previa",
      COLUMN: "Columna",
      PRODUCT_SHEET: "Hoja de producto",
      NO_RESULTS: "No hay resultados",
      FOR: "para",
      SEARCH: "Buscar",
      SEARCH_BY: "Referencia, nombre, ...",
      SEARCH_BY_INFO: "Prefijate tu b\xFAsqueda con un # para buscar por referencia",
      DO_NOT_SHOW_AGAIN: "No volver a mostrar este mensaje",
      I_UNDERSTOOD: "Entiendo",
      SPACE: "Espacio",
      BORDER: "Borde",
      INSERT_LINK: "Insertar un enlace",
      PRODUCTS: "Productos",
      FOLDERS: "Carpetas",
      CATEGORIES: "Categor\xEDas",
      LEVEL: "Nivel",
      NEUTRAL: "Neutral",
      DND_INFO: "Arrastra y suelta el elemento para mover",
      ACCORDION: "Accordion",
      ID: "ID",
      NAME: "Nombre",
      TYPE: "Tipo",
      LINKED_CONTENTS: "contenidos vinculados",
      NO_LINKED_CONTENTS: "No hay contenidos vinculados",
      NO_LINKED_CONTENTS_INFO: "No hay contenidos vinculados a este elemento",
      LINKED_CONTENTS_LIST: "Lista de contenidos vinculados",
      ACCESS_LINKED_CONTENT: "Acceder al contenido",
      EDIT_LINKED_CONTENT: "Editar contenido vinculado",
      DELETE_LINKED_CONTENT: "Eliminar contenido vinculado",
      AVAILABLE_LOCALES: "Idiomas disponibles",
      ACTIONS: "Acciones",
      TITLE: "T\xEDtulo",
      NO_TITLE: "Sin t\xEDtulo",
      DUPLICATE_BLOCK: "Duplicar este Thelia Blocks",
      COPY_SHORTCODE: "Copiar c\xF3digo",
      COPY_ERROR: "Error al copiar el c\xF3digo",
      COPY_SUCCESS: "copiado con \xE9xito",
      DELETE_BLOCK: "Eliminar este Thelia Blocks",
      EDIT_BLOCK: "Editar este Thelia Blocks",
      OTHER: "otro",
      LINK: "Enlace",
      UNLINK: "Desvincular",
      INSERT: "Insertar",
      PRIMARY: "Primario",
      SECONDARY: "Secundario",
      TERTIARY: "Terciario",
      BOLD: "Negrita",
      ITALIC: "Cursiva",
      UNDERLINE: "Subrayado",
      ALIGN_LEFT: "Alinear a la izquierda",
      ALIGN_CENTER: "Alinear al centro",
      ALIGN_RIGHT: "Alinear a la derecha",
      ORDERED_LIST: "Lista ordenada",
      UNORDERED_LIST: "Lista desordenada",
      URL: "Enlace",
      CONTENT_GROUP: "Contenido del grupo"
    },
    "it": {
      BlocksEditor__CREATE_A_NEW_THELIA_BLOCKS: "Creazione di un nuovo Thelia Blocks",
      BlocksEditor__EDIT_A_THELIA_BLOCKS: "Modifica di un Thelia Blocks",
      BlocksEditor__LOADING: "Thelia Blocks caricamento...",
      BlocksList__EXISTING_THELIA_BLOCKS: "Thelia Blocks esistenti",
      BlocksList__NO_THELIA_BLOCKS: "Non hai ancora creato nessun Thelia Blocks",
      BlocksList__ERROR_LOADING_THELIA_BLOCKS: "Errore nel caricamento dei Thelia Blocks",
      GroupTitle__BLOCK_NAME: "Nome del tuo Thelia Blocks",
      GroupTitle__BLOCK_NAME_PLACEHOLDER: "Inserisci il nome del tuo Thelia Blocks",
      GroupTitle__BLOCK_NAME_INFO: "Questo nome verr\xE0 utilizzato nel titolo del tuo Thelia Blocks",
      GroupLocale__BLOCK_LOCALE: "Lingua",
      GroupLocale__BLOCK_LOCALE_INFO: "Seleziona la lingua del tuo Thelia Blocks",
      AddBlocks__COLUMNS_NUMBER: "Scegli il numero di colonne",
      AddBlocks__DROP_CONTENT: "Rilascia il tipo di contenuto che vuoi dal menu a destra",
      AddBlocks__ADD_CONTENT: "Aggiungi contenuto",
      AddBlocks__SELECT_CONTENT: "Scegli il contenuto che vuoi",
      BlocksContent__EMPTY_BLOCK: "Non hai nessun contenuto nel tuo Thelia Blocks. Per iniziare, seleziona un tipo di contenuto dal menu a destra.",
      PreviewModal__TITLE: "Anteprima del tuo Thelia Blocks",
      HTMLWarningModal__DESCRIPTION: "Qui c'\xE8 un piccolo messaggio per informarti sull'uso di HTML direttamente nel back-office. Questo messaggio compare in un pop-in ogni volta che aggiungi un blocco di HTML.",
      Toast__BLOCK_MUST_HAVE_A_NAME: "Devi inserire un nome per il tuo Thelia Blocks",
      Toast__NO_BLOCKS_TO_DISPLAY: "Non puoi visualizzare un Thelia Blocks senza contenuto",
      Toast__BLOCK_SAVED: "Il tuo Thelia Blocks \xE8 stato salvato con successo",
      Toast__BLOCK_NOT_SAVED: "Si \xE8 verificato un errore durante il salvataggio del tuo Thelia Blocks",
      Toast__BLOCK_DELETED: "Questo Thelia Blocks \xE8 stato eliminato con successo",
      Toast__BLOCK_NOT_DELETED: "Si \xE8 verificato un errore durante l'eliminazione di questo Thelia Blocks",
      Toast__ITEM_BLOCK_GROUP_DELETED: "Questo contenuto vincolato \xE8 stato eliminato con successo",
      Toast__ITEM_BLOCK_GROUP_NOT_DELETED: "Si \xE8 verificato un errore durante l'eliminazione di questo contenuto vincolato",
      Toast__ITEM_BLOCK_GROUP_LINKED: "Questo contenuto \xE8 stato vincolato con successo",
      Toast__ITEM_BLOCK_GROUP_UNLINKED: "Questo contenuto \xE8 stato scollegato con successo",
      Toast__TOOLBAR_PREVIEW_ERROR: "Si \xE8 verificato un errore durante la visualizzazione dell'anteprima",
      BlockButton__TEXT: "Testo del bottone",
      BlockButton__TEXT_PLACEHOLDER: "Inserisci il testo del bottone",
      BlockButton__URL: "URL del bottone",
      BlockButton__URL_PLACEHOLDER: "Inserisci l'URL del bottone",
      BlockButton__TYPE: "Tipo di bottone",
      BlockProduct__ADD_PRODUCT: "Aggiungi un prodotto",
      BlockProduct__PRODUCT_LOADING: "Caricamento del prodotto...",
      BlockSeparator__STYLE: "Stile del separatore",
      BlockSeparator__SIZE: "Dimensione del separatore",
      BlockHTML__HTML_PLACEHOLDER: "Inserisci il codice HTML",
      BlockText__TEXT_PLACEHOLDER: "Il tuo testo qui",
      BlockText__TEXT_LINK_MODAL_TITLE: "Scegli un elemento da inserire",
      BlockText__TEXT_INSERT_LINK: "Inserisci un link",
      BlockText__SEARCH_INFO: "Prefissa la tua ricerca con un # per cercare per riferimento",
      BlockText__LINK_LABEL: "Label del link",
      BlockText__LINK_LABEL_PLACEHOLDER: "Inserisci il label del link",
      BlockText__LINK_URL: "URL del link",
      BlockText__LINK_URL_PLACEHOLDER: "Inserisci l'URL del link",
      BlockTitle__TEXT_PLACEHOLDER: "Il tuo titolo qui",
      BlockTitle__LEVEL: "Livello del titolo",
      BlockVideo__TITLE: "Aggiungi un video di YouTube",
      BlockVideo__URL: "URL del video",
      BlockVideo__URL_PLACEHOLDER: "Inserisci l'URL del video",
      BlockAccordion__TITLE: "titolo dell'accordion",
      BlockAccordion__TITLE_PLACEHOLDER: "Inserisci il titolo dell'accordion",
      BlockAccordion__ADD: "Aggiungi un accordion",
      LinkBlockToItem__LINK_GROUP: "Vincola un gruppo",
      LinkBlockToItem__LINK_GROUP_PLACEHOLDER: "Scegli un gruppo",
      LinkBlockToItem__UNLINK_GROUP: "Scollega questo gruppo",
      CREATE: "Crea",
      CONTENTS: "Contenuti",
      BACK: "Indietro",
      UNSUPPORTED_BLOCK: "Questo blocco non \xE8 supportato da Thelia Blocks",
      UP: "Su",
      DOWN: "Gi\xF9",
      DELETE: "Elimina",
      SELECT: "Seleziona",
      FOLD: "Apri",
      UNFOLD: "Chiudi",
      SAVE: "Salva",
      SAVING: "Salvataggio...",
      LOADING: "Caricamento...",
      PREVIEW: "Anteprima",
      COLUMN: "Colonna",
      PRODUCT_SHEET: "Foglio di prodotto",
      NO_RESULTS: "Nessun risultato",
      FOR: "per",
      SEARCH: "Cerca",
      SEARCH_BY: "Riferimento, nome, ...",
      SEARCH_BY_INFO: "Prefissa la tua ricerca con un # per cercare per riferimento",
      DO_NOT_SHOW_AGAIN: "Non mostrare pi\xF9 questo messaggio",
      I_UNDERSTOOD: "Ho capito",
      SPACE: "Spazio",
      BORDER: "Bordo",
      INSERT_LINK: "Inserisci un link",
      PRODUCTS: "Prodotti",
      FOLDERS: "Cartelle",
      CATEGORIES: "Categorie",
      LEVEL: "Livello",
      NEUTRAL: "Neutro",
      DND_INFO: "Trascina e rilascia l'elemento per spostarlo",
      ACCORDION: "Accordion",
      ID: "ID",
      NAME: "Nome",
      TYPE: "Tipo",
      LINKED_CONTENTS: "contenuti vincolati",
      NO_LINKED_CONTENTS: "Non ci sono contenuti vincolati",
      LINKED_CONTENTS_LIST: "Lista dei contenuti vincolati",
      ACCESS_LINKED_CONTENT: "Accedi al contenuto",
      EDIT_LINKED_CONTENT: "Modifica il contenuto",
      DELETE_LINKED_CONTENT: "Elimina il contenuto vincolato",
      AVAILABLE_LOCALES: "Lingue disponibili",
      ACTIONS: "Azioni",
      TITLE: "Titolo",
      NO_TITLE: "Nessun titolo",
      DUPLICATE_BLOCK: "Duplica questo Thelia Blocks",
      COPY_SHORTCODE: "Copia il shortcode",
      COPY_ERROR: "Si \xE8 verificato un errore durante la copia del shortcode",
      COPY_SUCCESS: "copiato con successo",
      DELETE_BLOCK: "Elimina questo Thelia Blocks",
      EDIT_BLOCK: "Modifica questo Thelia Blocks",
      OTHER: "altro",
      LINK: "Link",
      UNLINK: "Scollega",
      INSERT: "Inserisci",
      PRIMARY: "Primario",
      SECONDARY: "Secondario",
      TERTIARY: "Terziario",
      BOLD: "Grassetto",
      ITALIC: "Corsivo",
      UNDERLINE: "Sottolineato",
      ALIGN_LEFT: "Allinea a sinistra",
      ALIGN_CENTER: "Allinea al centro",
      ALIGN_RIGHT: "Allinea a destra",
      ORDERED_LIST: "Elenco ordinato",
      UNORDERED_LIST: "Elenco non ordinato",
      URL: "Link",
      CONTENT_GROUP: "Contenuto del gruppo"
    }
  };

  // src/components/LinkBlockToItem/LinkBlockToItem.tsx
  var import_react56 = __toESM(require_react(), 1);

  // src/utils/slugify.ts
  function slugify_default(...args) {
    const value = args.join(" ");
    return value.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase().trim().replace(/[^a-z0-9 ]/g, "").replace(/\s+/g, "-");
  }

  // src/components/LinkBlockToItem/LinkBlockToItem.tsx
  function List({
    search,
    onClickGroup
  }) {
    const intl = useIntl();
    const {
      data
    } = useGroups();
    const results = data.filter(
      ({ slug }) => slug?.search(new RegExp(slugify_default(search), "i")) !== -1
    );
    return /* @__PURE__ */ React.createElement("ul", {
      className: "SearchResult"
    }, results.length > 0 ? results.map((group) => /* @__PURE__ */ React.createElement("li", {
      key: group.id,
      className: "SearchResult__Item",
      onClick: () => onClickGroup(group)
    }, /* @__PURE__ */ React.createElement("span", null, "#", group.id, " - ", group.title || intl.formatMessage({ id: "NO_TITLE" })))) : search && search.length > 1 ? /* @__PURE__ */ React.createElement("li", {
      className: "SearchResult__NoResults"
    }, /* @__PURE__ */ React.createElement("span", null, intl.formatMessage({ id: "NO_RESULTS" }), " ", search && search.length > 0 ? /* @__PURE__ */ React.createElement("span", null, intl.formatMessage({ id: "FOR" }), ' "', /* @__PURE__ */ React.createElement("span", {
      className: "emphasize"
    }, search), '"') : "")) : null);
  }
  function BlockSelector({ itemId, itemType }) {
    const [search, setSearch] = (0, import_react56.useState)("");
    const [selectedGroup, setSelectedGroup] = (0, import_react56.useState)();
    const [showSuggestions, setShowSuggestions] = (0, import_react56.useState)(false);
    const intl = useIntl();
    const mutation = useLinkContentToGroup();
    const selectRef = (0, import_react56.useRef)(null);
    const onClickGroup = (group) => {
      setSearch(group.title);
      setSelectedGroup(group);
      setShowSuggestions(false);
    };
    return /* @__PURE__ */ React.createElement("div", {
      className: "GroupLink__Wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "GroupLink__Input__Wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "LinkBlockToItem-select",
      style: { position: "relative", width: "100%" },
      ref: selectRef
    }, /* @__PURE__ */ React.createElement(Input_default, {
      id: "link-block-to-item",
      label: intl.formatMessage({ id: "LinkBlockToItem__LINK_GROUP" }),
      placeholder: intl.formatMessage({
        id: "LinkBlockToItem__LINK_GROUP_PLACEHOLDER"
      }),
      type: "text",
      value: search,
      autoComplete: "off",
      onFocus: () => setShowSuggestions(true),
      onChange: (event) => {
        setSearch(event.target.value);
        setSelectedGroup(void 0);
      }
    }), /* @__PURE__ */ React.createElement(import_react56.Suspense, {
      fallback: /* @__PURE__ */ React.createElement("div", {
        className: "GroupLink__GroupList__Loader"
      }, /* @__PURE__ */ React.createElement("i", {
        className: "Loader fa fa-circle-notch fa-spin"
      }))
    }, showSuggestions && /* @__PURE__ */ React.createElement(List, {
      search,
      onClickGroup
    }))), selectedGroup ? /* @__PURE__ */ React.createElement("button", {
      className: "GroupLink__LinkButton",
      onClick: () => selectedGroup && mutation.mutate({ id: selectedGroup.id, itemId, itemType })
    }, mutation.isLoading ? /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-circle-notch fa-spin"
    }) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(SvgLink, null), intl.formatMessage({ id: "LINK" }))) : null));
  }
  var LinkBlockToItem = ({
    groupId,
    itemId,
    itemType
  }) => {
    return /* @__PURE__ */ React.createElement(BlockSelector, {
      groupId,
      itemId,
      itemType
    });
  };
  var LinkBlockToItem_default = LinkBlockToItem;

  // src/utils/toast.ts
  var toastOptions = {
    success: {
      style: {
        background: "#EAFBF5",
        border: "1px solid #005A3A"
      }
    },
    error: {
      style: {
        background: "#FFEDED",
        border: "1px solid #D21919"
      }
    }
  };

  // src/BlocksEditor.tsx
  var BlocksEditorLoader = () => {
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlocksEditor__Loader"
    }, /* @__PURE__ */ React.createElement("span", null, intl.formatMessage({ id: "BlocksEditor__LOADING" })), /* @__PURE__ */ React.createElement("i", {
      className: "Loader fa fa-circle-notch fa-spin"
    }));
  };
  var BlocksEditorHeader = ({
    itemType,
    groupId,
    itemId,
    itemConfiguration,
    backlink,
    isEditing
  }) => {
    const { group } = (0, import_react57.useContext)(BlocksGroupContext);
    const unlinkContent = useUnlinkContentFromGroup();
    const intl = useIntl();
    const isGroupLinkedToCurrentContent = group?.itemBlockGroups?.some(
      (linkedContent) => linkedContent.itemId === (itemId && +itemId)
    ) || false;
    const linkedContentId = group?.itemBlockGroups?.find(
      (linkedContent) => linkedContent.itemId === (itemId && +itemId)
    )?.id;
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlocksEditor__Header"
    }, backlink ? /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("a", {
      href: "/admin/TheliaBlocks"
    }, "Back to BlocksList")) : null, /* @__PURE__ */ React.createElement("div", {
      className: "BlocksEditor__Header__Title"
    }, isEditing || itemConfiguration && isGroupLinkedToCurrentContent ? intl.formatMessage({ id: "BlocksEditor__EDIT_A_THELIA_BLOCKS" }) : intl.formatMessage({
      id: "BlocksEditor__CREATE_A_NEW_THELIA_BLOCKS"
    })), /* @__PURE__ */ React.createElement("div", {
      className: "BlocksEditor__Header__Inputs__Wrapper"
    }, /* @__PURE__ */ React.createElement(GroupTitle, {
      isGroupLinkedToCurrentContent,
      onLink: () => unlinkContent.mutate({ id: linkedContentId }),
      isLinking: unlinkContent.isLoading
    }), itemConfiguration && !isGroupLinkedToCurrentContent ? /* @__PURE__ */ React.createElement(LinkBlockToItem_default, {
      itemId,
      groupId,
      itemType
    }) : null, /* @__PURE__ */ React.createElement(GroupLocale, null)));
  };
  function BlocksEditor({
    apiUrl,
    containerId,
    groupId,
    itemId,
    itemType,
    locales,
    itemConfiguration = false,
    isEditing = false,
    backlink = true,
    noRedirect = false
  }) {
    if (!apiUrl)
      return null;
    (0, import_react57.useLayoutEffect)(() => {
      if (containerId) {
        import_react_modal5.default.setAppElement("#" + containerId);
      }
    }, [containerId]);
    const { width } = useWindowSize_default();
    return /* @__PURE__ */ React.createElement(LocaleProvider, {
      locales
    }, /* @__PURE__ */ React.createElement(provider_default, {
      messages: messages[locale],
      locale
    }, /* @__PURE__ */ React.createElement(BlocksProvider, {
      api: apiUrl
    }, /* @__PURE__ */ React.createElement(import_react57.Suspense, {
      fallback: /* @__PURE__ */ React.createElement(BlocksEditorLoader, null)
    }, /* @__PURE__ */ React.createElement(BlocksGroupProvider, {
      groupId,
      itemType,
      itemId,
      noRedirect
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlocksEditor"
    }, /* @__PURE__ */ React.createElement(Oe, {
      toastOptions
    }), /* @__PURE__ */ React.createElement("div", {
      className: "BlocksEditor__Wrapper"
    }, /* @__PURE__ */ React.createElement(BlockContextProvider, {
      root: true
    }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
      className: "BlocksEditor__ContentWrapper"
    }, /* @__PURE__ */ React.createElement(BlocksEditorHeader, {
      itemType,
      itemId,
      groupId,
      backlink,
      itemConfiguration,
      isEditing
    }), /* @__PURE__ */ React.createElement("div", {
      className: "BlocksEditor__Content"
    }, /* @__PURE__ */ React.createElement(BlocksContent, null), width < 1080 ? /* @__PURE__ */ React.createElement("div", {
      className: "BlocksEditor__AddBlocksWrapper"
    }, /* @__PURE__ */ React.createElement(AddBlocks_default, null)) : null, /* @__PURE__ */ React.createElement(ToolBar_default, null))), width > 1080 ? /* @__PURE__ */ React.createElement("div", {
      className: "Sidebar__Wrapper"
    }, /* @__PURE__ */ React.createElement(ErrorBoundary_default, null, /* @__PURE__ */ React.createElement(Sidebar_default, null))) : null)))))))));
  }

  // src/BlocksList.tsx
  var import_react64 = __toESM(require_react(), 1);

  // src/components/BlocksTable/BlocksTable.tsx
  var import_react62 = __toESM(require_react(), 1);

  // ../../node_modules/react-use/esm/useCopyToClipboard.js
  var import_copy_to_clipboard = __toESM(require_copy_to_clipboard());
  var import_react60 = __toESM(require_react());

  // ../../node_modules/react-use/esm/useMountedState.js
  var import_react58 = __toESM(require_react());
  function useMountedState() {
    var mountedRef = (0, import_react58.useRef)(false);
    var get2 = (0, import_react58.useCallback)(function() {
      return mountedRef.current;
    }, []);
    (0, import_react58.useEffect)(function() {
      mountedRef.current = true;
      return function() {
        mountedRef.current = false;
      };
    }, []);
    return get2;
  }

  // ../../node_modules/react-use/esm/useSetState.js
  var import_react59 = __toESM(require_react());
  var useSetState = function(initialState) {
    if (initialState === void 0) {
      initialState = {};
    }
    var _a2 = (0, import_react59.useState)(initialState), state = _a2[0], set = _a2[1];
    var setState = (0, import_react59.useCallback)(function(patch3) {
      set(function(prevState) {
        return Object.assign({}, prevState, patch3 instanceof Function ? patch3(prevState) : patch3);
      });
    }, []);
    return [state, setState];
  };
  var useSetState_default = useSetState;

  // ../../node_modules/react-use/esm/useCopyToClipboard.js
  var useCopyToClipboard = function() {
    var isMounted = useMountedState();
    var _a2 = useSetState_default({
      value: void 0,
      error: void 0,
      noUserInteraction: true
    }), state = _a2[0], setState = _a2[1];
    var copyToClipboard = (0, import_react60.useCallback)(function(value) {
      if (!isMounted()) {
        return;
      }
      var noUserInteraction;
      var normalizedValue;
      try {
        if (typeof value !== "string" && typeof value !== "number") {
          var error2 = new Error("Cannot copy typeof " + typeof value + " to clipboard, must be a string");
          if (true)
            console.error(error2);
          setState({
            value,
            error: error2,
            noUserInteraction: true
          });
          return;
        } else if (value === "") {
          var error2 = new Error("Cannot copy empty string to clipboard.");
          if (true)
            console.error(error2);
          setState({
            value,
            error: error2,
            noUserInteraction: true
          });
          return;
        }
        normalizedValue = value.toString();
        noUserInteraction = (0, import_copy_to_clipboard.default)(normalizedValue);
        setState({
          value: normalizedValue,
          error: void 0,
          noUserInteraction
        });
      } catch (error3) {
        setState({
          value: normalizedValue,
          error: error3,
          noUserInteraction
        });
      }
    }, []);
    return [state, copyToClipboard];
  };
  var useCopyToClipboard_default = useCopyToClipboard;

  // assets/svg/copy.svg
  var React36 = __toESM(require_react(), 1);
  var SvgCopy = (props) => /* @__PURE__ */ React36.createElement("svg", {
    width: 19,
    height: 19,
    viewBox: "0 0 19 19",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React36.createElement("path", {
    d: "M14.25 3.5625V0H10.0938C9.10998 0 8.3125 0.79748 8.3125 1.78125V12.4688C8.3125 13.4525 9.10998 14.25 10.0938 14.25H17.2188C18.2025 14.25 19 13.4525 19 12.4688V4.75H15.4709C14.7844 4.75 14.25 4.21562 14.25 3.5625ZM15.4375 0V3.5625H19L15.4375 0ZM7.125 13.0625V4.75H1.78125C0.79748 4.75 0 5.54748 0 6.53125V17.2188C0 18.2025 0.79748 19 1.78125 19H8.90625C9.89002 19 10.6875 18.2025 10.6875 17.2188V15.4375H9.5C8.19004 15.4375 7.125 14.3725 7.125 13.0625Z",
    fill: "currentcolor"
  }));

  // assets/svg/code.svg
  var React37 = __toESM(require_react(), 1);
  var SvgCode = (props) => /* @__PURE__ */ React37.createElement("svg", {
    width: 19,
    height: 15,
    viewBox: "0 0 19 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React37.createElement("path", {
    d: "M16.3111 0H2.68895C1.976 0.00082218 1.29251 0.264623 0.788419 0.733533C0.284325 1.20244 0.000785609 1.83817 0 2.50127L0 12.4987C0.000785609 13.1618 0.284325 13.7976 0.788419 14.2665C1.29251 14.7354 1.976 14.9992 2.68895 15H16.3111C17.024 14.9992 17.7075 14.7354 18.2116 14.2665C18.7157 13.7976 18.9992 13.1618 19 12.4987V2.50127C18.9992 1.83817 18.7157 1.20244 18.2116 0.733533C17.7075 0.264623 17.024 0.00082218 16.3111 0ZM6.89529 5.01496L4.06645 7.646L6.58209 9.98504C6.68349 10.0827 6.73959 10.2135 6.73832 10.3492C6.73706 10.485 6.67851 10.6148 6.57531 10.7108C6.4721 10.8068 6.33249 10.8612 6.18654 10.8624C6.04059 10.8636 5.89998 10.8114 5.795 10.7171L2.88563 8.01116C2.78127 7.91407 2.72265 7.78241 2.72265 7.64513C2.72265 7.50785 2.78127 7.37619 2.88563 7.27911L6.10783 4.28221C6.21231 4.18509 6.35398 4.13055 6.50169 4.13058C6.64941 4.13061 6.79105 4.18522 6.89548 4.28239C6.9999 4.37955 7.05855 4.51132 7.05851 4.64871C7.05848 4.78609 6.99977 4.91783 6.89529 5.01496ZM11.4868 3.79659L8.54332 11.5482C8.49411 11.6777 8.39161 11.7837 8.25838 11.8429C8.12514 11.9021 7.97208 11.9096 7.83286 11.8638C7.69365 11.8181 7.57968 11.7227 7.51604 11.5988C7.45239 11.4749 7.44429 11.3325 7.4935 11.2031L10.437 3.45145C10.4862 3.32197 10.5887 3.21597 10.722 3.15678C10.8552 3.09759 11.0083 3.09005 11.1475 3.13582C11.2867 3.18158 11.4007 3.27691 11.4643 3.40083C11.5279 3.52475 11.536 3.66711 11.4868 3.79659ZM16.1144 7.72055L12.8922 10.7174C12.7877 10.8146 12.6461 10.8691 12.4984 10.8691C12.3508 10.8691 12.2091 10.8146 12.1047 10.7174C12.0003 10.6203 11.9416 10.4886 11.9416 10.3512C11.9416 10.2139 12.0003 10.0822 12.1047 9.98504L14.9336 7.354L12.4179 5.01496C12.3165 4.91731 12.2604 4.78654 12.2617 4.65079C12.2629 4.51505 12.3215 4.3852 12.4247 4.28921C12.5279 4.19322 12.6675 4.13877 12.8135 4.13759C12.9594 4.13642 13.1 4.1886 13.205 4.2829L16.1144 6.98884C16.2187 7.08593 16.2774 7.21759 16.2774 7.35487C16.2774 7.49215 16.2187 7.62381 16.1144 7.72089V7.72055Z",
    fill: "currentcolor"
  }));

  // assets/svg/edit.svg
  var React38 = __toESM(require_react(), 1);
  var SvgEdit = (props) => /* @__PURE__ */ React38.createElement("svg", {
    width: 18,
    height: 18,
    viewBox: "0 0 18 18",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React38.createElement("path", {
    d: "M17.4165 1.24838C18.1945 2.02522 18.1945 3.28479 17.4165 4.06163L16.3509 5.13081L12.8697 1.65048L13.9389 0.582723C14.7169 -0.194241 15.9743 -0.194241 16.7523 0.582723L17.4165 1.24838ZM6.12403 8.39872L12.0669 2.45396L15.5481 5.93358L9.60166 11.8762C9.38497 12.0964 9.11856 12.2598 8.82372 12.3593L5.66935 13.4107C5.33189 13.5102 5.0264 13.432 4.7955 13.1727C4.56816 12.9738 4.49001 12.6364 4.58947 12.3309L5.64093 9.17663C5.74039 8.88181 5.90379 8.6154 6.12403 8.39872ZM6.82027 2.05471C7.44901 2.05471 7.95698 2.59569 7.95698 3.19137C7.95698 3.85206 7.44901 4.32804 6.82027 4.32804H3.41013C2.78246 4.32804 2.27342 4.86796 2.27342 5.4647V14.59C2.27342 15.2187 2.78246 15.7267 3.41013 15.7267H12.5038C13.1326 15.7267 13.6405 15.2187 13.6405 14.59V11.148C13.6405 10.5513 14.1485 10.0114 14.7772 10.0114C15.406 10.0114 15.914 10.5513 15.914 11.148V14.59C15.914 16.4726 14.3865 18 12.5038 18H3.41013C1.52675 18 0 16.4726 0 14.59V5.4647C0 3.5821 1.52675 2.05471 3.41013 2.05471H6.82027Z",
    fill: "currentcolor"
  }));

  // assets/svg/view.svg
  var React39 = __toESM(require_react(), 1);
  var SvgView = (props) => /* @__PURE__ */ React39.createElement("svg", {
    width: 24,
    height: 16,
    viewBox: "0 0 24 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React39.createElement("path", {
    d: "M23.875 7.375C23.9583 7.56944 24 7.77778 24 8C24 8.22222 23.9583 8.43056 23.875 8.625C22.7083 10.8472 21.0694 12.6389 18.9583 14C16.8472 15.3333 14.5278 16 12 16C9.47222 16 7.15278 15.3333 5.04167 14C2.93056 12.6389 1.29167 10.8472 0.125 8.625C0.0416667 8.43056 0 8.22222 0 8C0 7.77778 0.0416667 7.56944 0.125 7.375C1.29167 5.15278 2.93056 3.375 5.04167 2.04167C7.15278 0.680556 9.47222 0 12 0C14.5278 0 16.8472 0.680556 18.9583 2.04167C21.0694 3.375 22.7083 5.15278 23.875 7.375ZM12 14C13.6667 14 15.0833 13.4167 16.25 12.25C17.4167 11.0833 18 9.66667 18 8C18 6.33333 17.4167 4.91667 16.25 3.75C15.0833 2.58333 13.6667 2 12 2C10.3333 2 8.91667 2.58333 7.75 3.75C6.58333 4.91667 6 6.33333 6 8C6 9.66667 6.58333 11.0833 7.75 12.25C8.91667 13.4167 10.3333 14 12 14ZM12 4C13.1111 4 14.0556 4.38889 14.8333 5.16667C15.6111 5.94444 16 6.88889 16 8C16 9.08333 15.6111 10.0278 14.8333 10.8333C14.0556 11.6111 13.1111 12 12 12C10.9167 12 9.97222 11.6111 9.16667 10.8333C8.38889 10.0278 8 9.08333 8 8C8 7.63889 8.05556 7.29167 8.16667 6.95833C8.5 7.20833 8.88889 7.33333 9.33333 7.33333C9.88889 7.33333 10.3611 7.13889 10.75 6.75C11.1389 6.36111 11.3333 5.88889 11.3333 5.33333C11.3333 4.88889 11.2083 4.5 10.9583 4.16667C11.2917 4.05556 11.6389 4 12 4Z",
    fill: "currentcolor"
  }));

  // src/utils/content-url.ts
  var getContentUrl = (type, id) => {
    const typeUrl = {
      folder: `/admin/folders/update/${id}`,
      content: `/admin/content/update/${id}`,
      category: `/admin/categories/update?category_id=${id}`,
      product: `/admin/products/update?product_id=${id}`
    };
    return typeUrl[type] ?? null;
  };

  // src/components/ItemBlockGroupTable/ItemBlockGroupTable.tsx
  var LinkedContentTable = ({
    linkedContents,
    setIsItemBlockModalOpen
  }) => {
    const mutationDelete = useUnlinkContentFromGroup();
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("table", {
      className: "BlocksTable"
    }, /* @__PURE__ */ React.createElement("thead", {
      className: "BlocksTable__Header"
    }, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("th", {
      scope: "col"
    }, intl.formatMessage({ id: "ID" })), /* @__PURE__ */ React.createElement("th", {
      scope: "col"
    }, intl.formatMessage({ id: "TITLE" })), /* @__PURE__ */ React.createElement("th", {
      scope: "col"
    }, intl.formatMessage({ id: "TYPE" })), /* @__PURE__ */ React.createElement("th", {
      scope: "col"
    }, intl.formatMessage({ id: "ACTIONS" })))), /* @__PURE__ */ React.createElement("tbody", null, linkedContents?.map((content) => {
      return /* @__PURE__ */ React.createElement("tr", {
        className: "BlocksTable__Row",
        key: content.itemId
      }, /* @__PURE__ */ React.createElement("td", {
        className: "BlocksTable__Row__Id"
      }, "#", content.itemId), /* @__PURE__ */ React.createElement("td", {
        className: "BlocksTable__Row__Title"
      }, /* @__PURE__ */ React.createElement("a", {
        href: content.itemUrl
      }, content.itemTitle || intl.formatMessage({ id: "NO_TITLE" }))), /* @__PURE__ */ React.createElement("td", {
        className: "BlocksTable__Row__Type"
      }, content.itemType), /* @__PURE__ */ React.createElement("td", {
        className: "BlocksTable__Row__Actions"
      }, /* @__PURE__ */ React.createElement("div", {
        className: "BlocksTable__Row__Actions__Wrapper"
      }, /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
        delay: [500, 0],
        content: intl.formatMessage({ id: "ACCESS_LINKED_CONTENT" })
      }, /* @__PURE__ */ React.createElement("a", {
        className: "BlocksTable__Row__Action",
        href: content.itemUrl
      }, /* @__PURE__ */ React.createElement(SvgView, null))), /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
        delay: [500, 0],
        content: intl.formatMessage({ id: "EDIT_LINKED_CONTENT" })
      }, /* @__PURE__ */ React.createElement("a", {
        className: "BlocksTable__Row__Action",
        href: `${getContentUrl(
          content.itemType,
          content.itemId
        )}`
      }, /* @__PURE__ */ React.createElement(SvgEdit, null))), /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
        delay: [500, 0],
        content: intl.formatMessage({ id: "DELETE_LINKED_CONTENT" })
      }, /* @__PURE__ */ React.createElement("button", {
        className: "BlocksTable__Row__Action__Delete",
        onClick: () => {
          mutationDelete.mutate(
            { id: content.id },
            {
              onSuccess: () => {
                setIsItemBlockModalOpen(false);
              }
            }
          );
        }
      }, /* @__PURE__ */ React.createElement(SvgDelete, null))))));
    })));
  };
  var ItemBlockGroupTable_default = LinkedContentTable;

  // src/components/BlocksTable/BlocksTable.tsx
  var BlocksTableRow = ({ group }) => {
    const intl = useIntl();
    const [copied, copyToClipboard] = useCopyToClipboard_default();
    const mutationDelete = useDeleteGroup();
    const mutationDuplicate = useDuplicateGroup();
    const [linkedContents, setLinkedContents] = (0, import_react62.useState)([]);
    const [isItemBlockModalOpen, setIsItemBlockModalOpen] = (0, import_react62.useState)(false);
    return /* @__PURE__ */ React.createElement("tr", {
      className: "BlocksTable__Row",
      key: group.id
    }, /* @__PURE__ */ React.createElement("td", {
      className: "BlocksTable__Row__Id"
    }, "#", group.id), /* @__PURE__ */ React.createElement("td", {
      className: "BlocksTable__Row__Title"
    }, /* @__PURE__ */ React.createElement("a", {
      href: `/admin/TheliaBlocks/${group.id}`
    }, group.title || intl.formatMessage({ id: "NO_TITLE" }))), /* @__PURE__ */ React.createElement("td", {
      className: "BlocksTable__Row__LinkedContent"
    }, /* @__PURE__ */ React.createElement("div", {
      className: `BlocksTable__Row__LinkedContent__Wrapper ${group?.itemBlockGroups?.length && group.itemBlockGroups.length > 0 ? "BlocksTable__Row__LinkedContent__Wrapper--asLink" : ""}`
    }, group.itemBlockGroups?.length && group.itemBlockGroups?.length > 0 ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("button", {
      onClick: () => {
        setIsItemBlockModalOpen(true);
        setLinkedContents(group.itemBlockGroups);
      }
    }, group.itemBlockGroups?.length, " ", intl.formatMessage({ id: "LINKED_CONTENTS" })), /* @__PURE__ */ React.createElement("i", {
      className: "fas fa-link"
    })) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("i", {
      className: "fas fa-link"
    }), /* @__PURE__ */ React.createElement("span", null, intl.formatMessage({ id: "NO_LINKED_CONTENTS" }))), /* @__PURE__ */ React.createElement(Modal_default, {
      isOpen: isItemBlockModalOpen,
      setIsOpen: setIsItemBlockModalOpen,
      title: intl.formatMessage({ id: "LINKED_CONTENTS_LIST" })
    }, /* @__PURE__ */ React.createElement(ItemBlockGroupTable_default, {
      setIsItemBlockModalOpen,
      linkedContents
    })))), /* @__PURE__ */ React.createElement("td", {
      className: "BlocksTable__Row__Locales"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlocksTable__Row__Locales__Wrapper"
    }, group.locales.length > 3 ? /* @__PURE__ */ React.createElement(React.Fragment, null, group.locales.slice(0, 2).map((locale2) => /* @__PURE__ */ React.createElement("span", {
      className: "Locale",
      key: locale2
    }, locale2)), /* @__PURE__ */ React.createElement("span", null, "+ ", group.locales.slice(2).length, " ", intl.formatMessage({ id: "OTHER" }), group.locales.slice(2).length > 1 ? "s" : "")) : group.locales.map((locale2) => /* @__PURE__ */ React.createElement("span", {
      className: "Locale",
      key: locale2
    }, locale2)))), /* @__PURE__ */ React.createElement("td", {
      className: "BlocksTable__Row__Actions"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlocksTable__Row__Actions__Wrapper"
    }, /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [500, 0],
      content: intl.formatMessage({ id: "EDIT_BLOCK" })
    }, /* @__PURE__ */ React.createElement("a", {
      className: "BlocksTable__Row__Action",
      href: `/admin/TheliaBlocks/${group.id}`
    }, /* @__PURE__ */ React.createElement(SvgEdit, null))), /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [500, 0],
      content: intl.formatMessage({ id: "DUPLICATE_BLOCK" })
    }, /* @__PURE__ */ React.createElement("button", {
      className: "BlocksTable__Row__Action",
      onClick: () => {
        mutationDuplicate.mutate(group.id);
      }
    }, mutationDuplicate.isLoading ? /* @__PURE__ */ React.createElement("i", {
      className: "block fa fa-circle-notch fa-spin"
    }) : /* @__PURE__ */ React.createElement(SvgCopy, null))), /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [500, 0],
      content: intl.formatMessage({ id: "COPY_SHORTCODE" })
    }, /* @__PURE__ */ React.createElement("button", {
      className: "BlocksTable__Row__Action",
      onClick: () => {
        const shortcode = `[block_group slug=${group.slug}]`;
        copyToClipboard(shortcode);
        copied.error ? Et.error(intl.formatMessage({ id: "COPY_ERROR" })) : Et.success(
          `${shortcode} ${intl.formatMessage({ id: "COPY_SUCCESS" })}`
        );
      }
    }, /* @__PURE__ */ React.createElement(SvgCode, null))), /* @__PURE__ */ React.createElement(tippy_react_esm_default, {
      delay: [500, 0],
      content: intl.formatMessage({ id: "DELETE_BLOCK" })
    }, /* @__PURE__ */ React.createElement("button", {
      className: "BlocksTable__Row__Action__Delete",
      onClick: () => {
        mutationDelete.mutate(group.id);
      }
    }, mutationDelete.isLoading ? /* @__PURE__ */ React.createElement("i", {
      className: "block fa fa-circle-notch fa-spin"
    }) : /* @__PURE__ */ React.createElement(SvgDelete, null))))));
  };
  var BlocksTable = () => {
    const [offset4, setOffset] = (0, import_react62.useState)(0);
    const [limit, setLimit] = (0, import_react62.useState)(10);
    const { data: groups = [], isError: isError2, isPreviousData } = useGroups({ limit, offset: offset4 });
    const intl = useIntl();
    if (groups.length <= 0) {
      return /* @__PURE__ */ React.createElement("div", null, intl.formatMessage({ id: "BlocksList__NO_THELIA_BLOCKS" }));
    }
    if (isError2) {
      return /* @__PURE__ */ React.createElement("div", null, intl.formatMessage({ id: "BlocksList__ERROR_LOADING_THELIA_BLOCKS" }));
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("table", {
      className: "BlocksTable"
    }, /* @__PURE__ */ React.createElement("thead", {
      className: "BlocksTable__Header"
    }, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("th", {
      scope: "col"
    }, intl.formatMessage({ id: "ID" })), /* @__PURE__ */ React.createElement("th", {
      scope: "col"
    }, intl.formatMessage({ id: "NAME" })), /* @__PURE__ */ React.createElement("th", {
      scope: "col"
    }, intl.formatMessage({ id: "LINKED_CONTENTS" })), /* @__PURE__ */ React.createElement("th", {
      scope: "col"
    }, intl.formatMessage({ id: "AVAILABLE_LOCALES" })), /* @__PURE__ */ React.createElement("th", {
      scope: "col"
    }, intl.formatMessage({ id: "ACTIONS" })))), /* @__PURE__ */ React.createElement("tbody", null, groups.map((group) => /* @__PURE__ */ React.createElement(BlocksTableRow, {
      group,
      key: group.id
    })))), /* @__PURE__ */ React.createElement("div", {
      className: "Pagination"
    }, /* @__PURE__ */ React.createElement("button", {
      className: "Pagination__Button Pagination__Button--previous",
      onClick: () => setOffset((old) => Math.max(old - limit, 0)),
      disabled: offset4 === 0
    }, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-chevron-left"
    })), /* @__PURE__ */ React.createElement("div", {
      className: "Pagination__Button Pagination__Button--page"
    }, offset4 / limit + 1), /* @__PURE__ */ React.createElement("button", {
      className: "Pagination__Button Pagination__Button--next",
      onClick: () => {
        if (!isPreviousData && (groups?.length || 0) >= limit) {
          setOffset((old) => old + limit);
        }
      },
      disabled: isPreviousData || (groups?.length || 0) < limit
    }, /* @__PURE__ */ React.createElement("i", {
      className: "fa fa-chevron-right"
    }))));
  };
  var BlocksTable_default = BlocksTable;

  // src/BlocksList.tsx
  var import_react_modal6 = __toESM(require_lib(), 1);
  var BlocksListHeader = () => {
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlocksList__Header"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlocksList__Header__Title"
    }, "Thelia Blocks"), /* @__PURE__ */ React.createElement("div", {
      className: "BlocksList__Header__Infos"
    }, /* @__PURE__ */ React.createElement("span", {
      className: "BlocksList__Header__Description"
    }, "Ici, un texte expliquant rapidement le fonctionnement des Thelia Blocks. Cela permettera aux utilisateurs de comprendre plus facilement l'outil"), /* @__PURE__ */ React.createElement("a", {
      href: "/admin/TheliaBlocks/new",
      className: "BlocksList__Header__Create"
    }, intl.formatMessage({ id: "CREATE" }))));
  };
  var BlocksListContent = () => {
    const intl = useIntl();
    return /* @__PURE__ */ React.createElement("div", {
      className: "BlocksList"
    }, /* @__PURE__ */ React.createElement(Oe, {
      toastOptions
    }), /* @__PURE__ */ React.createElement(BlocksListHeader, null), /* @__PURE__ */ React.createElement("div", {
      className: "BlocksList__Wrapper"
    }, /* @__PURE__ */ React.createElement("div", {
      className: "BlocksList__Title"
    }, intl.formatMessage({ id: "BlocksList__EXISTING_THELIA_BLOCKS" })), /* @__PURE__ */ React.createElement("div", {
      className: "BlocksList__List__Wrapper"
    }, /* @__PURE__ */ React.createElement(import_react64.Suspense, {
      fallback: /* @__PURE__ */ React.createElement("i", {
        className: "Loader fa fa-circle-notch fa-spin"
      })
    }, /* @__PURE__ */ React.createElement(BlocksTable_default, null)))));
  };
  var BlocksList = ({
    apiUrl,
    containerId,
    locales
  }) => {
    (0, import_react64.useLayoutEffect)(() => {
      if (containerId) {
        import_react_modal6.default.setAppElement("#" + containerId);
      }
    }, [containerId]);
    if (!apiUrl)
      return null;
    return /* @__PURE__ */ React.createElement(provider_default, {
      locale,
      messages: messages[locale]
    }, /* @__PURE__ */ React.createElement(LocaleProvider, {
      locales
    }, /* @__PURE__ */ React.createElement(BlocksProvider, {
      api: apiUrl
    }, /* @__PURE__ */ React.createElement(ErrorBoundary_default, null, /* @__PURE__ */ React.createElement(BlocksListContent, null)))));
  };
  var BlocksList_default = BlocksList;
  return __toCommonJS(src_exports);
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
/*!
 * Quill Editor v1.3.7
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=index.global.js.map